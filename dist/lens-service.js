var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/services/DatabaseService.ts
var DatabaseService_exports = {};
__export(DatabaseService_exports, {
  DatabaseService: () => DatabaseService
});
var API_BASE_URL, DatabaseService;
var init_DatabaseService = __esm({
  "src/services/DatabaseService.ts"() {
    "use strict";
    API_BASE_URL = "/api/widget";
    DatabaseService = class {
      static initialized = false;
      static async initializePool() {
        if (this.initialized) {
          return;
        }
        console.log("\u2705 Database service initialized (API mode)");
        this.initialized = true;
      }
      static async query(sql, params = []) {
        try {
          console.log("\u{1F50D} Query (via API):", sql, params);
          return [];
        } catch (error) {
          console.error("\u274C Database query error:", error);
          throw error;
        }
      }
      static async initializeTables() {
        console.log("\u2705 Tables already initialized in PostgreSQL");
      }
      // Helper method for API calls
      static async apiCall(endpoint, options = {}) {
        try {
          const token = localStorage.getItem("auth_token");
          const response = await fetch(API_BASE_URL + endpoint, {
            ...options,
            headers: {
              "Content-Type": "application/json",
              ...token ? { "Authorization": `Bearer ${token}` } : {},
              ...options.headers
            }
          });
          if (!response.ok) {
            throw new Error("API call failed: " + response.statusText);
          }
          return await response.json();
        } catch (error) {
          console.error("\u274C API call failed for " + endpoint + ":", error);
          throw error;
        }
      }
      // ==================== Settings ====================
      static async getSettings() {
        try {
          return await this.apiCall("/settings");
        } catch (error) {
          console.error("Failed to get settings:", error);
          return [];
        }
      }
      static async getSetting(key) {
        try {
          const response = await this.apiCall("/settings/" + key);
          return response.value;
        } catch (error) {
          console.error("Failed to get setting " + key + ":", error);
          return null;
        }
      }
      static async setSetting(key, value) {
        try {
          await this.apiCall("/settings/" + key, {
            method: "PUT",
            body: JSON.stringify({ value })
          });
        } catch (error) {
          console.error("Failed to set setting " + key + ":", error);
          throw error;
        }
      }
      // ==================== Admin Users ====================
      static async getAdminUsers() {
        try {
          return await this.apiCall("/admin-users");
        } catch (error) {
          console.error("Failed to get admin users:", error);
          return [];
        }
      }
      static async validateAdmin(username, password) {
        try {
          return await this.apiCall("/admin-users/login", {
            method: "POST",
            body: JSON.stringify({ username, password })
          });
        } catch (error) {
          console.error("Admin validation failed:", error);
          return null;
        }
      }
      static async createAdminUser(username, password, email) {
        await this.apiCall("/admin-users", {
          method: "POST",
          body: JSON.stringify({ username, password, email })
        });
      }
      static async deleteAdminUser(id) {
        await this.apiCall("/admin-users/" + id, {
          method: "DELETE"
        });
      }
      // ==================== Manual Indexes ====================
      static async getManualIndexes() {
        try {
          return await this.apiCall("/manual-indexes");
        } catch (error) {
          console.error("Failed to get manual indexes:", error);
          return [];
        }
      }
      static async createManualIndex(name, description, content, url, keywords) {
        await this.apiCall("/manual-indexes", {
          method: "POST",
          body: JSON.stringify({ name, description, content, url, keywords })
        });
      }
      static async updateManualIndex(id, name, description, content, url, keywords) {
        await this.apiCall("/manual-indexes/" + id, {
          method: "PUT",
          body: JSON.stringify({ name, description, content, url, keywords })
        });
      }
      static async deleteManualIndex(id) {
        await this.apiCall("/manual-indexes/" + id, {
          method: "DELETE"
        });
      }
      static async generateAllEmbeddings() {
        try {
          return await this.apiCall("/manual-indexes/generate-embeddings", {
            method: "POST"
          });
        } catch (error) {
          console.error("Failed to generate embeddings:", error);
          throw error;
        }
      }
      static async importUrlsBatch(urls) {
        try {
          return await this.apiCall("/manual-indexes/import-urls-batch", {
            method: "POST",
            body: JSON.stringify({ urls })
          });
        } catch (error) {
          console.error("Failed to import URLs:", error);
          throw error;
        }
      }
      // ==================== Orders & Subscriptions ====================
      static async getUserOrders(userId) {
        try {
          const response = await this.apiCall(`/orders/me`);
          return response.orders || [];
        } catch (error) {
          console.error("Failed to get user orders:", error);
          return [];
        }
      }
      static async getUserSubscriptions(userId) {
        try {
          const response = await this.apiCall(`/subscriptions/me`);
          return response.subscriptions || [];
        } catch (error) {
          console.error("Failed to get user subscriptions:", error);
          return [];
        }
      }
      // ==================== Conversations ====================
      static async saveConversation(conversation_id, user_id, messages) {
        try {
          await this.apiCall("/conversations/save", {
            method: "POST",
            body: JSON.stringify({ conversationId: conversation_id, messages })
          });
          console.log("\u2705 Conversation saved to database:", conversation_id);
        } catch (error) {
          console.error("Failed to save conversation:", error);
          throw error;
        }
      }
      static async getConversation(conversation_id) {
        try {
          return await this.apiCall("/conversations/" + conversation_id);
        } catch (error) {
          console.error("Failed to get conversation:", error);
          return null;
        }
      }
      static async getAllConversations() {
        try {
          return await this.apiCall("/conversations");
        } catch (error) {
          console.error("Failed to get conversations:", error);
          return [];
        }
      }
      static async getConversations() {
        return await this.getAllConversations();
      }
      static async deleteConversation(conversation_id) {
        await this.apiCall("/conversations/" + conversation_id, {
          method: "DELETE"
        });
      }
      static async getConversationsByUserId(user_id) {
        try {
          return await this.apiCall("/conversations/user/" + user_id);
        } catch (error) {
          console.error("Failed to get conversations by user_id:", error);
          return [];
        }
      }
    };
  }
});

// node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap2() {
    return fn.apply(thisArg, arguments);
  };
}
var init_bind = __esm({
  "node_modules/axios/lib/helpers/bind.js"() {
    "use strict";
  }
});

// node_modules/axios/lib/utils.js
function isBuffer(val2) {
  return val2 !== null && !isUndefined(val2) && val2.constructor !== null && !isUndefined(val2.constructor) && isFunction(val2.constructor.isBuffer) && val2.constructor.isBuffer(val2);
}
function isArrayBufferView(val2) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val2);
  } else {
    result = val2 && val2.buffer && isArrayBuffer(val2.buffer);
  }
  return result;
}
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    if (isBuffer(obj)) {
      return;
    }
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  if (isBuffer(obj)) {
    return null;
  }
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
function merge() {
  const { caseless, skipUndefined } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val2, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val2)) {
      result[targetKey] = merge(result[targetKey], val2);
    } else if (isPlainObject(val2)) {
      result[targetKey] = merge({}, val2);
    } else if (isArray(val2)) {
      result[targetKey] = val2.slice();
    } else if (!skipUndefined || !isUndefined(val2)) {
      result[targetKey] = val2;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[toStringTag] === "FormData" && thing[iterator]);
}
var toString, getPrototypeOf, iterator, toStringTag, kindOf, kindOfTest, typeOfTest, isArray, isUndefined, isArrayBuffer, isString, isFunction, isNumber, isObject, isBoolean, isPlainObject, isEmptyObject, isDate, isFile, isBlob, isFileList, isStream, isFormData, isURLSearchParams, isReadableStream, isRequest, isResponse, isHeaders, trim, _global, isContextDefined, extend, stripBOM, inherits, toFlatObject, endsWith, toArray, isTypedArray, forEachEntry, matchAll, isHTMLForm, toCamelCase, hasOwnProperty, isRegExp, reduceDescriptors, freezeMethods, toObjectSet, noop, toFiniteNumber, toJSONObject, isAsyncFn, isThenable, _setImmediate, asap, isIterable, utils_default;
var init_utils = __esm({
  "node_modules/axios/lib/utils.js"() {
    "use strict";
    init_bind();
    ({ toString } = Object.prototype);
    ({ getPrototypeOf } = Object);
    ({ iterator, toStringTag } = Symbol);
    kindOf = /* @__PURE__ */ ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    typeOfTest = (type) => (thing) => typeof thing === type;
    ({ isArray } = Array);
    isUndefined = typeOfTest("undefined");
    isArrayBuffer = kindOfTest("ArrayBuffer");
    isString = typeOfTest("string");
    isFunction = typeOfTest("function");
    isNumber = typeOfTest("number");
    isObject = (thing) => thing !== null && typeof thing === "object";
    isBoolean = (thing) => thing === true || thing === false;
    isPlainObject = (val2) => {
      if (kindOf(val2) !== "object") {
        return false;
      }
      const prototype3 = getPrototypeOf(val2);
      return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(toStringTag in val2) && !(iterator in val2);
    };
    isEmptyObject = (val2) => {
      if (!isObject(val2) || isBuffer(val2)) {
        return false;
      }
      try {
        return Object.keys(val2).length === 0 && Object.getPrototypeOf(val2) === Object.prototype;
      } catch (e) {
        return false;
      }
    };
    isDate = kindOfTest("Date");
    isFile = kindOfTest("File");
    isBlob = kindOfTest("Blob");
    isFileList = kindOfTest("FileList");
    isStream = (val2) => isObject(val2) && isFunction(val2.pipe);
    isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    isURLSearchParams = kindOfTest("URLSearchParams");
    [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
    trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    _global = (() => {
      if (typeof globalThis !== "undefined") return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    isContextDefined = (context) => !isUndefined(context) && context !== _global;
    extend = (a, b2, thisArg, { allOwnKeys } = {}) => {
      forEach(b2, (val2, key) => {
        if (thisArg && isFunction(val2)) {
          a[key] = bind(val2, thisArg);
        } else {
          a[key] = val2;
        }
      }, { allOwnKeys });
      return a;
    };
    stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    toFlatObject = (sourceObj, destObj, filter5, propFilter) => {
      let props;
      let i;
      let prop2;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null) return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop2 = props[i];
          if ((!propFilter || propFilter(prop2, sourceObj, destObj)) && !merged[prop2]) {
            destObj[prop2] = sourceObj[prop2];
            merged[prop2] = true;
          }
        }
        sourceObj = filter5 !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter5 || filter5(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    toArray = (thing) => {
      if (!thing) return null;
      if (isArray(thing)) return thing;
      let i = thing.length;
      if (!isNumber(i)) return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    isTypedArray = /* @__PURE__ */ ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    forEachEntry = (obj, fn) => {
      const generator = obj && obj[iterator];
      const _iterator = generator.call(obj);
      let result;
      while ((result = _iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    isHTMLForm = kindOfTest("HTMLFormElement");
    toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m2, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop2) => hasOwnProperty2.call(obj, prop2))(Object.prototype);
    isRegExp = kindOfTest("RegExp");
    reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value)) return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
      return obj;
    };
    noop = () => {
    };
    toFiniteNumber = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };
    toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (isBuffer(source)) {
            return source;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    isAsyncFn = kindOfTest("AsyncFunction");
    isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token, callbacks) => {
        _global.addEventListener("message", ({ source, data: data2 }) => {
          if (source === _global && data2 === token) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb) => {
          callbacks.push(cb);
          _global.postMessage(token, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === "function",
      isFunction(_global.postMessage)
    );
    asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
    isIterable = (thing) => thing != null && isFunction(thing[iterator]);
    utils_default = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isEmptyObject,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap,
      isIterable
    };
  }
});

// node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}
var prototype, descriptors, AxiosError_default;
var init_AxiosError = __esm({
  "node_modules/axios/lib/core/AxiosError.js"() {
    "use strict";
    init_utils();
    utils_default.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils_default.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });
    prototype = AxiosError.prototype;
    descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype);
      utils_default.toFlatObject(error, axiosError, function filter5(obj) {
        return obj !== Error.prototype;
      }, (prop2) => {
        return prop2 !== "isAxiosError";
      });
      const msg = error && error.message ? error.message : "Error";
      const errCode = code == null && error ? error.code : code;
      AxiosError.call(axiosError, msg, errCode, config, request, response);
      if (error && axiosError.cause == null) {
        Object.defineProperty(axiosError, "cause", { value: error, configurable: true });
      }
      axiosError.name = error && error.name || "Error";
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    AxiosError_default = AxiosError;
  }
});

// node_modules/axios/lib/helpers/null.js
var null_default;
var init_null = __esm({
  "node_modules/axios/lib/helpers/null.js"() {
    null_default = null;
  }
});

// node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each2(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null) return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (utils_default.isBoolean(value)) {
      return value.toString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each2(el, index2) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index2, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build2(value, path) {
    if (utils_default.isUndefined(value)) return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each2(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build2(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build2(obj);
  return formData;
}
var predicates, toFormData_default;
var init_toFormData = __esm({
  "node_modules/axios/lib/helpers/toFormData.js"() {
    "use strict";
    init_utils();
    init_AxiosError();
    init_null();
    predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop2) {
      return /^is[A-Z]/.test(prop2);
    });
    toFormData_default = toFormData;
  }
});

// node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2, AxiosURLSearchParams_default;
var init_AxiosURLSearchParams = __esm({
  "node_modules/axios/lib/helpers/AxiosURLSearchParams.js"() {
    "use strict";
    init_toFormData();
    prototype2 = AxiosURLSearchParams.prototype;
    prototype2.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype2.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode);
      } : encode;
      return this._pairs.map(function each2(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    AxiosURLSearchParams_default = AxiosURLSearchParams;
  }
});

// node_modules/axios/lib/helpers/buildURL.js
function encode2(val2) {
  return encodeURIComponent(val2).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  if (utils_default.isFunction(options)) {
    options = {
      serialize: options
    };
  }
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}
var init_buildURL = __esm({
  "node_modules/axios/lib/helpers/buildURL.js"() {
    "use strict";
    init_utils();
    init_AxiosURLSearchParams();
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager, InterceptorManager_default;
var init_InterceptorManager = __esm({
  "node_modules/axios/lib/core/InterceptorManager.js"() {
    "use strict";
    init_utils();
    InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils_default.forEach(this.handlers, function forEachHandler(h2) {
          if (h2 !== null) {
            fn(h2);
          }
        });
      }
    };
    InterceptorManager_default = InterceptorManager;
  }
});

// node_modules/axios/lib/defaults/transitional.js
var transitional_default;
var init_transitional = __esm({
  "node_modules/axios/lib/defaults/transitional.js"() {
    "use strict";
    transitional_default = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default;
var init_URLSearchParams = __esm({
  "node_modules/axios/lib/platform/browser/classes/URLSearchParams.js"() {
    "use strict";
    init_AxiosURLSearchParams();
    URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;
  }
});

// node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default;
var init_FormData = __esm({
  "node_modules/axios/lib/platform/browser/classes/FormData.js"() {
    "use strict";
    FormData_default = typeof FormData !== "undefined" ? FormData : null;
  }
});

// node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default;
var init_Blob = __esm({
  "node_modules/axios/lib/platform/browser/classes/Blob.js"() {
    "use strict";
    Blob_default = typeof Blob !== "undefined" ? Blob : null;
  }
});

// node_modules/axios/lib/platform/browser/index.js
var browser_default;
var init_browser = __esm({
  "node_modules/axios/lib/platform/browser/index.js"() {
    init_URLSearchParams();
    init_FormData();
    init_Blob();
    browser_default = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams_default,
        FormData: FormData_default,
        Blob: Blob_default
      },
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
  }
});

// node_modules/axios/lib/platform/common/utils.js
var utils_exports = {};
__export(utils_exports, {
  hasBrowserEnv: () => hasBrowserEnv,
  hasStandardBrowserEnv: () => hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
  navigator: () => _navigator,
  origin: () => origin
});
var hasBrowserEnv, _navigator, hasStandardBrowserEnv, hasStandardBrowserWebWorkerEnv, origin;
var init_utils2 = __esm({
  "node_modules/axios/lib/platform/common/utils.js"() {
    hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    _navigator = typeof navigator === "object" && navigator || void 0;
    hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
    hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    origin = hasBrowserEnv && window.location.href || "http://localhost";
  }
});

// node_modules/axios/lib/platform/index.js
var platform_default;
var init_platform = __esm({
  "node_modules/axios/lib/platform/index.js"() {
    init_browser();
    init_utils2();
    platform_default = {
      ...utils_exports,
      ...browser_default
    };
  }
});

// node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data2, options) {
  return toFormData_default(data2, new platform_default.classes.URLSearchParams(), {
    visitor: function(value, key, path, helpers) {
      if (platform_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    },
    ...options
  });
}
var init_toURLEncodedForm = __esm({
  "node_modules/axios/lib/helpers/toURLEncodedForm.js"() {
    "use strict";
    init_utils();
    init_toFormData();
    init_platform();
  }
});

// node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index2) {
    let name = path[index2++];
    if (name === "__proto__") return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index2 >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index2);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default;
var init_formDataToJSON = __esm({
  "node_modules/axios/lib/helpers/formDataToJSON.js"() {
    "use strict";
    init_utils();
    formDataToJSON_default = formDataToJSON;
  }
});

// node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults, defaults_default;
var init_defaults = __esm({
  "node_modules/axios/lib/defaults/index.js"() {
    "use strict";
    init_utils();
    init_AxiosError();
    init_transitional();
    init_toFormData();
    init_toURLEncodedForm();
    init_platform();
    init_formDataToJSON();
    defaults = {
      transitional: transitional_default,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest(data2, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils_default.isObject(data2);
        if (isObjectPayload && utils_default.isHTMLForm(data2)) {
          data2 = new FormData(data2);
        }
        const isFormData2 = utils_default.isFormData(data2);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data2)) : data2;
        }
        if (utils_default.isArrayBuffer(data2) || utils_default.isBuffer(data2) || utils_default.isStream(data2) || utils_default.isFile(data2) || utils_default.isBlob(data2) || utils_default.isReadableStream(data2)) {
          return data2;
        }
        if (utils_default.isArrayBufferView(data2)) {
          return data2.buffer;
        }
        if (utils_default.isURLSearchParams(data2)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data2.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data2, this.formSerializer).toString();
          }
          if ((isFileList2 = utils_default.isFileList(data2)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData_default(
              isFileList2 ? { "files[]": data2 } : data2,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data2);
        }
        return data2;
      }],
      transformResponse: [function transformResponse(data2) {
        const transitional2 = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils_default.isResponse(data2) || utils_default.isReadableStream(data2)) {
          return data2;
        }
        if (data2 && utils_default.isString(data2) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data2, this.parseReviver);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data2;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform_default.classes.FormData,
        Blob: platform_default.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults.headers[method] = {};
    });
    defaults_default = defaults;
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf, parseHeaders_default;
var init_parseHeaders = __esm({
  "node_modules/axios/lib/helpers/parseHeaders.js"() {
    "use strict";
    init_utils();
    ignoreDuplicateOf = utils_default.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    parseHeaders_default = (rawHeaders) => {
      const parsed = {};
      let key;
      let val2;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val2 = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val2);
          } else {
            parsed[key] = [val2];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val2 : val2;
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/core/AxiosHeaders.js
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
function matchHeaderValue(context, value, header, filter5, isHeaderNameFilter) {
  if (utils_default.isFunction(filter5)) {
    return filter5.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value)) return;
  if (utils_default.isString(filter5)) {
    return value.indexOf(filter5) !== -1;
  }
  if (utils_default.isRegExp(filter5)) {
    return filter5.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w2, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var $internals, isValidHeaderName, AxiosHeaders, AxiosHeaders_default;
var init_AxiosHeaders = __esm({
  "node_modules/axios/lib/core/AxiosHeaders.js"() {
    "use strict";
    init_utils();
    init_parseHeaders();
    $internals = Symbol("internals");
    isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils_default.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders_default(header), valueOrRewrite);
        } else if (utils_default.isObject(header) && utils_default.isIterable(header)) {
          let obj = {}, dest, key;
          for (const entry of header) {
            if (!utils_default.isArray(entry)) {
              throw TypeError("Object iterator must return a key-value pair");
            }
            obj[key = entry[0]] = (dest = obj[key]) ? utils_default.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
          }
          setHeaders(obj, valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils_default.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils_default.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils_default.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils_default.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils_default.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils_default.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils_default.forEach(this, (value, header) => {
          const key = utils_default.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils_default.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      getSetCookie() {
        return this.get("set-cookie") || [];
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first2, ...targets) {
        const computed = new this(first2);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype3 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype3, _header);
            accessors[lHeader] = true;
          }
        }
        utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils_default.freezeMethods(AxiosHeaders);
    AxiosHeaders_default = AxiosHeaders;
  }
});

// node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data2 = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data2 = fn.call(config, data2, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data2;
}
var init_transformData = __esm({
  "node_modules/axios/lib/core/transformData.js"() {
    "use strict";
    init_utils();
    init_defaults();
    init_AxiosHeaders();
  }
});

// node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}
var init_isCancel = __esm({
  "node_modules/axios/lib/cancel/isCancel.js"() {
    "use strict";
  }
});

// node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
var CanceledError_default;
var init_CanceledError = __esm({
  "node_modules/axios/lib/cancel/CanceledError.js"() {
    "use strict";
    init_AxiosError();
    init_utils();
    utils_default.inherits(CanceledError, AxiosError_default, {
      __CANCEL__: true
    });
    CanceledError_default = CanceledError;
  }
});

// node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}
var init_settle = __esm({
  "node_modules/axios/lib/core/settle.js"() {
    "use strict";
    init_AxiosError();
  }
});

// node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}
var init_parseProtocol = __esm({
  "node_modules/axios/lib/helpers/parseProtocol.js"() {
    "use strict";
  }
});

// node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default;
var init_speedometer = __esm({
  "node_modules/axios/lib/helpers/speedometer.js"() {
    "use strict";
    speedometer_default = speedometer;
  }
});

// node_modules/axios/lib/helpers/throttle.js
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1e3 / freq;
  let lastArgs;
  let timer;
  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn(...args);
  };
  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if (passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };
  const flush = () => lastArgs && invoke(lastArgs);
  return [throttled, flush];
}
var throttle_default;
var init_throttle = __esm({
  "node_modules/axios/lib/helpers/throttle.js"() {
    throttle_default = throttle;
  }
});

// node_modules/axios/lib/helpers/progressEventReducer.js
var progressEventReducer, progressEventDecorator, asyncDecorator;
var init_progressEventReducer = __esm({
  "node_modules/axios/lib/helpers/progressEventReducer.js"() {
    init_speedometer();
    init_throttle();
    init_utils();
    progressEventReducer = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer_default(50, 250);
      return throttle_default((e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data2 = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener(data2);
      }, freq);
    };
    progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };
    asyncDecorator = (fn) => (...args) => utils_default.asap(() => fn(...args));
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default;
var init_isURLSameOrigin = __esm({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"() {
    init_platform();
    isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url) => {
      url = new URL(url, platform_default.origin);
      return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
    })(
      new URL(platform_default.origin),
      platform_default.navigator && /(msie|trident)/i.test(platform_default.navigator.userAgent)
    ) : () => true;
  }
});

// node_modules/axios/lib/helpers/cookies.js
var cookies_default;
var init_cookies = __esm({
  "node_modules/axios/lib/helpers/cookies.js"() {
    init_utils();
    init_platform();
    cookies_default = platform_default.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils_default.isString(path) && cookie.push("path=" + path);
          utils_default.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}
var init_isAbsoluteURL = __esm({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"() {
    "use strict";
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}
var init_combineURLs = __esm({
  "node_modules/axios/lib/helpers/combineURLs.js"() {
    "use strict";
  }
});

// node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
  let isRelativeUrl = !isAbsoluteURL(requestedURL);
  if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}
var init_buildFullPath = __esm({
  "node_modules/axios/lib/core/buildFullPath.js"() {
    "use strict";
    init_isAbsoluteURL();
    init_combineURLs();
  }
});

// node_modules/axios/lib/core/mergeConfig.js
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, prop2, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b2, prop2, caseless) {
    if (!utils_default.isUndefined(b2)) {
      return getMergedValue(a, b2, prop2, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, prop2, caseless);
    }
  }
  function valueFromConfig2(a, b2) {
    if (!utils_default.isUndefined(b2)) {
      return getMergedValue(void 0, b2);
    }
  }
  function defaultToConfig2(a, b2) {
    if (!utils_default.isUndefined(b2)) {
      return getMergedValue(void 0, b2);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b2, prop2) {
    if (prop2 in config2) {
      return getMergedValue(a, b2);
    } else if (prop2 in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b2, prop2) => mergeDeepProperties(headersToObject(a), headersToObject(b2), prop2, true)
  };
  utils_default.forEach(Object.keys({ ...config1, ...config2 }), function computeConfigValue(prop2) {
    const merge3 = mergeMap[prop2] || mergeDeepProperties;
    const configValue = merge3(config1[prop2], config2[prop2], prop2);
    utils_default.isUndefined(configValue) && merge3 !== mergeDirectKeys || (config[prop2] = configValue);
  });
  return config;
}
var headersToObject;
var init_mergeConfig = __esm({
  "node_modules/axios/lib/core/mergeConfig.js"() {
    "use strict";
    init_utils();
    init_AxiosHeaders();
    headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;
  }
});

// node_modules/axios/lib/helpers/resolveConfig.js
var resolveConfig_default;
var init_resolveConfig = __esm({
  "node_modules/axios/lib/helpers/resolveConfig.js"() {
    init_platform();
    init_utils();
    init_isURLSameOrigin();
    init_cookies();
    init_buildFullPath();
    init_mergeConfig();
    init_AxiosHeaders();
    init_buildURL();
    resolveConfig_default = (config) => {
      const newConfig = mergeConfig({}, config);
      let { data: data2, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders_default.from(headers);
      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      if (utils_default.isFormData(data2)) {
        if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if (utils_default.isFunction(data2.getHeaders)) {
          const formHeaders = data2.getHeaders();
          const allowedHeaders = ["content-type", "content-length"];
          Object.entries(formHeaders).forEach(([key, val2]) => {
            if (allowedHeaders.includes(key.toLowerCase())) {
              headers.set(key, val2);
            }
          });
        }
      }
      if (platform_default.hasStandardBrowserEnv) {
        withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
  }
});

// node_modules/axios/lib/adapters/xhr.js
var isXHRAdapterSupported, xhr_default;
var init_xhr = __esm({
  "node_modules/axios/lib/adapters/xhr.js"() {
    init_utils();
    init_settle();
    init_transitional();
    init_AxiosError();
    init_CanceledError();
    init_parseProtocol();
    init_platform();
    init_AxiosHeaders();
    init_progressEventReducer();
    init_resolveConfig();
    isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    xhr_default = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig_default(config);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
          _config.signal && _config.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config.method.toUpperCase(), _config.url, true);
        request.timeout = _config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders_default.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError(event) {
          const msg = event && event.message ? event.message : "Network Error";
          const err = new AxiosError_default(msg, AxiosError_default.ERR_NETWORK, config, request);
          err.event = event || null;
          reject(err);
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional2 = _config.transitional || transitional_default;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError_default(
            timeoutErrorMessage,
            transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val2, key) {
            request.setRequestHeader(key, val2);
          });
        }
        if (!utils_default.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config.cancelToken || _config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(_config.url);
        if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
  }
});

// node_modules/axios/lib/helpers/composeSignals.js
var composeSignals, composeSignals_default;
var init_composeSignals = __esm({
  "node_modules/axios/lib/helpers/composeSignals.js"() {
    init_CanceledError();
    init_AxiosError();
    init_utils();
    composeSignals = (signals, timeout) => {
      const { length } = signals = signals ? signals.filter(Boolean) : [];
      if (timeout || length) {
        let controller = new AbortController();
        let aborted;
        const onabort = function(reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
          }
        };
        let timer = timeout && setTimeout(() => {
          timer = null;
          onabort(new AxiosError_default(`timeout ${timeout} of ms exceeded`, AxiosError_default.ETIMEDOUT));
        }, timeout);
        const unsubscribe = () => {
          if (signals) {
            timer && clearTimeout(timer);
            timer = null;
            signals.forEach((signal2) => {
              signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
            });
            signals = null;
          }
        };
        signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
        const { signal } = controller;
        signal.unsubscribe = () => utils_default.asap(unsubscribe);
        return signal;
      }
    };
    composeSignals_default = composeSignals;
  }
});

// node_modules/axios/lib/helpers/trackStream.js
var streamChunk, readBytes, readStream, trackStream;
var init_trackStream = __esm({
  "node_modules/axios/lib/helpers/trackStream.js"() {
    streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (!chunkSize || len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end2;
      while (pos < len) {
        end2 = pos + chunkSize;
        yield chunk.slice(pos, end2);
        pos = end2;
      }
    };
    readBytes = async function* (iterable, chunkSize) {
      for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize);
      }
    };
    readStream = async function* (stream) {
      if (stream[Symbol.asyncIterator]) {
        yield* stream;
        return;
      }
      const reader = stream.getReader();
      try {
        for (; ; ) {
          const { done, value } = await reader.read();
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        await reader.cancel();
      }
    };
    trackStream = (stream, chunkSize, onProgress, onFinish) => {
      const iterator2 = readBytes(stream, chunkSize);
      let bytes = 0;
      let done;
      let _onFinish = (e) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value } = await iterator2.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator2.return();
        }
      }, {
        highWaterMark: 2
      });
    };
  }
});

// node_modules/axios/lib/adapters/fetch.js
var DEFAULT_CHUNK_SIZE, isFunction2, globalFetchAPI, ReadableStream2, TextEncoder2, test, factory, seedCache, getFetch, adapter;
var init_fetch = __esm({
  "node_modules/axios/lib/adapters/fetch.js"() {
    init_platform();
    init_utils();
    init_AxiosError();
    init_composeSignals();
    init_trackStream();
    init_AxiosHeaders();
    init_progressEventReducer();
    init_resolveConfig();
    init_settle();
    DEFAULT_CHUNK_SIZE = 64 * 1024;
    ({ isFunction: isFunction2 } = utils_default);
    globalFetchAPI = (({ Request, Response: Response2 }) => ({
      Request,
      Response: Response2
    }))(utils_default.global);
    ({
      ReadableStream: ReadableStream2,
      TextEncoder: TextEncoder2
    } = utils_default.global);
    test = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e) {
        return false;
      }
    };
    factory = (env) => {
      env = utils_default.merge.call({
        skipUndefined: true
      }, globalFetchAPI, env);
      const { fetch: envFetch, Request, Response: Response2 } = env;
      const isFetchSupported = envFetch ? isFunction2(envFetch) : typeof fetch === "function";
      const isRequestSupported = isFunction2(Request);
      const isResponseSupported = isFunction2(Response2);
      if (!isFetchSupported) {
        return false;
      }
      const isReadableStreamSupported = isFetchSupported && isFunction2(ReadableStream2);
      const encodeText = isFetchSupported && (typeof TextEncoder2 === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder2()) : async (str) => new Uint8Array(await new Request(str).arrayBuffer()));
      const supportsRequestStream = isRequestSupported && isReadableStreamSupported && test(() => {
        let duplexAccessed = false;
        const hasContentType = new Request(platform_default.origin, {
          body: new ReadableStream2(),
          method: "POST",
          get duplex() {
            duplexAccessed = true;
            return "half";
          }
        }).headers.has("Content-Type");
        return duplexAccessed && !hasContentType;
      });
      const supportsResponseStream = isResponseSupported && isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response2("").body));
      const resolvers = {
        stream: supportsResponseStream && ((res) => res.body)
      };
      isFetchSupported && (() => {
        ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
          !resolvers[type] && (resolvers[type] = (res, config) => {
            let method = res && res[type];
            if (method) {
              return method.call(res);
            }
            throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);
          });
        });
      })();
      const getBodyLength = async (body) => {
        if (body == null) {
          return 0;
        }
        if (utils_default.isBlob(body)) {
          return body.size;
        }
        if (utils_default.isSpecCompliantForm(body)) {
          const _request = new Request(platform_default.origin, {
            method: "POST",
            body
          });
          return (await _request.arrayBuffer()).byteLength;
        }
        if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {
          return body.byteLength;
        }
        if (utils_default.isURLSearchParams(body)) {
          body = body + "";
        }
        if (utils_default.isString(body)) {
          return (await encodeText(body)).byteLength;
        }
      };
      const resolveBodyLength = async (headers, body) => {
        const length = utils_default.toFiniteNumber(headers.getContentLength());
        return length == null ? getBodyLength(body) : length;
      };
      return async (config) => {
        let {
          url,
          method,
          data: data2,
          signal,
          cancelToken,
          timeout,
          onDownloadProgress,
          onUploadProgress,
          responseType,
          headers,
          withCredentials = "same-origin",
          fetchOptions
        } = resolveConfig_default(config);
        let _fetch = envFetch || fetch;
        responseType = responseType ? (responseType + "").toLowerCase() : "text";
        let composedSignal = composeSignals_default([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
        let request = null;
        const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
          composedSignal.unsubscribe();
        });
        let requestContentLength;
        try {
          if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data2)) !== 0) {
            let _request = new Request(url, {
              method: "POST",
              body: data2,
              duplex: "half"
            });
            let contentTypeHeader;
            if (utils_default.isFormData(data2) && (contentTypeHeader = _request.headers.get("content-type"))) {
              headers.setContentType(contentTypeHeader);
            }
            if (_request.body) {
              const [onProgress, flush] = progressEventDecorator(
                requestContentLength,
                progressEventReducer(asyncDecorator(onUploadProgress))
              );
              data2 = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
            }
          }
          if (!utils_default.isString(withCredentials)) {
            withCredentials = withCredentials ? "include" : "omit";
          }
          const isCredentialsSupported = isRequestSupported && "credentials" in Request.prototype;
          const resolvedOptions = {
            ...fetchOptions,
            signal: composedSignal,
            method: method.toUpperCase(),
            headers: headers.normalize().toJSON(),
            body: data2,
            duplex: "half",
            credentials: isCredentialsSupported ? withCredentials : void 0
          };
          request = isRequestSupported && new Request(url, resolvedOptions);
          let response = await (isRequestSupported ? _fetch(request, fetchOptions) : _fetch(url, resolvedOptions));
          const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
          if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
            const options = {};
            ["status", "statusText", "headers"].forEach((prop2) => {
              options[prop2] = response[prop2];
            });
            const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
            const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
              responseContentLength,
              progressEventReducer(asyncDecorator(onDownloadProgress), true)
            ) || [];
            response = new Response2(
              trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
                flush && flush();
                unsubscribe && unsubscribe();
              }),
              options
            );
          }
          responseType = responseType || "text";
          let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);
          !isStreamResponse && unsubscribe && unsubscribe();
          return await new Promise((resolve, reject) => {
            settle(resolve, reject, {
              data: responseData,
              headers: AxiosHeaders_default.from(response.headers),
              status: response.status,
              statusText: response.statusText,
              config,
              request
            });
          });
        } catch (err) {
          unsubscribe && unsubscribe();
          if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) {
            throw Object.assign(
              new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request),
              {
                cause: err.cause || err
              }
            );
          }
          throw AxiosError_default.from(err, err && err.code, config, request);
        }
      };
    };
    seedCache = /* @__PURE__ */ new Map();
    getFetch = (config) => {
      let env = config ? config.env : {};
      const { fetch: fetch3, Request, Response: Response2 } = env;
      const seeds = [
        Request,
        Response2,
        fetch3
      ];
      let len = seeds.length, i = len, seed, target, map2 = seedCache;
      while (i--) {
        seed = seeds[i];
        target = map2.get(seed);
        target === void 0 && map2.set(seed, target = i ? /* @__PURE__ */ new Map() : factory(env));
        map2 = target;
      }
      return target;
    };
    adapter = getFetch();
  }
});

// node_modules/axios/lib/adapters/adapters.js
var knownAdapters, renderReason, isResolvedHandle, adapters_default;
var init_adapters = __esm({
  "node_modules/axios/lib/adapters/adapters.js"() {
    init_utils();
    init_null();
    init_xhr();
    init_fetch();
    init_AxiosError();
    knownAdapters = {
      http: null_default,
      xhr: xhr_default,
      fetch: {
        get: getFetch
      }
    };
    utils_default.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    renderReason = (reason) => `- ${reason}`;
    isResolvedHandle = (adapter3) => utils_default.isFunction(adapter3) || adapter3 === null || adapter3 === false;
    adapters_default = {
      getAdapter: (adapters, config) => {
        adapters = utils_default.isArray(adapters) ? adapters : [adapters];
        const { length } = adapters;
        let nameOrAdapter;
        let adapter3;
        const rejectedReasons = {};
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters[i];
          let id;
          adapter3 = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter3 = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
            if (adapter3 === void 0) {
              throw new AxiosError_default(`Unknown adapter '${id}'`);
            }
          }
          if (adapter3 && (utils_default.isFunction(adapter3) || (adapter3 = adapter3.get(config)))) {
            break;
          }
          rejectedReasons[id || "#" + i] = adapter3;
        }
        if (!adapter3) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError_default(
            `There is no suitable adapter to dispatch the request ` + s,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter3;
      },
      adapters: knownAdapters
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter3 = adapters_default.getAdapter(config.adapter || defaults_default.adapter, config);
  return adapter3(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}
var init_dispatchRequest = __esm({
  "node_modules/axios/lib/core/dispatchRequest.js"() {
    "use strict";
    init_transformData();
    init_isCancel();
    init_defaults();
    init_CanceledError();
    init_AxiosHeaders();
    init_adapters();
  }
});

// node_modules/axios/lib/env/data.js
var VERSION;
var init_data = __esm({
  "node_modules/axios/lib/env/data.js"() {
    VERSION = "1.12.2";
  }
});

// node_modules/axios/lib/helpers/validator.js
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validators, deprecatedWarnings, validator_default;
var init_validator = __esm({
  "node_modules/axios/lib/helpers/validator.js"() {
    "use strict";
    init_data();
    init_AxiosError();
    validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version2, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator === false) {
          throw new AxiosError_default(
            formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
            AxiosError_default.ERR_DEPRECATED
          );
        }
        if (version2 && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version2 + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    validators.spelling = function spelling(correctSpelling) {
      return (value, opt) => {
        console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
        return true;
      };
    };
    validator_default = {
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var validators2, Axios, Axios_default;
var init_Axios = __esm({
  "node_modules/axios/lib/core/Axios.js"() {
    "use strict";
    init_utils();
    init_buildURL();
    init_InterceptorManager();
    init_dispatchRequest();
    init_mergeConfig();
    init_buildFullPath();
    init_validator();
    init_AxiosHeaders();
    validators2 = validator_default.validators;
    Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig || {};
        this.interceptors = {
          request: new InterceptorManager_default(),
          response: new InterceptorManager_default()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy = {};
            Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional: transitional2, paramsSerializer, headers } = config;
        if (transitional2 !== void 0) {
          validator_default.assertOptions(transitional2, {
            silentJSONParsing: validators2.transitional(validators2.boolean),
            forcedJSONParsing: validators2.transitional(validators2.boolean),
            clarifyTimeoutError: validators2.transitional(validators2.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils_default.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator_default.assertOptions(paramsSerializer, {
              encode: validators2.function,
              serialize: validators2.function
            }, true);
          }
        }
        if (config.allowAbsoluteUrls !== void 0) {
        } else if (this.defaults.allowAbsoluteUrls !== void 0) {
          config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
        } else {
          config.allowAbsoluteUrls = true;
        }
        validator_default.assertOptions(config, {
          baseUrl: validators2.spelling("baseURL"),
          withXsrfToken: validators2.spelling("withXSRFToken")
        }, true);
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils_default.merge(
          headers.common,
          headers[config.method]
        );
        headers && utils_default.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift(...requestInterceptorChain);
          chain.push(...responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data2, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data: data2
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    Axios_default = Axios;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var CancelToken, CancelToken_default;
var init_CancelToken = __esm({
  "node_modules/axios/lib/cancel/CancelToken.js"() {
    "use strict";
    init_CanceledError();
    CancelToken = class _CancelToken {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners) return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError_default(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index2 = this._listeners.indexOf(listener);
        if (index2 !== -1) {
          this._listeners.splice(index2, 1);
        }
      }
      toAbortSignal() {
        const controller = new AbortController();
        const abort = (err) => {
          controller.abort(err);
        };
        this.subscribe(abort);
        controller.signal.unsubscribe = () => this.unsubscribe(abort);
        return controller.signal;
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new _CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    CancelToken_default = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap2(arr) {
    return callback.apply(null, arr);
  };
}
var init_spread = __esm({
  "node_modules/axios/lib/helpers/spread.js"() {
    "use strict";
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}
var init_isAxiosError = __esm({
  "node_modules/axios/lib/helpers/isAxiosError.js"() {
    "use strict";
    init_utils();
  }
});

// node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode, HttpStatusCode_default;
var init_HttpStatusCode = __esm({
  "node_modules/axios/lib/helpers/HttpStatusCode.js"() {
    HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    HttpStatusCode_default = HttpStatusCode;
  }
});

// node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios, axios_default;
var init_axios = __esm({
  "node_modules/axios/lib/axios.js"() {
    "use strict";
    init_utils();
    init_bind();
    init_Axios();
    init_mergeConfig();
    init_defaults();
    init_formDataToJSON();
    init_CanceledError();
    init_CancelToken();
    init_isCancel();
    init_data();
    init_toFormData();
    init_AxiosError();
    init_spread();
    init_isAxiosError();
    init_AxiosHeaders();
    init_adapters();
    init_HttpStatusCode();
    axios = createInstance(defaults_default);
    axios.Axios = Axios_default;
    axios.CanceledError = CanceledError_default;
    axios.CancelToken = CancelToken_default;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData_default;
    axios.AxiosError = AxiosError_default;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders_default;
    axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters_default.getAdapter;
    axios.HttpStatusCode = HttpStatusCode_default;
    axios.default = axios;
    axios_default = axios;
  }
});

// node_modules/axios/index.js
var Axios2, AxiosError2, CanceledError2, isCancel2, CancelToken2, VERSION2, all2, Cancel, isAxiosError2, spread2, toFormData2, AxiosHeaders2, HttpStatusCode2, formToJSON, getAdapter, mergeConfig2;
var init_axios2 = __esm({
  "node_modules/axios/index.js"() {
    init_axios();
    ({
      Axios: Axios2,
      AxiosError: AxiosError2,
      CanceledError: CanceledError2,
      isCancel: isCancel2,
      CancelToken: CancelToken2,
      VERSION: VERSION2,
      all: all2,
      Cancel,
      isAxiosError: isAxiosError2,
      spread: spread2,
      toFormData: toFormData2,
      AxiosHeaders: AxiosHeaders2,
      HttpStatusCode: HttpStatusCode2,
      formToJSON,
      getAdapter,
      mergeConfig: mergeConfig2
    } = axios_default);
  }
});

// src/services/HybridSearchService.ts
var HybridSearchService;
var init_HybridSearchService = __esm({
  "src/services/HybridSearchService.ts"() {
    "use strict";
    init_axios2();
    HybridSearchService = class {
      /**
       * Generate embedding using Azure OpenAI
       */
      static async generateEmbedding(text3) {
        const endpoint = process.env.AZURE_OPENAI_ENDPOINT;
        const apiKey = process.env.AZURE_OPENAI_API_KEY;
        const deployment = process.env.AZURE_OPENAI_EMBEDDING_DEPLOYMENT;
        if (!endpoint || !apiKey || !deployment) {
          throw new Error("Azure OpenAI configuration missing");
        }
        const url = `${endpoint}openai/deployments/${deployment}/embeddings?api-version=2023-05-15`;
        const response = await axios_default.post(
          url,
          { input: text3.substring(0, 8e3) },
          {
            headers: {
              "Content-Type": "application/json",
              "api-key": apiKey
            }
          }
        );
        return response.data.data[0].embedding;
      }
      /**
       * Perform hybrid search (Vector + BM25)
       */
      static async search(options) {
        const { query, limit = 3, type, minScore = 0.15 } = options;
        try {
          const isBrowser = typeof window !== "undefined";
          const apiUrl = isBrowser ? "" : process.env.NEXT_PUBLIC_API_URL || "http://localhost:3000";
          const response = await axios_default.post(`${apiUrl}/api/widget/manual-indexes/search`, {
            query,
            limit,
            type,
            minScore
          });
          if (response.data.success) {
            return response.data.results;
          } else {
            console.error("Hybrid search API error:", response.data.error);
            return [];
          }
        } catch (error) {
          console.error("Error performing hybrid search:", error);
          throw error;
        }
      }
      /**
       * Search only in manual indexes
       */
      static async searchManual(query, limit = 5) {
        return this.search({ query, limit, type: "manual" });
      }
      /**
       * Search only in URL knowledge base
       */
      static async searchURL(query, limit = 5) {
        return this.search({ query, limit, type: "url" });
      }
    };
  }
});

// src/services/ManualIndexService.ts
var ManualIndexService_exports = {};
__export(ManualIndexService_exports, {
  ManualIndexService: () => ManualIndexService
});
var ManualIndexService;
var init_ManualIndexService = __esm({
  "src/services/ManualIndexService.ts"() {
    "use strict";
    init_HybridSearchService();
    init_DatabaseService();
    init_axios2();
    ManualIndexService = class {
      static generateFingerprint(text3) {
        return Buffer.from(text3).toString("base64").substring(0, 64);
      }
      static async generateEmbedding(text3) {
        const endpoint = process.env.AZURE_OPENAI_ENDPOINT;
        const apiKey = process.env.AZURE_OPENAI_API_KEY;
        const deployment = process.env.AZURE_OPENAI_EMBEDDING_DEPLOYMENT;
        if (!endpoint || !apiKey || !deployment) {
          throw new Error("Azure OpenAI configuration missing");
        }
        const url = endpoint + "/openai/deployments/" + deployment + "/embeddings?api-version=2023-05-15";
        const response = await axios_default.post(
          url,
          { input: text3.substring(0, 8e3) },
          {
            headers: {
              "Content-Type": "application/json",
              "api-key": apiKey
            }
          }
        );
        return response.data.data[0].embedding;
      }
      static async getAll() {
        return await DatabaseService.getManualIndexes();
      }
      static async getAllURLs() {
        const indexes = await DatabaseService.getManualIndexes();
        return indexes.filter((index2) => index2.type === "url");
      }
      static async getById(id) {
        const indexes = await DatabaseService.getManualIndexes();
        return indexes.find((index2) => index2.id === id) || null;
      }
      static async create(data2) {
        await DatabaseService.createManualIndex(
          data2.title,
          data2.description || "",
          data2.content,
          data2.url
        );
        const indexes = await DatabaseService.getManualIndexes();
        const created = indexes.find((index2) => index2.name === data2.title);
        if (!created) {
          throw new Error("Failed to create manual index");
        }
        return created;
      }
      static async update(id, data2) {
        const existing = await this.getById(id);
        if (!existing) {
          throw new Error("Manual index not found");
        }
        await DatabaseService.updateManualIndex(
          id,
          data2.title || existing.name,
          data2.description || existing.description || "",
          data2.content || existing.content,
          data2.url || existing.url
        );
        return await this.getById(id);
      }
      static async delete(id) {
        await DatabaseService.deleteManualIndex(id);
        return true;
      }
      static async search(query, limit = 3, minScore = 0.15) {
        console.log(`\u{1F50D} ManualIndexService.search() using Hybrid Search (limit=${limit}, minScore=${minScore})`);
        const results = await HybridSearchService.search({ query, limit, minScore });
        console.log("\u2705 Found", results.length, "results");
        return results;
      }
    };
  }
});

// node_modules/boolbase/index.js
var require_boolbase = __commonJS({
  "node_modules/boolbase/index.js"(exports, module) {
    module.exports = {
      trueFunc: function trueFunc2() {
        return true;
      },
      falseFunc: function falseFunc() {
        return false;
      }
    };
  }
});

// src/services/CustomerServiceManager.ts
var CustomerServiceManager_exports = {};
__export(CustomerServiceManager_exports, {
  CustomerServiceManager: () => CustomerServiceManager
});
var CustomerServiceManager;
var init_CustomerServiceManager = __esm({
  "src/services/CustomerServiceManager.ts"() {
    "use strict";
    CustomerServiceManager = class {
      /**
       * 獲取所有對話列表
       */
      static async getAllConversations() {
        try {
          const { DatabaseService: DatabaseService2 } = await Promise.resolve().then(() => (init_DatabaseService(), DatabaseService_exports));
          await DatabaseService2.initializePool();
          const conversations = await DatabaseService2.getConversations();
          return Array.isArray(conversations) ? conversations : [];
        } catch (error) {
          console.error("Failed to load conversations:", error);
          return [];
        }
      }
      /**
       * 根據ID獲取對話詳情
       */
      static async getConversationById(id) {
        try {
          const { DatabaseService: DatabaseService2 } = await Promise.resolve().then(() => (init_DatabaseService(), DatabaseService_exports));
          await DatabaseService2.initializePool();
          return await DatabaseService2.getConversation(id);
        } catch (error) {
          console.error("Failed to load conversation:", error);
          return null;
        }
      }
      /**
       * 添加客服回覆到對話
       */
      static async addCustomerServiceReply(conversationId, content, agentName = "\u5BA2\u670D") {
        try {
          const adminId = localStorage.getItem("lens_admin_user_id") || "admin";
          const response = await fetch(`http://localhost:3000/api/widget/conversations/${conversationId}/reply`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              content,
              adminId,
              adminName: agentName
            })
          });
          if (!response.ok) {
            console.error("Failed to add reply:", await response.text());
            return false;
          }
          const result = await response.json();
          console.log("\u2705 Admin reply added:", result);
          return true;
        } catch (error) {
          console.error("Failed to add customer service reply:", error);
          return false;
        }
      }
      /**
       * 刪除對話
       */
      static async deleteConversation(id) {
        try {
          const response = await fetch(`http://localhost:3000/api/widget/conversations/${id}`, {
            method: "DELETE"
          });
          if (!response.ok) {
            console.error("Failed to delete conversation:", await response.text());
            return false;
          }
          console.log("\u2705 Conversation deleted:", id);
          return true;
        } catch (error) {
          console.error("Failed to delete conversation:", error);
          return false;
        }
      }
      /**
       * 標記對話為已處理
       */
      static async markConversationAsHandled(id) {
        try {
          const response = await fetch(`http://localhost:3000/api/widget/conversations/${id}`, {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              status: "handled",
              handledAt: Date.now()
            })
          });
          if (!response.ok) {
            console.error("Failed to mark conversation as handled:", await response.text());
            return false;
          }
          console.log("\u2705 Conversation marked as handled:", id);
          return true;
        } catch (error) {
          console.error("Failed to mark conversation as handled:", error);
          return false;
        }
      }
      /**
       * 獲取待處理的對話數量
       */
      static async getPendingConversationsCount() {
        try {
          const conversations = await this.getAllConversations();
          return conversations.filter((conv) => conv.status === "active").length;
        } catch (error) {
          console.error("Failed to get pending conversations count:", error);
          return 0;
        }
      }
    };
  }
});

// src/services/AdminUserManager.ts
var AdminUserManager_exports = {};
__export(AdminUserManager_exports, {
  AdminUserManager: () => AdminUserManager
});
var AdminUserManager;
var init_AdminUserManager = __esm({
  "src/services/AdminUserManager.ts"() {
    "use strict";
    init_DatabaseService();
    AdminUserManager = class {
      /**
       * 獲取所有管理員用戶
       */
      static async getAllAdminUsers() {
        try {
          const users = await DatabaseService.getAdminUsers();
          return users.map((user) => ({
            id: user.id.toString(),
            username: user.username,
            password: "",
            // 不返回密碼
            email: user.email,
            created_at: new Date(user.created_at).getTime(),
            is_active: true
          }));
        } catch (error) {
          console.error("Failed to load admin users:", error);
          return [];
        }
      }
      /**
       * 創建新的管理員用戶
       */
      static async createAdminUser(username, password, email) {
        try {
          await DatabaseService.createAdminUser(username, password, email);
          return true;
        } catch (error) {
          console.error("Failed to create admin user:", error);
          return false;
        }
      }
      /**
       * 更新管理員用戶
       */
      static async updateAdminUser(id, updates) {
        try {
          const response = await fetch(`http://localhost:3002/admin-users/${id}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify(updates)
          });
          return response.ok;
        } catch (error) {
          console.error("Failed to update admin user:", error);
          return false;
        }
      }
      /**
       * 刪除管理員用戶
       */
      static async deleteAdminUser(id) {
        try {
          const response = await fetch(`http://localhost:3002/admin-users/${id}`, {
            method: "DELETE"
          });
          return response.ok;
        } catch (error) {
          console.error("Failed to delete admin user:", error);
          return false;
        }
      }
      /**
       * 驗證管理員登錄
       */
      static async validateAdminLogin(username, password) {
        try {
          const user = await DatabaseService.validateAdmin(username, password);
          if (user) {
            return {
              id: user.id.toString(),
              username: user.username,
              password: "",
              // 不返回密碼
              email: user.email,
              created_at: Date.now(),
              last_login: Date.now(),
              is_active: true
            };
          }
          return null;
        } catch (error) {
          console.error("Failed to validate admin login:", error);
          return null;
        }
      }
      /**
       * 更改密碼
       */
      static async changePassword(id, newPassword) {
        return await this.updateAdminUser(id, { password: newPassword });
      }
    };
  }
});

// node_modules/pdf-parse/dist/pdf-parse/web/pdf-parse.es.js
var pdf_parse_es_exports = {};
__export(pdf_parse_es_exports, {
  AbortException: () => AbortException2,
  FormatError: () => FormatError2,
  InvalidPDFException: () => InvalidPDFException2,
  Line: () => Line,
  LineDirection: () => LineDirection,
  LineStore: () => LineStore,
  PDFParse: () => PDFParse,
  PasswordException: () => PasswordException2,
  Point: () => Point,
  Rectangle: () => Rectangle,
  ResponseException: () => ResponseException2,
  Shape: () => Shape,
  Table: () => Table,
  UnknownErrorException: () => UnknownErrorException2,
  VerbosityLevel: () => VerbosityLevel,
  getException: () => getException
});
function __webpack_require__(moduleId) {
  var cachedModule = __webpack_module_cache__[moduleId];
  if (cachedModule !== void 0) {
    return cachedModule.exports;
  }
  var module = __webpack_module_cache__[moduleId] = {
    /******/
    // no module.id needed
    /******/
    // no module.loaded needed
    /******/
    exports: {}
    /******/
  };
  __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
  return module.exports;
}
function setVerbosityLevel(level) {
  if (Number.isInteger(level)) {
    verbosity = level;
  }
}
function getVerbosityLevel() {
  return verbosity;
}
function info(msg) {
  if (verbosity >= VerbosityLevel.INFOS) {
    console.info(`Info: ${msg}`);
  }
}
function warn(msg) {
  if (verbosity >= VerbosityLevel.WARNINGS) {
    console.warn(`Warning: ${msg}`);
  }
}
function unreachable(msg) {
  throw new Error(msg);
}
function assert(cond, msg) {
  if (!cond) {
    unreachable(msg);
  }
}
function _isValidProtocol(url) {
  switch (url?.protocol) {
    case "http:":
    case "https:":
    case "ftp:":
    case "mailto:":
    case "tel:":
      return true;
    default:
      return false;
  }
}
function createValidAbsoluteUrl(url, baseUrl = null, options = null) {
  if (!url) {
    return null;
  }
  if (options && typeof url === "string") {
    if (options.addDefaultProtocol && url.startsWith("www.")) {
      const dots = url.match(/\./g);
      if (dots?.length >= 2) {
        url = `http://${url}`;
      }
    }
    if (options.tryConvertEncoding) {
      try {
        url = stringToUTF8String(url);
      } catch {
      }
    }
  }
  const absoluteUrl = baseUrl ? URL.parse(url, baseUrl) : URL.parse(url);
  return _isValidProtocol(absoluteUrl) ? absoluteUrl : null;
}
function updateUrlHash(url, hash, allowRel = false) {
  const res = URL.parse(url);
  if (res) {
    res.hash = hash;
    return res.href;
  }
  if (allowRel && createValidAbsoluteUrl(url, "http://example.com")) {
    return url.split("#", 1)[0] + `${hash ? `#${hash}` : ""}`;
  }
  return "";
}
function shadow(obj, prop2, value, nonSerializable = false) {
  Object.defineProperty(obj, prop2, {
    value,
    enumerable: !nonSerializable,
    configurable: true,
    writable: false
  });
  return value;
}
function bytesToString(bytes) {
  if (typeof bytes !== "object" || bytes?.length === void 0) {
    unreachable("Invalid argument for bytesToString");
  }
  const length = bytes.length;
  const MAX_ARGUMENT_COUNT = 8192;
  if (length < MAX_ARGUMENT_COUNT) {
    return String.fromCharCode.apply(null, bytes);
  }
  const strBuf = [];
  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
    const chunk = bytes.subarray(i, chunkEnd);
    strBuf.push(String.fromCharCode.apply(null, chunk));
  }
  return strBuf.join("");
}
function stringToBytes(str) {
  if (typeof str !== "string") {
    unreachable("Invalid argument for stringToBytes");
  }
  const length = str.length;
  const bytes = new Uint8Array(length);
  for (let i = 0; i < length; ++i) {
    bytes[i] = str.charCodeAt(i) & 255;
  }
  return bytes;
}
function string32(value) {
  return String.fromCharCode(value >> 24 & 255, value >> 16 & 255, value >> 8 & 255, value & 255);
}
function isLittleEndian() {
  const buffer8 = new Uint8Array(4);
  buffer8[0] = 1;
  const view32 = new Uint32Array(buffer8.buffer, 0, 1);
  return view32[0] === 1;
}
function isEvalSupported() {
  try {
    new Function("");
    return true;
  } catch {
    return false;
  }
}
function stringToUTF8String(str) {
  return decodeURIComponent(escape(str));
}
function normalizeUnicode(str) {
  if (!NormalizeRegex) {
    NormalizeRegex = /([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu;
    NormalizationMap = /* @__PURE__ */ new Map([["\uFB05", "\u017Ft"]]);
  }
  return str.replaceAll(NormalizeRegex, (_2, p1, p2) => p1 ? p1.normalize("NFKC") : NormalizationMap.get(p2));
}
function getUuid() {
  if (typeof crypto.randomUUID === "function") {
    return crypto.randomUUID();
  }
  const buf = new Uint8Array(32);
  crypto.getRandomValues(buf);
  return bytesToString(buf);
}
function _isValidExplicitDest(validRef, validName, dest) {
  if (!Array.isArray(dest) || dest.length < 2) {
    return false;
  }
  const [page, zoom, ...args] = dest;
  if (!validRef(page) && !Number.isInteger(page)) {
    return false;
  }
  if (!validName(zoom)) {
    return false;
  }
  const argsLen = args.length;
  let allowNull = true;
  switch (zoom.name) {
    case "XYZ":
      if (argsLen < 2 || argsLen > 3) {
        return false;
      }
      break;
    case "Fit":
    case "FitB":
      return argsLen === 0;
    case "FitH":
    case "FitBH":
    case "FitV":
    case "FitBV":
      if (argsLen > 1) {
        return false;
      }
      break;
    case "FitR":
      if (argsLen !== 4) {
        return false;
      }
      allowNull = false;
      break;
    default:
      return false;
  }
  for (const arg of args) {
    if (typeof arg === "number" || allowNull && arg === null) {
      continue;
    }
    return false;
  }
  return true;
}
function MathClamp(v2, min, max) {
  return Math.min(Math.max(v2, min), max);
}
function toBase64Util(arr) {
  if (Uint8Array.prototype.toBase64) {
    return arr.toBase64();
  }
  return btoa(bytesToString(arr));
}
function fromBase64Util(str) {
  if (Uint8Array.fromBase64) {
    return Uint8Array.fromBase64(str);
  }
  return stringToBytes(atob(str));
}
async function fetchData(url, type = "text") {
  if (isValidFetchUrl(url, document.baseURI)) {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(response.statusText);
    }
    switch (type) {
      case "arraybuffer":
        return response.arrayBuffer();
      case "blob":
        return response.blob();
      case "json":
        return response.json();
    }
    return response.text();
  }
  return new Promise((resolve, reject) => {
    const request = new XMLHttpRequest();
    request.open("GET", url, true);
    request.responseType = type;
    request.onreadystatechange = () => {
      if (request.readyState !== XMLHttpRequest.DONE) {
        return;
      }
      if (request.status === 200 || request.status === 0) {
        switch (type) {
          case "arraybuffer":
          case "blob":
          case "json":
            resolve(request.response);
            return;
        }
        resolve(request.responseText);
        return;
      }
      reject(new Error(request.statusText));
    };
    request.send(null);
  });
}
function isDataScheme(url) {
  const ii = url.length;
  let i = 0;
  while (i < ii && url[i].trim() === "") {
    i++;
  }
  return url.substring(i, i + 5).toLowerCase() === "data:";
}
function isPdfFile(filename) {
  return typeof filename === "string" && /\.pdf$/i.test(filename);
}
function getFilenameFromUrl(url) {
  [url] = url.split(/[#?]/, 1);
  return url.substring(url.lastIndexOf("/") + 1);
}
function getPdfFilenameFromUrl(url, defaultFilename = "document.pdf") {
  if (typeof url !== "string") {
    return defaultFilename;
  }
  if (isDataScheme(url)) {
    warn('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.');
    return defaultFilename;
  }
  const getURL = (urlString) => {
    try {
      return new URL(urlString);
    } catch {
      try {
        return new URL(decodeURIComponent(urlString));
      } catch {
        try {
          return new URL(urlString, "https://foo.bar");
        } catch {
          try {
            return new URL(decodeURIComponent(urlString), "https://foo.bar");
          } catch {
            return null;
          }
        }
      }
    }
  };
  const newURL = getURL(url);
  if (!newURL) {
    return defaultFilename;
  }
  const decode = (name) => {
    try {
      let decoded = decodeURIComponent(name);
      if (decoded.includes("/")) {
        decoded = decoded.split("/").at(-1);
        if (decoded.test(/^\.pdf$/i)) {
          return decoded;
        }
        return name;
      }
      return decoded;
    } catch {
      return name;
    }
  };
  const pdfRegex = /\.pdf$/i;
  const filename = newURL.pathname.split("/").at(-1);
  if (pdfRegex.test(filename)) {
    return decode(filename);
  }
  if (newURL.searchParams.size > 0) {
    const values = Array.from(newURL.searchParams.values()).reverse();
    for (const value of values) {
      if (pdfRegex.test(value)) {
        return decode(value);
      }
    }
    const keys = Array.from(newURL.searchParams.keys()).reverse();
    for (const key of keys) {
      if (pdfRegex.test(key)) {
        return decode(key);
      }
    }
  }
  if (newURL.hash) {
    const reFilename = /[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i;
    const hashFilename = reFilename.exec(newURL.hash);
    if (hashFilename) {
      return decode(hashFilename[0]);
    }
  }
  return defaultFilename;
}
function isValidFetchUrl(url, baseUrl) {
  const res = baseUrl ? URL.parse(url, baseUrl) : URL.parse(url);
  return res?.protocol === "http:" || res?.protocol === "https:";
}
function noContextMenu(e) {
  e.preventDefault();
}
function stopEvent(e) {
  e.preventDefault();
  e.stopPropagation();
}
function deprecated(details) {
  console.log("Deprecated API usage: " + details);
}
function getXfaPageViewport(xfaPage, {
  scale = 1,
  rotation = 0
}) {
  const {
    width,
    height
  } = xfaPage.attributes.style;
  const viewBox = [0, 0, parseInt(width), parseInt(height)];
  return new PageViewport({
    viewBox,
    userUnit: 1,
    scale,
    rotation
  });
}
function getRGB(color) {
  if (color.startsWith("#")) {
    const colorRGB = parseInt(color.slice(1), 16);
    return [(colorRGB & 16711680) >> 16, (colorRGB & 65280) >> 8, colorRGB & 255];
  }
  if (color.startsWith("rgb(")) {
    return color.slice(4, -1).split(",").map((x2) => parseInt(x2));
  }
  if (color.startsWith("rgba(")) {
    return color.slice(5, -1).split(",").map((x2) => parseInt(x2)).slice(0, 3);
  }
  warn(`Not a valid color format: "${color}"`);
  return [0, 0, 0];
}
function getColorValues(colors) {
  const span = document.createElement("span");
  span.style.visibility = "hidden";
  span.style.colorScheme = "only light";
  document.body.append(span);
  for (const name of colors.keys()) {
    span.style.color = name;
    const computedColor = window.getComputedStyle(span).color;
    colors.set(name, getRGB(computedColor));
  }
  span.remove();
}
function getCurrentTransform(ctx) {
  const {
    a,
    b: b2,
    c,
    d,
    e,
    f
  } = ctx.getTransform();
  return [a, b2, c, d, e, f];
}
function getCurrentTransformInverse(ctx) {
  const {
    a,
    b: b2,
    c,
    d,
    e,
    f
  } = ctx.getTransform().invertSelf();
  return [a, b2, c, d, e, f];
}
function setLayerDimensions(div, viewport, mustFlip = false, mustRotate = true) {
  if (viewport instanceof PageViewport) {
    const {
      pageWidth,
      pageHeight
    } = viewport.rawDims;
    const {
      style
    } = div;
    const useRound = util_FeatureTest.isCSSRoundSupported;
    const w2 = `var(--total-scale-factor) * ${pageWidth}px`, h2 = `var(--total-scale-factor) * ${pageHeight}px`;
    const widthStr = useRound ? `round(down, ${w2}, var(--scale-round-x))` : `calc(${w2})`, heightStr = useRound ? `round(down, ${h2}, var(--scale-round-y))` : `calc(${h2})`;
    if (!mustFlip || viewport.rotation % 180 === 0) {
      style.width = widthStr;
      style.height = heightStr;
    } else {
      style.width = heightStr;
      style.height = widthStr;
    }
  }
  if (mustRotate) {
    div.setAttribute("data-main-rotation", viewport.rotation);
  }
}
function applyOpacity(r, g, b2, opacity) {
  opacity = Math.min(Math.max(opacity ?? 1, 0), 1);
  const white = 255 * (1 - opacity);
  r = Math.round(r * opacity + white);
  g = Math.round(g * opacity + white);
  b2 = Math.round(b2 * opacity + white);
  return [r, g, b2];
}
function RGBToHSL(rgb, output) {
  const r = rgb[0] / 255;
  const g = rgb[1] / 255;
  const b2 = rgb[2] / 255;
  const max = Math.max(r, g, b2);
  const min = Math.min(r, g, b2);
  const l = (max + min) / 2;
  if (max === min) {
    output[0] = output[1] = 0;
  } else {
    const d = max - min;
    output[1] = l < 0.5 ? d / (max + min) : d / (2 - max - min);
    switch (max) {
      case r:
        output[0] = ((g - b2) / d + (g < b2 ? 6 : 0)) * 60;
        break;
      case g:
        output[0] = ((b2 - r) / d + 2) * 60;
        break;
      case b2:
        output[0] = ((r - g) / d + 4) * 60;
        break;
    }
  }
  output[2] = l;
}
function HSLToRGB(hsl, output) {
  const h2 = hsl[0];
  const s = hsl[1];
  const l = hsl[2];
  const c = (1 - Math.abs(2 * l - 1)) * s;
  const x2 = c * (1 - Math.abs(h2 / 60 % 2 - 1));
  const m2 = l - c / 2;
  switch (Math.floor(h2 / 60)) {
    case 0:
      output[0] = c + m2;
      output[1] = x2 + m2;
      output[2] = m2;
      break;
    case 1:
      output[0] = x2 + m2;
      output[1] = c + m2;
      output[2] = m2;
      break;
    case 2:
      output[0] = m2;
      output[1] = c + m2;
      output[2] = x2 + m2;
      break;
    case 3:
      output[0] = m2;
      output[1] = x2 + m2;
      output[2] = c + m2;
      break;
    case 4:
      output[0] = x2 + m2;
      output[1] = m2;
      output[2] = c + m2;
      break;
    case 5:
    case 6:
      output[0] = c + m2;
      output[1] = m2;
      output[2] = x2 + m2;
      break;
  }
}
function computeLuminance(x2) {
  return x2 <= 0.03928 ? x2 / 12.92 : ((x2 + 0.055) / 1.055) ** 2.4;
}
function contrastRatio(hsl1, hsl2, output) {
  HSLToRGB(hsl1, output);
  output.map(computeLuminance);
  const lum1 = 0.2126 * output[0] + 0.7152 * output[1] + 0.0722 * output[2];
  HSLToRGB(hsl2, output);
  output.map(computeLuminance);
  const lum2 = 0.2126 * output[0] + 0.7152 * output[1] + 0.0722 * output[2];
  return lum1 > lum2 ? (lum1 + 0.05) / (lum2 + 0.05) : (lum2 + 0.05) / (lum1 + 0.05);
}
function findContrastColor(baseColor, fixedColor) {
  const key = baseColor[0] + baseColor[1] * 256 + baseColor[2] * 65536 + fixedColor[0] * 16777216 + fixedColor[1] * 4294967296 + fixedColor[2] * 1099511627776;
  let cachedValue = contrastCache.get(key);
  if (cachedValue) {
    return cachedValue;
  }
  const array = new Float32Array(9);
  const output = array.subarray(0, 3);
  const baseHSL = array.subarray(3, 6);
  RGBToHSL(baseColor, baseHSL);
  const fixedHSL = array.subarray(6, 9);
  RGBToHSL(fixedColor, fixedHSL);
  const isFixedColorDark = fixedHSL[2] < 0.5;
  const minContrast = isFixedColorDark ? 12 : 4.5;
  baseHSL[2] = isFixedColorDark ? Math.sqrt(baseHSL[2]) : 1 - Math.sqrt(1 - baseHSL[2]);
  if (contrastRatio(baseHSL, fixedHSL, output) < minContrast) {
    let start, end2;
    if (isFixedColorDark) {
      start = baseHSL[2];
      end2 = 1;
    } else {
      start = 0;
      end2 = baseHSL[2];
    }
    const PRECISION = 5e-3;
    while (end2 - start > PRECISION) {
      const mid = baseHSL[2] = (start + end2) / 2;
      if (isFixedColorDark === contrastRatio(baseHSL, fixedHSL, output) < minContrast) {
        start = mid;
      } else {
        end2 = mid;
      }
    }
    baseHSL[2] = isFixedColorDark ? end2 : start;
  }
  HSLToRGB(baseHSL, output);
  cachedValue = Util.makeHexColor(Math.round(output[0] * 255), Math.round(output[1] * 255), Math.round(output[2] * 255));
  contrastCache.set(key, cachedValue);
  return cachedValue;
}
function renderRichText({
  html: html3,
  dir,
  className
}, container) {
  const fragment = document.createDocumentFragment();
  if (typeof html3 === "string") {
    const p = document.createElement("p");
    p.dir = dir || "auto";
    const lines = html3.split(/(?:\r\n?|\n)/);
    for (let i = 0, ii = lines.length; i < ii; ++i) {
      const line = lines[i];
      p.append(document.createTextNode(line));
      if (i < ii - 1) {
        p.append(document.createElement("br"));
      }
    }
    fragment.append(p);
  } else {
    XfaLayer.render({
      xfaHtml: html3,
      div: fragment,
      intent: "richText"
    });
  }
  fragment.firstChild.classList.add("richText", className);
  container.append(fragment);
}
function bindEvents(obj, element, names) {
  for (const name of names) {
    element.addEventListener(name, obj[name].bind(obj));
  }
}
function getUrlProp(val2) {
  if (val2 instanceof URL) {
    return val2.href;
  }
  if (typeof val2 === "string") {
    if (isNodeJS) {
      return val2;
    }
    const url = URL.parse(val2, window.location);
    if (url) {
      return url.href;
    }
  }
  throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.");
}
function getDataProp(val2) {
  if (isNodeJS && typeof Buffer !== "undefined" && val2 instanceof Buffer) {
    throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");
  }
  if (val2 instanceof Uint8Array && val2.byteLength === val2.buffer.byteLength) {
    return val2;
  }
  if (typeof val2 === "string") {
    return stringToBytes(val2);
  }
  if (val2 instanceof ArrayBuffer || ArrayBuffer.isView(val2) || typeof val2 === "object" && !isNaN(val2?.length)) {
    return new Uint8Array(val2);
  }
  throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.");
}
function getFactoryUrlProp(val2) {
  if (typeof val2 !== "string") {
    return null;
  }
  if (val2.endsWith("/")) {
    return val2;
  }
  throw new Error(`Invalid factory url: "${val2}" must include trailing slash.`);
}
function onFn() {
}
function wrapReason(ex) {
  if (ex instanceof AbortException$1 || ex instanceof InvalidPDFException$1 || ex instanceof PasswordException$1 || ex instanceof ResponseException$1 || ex instanceof UnknownErrorException$1) {
    return ex;
  }
  if (!(ex instanceof Error || typeof ex === "object" && ex !== null)) {
    unreachable('wrapReason: Expected "reason" to be a (possibly cloned) Error.');
  }
  switch (ex.name) {
    case "AbortException":
      return new AbortException$1(ex.message);
    case "InvalidPDFException":
      return new InvalidPDFException$1(ex.message);
    case "PasswordException":
      return new PasswordException$1(ex.message, ex.code);
    case "ResponseException":
      return new ResponseException$1(ex.message, ex.status, ex.missing);
    case "UnknownErrorException":
      return new UnknownErrorException$1(ex.message, ex.details);
  }
  return new UnknownErrorException$1(ex.message, ex.toString());
}
async function node_utils_fetchData(url) {
  const fs = process.getBuiltinModule("fs");
  const data2 = await fs.promises.readFile(url);
  return new Uint8Array(data2);
}
function expandBBox(array, index2, minX, minY, maxX, maxY) {
  array[index2 * 4 + 0] = Math.min(array[index2 * 4 + 0], minX);
  array[index2 * 4 + 1] = Math.min(array[index2 * 4 + 1], minY);
  array[index2 * 4 + 2] = Math.max(array[index2 * 4 + 2], maxX);
  array[index2 * 4 + 3] = Math.max(array[index2 * 4 + 3], maxY);
}
function applyBoundingBox(ctx, bbox) {
  if (!bbox) {
    return;
  }
  const width = bbox[2] - bbox[0];
  const height = bbox[3] - bbox[1];
  const region = new Path2D();
  region.rect(bbox[0], bbox[1], width, height);
  ctx.clip(region);
}
function drawTriangle(data2, context, p1, p2, p3, c1, c2, c3) {
  const coords = context.coords, colors = context.colors;
  const bytes = data2.data, rowSize = data2.width * 4;
  let tmp;
  if (coords[p1 + 1] > coords[p2 + 1]) {
    tmp = p1;
    p1 = p2;
    p2 = tmp;
    tmp = c1;
    c1 = c2;
    c2 = tmp;
  }
  if (coords[p2 + 1] > coords[p3 + 1]) {
    tmp = p2;
    p2 = p3;
    p3 = tmp;
    tmp = c2;
    c2 = c3;
    c3 = tmp;
  }
  if (coords[p1 + 1] > coords[p2 + 1]) {
    tmp = p1;
    p1 = p2;
    p2 = tmp;
    tmp = c1;
    c1 = c2;
    c2 = tmp;
  }
  const x1 = (coords[p1] + context.offsetX) * context.scaleX;
  const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;
  const x2 = (coords[p2] + context.offsetX) * context.scaleX;
  const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;
  const x3 = (coords[p3] + context.offsetX) * context.scaleX;
  const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;
  if (y1 >= y3) {
    return;
  }
  const c1r = colors[c1], c1g = colors[c1 + 1], c1b = colors[c1 + 2];
  const c2r = colors[c2], c2g = colors[c2 + 1], c2b = colors[c2 + 2];
  const c3r = colors[c3], c3g = colors[c3 + 1], c3b = colors[c3 + 2];
  const minY = Math.round(y1), maxY = Math.round(y3);
  let xa, car, cag, cab;
  let xb, cbr, cbg, cbb;
  for (let y4 = minY; y4 <= maxY; y4++) {
    if (y4 < y2) {
      const k22 = y4 < y1 ? 0 : (y1 - y4) / (y1 - y2);
      xa = x1 - (x1 - x2) * k22;
      car = c1r - (c1r - c2r) * k22;
      cag = c1g - (c1g - c2g) * k22;
      cab = c1b - (c1b - c2b) * k22;
    } else {
      let k22;
      if (y4 > y3) {
        k22 = 1;
      } else if (y2 === y3) {
        k22 = 0;
      } else {
        k22 = (y2 - y4) / (y2 - y3);
      }
      xa = x2 - (x2 - x3) * k22;
      car = c2r - (c2r - c3r) * k22;
      cag = c2g - (c2g - c3g) * k22;
      cab = c2b - (c2b - c3b) * k22;
    }
    let k2;
    if (y4 < y1) {
      k2 = 0;
    } else if (y4 > y3) {
      k2 = 1;
    } else {
      k2 = (y1 - y4) / (y1 - y3);
    }
    xb = x1 - (x1 - x3) * k2;
    cbr = c1r - (c1r - c3r) * k2;
    cbg = c1g - (c1g - c3g) * k2;
    cbb = c1b - (c1b - c3b) * k2;
    const x1_ = Math.round(Math.min(xa, xb));
    const x2_ = Math.round(Math.max(xa, xb));
    let j2 = rowSize * y4 + x1_ * 4;
    for (let x4 = x1_; x4 <= x2_; x4++) {
      k2 = (xa - x4) / (xa - xb);
      if (k2 < 0) {
        k2 = 0;
      } else if (k2 > 1) {
        k2 = 1;
      }
      bytes[j2++] = car - (car - cbr) * k2 | 0;
      bytes[j2++] = cag - (cag - cbg) * k2 | 0;
      bytes[j2++] = cab - (cab - cbb) * k2 | 0;
      bytes[j2++] = 255;
    }
  }
}
function drawFigure(data2, figure, context) {
  const ps = figure.coords;
  const cs = figure.colors;
  let i, ii;
  switch (figure.type) {
    case "lattice":
      const verticesPerRow = figure.verticesPerRow;
      const rows = Math.floor(ps.length / verticesPerRow) - 1;
      const cols = verticesPerRow - 1;
      for (i = 0; i < rows; i++) {
        let q2 = i * verticesPerRow;
        for (let j2 = 0; j2 < cols; j2++, q2++) {
          drawTriangle(data2, context, ps[q2], ps[q2 + 1], ps[q2 + verticesPerRow], cs[q2], cs[q2 + 1], cs[q2 + verticesPerRow]);
          drawTriangle(data2, context, ps[q2 + verticesPerRow + 1], ps[q2 + 1], ps[q2 + verticesPerRow], cs[q2 + verticesPerRow + 1], cs[q2 + 1], cs[q2 + verticesPerRow]);
        }
      }
      break;
    case "triangles":
      for (i = 0, ii = ps.length; i < ii; i += 3) {
        drawTriangle(data2, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);
      }
      break;
    default:
      throw new Error("illegal figure");
  }
}
function getShadingPattern(IR) {
  switch (IR[0]) {
    case "RadialAxial":
      return new RadialAxialShadingPattern(IR);
    case "Mesh":
      return new MeshShadingPattern(IR);
    case "Dummy":
      return new DummyShadingPattern();
  }
  throw new Error(`Unknown IR type: ${IR[0]}`);
}
function convertBlackAndWhiteToRGBA({
  src,
  srcPos = 0,
  dest,
  width,
  height,
  nonBlackColor = 4294967295,
  inverseDecode = false
}) {
  const black = util_FeatureTest.isLittleEndian ? 4278190080 : 255;
  const [zeroMapping, oneMapping] = inverseDecode ? [nonBlackColor, black] : [black, nonBlackColor];
  const widthInSource = width >> 3;
  const widthRemainder = width & 7;
  const srcLength = src.length;
  dest = new Uint32Array(dest.buffer);
  let destPos = 0;
  for (let i = 0; i < height; i++) {
    for (const max = srcPos + widthInSource; srcPos < max; srcPos++) {
      const elem2 = srcPos < srcLength ? src[srcPos] : 255;
      dest[destPos++] = elem2 & 128 ? oneMapping : zeroMapping;
      dest[destPos++] = elem2 & 64 ? oneMapping : zeroMapping;
      dest[destPos++] = elem2 & 32 ? oneMapping : zeroMapping;
      dest[destPos++] = elem2 & 16 ? oneMapping : zeroMapping;
      dest[destPos++] = elem2 & 8 ? oneMapping : zeroMapping;
      dest[destPos++] = elem2 & 4 ? oneMapping : zeroMapping;
      dest[destPos++] = elem2 & 2 ? oneMapping : zeroMapping;
      dest[destPos++] = elem2 & 1 ? oneMapping : zeroMapping;
    }
    if (widthRemainder === 0) {
      continue;
    }
    const elem = srcPos < srcLength ? src[srcPos++] : 255;
    for (let j2 = 0; j2 < widthRemainder; j2++) {
      dest[destPos++] = elem & 1 << 7 - j2 ? oneMapping : zeroMapping;
    }
  }
  return {
    srcPos,
    destPos
  };
}
function mirrorContextOperations(ctx, destCtx) {
  if (ctx._removeMirroring) {
    throw new Error("Context is already forwarding operations.");
  }
  ctx.__originalSave = ctx.save;
  ctx.__originalRestore = ctx.restore;
  ctx.__originalRotate = ctx.rotate;
  ctx.__originalScale = ctx.scale;
  ctx.__originalTranslate = ctx.translate;
  ctx.__originalTransform = ctx.transform;
  ctx.__originalSetTransform = ctx.setTransform;
  ctx.__originalResetTransform = ctx.resetTransform;
  ctx.__originalClip = ctx.clip;
  ctx.__originalMoveTo = ctx.moveTo;
  ctx.__originalLineTo = ctx.lineTo;
  ctx.__originalBezierCurveTo = ctx.bezierCurveTo;
  ctx.__originalRect = ctx.rect;
  ctx.__originalClosePath = ctx.closePath;
  ctx.__originalBeginPath = ctx.beginPath;
  ctx._removeMirroring = () => {
    ctx.save = ctx.__originalSave;
    ctx.restore = ctx.__originalRestore;
    ctx.rotate = ctx.__originalRotate;
    ctx.scale = ctx.__originalScale;
    ctx.translate = ctx.__originalTranslate;
    ctx.transform = ctx.__originalTransform;
    ctx.setTransform = ctx.__originalSetTransform;
    ctx.resetTransform = ctx.__originalResetTransform;
    ctx.clip = ctx.__originalClip;
    ctx.moveTo = ctx.__originalMoveTo;
    ctx.lineTo = ctx.__originalLineTo;
    ctx.bezierCurveTo = ctx.__originalBezierCurveTo;
    ctx.rect = ctx.__originalRect;
    ctx.closePath = ctx.__originalClosePath;
    ctx.beginPath = ctx.__originalBeginPath;
    delete ctx._removeMirroring;
  };
  ctx.save = function() {
    destCtx.save();
    this.__originalSave();
  };
  ctx.restore = function() {
    destCtx.restore();
    this.__originalRestore();
  };
  ctx.translate = function(x2, y2) {
    destCtx.translate(x2, y2);
    this.__originalTranslate(x2, y2);
  };
  ctx.scale = function(x2, y2) {
    destCtx.scale(x2, y2);
    this.__originalScale(x2, y2);
  };
  ctx.transform = function(a, b2, c, d, e, f) {
    destCtx.transform(a, b2, c, d, e, f);
    this.__originalTransform(a, b2, c, d, e, f);
  };
  ctx.setTransform = function(a, b2, c, d, e, f) {
    destCtx.setTransform(a, b2, c, d, e, f);
    this.__originalSetTransform(a, b2, c, d, e, f);
  };
  ctx.resetTransform = function() {
    destCtx.resetTransform();
    this.__originalResetTransform();
  };
  ctx.rotate = function(angle) {
    destCtx.rotate(angle);
    this.__originalRotate(angle);
  };
  ctx.clip = function(rule) {
    destCtx.clip(rule);
    this.__originalClip(rule);
  };
  ctx.moveTo = function(x2, y2) {
    destCtx.moveTo(x2, y2);
    this.__originalMoveTo(x2, y2);
  };
  ctx.lineTo = function(x2, y2) {
    destCtx.lineTo(x2, y2);
    this.__originalLineTo(x2, y2);
  };
  ctx.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x2, y2) {
    destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x2, y2);
    this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x2, y2);
  };
  ctx.rect = function(x2, y2, width, height) {
    destCtx.rect(x2, y2, width, height);
    this.__originalRect(x2, y2, width, height);
  };
  ctx.closePath = function() {
    destCtx.closePath();
    this.__originalClosePath();
  };
  ctx.beginPath = function() {
    destCtx.beginPath();
    this.__originalBeginPath();
  };
}
function drawImageAtIntegerCoords(ctx, srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH) {
  const [a, b2, c, d, tx, ty] = getCurrentTransform(ctx);
  if (b2 === 0 && c === 0) {
    const tlX = destX * a + tx;
    const rTlX = Math.round(tlX);
    const tlY = destY * d + ty;
    const rTlY = Math.round(tlY);
    const brX = (destX + destW) * a + tx;
    const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;
    const brY = (destY + destH) * d + ty;
    const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;
    ctx.setTransform(Math.sign(a), 0, 0, Math.sign(d), rTlX, rTlY);
    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rWidth, rHeight);
    ctx.setTransform(a, b2, c, d, tx, ty);
    return [rWidth, rHeight];
  }
  if (a === 0 && d === 0) {
    const tlX = destY * c + tx;
    const rTlX = Math.round(tlX);
    const tlY = destX * b2 + ty;
    const rTlY = Math.round(tlY);
    const brX = (destY + destH) * c + tx;
    const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;
    const brY = (destX + destW) * b2 + ty;
    const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;
    ctx.setTransform(0, Math.sign(b2), Math.sign(c), 0, rTlX, rTlY);
    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rHeight, rWidth);
    ctx.setTransform(a, b2, c, d, tx, ty);
    return [rHeight, rWidth];
  }
  ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH);
  const scaleX = Math.hypot(a, b2);
  const scaleY = Math.hypot(c, d);
  return [scaleX * destW, scaleY * destH];
}
function putBinaryImageData(ctx, imgData) {
  if (imgData instanceof ImageData) {
    ctx.putImageData(imgData, 0, 0);
    return;
  }
  const height = imgData.height, width = imgData.width;
  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;
  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
  let srcPos = 0, destPos;
  const src = imgData.data;
  const dest = chunkImgData.data;
  let i, j2, thisChunkHeight, elemsInThisChunk;
  if (imgData.kind === util_ImageKind.GRAYSCALE_1BPP) {
    const srcLength = src.byteLength;
    const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);
    const dest32DataLength = dest32.length;
    const fullSrcDiff = width + 7 >> 3;
    const white = 4294967295;
    const black = util_FeatureTest.isLittleEndian ? 4278190080 : 255;
    for (i = 0; i < totalChunks; i++) {
      thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
      destPos = 0;
      for (j2 = 0; j2 < thisChunkHeight; j2++) {
        const srcDiff = srcLength - srcPos;
        let k2 = 0;
        const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;
        const kEndUnrolled = kEnd & -8;
        let mask = 0;
        let srcByte = 0;
        for (; k2 < kEndUnrolled; k2 += 8) {
          srcByte = src[srcPos++];
          dest32[destPos++] = srcByte & 128 ? white : black;
          dest32[destPos++] = srcByte & 64 ? white : black;
          dest32[destPos++] = srcByte & 32 ? white : black;
          dest32[destPos++] = srcByte & 16 ? white : black;
          dest32[destPos++] = srcByte & 8 ? white : black;
          dest32[destPos++] = srcByte & 4 ? white : black;
          dest32[destPos++] = srcByte & 2 ? white : black;
          dest32[destPos++] = srcByte & 1 ? white : black;
        }
        for (; k2 < kEnd; k2++) {
          if (mask === 0) {
            srcByte = src[srcPos++];
            mask = 128;
          }
          dest32[destPos++] = srcByte & mask ? white : black;
          mask >>= 1;
        }
      }
      while (destPos < dest32DataLength) {
        dest32[destPos++] = 0;
      }
      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
    }
  } else if (imgData.kind === util_ImageKind.RGBA_32BPP) {
    j2 = 0;
    elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;
    for (i = 0; i < fullChunks; i++) {
      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
      srcPos += elemsInThisChunk;
      ctx.putImageData(chunkImgData, 0, j2);
      j2 += FULL_CHUNK_HEIGHT;
    }
    if (i < totalChunks) {
      elemsInThisChunk = width * partialChunkHeight * 4;
      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
      ctx.putImageData(chunkImgData, 0, j2);
    }
  } else if (imgData.kind === util_ImageKind.RGB_24BPP) {
    thisChunkHeight = FULL_CHUNK_HEIGHT;
    elemsInThisChunk = width * thisChunkHeight;
    for (i = 0; i < totalChunks; i++) {
      if (i >= fullChunks) {
        thisChunkHeight = partialChunkHeight;
        elemsInThisChunk = width * thisChunkHeight;
      }
      destPos = 0;
      for (j2 = elemsInThisChunk; j2--; ) {
        dest[destPos++] = src[srcPos++];
        dest[destPos++] = src[srcPos++];
        dest[destPos++] = src[srcPos++];
        dest[destPos++] = 255;
      }
      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
    }
  } else {
    throw new Error(`bad image kind: ${imgData.kind}`);
  }
}
function putBinaryImageMask(ctx, imgData) {
  if (imgData.bitmap) {
    ctx.drawImage(imgData.bitmap, 0, 0);
    return;
  }
  const height = imgData.height, width = imgData.width;
  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;
  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
  let srcPos = 0;
  const src = imgData.data;
  const dest = chunkImgData.data;
  for (let i = 0; i < totalChunks; i++) {
    const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
    ({
      srcPos
    } = convertBlackAndWhiteToRGBA({
      src,
      srcPos,
      dest,
      width,
      height: thisChunkHeight,
      nonBlackColor: 0
    }));
    ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
  }
}
function copyCtxState(sourceCtx, destCtx) {
  const properties = ["strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font", "filter"];
  for (const property of properties) {
    if (sourceCtx[property] !== void 0) {
      destCtx[property] = sourceCtx[property];
    }
  }
  if (sourceCtx.setLineDash !== void 0) {
    destCtx.setLineDash(sourceCtx.getLineDash());
    destCtx.lineDashOffset = sourceCtx.lineDashOffset;
  }
}
function resetCtxToDefault(ctx) {
  ctx.strokeStyle = ctx.fillStyle = "#000000";
  ctx.fillRule = "nonzero";
  ctx.globalAlpha = 1;
  ctx.lineWidth = 1;
  ctx.lineCap = "butt";
  ctx.lineJoin = "miter";
  ctx.miterLimit = 10;
  ctx.globalCompositeOperation = "source-over";
  ctx.font = "10px sans-serif";
  if (ctx.setLineDash !== void 0) {
    ctx.setLineDash([]);
    ctx.lineDashOffset = 0;
  }
  const {
    filter: filter5
  } = ctx;
  if (filter5 !== "none" && filter5 !== "") {
    ctx.filter = "none";
  }
}
function getImageSmoothingEnabled(transform, interpolate) {
  if (interpolate) {
    return true;
  }
  Util.singularValueDecompose2dScale(transform, XY);
  const actualScale = Math.fround(OutputScale.pixelRatio * PixelsPerInch.PDF_TO_CSS_UNITS);
  return XY[0] <= actualScale && XY[1] <= actualScale;
}
function getFilenameFromContentDispositionHeader(contentDisposition) {
  let needsEncodingFixup = true;
  let tmp = toParamRegExp("filename\\*", "i").exec(contentDisposition);
  if (tmp) {
    tmp = tmp[1];
    let filename = rfc2616unquote(tmp);
    filename = unescape(filename);
    filename = rfc5987decode(filename);
    filename = rfc2047decode(filename);
    return fixupEncoding(filename);
  }
  tmp = rfc2231getparam(contentDisposition);
  if (tmp) {
    const filename = rfc2047decode(tmp);
    return fixupEncoding(filename);
  }
  tmp = toParamRegExp("filename", "i").exec(contentDisposition);
  if (tmp) {
    tmp = tmp[1];
    let filename = rfc2616unquote(tmp);
    filename = rfc2047decode(filename);
    return fixupEncoding(filename);
  }
  function toParamRegExp(attributePattern, flags) {
    return new RegExp("(?:^|;)\\s*" + attributePattern + '\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)', flags);
  }
  function textdecode(encoding, value) {
    if (encoding) {
      if (!/^[\x00-\xFF]+$/.test(value)) {
        return value;
      }
      try {
        const decoder = new TextDecoder(encoding, {
          fatal: true
        });
        const buffer = stringToBytes(value);
        value = decoder.decode(buffer);
        needsEncodingFixup = false;
      } catch {
      }
    }
    return value;
  }
  function fixupEncoding(value) {
    if (needsEncodingFixup && /[\x80-\xff]/.test(value)) {
      value = textdecode("utf-8", value);
      if (needsEncodingFixup) {
        value = textdecode("iso-8859-1", value);
      }
    }
    return value;
  }
  function rfc2231getparam(contentDispositionStr) {
    const matches = [];
    let match;
    const iter = toParamRegExp("filename\\*((?!0\\d)\\d+)(\\*?)", "ig");
    while ((match = iter.exec(contentDispositionStr)) !== null) {
      let [, n, quot, part] = match;
      n = parseInt(n, 10);
      if (n in matches) {
        if (n === 0) {
          break;
        }
        continue;
      }
      matches[n] = [quot, part];
    }
    const parts = [];
    for (let n = 0; n < matches.length; ++n) {
      if (!(n in matches)) {
        break;
      }
      let [quot, part] = matches[n];
      part = rfc2616unquote(part);
      if (quot) {
        part = unescape(part);
        if (n === 0) {
          part = rfc5987decode(part);
        }
      }
      parts.push(part);
    }
    return parts.join("");
  }
  function rfc2616unquote(value) {
    if (value.startsWith('"')) {
      const parts = value.slice(1).split('\\"');
      for (let i = 0; i < parts.length; ++i) {
        const quotindex = parts[i].indexOf('"');
        if (quotindex !== -1) {
          parts[i] = parts[i].slice(0, quotindex);
          parts.length = i + 1;
        }
        parts[i] = parts[i].replaceAll(/\\(.)/g, "$1");
      }
      value = parts.join('"');
    }
    return value;
  }
  function rfc5987decode(extvalue) {
    const encodingend = extvalue.indexOf("'");
    if (encodingend === -1) {
      return extvalue;
    }
    const encoding = extvalue.slice(0, encodingend);
    const langvalue = extvalue.slice(encodingend + 1);
    const value = langvalue.replace(/^[^']*'/, "");
    return textdecode(encoding, value);
  }
  function rfc2047decode(value) {
    if (!value.startsWith("=?") || /[\x00-\x19\x80-\xff]/.test(value)) {
      return value;
    }
    return value.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g, function(matches, charset, encoding, text3) {
      if (encoding === "q" || encoding === "Q") {
        text3 = text3.replaceAll("_", " ");
        text3 = text3.replaceAll(/=([0-9a-fA-F]{2})/g, function(match, hex) {
          return String.fromCharCode(parseInt(hex, 16));
        });
        return textdecode(charset, text3);
      }
      try {
        text3 = atob(text3);
      } catch {
      }
      return textdecode(charset, text3);
    });
  }
  return "";
}
function createHeaders(isHttp, httpHeaders) {
  const headers = new Headers();
  if (!isHttp || !httpHeaders || typeof httpHeaders !== "object") {
    return headers;
  }
  for (const key in httpHeaders) {
    const val2 = httpHeaders[key];
    if (val2 !== void 0) {
      headers.append(key, val2);
    }
  }
  return headers;
}
function getResponseOrigin(url) {
  return URL.parse(url)?.origin ?? null;
}
function validateRangeRequestCapabilities({
  responseHeaders,
  isHttp,
  rangeChunkSize,
  disableRange
}) {
  const returnValues = {
    allowRangeRequests: false,
    suggestedLength: void 0
  };
  const length = parseInt(responseHeaders.get("Content-Length"), 10);
  if (!Number.isInteger(length)) {
    return returnValues;
  }
  returnValues.suggestedLength = length;
  if (length <= 2 * rangeChunkSize) {
    return returnValues;
  }
  if (disableRange || !isHttp) {
    return returnValues;
  }
  if (responseHeaders.get("Accept-Ranges") !== "bytes") {
    return returnValues;
  }
  const contentEncoding = responseHeaders.get("Content-Encoding") || "identity";
  if (contentEncoding !== "identity") {
    return returnValues;
  }
  returnValues.allowRangeRequests = true;
  return returnValues;
}
function extractFilenameFromHeader(responseHeaders) {
  const contentDisposition = responseHeaders.get("Content-Disposition");
  if (contentDisposition) {
    let filename = getFilenameFromContentDispositionHeader(contentDisposition);
    if (filename.includes("%")) {
      try {
        filename = decodeURIComponent(filename);
      } catch {
      }
    }
    if (isPdfFile(filename)) {
      return filename;
    }
  }
  return null;
}
function createResponseError(status, url) {
  return new ResponseException$1(`Unexpected server response (${status}) while retrieving PDF "${url}".`, status, status === 404 || status === 0 && url.startsWith("file:"));
}
function validateResponseStatus(status) {
  return status === 200 || status === 206;
}
function createFetchOptions(headers, withCredentials, abortController) {
  return {
    method: "GET",
    headers,
    signal: abortController.signal,
    mode: "cors",
    credentials: withCredentials ? "include" : "same-origin",
    redirect: "follow"
  };
}
function getArrayBuffer(val2) {
  if (val2 instanceof Uint8Array) {
    return val2.buffer;
  }
  if (val2 instanceof ArrayBuffer) {
    return val2;
  }
  warn(`getArrayBuffer - unexpected data format: ${val2}`);
  return new Uint8Array(val2).buffer;
}
function network_getArrayBuffer(xhr) {
  const data2 = xhr.response;
  if (typeof data2 !== "string") {
    return data2;
  }
  return stringToBytes(data2).buffer;
}
function parseUrlOrPath(sourceUrl) {
  if (urlRegex.test(sourceUrl)) {
    return new URL(sourceUrl);
  }
  const url = process.getBuiltinModule("url");
  return new URL(url.pathToFileURL(sourceUrl));
}
function getDocument(src = {}) {
  if (typeof src === "string" || src instanceof URL) {
    src = {
      url: src
    };
  } else if (src instanceof ArrayBuffer || ArrayBuffer.isView(src)) {
    src = {
      data: src
    };
  }
  const task = new PDFDocumentLoadingTask();
  const {
    docId
  } = task;
  const url = src.url ? getUrlProp(src.url) : null;
  const data2 = src.data ? getDataProp(src.data) : null;
  const httpHeaders = src.httpHeaders || null;
  const withCredentials = src.withCredentials === true;
  const password = src.password ?? null;
  const rangeTransport = src.range instanceof PDFDataRangeTransport ? src.range : null;
  const rangeChunkSize = Number.isInteger(src.rangeChunkSize) && src.rangeChunkSize > 0 ? src.rangeChunkSize : 2 ** 16;
  let worker = src.worker instanceof PDFWorker ? src.worker : null;
  const verbosity2 = src.verbosity;
  const docBaseUrl = typeof src.docBaseUrl === "string" && !isDataScheme(src.docBaseUrl) ? src.docBaseUrl : null;
  const cMapUrl = getFactoryUrlProp(src.cMapUrl);
  const cMapPacked = src.cMapPacked !== false;
  const CMapReaderFactory = src.CMapReaderFactory || (isNodeJS ? NodeCMapReaderFactory : DOMCMapReaderFactory);
  const iccUrl = getFactoryUrlProp(src.iccUrl);
  const standardFontDataUrl = getFactoryUrlProp(src.standardFontDataUrl);
  const StandardFontDataFactory = src.StandardFontDataFactory || (isNodeJS ? NodeStandardFontDataFactory : DOMStandardFontDataFactory);
  const wasmUrl = getFactoryUrlProp(src.wasmUrl);
  const WasmFactory = src.WasmFactory || (isNodeJS ? NodeWasmFactory : DOMWasmFactory);
  const ignoreErrors = src.stopAtErrors !== true;
  const maxImageSize = Number.isInteger(src.maxImageSize) && src.maxImageSize > -1 ? src.maxImageSize : -1;
  const isEvalSupported2 = src.isEvalSupported !== false;
  const isOffscreenCanvasSupported = typeof src.isOffscreenCanvasSupported === "boolean" ? src.isOffscreenCanvasSupported : !isNodeJS;
  const isImageDecoderSupported = typeof src.isImageDecoderSupported === "boolean" ? src.isImageDecoderSupported : !isNodeJS && (util_FeatureTest.platform.isFirefox || !globalThis.chrome);
  const canvasMaxAreaInBytes = Number.isInteger(src.canvasMaxAreaInBytes) ? src.canvasMaxAreaInBytes : -1;
  const disableFontFace = typeof src.disableFontFace === "boolean" ? src.disableFontFace : isNodeJS;
  const fontExtraProperties = src.fontExtraProperties === true;
  const enableXfa = src.enableXfa === true;
  const ownerDocument = src.ownerDocument || globalThis.document;
  const disableRange = src.disableRange === true;
  const disableStream = src.disableStream === true;
  const disableAutoFetch = src.disableAutoFetch === true;
  const pdfBug = src.pdfBug === true;
  const CanvasFactory = src.CanvasFactory || (isNodeJS ? NodeCanvasFactory : DOMCanvasFactory);
  const FilterFactory = src.FilterFactory || (isNodeJS ? NodeFilterFactory : DOMFilterFactory);
  const enableHWA = src.enableHWA === true;
  const useWasm = src.useWasm !== false;
  const length = rangeTransport ? rangeTransport.length : src.length ?? NaN;
  const useSystemFonts = typeof src.useSystemFonts === "boolean" ? src.useSystemFonts : !isNodeJS && !disableFontFace;
  const useWorkerFetch = typeof src.useWorkerFetch === "boolean" ? src.useWorkerFetch : !!(CMapReaderFactory === DOMCMapReaderFactory && StandardFontDataFactory === DOMStandardFontDataFactory && WasmFactory === DOMWasmFactory && cMapUrl && standardFontDataUrl && wasmUrl && isValidFetchUrl(cMapUrl, document.baseURI) && isValidFetchUrl(standardFontDataUrl, document.baseURI) && isValidFetchUrl(wasmUrl, document.baseURI));
  const styleElement = null;
  setVerbosityLevel(verbosity2);
  const transportFactory = {
    canvasFactory: new CanvasFactory({
      ownerDocument,
      enableHWA
    }),
    filterFactory: new FilterFactory({
      docId,
      ownerDocument
    }),
    cMapReaderFactory: useWorkerFetch ? null : new CMapReaderFactory({
      baseUrl: cMapUrl,
      isCompressed: cMapPacked
    }),
    standardFontDataFactory: useWorkerFetch ? null : new StandardFontDataFactory({
      baseUrl: standardFontDataUrl
    }),
    wasmFactory: useWorkerFetch ? null : new WasmFactory({
      baseUrl: wasmUrl
    })
  };
  if (!worker) {
    worker = PDFWorker.create({
      verbosity: verbosity2,
      port: GlobalWorkerOptions.workerPort
    });
    task._worker = worker;
  }
  const docParams = {
    docId,
    apiVersion: "5.4.296",
    data: data2,
    password,
    disableAutoFetch,
    rangeChunkSize,
    length,
    docBaseUrl,
    enableXfa,
    evaluatorOptions: {
      maxImageSize,
      disableFontFace,
      ignoreErrors,
      isEvalSupported: isEvalSupported2,
      isOffscreenCanvasSupported,
      isImageDecoderSupported,
      canvasMaxAreaInBytes,
      fontExtraProperties,
      useSystemFonts,
      useWasm,
      useWorkerFetch,
      cMapUrl,
      iccUrl,
      standardFontDataUrl,
      wasmUrl
    }
  };
  const transportParams = {
    ownerDocument,
    pdfBug,
    styleElement,
    loadingParams: {
      disableAutoFetch,
      enableXfa
    }
  };
  worker.promise.then(function() {
    if (task.destroyed) {
      throw new Error("Loading aborted");
    }
    if (worker.destroyed) {
      throw new Error("Worker was destroyed");
    }
    const workerIdPromise = worker.messageHandler.sendWithPromise("GetDocRequest", docParams, data2 ? [data2.buffer] : null);
    let networkStream;
    if (rangeTransport) {
      networkStream = new PDFDataTransportStream(rangeTransport, {
        disableRange,
        disableStream
      });
    } else if (!data2) {
      if (!url) {
        throw new Error("getDocument - no `url` parameter provided.");
      }
      const NetworkStream = isValidFetchUrl(url) ? PDFFetchStream : isNodeJS ? PDFNodeStream : PDFNetworkStream;
      networkStream = new NetworkStream({
        url,
        length,
        httpHeaders,
        withCredentials,
        rangeChunkSize,
        disableRange,
        disableStream
      });
    }
    return workerIdPromise.then((workerId) => {
      if (task.destroyed) {
        throw new Error("Loading aborted");
      }
      if (worker.destroyed) {
        throw new Error("Worker was destroyed");
      }
      const messageHandler = new MessageHandler(docId, workerId, worker.port);
      const transport = new WorkerTransport(messageHandler, task, networkStream, transportParams, transportFactory, enableHWA);
      task._transport = transport;
      messageHandler.send("Ready", null);
    });
  }).catch(task._capability.reject);
  return task;
}
function makeColorComp(n) {
  return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, "0");
}
function scaleAndClamp(x2) {
  return Math.max(0, Math.min(255, 255 * x2));
}
function getException(error) {
  if (error instanceof Error) {
    switch (error.name) {
      case "InvalidPDFException":
        return new InvalidPDFException2(error.message, error);
      case "PasswordException":
        return new PasswordException2(error.message, error);
      case "FormatError":
        return new FormatError2(error.message, error);
      case "UnknownErrorException":
        return new UnknownErrorException2(error.message, error.details, error);
      case "ResponseException":
        return new ResponseException2(error.message, error.status, error.missing, error);
      case "AbortException":
        return new AbortException2(error.message, error);
      default:
        return error;
    }
  }
  return new Error(String(error));
}
function setDefaultParseParameters(params) {
  params.lineThreshold = params?.lineThreshold ?? 4.6;
  params.cellThreshold = params?.cellThreshold ?? 7;
  params.cellSeparator = params?.cellSeparator ?? "	";
  params.lineEnforce = params?.lineEnforce ?? true;
  params.pageJoiner = params?.pageJoiner ?? "\n-- page_number of total_number --";
  params.imageThreshold = params?.imageThreshold ?? 80;
  params.imageDataUrl = params?.imageDataUrl ?? true;
  params.imageBuffer = params?.imageBuffer ?? true;
  params.scale = params?.scale ?? 1;
  return params;
}
var __typeError, __accessCheck, __privateGet, __privateAdd, __privateSet, __privateMethod, __privateWrapper, _capability, _messageHandler, _port, _webWorker, _fakeWorkerId, _isWorkerDisabled, _workerPorts, _PDFWorker_instances, resolve_fn, initializeFromPort_fn, initialize_fn, setupFakeWorker_fn, _PDFWorker_static, mainThreadWorkerMessageHandler_get, pdf_worker_min, __webpack_modules__, __webpack_module_cache__, isNodeJS, FONT_IDENTITY_MATRIX, LINE_FACTOR, RenderingIntentFlag, AnnotationMode, AnnotationEditorPrefix, AnnotationEditorType, AnnotationEditorParamsType, PermissionFlag, TextRenderingMode, util_ImageKind, AnnotationType, AnnotationBorderStyleType, VerbosityLevel, OPS, DrawOPS, PasswordResponses, verbosity, BaseException, PasswordException$1, UnknownErrorException$1, InvalidPDFException$1, ResponseException$1, FormatError$1, AbortException$1, util_FeatureTest, hexNumbers, Util, NormalizeRegex, NormalizationMap, AnnotationPrefix, XfaText, XfaLayer, SVG_NS, PixelsPerInch, PageViewport, RenderingCancelledException, StatTimer, PDFDateString, OutputScale, SupportedImageMimeTypes, ColorScheme, CSSConstants, contrastCache, EditorToolbar, FloatingToolbar, IdManager, ImageManager, CommandManager, KeyboardManager, ColorManager, AnnotationEditorUIManager, AltText, Comment3, TouchManager, AnnotationEditor, FakeEditor, SEED, MASK_HIGH, MASK_LOW, MurmurHash3_64, SerializableEmpty, AnnotationStorage, PrintAnnotationStorage, FontLoader, FontFaceObject, isRefProxy, isNameProxy, isValidExplicitDest, LoopbackPort, CallbackKind, StreamKind, MessageHandler, BaseCanvasFactory, DOMCanvasFactory, BaseCMapReaderFactory, DOMCMapReaderFactory, BaseFilterFactory, DOMFilterFactory, BaseStandardFontDataFactory, DOMStandardFontDataFactory, BaseWasmFactory, DOMWasmFactory, NodeFilterFactory, NodeCanvasFactory, NodeCMapReaderFactory, NodeStandardFontDataFactory, NodeWasmFactory, FORCED_DEPENDENCY_LABEL, floor, ceil, EMPTY_BBOX, BBoxReader, ensureDebugMetadata, CanvasDependencyTracker, CanvasNestedDependencyTracker, Dependencies, PathType, BaseShadingPattern, RadialAxialShadingPattern, MeshShadingPattern, DummyShadingPattern, PaintType, TilingPattern, MIN_FONT_SIZE, MAX_FONT_SIZE, EXECUTION_TIME, EXECUTION_STEPS, FULL_CHUNK_HEIGHT, SCALE_MATRIX, XY, MIN_MAX_INIT, CachedCanvases, CanvasExtraState, LINE_CAP_STYLES, LINE_JOIN_STYLES, NORMAL_CLIP, EO_CLIP, CanvasGraphics, CssFontInfo, SystemFontInfo, FontInfo, GlobalWorkerOptions, Metadata, INTERNAL, OptionalContentGroup, OptionalContentConfig, PDFDataTransportStream, PDFDataTransportStreamReader, PDFDataTransportStreamRangeReader, PDFFetchStream, PDFFetchStreamReader, PDFFetchStreamRangeReader, OK_RESPONSE, PARTIAL_CONTENT_RESPONSE, NetworkManager, PDFNetworkStream, PDFNetworkStreamFullRequestReader, PDFNetworkStreamRangeRequestReader, urlRegex, PDFNodeStream, PDFNodeStreamFsFullReader, PDFNodeStreamFsRangeReader, INITIAL_DATA, PDFObjects, MAX_TEXT_DIVS_TO_RENDER, DEFAULT_FONT_SIZE, TextLayer, RENDERING_CANCELLED_TIMEOUT, PDFDocumentLoadingTask, PDFDataRangeTransport, PDFDocumentProxy, PDFPageProxy, _PDFWorker, PDFWorker, WorkerTransport, RenderTask, InternalRenderTask, version, build, ColorPicker, BasicColorPicker, ColorConverters, BaseSVGFactory, DOMSVGFactory, annotation_layer_DEFAULT_FONT_SIZE, GetElementsByNameSet, TIMEZONE_OFFSET, AnnotationElementFactory, AnnotationElement, EditorAnnotationElement, LinkAnnotationElement, TextAnnotationElement, WidgetAnnotationElement, TextWidgetAnnotationElement, SignatureWidgetAnnotationElement, CheckboxWidgetAnnotationElement, RadioButtonWidgetAnnotationElement, PushButtonWidgetAnnotationElement, ChoiceWidgetAnnotationElement, PopupAnnotationElement, PopupElement, FreeTextAnnotationElement, LineAnnotationElement, SquareAnnotationElement, CircleAnnotationElement, PolylineAnnotationElement, PolygonAnnotationElement, CaretAnnotationElement, InkAnnotationElement, HighlightAnnotationElement, UnderlineAnnotationElement, SquigglyAnnotationElement, StrikeOutAnnotationElement, StampAnnotationElement, FileAttachmentAnnotationElement, AnnotationLayer, EOL_PATTERN, FreeTextEditor, Outline, FreeDrawOutliner, FreeDrawOutline, HighlightOutliner, HighlightOutline, FreeHighlightOutliner, FreeHighlightOutline, HighlightEditor, DrawingOptions, DrawingEditor, InkDrawOutliner, InkDrawOutline, InkDrawingOptions, InkEditor, ContourDrawOutline, BASE_HEADER_LENGTH, POINTS_PROPERTIES_NUMBER, SignatureExtractor, SignatureOptions, DrawnSignatureOptions, SignatureEditor, StampEditor, AnnotationEditorLayer, DrawLayer, pdfjs, InvalidPDFException2, PasswordException2, FormatError2, UnknownErrorException2, ResponseException2, AbortException2, Shape, Point, LineDirection, Line, TableData, Table, LineStore, Rectangle, ImageResult, XMP_DATE_PROPERTIES, InfoResult, PathGeometry, ScreenshotResult, TableResult, TextResult, PDFParse;
var init_pdf_parse_es = __esm({
  "node_modules/pdf-parse/dist/pdf-parse/web/pdf-parse.es.js"() {
    __typeError = (msg) => {
      throw TypeError(msg);
    };
    __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
    __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
    __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
    __privateWrapper = (obj, member, setter, getter) => ({
      set _(value) {
        __privateSet(obj, member, value, setter);
      },
      get _() {
        return __privateGet(obj, member, getter);
      }
    });
    pdf_worker_min = "data:text/javascript;base64,";
    __webpack_modules__ = {
      /***/
      34: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var isCallable = __webpack_require__2(4901);
          module.exports = function(it) {
            return typeof it == "object" ? it !== null : isCallable(it);
          };
        }
      ),
      /***/
      81: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var call = __webpack_require__2(9565);
          var aCallable = __webpack_require__2(9306);
          var anObject = __webpack_require__2(8551);
          var tryToString = __webpack_require__2(6823);
          var getIteratorMethod = __webpack_require__2(851);
          var $TypeError = TypeError;
          module.exports = function(argument, usingIterator) {
            var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
            if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
            throw new $TypeError(tryToString(argument) + " is not iterable");
          };
        }
      ),
      /***/
      116: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var call = __webpack_require__2(9565);
          var iterate = __webpack_require__2(2652);
          var aCallable = __webpack_require__2(9306);
          var anObject = __webpack_require__2(8551);
          var getIteratorDirect = __webpack_require__2(1767);
          var iteratorClose = __webpack_require__2(9539);
          var iteratorHelperWithoutClosingOnEarlyError = __webpack_require__2(4549);
          var findWithoutClosingOnEarlyError = iteratorHelperWithoutClosingOnEarlyError("find", TypeError);
          $3({ target: "Iterator", proto: true, real: true, forced: findWithoutClosingOnEarlyError }, {
            find: function find4(predicate) {
              anObject(this);
              try {
                aCallable(predicate);
              } catch (error) {
                iteratorClose(this, "throw", error);
              }
              if (findWithoutClosingOnEarlyError) return call(findWithoutClosingOnEarlyError, this, predicate);
              var record = getIteratorDirect(this);
              var counter = 0;
              return iterate(record, function(value, stop) {
                if (predicate(value, counter++)) return stop(value);
              }, { IS_RECORD: true, INTERRUPTED: true }).result;
            }
          });
        }
      ),
      /***/
      283: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(9504);
          var fails = __webpack_require__2(9039);
          var isCallable = __webpack_require__2(4901);
          var hasOwn2 = __webpack_require__2(9297);
          var DESCRIPTORS = __webpack_require__2(3724);
          var CONFIGURABLE_FUNCTION_NAME = __webpack_require__2(350).CONFIGURABLE;
          var inspectSource = __webpack_require__2(3706);
          var InternalStateModule = __webpack_require__2(1181);
          var enforceInternalState = InternalStateModule.enforce;
          var getInternalState = InternalStateModule.get;
          var $String = String;
          var defineProperty = Object.defineProperty;
          var stringSlice = uncurryThis("".slice);
          var replace = uncurryThis("".replace);
          var join = uncurryThis([].join);
          var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function() {
            return defineProperty(function() {
            }, "length", { value: 8 }).length !== 8;
          });
          var TEMPLATE = String(String).split("String");
          var makeBuiltIn = module.exports = function(value, name, options) {
            if (stringSlice($String(name), 0, 7) === "Symbol(") {
              name = "[" + replace($String(name), /^Symbol\(([^)]*)\).*$/, "$1") + "]";
            }
            if (options && options.getter) name = "get " + name;
            if (options && options.setter) name = "set " + name;
            if (!hasOwn2(value, "name") || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
              if (DESCRIPTORS) defineProperty(value, "name", { value: name, configurable: true });
              else value.name = name;
            }
            if (CONFIGURABLE_LENGTH && options && hasOwn2(options, "arity") && value.length !== options.arity) {
              defineProperty(value, "length", { value: options.arity });
            }
            try {
              if (options && hasOwn2(options, "constructor") && options.constructor) {
                if (DESCRIPTORS) defineProperty(value, "prototype", { writable: false });
              } else if (value.prototype) value.prototype = void 0;
            } catch (error) {
            }
            var state = enforceInternalState(value);
            if (!hasOwn2(state, "source")) {
              state.source = join(TEMPLATE, typeof name == "string" ? name : "");
            }
            return value;
          };
          Function.prototype.toString = makeBuiltIn(function toString4() {
            return isCallable(this) && getInternalState(this).source || inspectSource(this);
          }, "toString");
        }
      ),
      /***/
      350: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var DESCRIPTORS = __webpack_require__2(3724);
          var hasOwn2 = __webpack_require__2(9297);
          var FunctionPrototype = Function.prototype;
          var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
          var EXISTS = hasOwn2(FunctionPrototype, "name");
          var PROPER = EXISTS && function something() {
          }.name === "something";
          var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
          module.exports = {
            EXISTS,
            PROPER,
            CONFIGURABLE
          };
        }
      ),
      /***/
      397: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var getBuiltIn = __webpack_require__2(7751);
          module.exports = getBuiltIn("document", "documentElement");
        }
      ),
      /***/
      421: (
        /***/
        (module) => {
          module.exports = {};
        }
      ),
      /***/
      456: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var globalThis2 = __webpack_require__2(4576);
          var uncurryThis = __webpack_require__2(9504);
          var anUint8Array = __webpack_require__2(4154);
          var notDetached = __webpack_require__2(5169);
          var numberToString = uncurryThis(1.1.toString);
          var Uint8Array2 = globalThis2.Uint8Array;
          var INCORRECT_BEHAVIOR_OR_DOESNT_EXISTS = !Uint8Array2 || !Uint8Array2.prototype.toHex || !function() {
            try {
              var target = new Uint8Array2([255, 255, 255, 255, 255, 255, 255, 255]);
              return target.toHex() === "ffffffffffffffff";
            } catch (error) {
              return false;
            }
          }();
          if (Uint8Array2) $3({ target: "Uint8Array", proto: true, forced: INCORRECT_BEHAVIOR_OR_DOESNT_EXISTS }, {
            toHex: function toHex() {
              anUint8Array(this);
              notDetached(this.buffer);
              var result = "";
              for (var i = 0, length = this.length; i < length; i++) {
                var hex = numberToString(this[i], 16);
                result += hex.length === 1 ? "0" + hex : hex;
              }
              return result;
            }
          });
        }
      ),
      /***/
      507: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var call = __webpack_require__2(9565);
          module.exports = function(record, fn, ITERATOR_INSTEAD_OF_RECORD) {
            var iterator2 = ITERATOR_INSTEAD_OF_RECORD ? record : record.iterator;
            var next2 = record.next;
            var step, result;
            while (!(step = call(next2, iterator2)).done) {
              result = fn(step.value);
              if (result !== void 0) return result;
            }
          };
        }
      ),
      /***/
      531: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var call = __webpack_require__2(9565);
          var aCallable = __webpack_require__2(9306);
          var anObject = __webpack_require__2(8551);
          var getIteratorDirect = __webpack_require__2(1767);
          var getIteratorFlattenable = __webpack_require__2(8646);
          var createIteratorProxy = __webpack_require__2(9462);
          var iteratorClose = __webpack_require__2(9539);
          var IS_PURE = __webpack_require__2(6395);
          var iteratorHelperThrowsOnInvalidIterator = __webpack_require__2(684);
          var iteratorHelperWithoutClosingOnEarlyError = __webpack_require__2(4549);
          var FLAT_MAP_WITHOUT_THROWING_ON_INVALID_ITERATOR = !IS_PURE && !iteratorHelperThrowsOnInvalidIterator("flatMap", function() {
          });
          var flatMapWithoutClosingOnEarlyError = !IS_PURE && !FLAT_MAP_WITHOUT_THROWING_ON_INVALID_ITERATOR && iteratorHelperWithoutClosingOnEarlyError("flatMap", TypeError);
          var FORCED = IS_PURE || FLAT_MAP_WITHOUT_THROWING_ON_INVALID_ITERATOR || flatMapWithoutClosingOnEarlyError;
          var IteratorProxy = createIteratorProxy(function() {
            var iterator2 = this.iterator;
            var mapper = this.mapper;
            var result, inner;
            while (true) {
              if (inner = this.inner) try {
                result = anObject(call(inner.next, inner.iterator));
                if (!result.done) return result.value;
                this.inner = null;
              } catch (error) {
                iteratorClose(iterator2, "throw", error);
              }
              result = anObject(call(this.next, iterator2));
              if (this.done = !!result.done) return;
              try {
                this.inner = getIteratorFlattenable(mapper(result.value, this.counter++), false);
              } catch (error) {
                iteratorClose(iterator2, "throw", error);
              }
            }
          });
          $3({ target: "Iterator", proto: true, real: true, forced: FORCED }, {
            flatMap: function flatMap(mapper) {
              anObject(this);
              try {
                aCallable(mapper);
              } catch (error) {
                iteratorClose(this, "throw", error);
              }
              if (flatMapWithoutClosingOnEarlyError) return call(flatMapWithoutClosingOnEarlyError, this, mapper);
              return new IteratorProxy(getIteratorDirect(this), {
                mapper,
                inner: null
              });
            }
          });
        }
      ),
      /***/
      616: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var fails = __webpack_require__2(9039);
          module.exports = !fails(function() {
            var test2 = function() {
            }.bind();
            return typeof test2 != "function" || test2.hasOwnProperty("prototype");
          });
        }
      ),
      /***/
      655: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var classof = __webpack_require__2(6955);
          var $String = String;
          module.exports = function(argument) {
            if (classof(argument) === "Symbol") throw new TypeError("Cannot convert a Symbol value to a string");
            return $String(argument);
          };
        }
      ),
      /***/
      679: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var isPrototypeOf = __webpack_require__2(1625);
          var $TypeError = TypeError;
          module.exports = function(it, Prototype) {
            if (isPrototypeOf(Prototype, it)) return it;
            throw new $TypeError("Incorrect invocation");
          };
        }
      ),
      /***/
      684: (
        /***/
        (module) => {
          module.exports = function(methodName, argument) {
            var method = typeof Iterator == "function" && Iterator.prototype[methodName];
            if (method) try {
              method.call({ next: null }, argument).next();
            } catch (error) {
              return true;
            }
          };
        }
      ),
      /***/
      741: (
        /***/
        (module) => {
          var ceil2 = Math.ceil;
          var floor2 = Math.floor;
          module.exports = Math.trunc || function trunc(x2) {
            var n = +x2;
            return (n > 0 ? floor2 : ceil2)(n);
          };
        }
      ),
      /***/
      757: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var getBuiltIn = __webpack_require__2(7751);
          var isCallable = __webpack_require__2(4901);
          var isPrototypeOf = __webpack_require__2(1625);
          var USE_SYMBOL_AS_UID = __webpack_require__2(7040);
          var $Object = Object;
          module.exports = USE_SYMBOL_AS_UID ? function(it) {
            return typeof it == "symbol";
          } : function(it) {
            var $Symbol = getBuiltIn("Symbol");
            return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
          };
        }
      ),
      /***/
      851: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var classof = __webpack_require__2(6955);
          var getMethod = __webpack_require__2(5966);
          var isNullOrUndefined = __webpack_require__2(4117);
          var Iterators = __webpack_require__2(6269);
          var wellKnownSymbol = __webpack_require__2(8227);
          var ITERATOR = wellKnownSymbol("iterator");
          module.exports = function(it) {
            if (!isNullOrUndefined(it)) return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
          };
        }
      ),
      /***/
      944: (
        /***/
        (module) => {
          var $TypeError = TypeError;
          module.exports = function(options) {
            var alphabet = options && options.alphabet;
            if (alphabet === void 0 || alphabet === "base64" || alphabet === "base64url") return alphabet || "base64";
            throw new $TypeError("Incorrect `alphabet` option");
          };
        }
      ),
      /***/
      1072: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var internalObjectKeys = __webpack_require__2(1828);
          var enumBugKeys = __webpack_require__2(8727);
          module.exports = Object.keys || function keys(O) {
            return internalObjectKeys(O, enumBugKeys);
          };
        }
      ),
      /***/
      1103: (
        /***/
        (module) => {
          module.exports = function(exec) {
            try {
              return { error: false, value: exec() };
            } catch (error) {
              return { error: true, value: error };
            }
          };
        }
      ),
      /***/
      1108: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var classof = __webpack_require__2(6955);
          module.exports = function(it) {
            var klass = classof(it);
            return klass === "BigInt64Array" || klass === "BigUint64Array";
          };
        }
      ),
      /***/
      1148: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var call = __webpack_require__2(9565);
          var iterate = __webpack_require__2(2652);
          var aCallable = __webpack_require__2(9306);
          var anObject = __webpack_require__2(8551);
          var getIteratorDirect = __webpack_require__2(1767);
          var iteratorClose = __webpack_require__2(9539);
          var iteratorHelperWithoutClosingOnEarlyError = __webpack_require__2(4549);
          var everyWithoutClosingOnEarlyError = iteratorHelperWithoutClosingOnEarlyError("every", TypeError);
          $3({ target: "Iterator", proto: true, real: true, forced: everyWithoutClosingOnEarlyError }, {
            every: function every(predicate) {
              anObject(this);
              try {
                aCallable(predicate);
              } catch (error) {
                iteratorClose(this, "throw", error);
              }
              if (everyWithoutClosingOnEarlyError) return call(everyWithoutClosingOnEarlyError, this, predicate);
              var record = getIteratorDirect(this);
              var counter = 0;
              return !iterate(record, function(value, stop) {
                if (!predicate(value, counter++)) return stop();
              }, { IS_RECORD: true, INTERRUPTED: true }).stopped;
            }
          });
        }
      ),
      /***/
      1181: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var NATIVE_WEAK_MAP = __webpack_require__2(8622);
          var globalThis2 = __webpack_require__2(4576);
          var isObject2 = __webpack_require__2(34);
          var createNonEnumerableProperty = __webpack_require__2(6699);
          var hasOwn2 = __webpack_require__2(9297);
          var shared = __webpack_require__2(7629);
          var sharedKey = __webpack_require__2(6119);
          var hiddenKeys = __webpack_require__2(421);
          var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
          var TypeError2 = globalThis2.TypeError;
          var WeakMap2 = globalThis2.WeakMap;
          var set, get2, has2;
          var enforce = function(it) {
            return has2(it) ? get2(it) : set(it, {});
          };
          var getterFor = function(TYPE) {
            return function(it) {
              var state;
              if (!isObject2(it) || (state = get2(it)).type !== TYPE) {
                throw new TypeError2("Incompatible receiver, " + TYPE + " required");
              }
              return state;
            };
          };
          if (NATIVE_WEAK_MAP || shared.state) {
            var store = shared.state || (shared.state = new WeakMap2());
            store.get = store.get;
            store.has = store.has;
            store.set = store.set;
            set = function(it, metadata) {
              if (store.has(it)) throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
              metadata.facade = it;
              store.set(it, metadata);
              return metadata;
            };
            get2 = function(it) {
              return store.get(it) || {};
            };
            has2 = function(it) {
              return store.has(it);
            };
          } else {
            var STATE = sharedKey("state");
            hiddenKeys[STATE] = true;
            set = function(it, metadata) {
              if (hasOwn2(it, STATE)) throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
              metadata.facade = it;
              createNonEnumerableProperty(it, STATE, metadata);
              return metadata;
            };
            get2 = function(it) {
              return hasOwn2(it, STATE) ? it[STATE] : {};
            };
            has2 = function(it) {
              return hasOwn2(it, STATE);
            };
          }
          module.exports = {
            set,
            get: get2,
            has: has2,
            enforce,
            getterFor
          };
        }
      ),
      /***/
      1291: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var trunc = __webpack_require__2(741);
          module.exports = function(argument) {
            var number = +argument;
            return number !== number || number === 0 ? 0 : trunc(number);
          };
        }
      ),
      /***/
      1385: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var iteratorClose = __webpack_require__2(9539);
          module.exports = function(iters, kind, value) {
            for (var i = iters.length - 1; i >= 0; i--) {
              if (iters[i] === void 0) continue;
              try {
                value = iteratorClose(iters[i].iterator, kind, value);
              } catch (error) {
                kind = "throw";
                value = error;
              }
            }
            if (kind === "throw") throw value;
            return value;
          };
        }
      ),
      /***/
      1548: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var fails = __webpack_require__2(9039);
          var V8 = __webpack_require__2(9519);
          var ENVIRONMENT = __webpack_require__2(4215);
          var structuredClone2 = globalThis2.structuredClone;
          module.exports = !!structuredClone2 && !fails(function() {
            if (ENVIRONMENT === "DENO" && V8 > 92 || ENVIRONMENT === "NODE" && V8 > 94 || ENVIRONMENT === "BROWSER" && V8 > 97) return false;
            var buffer = new ArrayBuffer(8);
            var clone2 = structuredClone2(buffer, { transfer: [buffer] });
            return buffer.byteLength !== 0 || clone2.byteLength !== 8;
          });
        }
      ),
      /***/
      1549: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          __webpack_require__2(6632);
        }
      ),
      /***/
      1625: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(9504);
          module.exports = uncurryThis({}.isPrototypeOf);
        }
      ),
      /***/
      1689: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var globalThis2 = __webpack_require__2(4576);
          var apply = __webpack_require__2(8745);
          var slice2 = __webpack_require__2(7680);
          var newPromiseCapabilityModule = __webpack_require__2(6043);
          var aCallable = __webpack_require__2(9306);
          var perform = __webpack_require__2(1103);
          var Promise2 = globalThis2.Promise;
          var ACCEPT_ARGUMENTS = false;
          var FORCED = !Promise2 || !Promise2["try"] || perform(function() {
            Promise2["try"](function(argument) {
              ACCEPT_ARGUMENTS = argument === 8;
            }, 8);
          }).error || !ACCEPT_ARGUMENTS;
          $3({ target: "Promise", stat: true, forced: FORCED }, {
            "try": function(callbackfn) {
              var args = arguments.length > 1 ? slice2(arguments, 1) : [];
              var promiseCapability = newPromiseCapabilityModule.f(this);
              var result = perform(function() {
                return apply(aCallable(callbackfn), void 0, args);
              });
              (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);
              return promiseCapability.promise;
            }
          });
        }
      ),
      /***/
      1698: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var union = __webpack_require__2(4204);
          var setMethodGetKeysBeforeCloning = __webpack_require__2(9835);
          var setMethodAcceptSetLike = __webpack_require__2(4916);
          var FORCED = !setMethodAcceptSetLike("union") || !setMethodGetKeysBeforeCloning("union");
          $3({ target: "Set", proto: true, real: true, forced: FORCED }, {
            union
          });
        }
      ),
      /***/
      1701: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var call = __webpack_require__2(9565);
          var aCallable = __webpack_require__2(9306);
          var anObject = __webpack_require__2(8551);
          var getIteratorDirect = __webpack_require__2(1767);
          var createIteratorProxy = __webpack_require__2(9462);
          var callWithSafeIterationClosing = __webpack_require__2(6319);
          var iteratorClose = __webpack_require__2(9539);
          var iteratorHelperThrowsOnInvalidIterator = __webpack_require__2(684);
          var iteratorHelperWithoutClosingOnEarlyError = __webpack_require__2(4549);
          var IS_PURE = __webpack_require__2(6395);
          var MAP_WITHOUT_THROWING_ON_INVALID_ITERATOR = !IS_PURE && !iteratorHelperThrowsOnInvalidIterator("map", function() {
          });
          var mapWithoutClosingOnEarlyError = !IS_PURE && !MAP_WITHOUT_THROWING_ON_INVALID_ITERATOR && iteratorHelperWithoutClosingOnEarlyError("map", TypeError);
          var FORCED = IS_PURE || MAP_WITHOUT_THROWING_ON_INVALID_ITERATOR || mapWithoutClosingOnEarlyError;
          var IteratorProxy = createIteratorProxy(function() {
            var iterator2 = this.iterator;
            var result = anObject(call(this.next, iterator2));
            var done = this.done = !!result.done;
            if (!done) return callWithSafeIterationClosing(iterator2, this.mapper, [result.value, this.counter++], true);
          });
          $3({ target: "Iterator", proto: true, real: true, forced: FORCED }, {
            map: function map2(mapper) {
              anObject(this);
              try {
                aCallable(mapper);
              } catch (error) {
                iteratorClose(this, "throw", error);
              }
              if (mapWithoutClosingOnEarlyError) return call(mapWithoutClosingOnEarlyError, this, mapper);
              return new IteratorProxy(getIteratorDirect(this), {
                mapper
              });
            }
          });
        }
      ),
      /***/
      1767: (
        /***/
        (module) => {
          module.exports = function(obj) {
            return {
              iterator: obj,
              next: obj.next,
              done: false
            };
          };
        }
      ),
      /***/
      1828: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(9504);
          var hasOwn2 = __webpack_require__2(9297);
          var toIndexedObject = __webpack_require__2(5397);
          var indexOf = __webpack_require__2(9617).indexOf;
          var hiddenKeys = __webpack_require__2(421);
          var push = uncurryThis([].push);
          module.exports = function(object, names) {
            var O = toIndexedObject(object);
            var i = 0;
            var result = [];
            var key;
            for (key in O) !hasOwn2(hiddenKeys, key) && hasOwn2(O, key) && push(result, key);
            while (names.length > i) if (hasOwn2(O, key = names[i++])) {
              ~indexOf(result, key) || push(result, key);
            }
            return result;
          };
        }
      ),
      /***/
      2106: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var makeBuiltIn = __webpack_require__2(283);
          var defineProperty = __webpack_require__2(4913);
          module.exports = function(target, name, descriptor) {
            if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });
            if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });
            return defineProperty.f(target, name, descriptor);
          };
        }
      ),
      /***/
      2140: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var wellKnownSymbol = __webpack_require__2(8227);
          var TO_STRING_TAG = wellKnownSymbol("toStringTag");
          var test2 = {};
          test2[TO_STRING_TAG] = "z";
          module.exports = String(test2) === "[object z]";
        }
      ),
      /***/
      2195: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(9504);
          var toString4 = uncurryThis({}.toString);
          var stringSlice = uncurryThis("".slice);
          module.exports = function(it) {
            return stringSlice(toString4(it), 8, -1);
          };
        }
      ),
      /***/
      2211: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var fails = __webpack_require__2(9039);
          module.exports = !fails(function() {
            function F2() {
            }
            F2.prototype.constructor = null;
            return Object.getPrototypeOf(new F2()) !== F2.prototype;
          });
        }
      ),
      /***/
      2303: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var uncurryThis = __webpack_require__2(9504);
          var Uint8Array2 = globalThis2.Uint8Array;
          var SyntaxError2 = globalThis2.SyntaxError;
          var parseInt2 = globalThis2.parseInt;
          var min = Math.min;
          var NOT_HEX = /[^\da-f]/i;
          var exec = uncurryThis(NOT_HEX.exec);
          var stringSlice = uncurryThis("".slice);
          module.exports = function(string, into) {
            var stringLength = string.length;
            if (stringLength % 2 !== 0) throw new SyntaxError2("String should be an even number of characters");
            var maxLength = into ? min(into.length, stringLength / 2) : stringLength / 2;
            var bytes = into || new Uint8Array2(maxLength);
            var read = 0;
            var written = 0;
            while (written < maxLength) {
              var hexits = stringSlice(string, read, read += 2);
              if (exec(NOT_HEX, hexits)) throw new SyntaxError2("String should only contain hex characters");
              bytes[written++] = parseInt2(hexits, 16);
            }
            return { bytes, read };
          };
        }
      ),
      /***/
      2360: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var anObject = __webpack_require__2(8551);
          var definePropertiesModule = __webpack_require__2(6801);
          var enumBugKeys = __webpack_require__2(8727);
          var hiddenKeys = __webpack_require__2(421);
          var html3 = __webpack_require__2(397);
          var documentCreateElement = __webpack_require__2(4055);
          var sharedKey = __webpack_require__2(6119);
          var GT = ">";
          var LT = "<";
          var PROTOTYPE = "prototype";
          var SCRIPT = "script";
          var IE_PROTO = sharedKey("IE_PROTO");
          var EmptyConstructor = function() {
          };
          var scriptTag = function(content) {
            return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
          };
          var NullProtoObjectViaActiveX = function(activeXDocument2) {
            activeXDocument2.write(scriptTag(""));
            activeXDocument2.close();
            var temp = activeXDocument2.parentWindow.Object;
            activeXDocument2 = null;
            return temp;
          };
          var NullProtoObjectViaIFrame = function() {
            var iframe = documentCreateElement("iframe");
            var JS = "java" + SCRIPT + ":";
            var iframeDocument;
            iframe.style.display = "none";
            html3.appendChild(iframe);
            iframe.src = String(JS);
            iframeDocument = iframe.contentWindow.document;
            iframeDocument.open();
            iframeDocument.write(scriptTag("document.F=Object"));
            iframeDocument.close();
            return iframeDocument.F;
          };
          var activeXDocument;
          var NullProtoObject = function() {
            try {
              activeXDocument = new ActiveXObject("htmlfile");
            } catch (error) {
            }
            NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
            var length = enumBugKeys.length;
            while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
            return NullProtoObject();
          };
          hiddenKeys[IE_PROTO] = true;
          module.exports = Object.create || function create(O, Properties) {
            var result;
            if (O !== null) {
              EmptyConstructor[PROTOTYPE] = anObject(O);
              result = new EmptyConstructor();
              EmptyConstructor[PROTOTYPE] = null;
              result[IE_PROTO] = O;
            } else result = NullProtoObject();
            return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
          };
        }
      ),
      /***/
      2475: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var isSupersetOf = __webpack_require__2(8527);
          var setMethodAcceptSetLike = __webpack_require__2(4916);
          var INCORRECT = !setMethodAcceptSetLike("isSupersetOf", function(result) {
            return !result;
          });
          $3({ target: "Set", proto: true, real: true, forced: INCORRECT }, {
            isSupersetOf
          });
        }
      ),
      /***/
      2489: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var call = __webpack_require__2(9565);
          var aCallable = __webpack_require__2(9306);
          var anObject = __webpack_require__2(8551);
          var getIteratorDirect = __webpack_require__2(1767);
          var createIteratorProxy = __webpack_require__2(9462);
          var callWithSafeIterationClosing = __webpack_require__2(6319);
          var IS_PURE = __webpack_require__2(6395);
          var iteratorClose = __webpack_require__2(9539);
          var iteratorHelperThrowsOnInvalidIterator = __webpack_require__2(684);
          var iteratorHelperWithoutClosingOnEarlyError = __webpack_require__2(4549);
          var FILTER_WITHOUT_THROWING_ON_INVALID_ITERATOR = !IS_PURE && !iteratorHelperThrowsOnInvalidIterator("filter", function() {
          });
          var filterWithoutClosingOnEarlyError = !IS_PURE && !FILTER_WITHOUT_THROWING_ON_INVALID_ITERATOR && iteratorHelperWithoutClosingOnEarlyError("filter", TypeError);
          var FORCED = IS_PURE || FILTER_WITHOUT_THROWING_ON_INVALID_ITERATOR || filterWithoutClosingOnEarlyError;
          var IteratorProxy = createIteratorProxy(function() {
            var iterator2 = this.iterator;
            var predicate = this.predicate;
            var next2 = this.next;
            var result, done, value;
            while (true) {
              result = anObject(call(next2, iterator2));
              done = this.done = !!result.done;
              if (done) return;
              value = result.value;
              if (callWithSafeIterationClosing(iterator2, predicate, [value, this.counter++], true)) return value;
            }
          });
          $3({ target: "Iterator", proto: true, real: true, forced: FORCED }, {
            filter: function filter5(predicate) {
              anObject(this);
              try {
                aCallable(predicate);
              } catch (error) {
                iteratorClose(this, "throw", error);
              }
              if (filterWithoutClosingOnEarlyError) return call(filterWithoutClosingOnEarlyError, this, predicate);
              return new IteratorProxy(getIteratorDirect(this), {
                predicate
              });
            }
          });
        }
      ),
      /***/
      2529: (
        /***/
        (module) => {
          module.exports = function(value, done) {
            return { value, done };
          };
        }
      ),
      /***/
      2603: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var toString4 = __webpack_require__2(655);
          module.exports = function(argument, $default) {
            return argument === void 0 ? arguments.length < 2 ? "" : $default : toString4(argument);
          };
        }
      ),
      /***/
      2652: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var bind2 = __webpack_require__2(6080);
          var call = __webpack_require__2(9565);
          var anObject = __webpack_require__2(8551);
          var tryToString = __webpack_require__2(6823);
          var isArrayIteratorMethod = __webpack_require__2(4209);
          var lengthOfArrayLike = __webpack_require__2(6198);
          var isPrototypeOf = __webpack_require__2(1625);
          var getIterator = __webpack_require__2(81);
          var getIteratorMethod = __webpack_require__2(851);
          var iteratorClose = __webpack_require__2(9539);
          var $TypeError = TypeError;
          var Result = function(stopped, result) {
            this.stopped = stopped;
            this.result = result;
          };
          var ResultPrototype = Result.prototype;
          module.exports = function(iterable, unboundFunction, options) {
            var that = options && options.that;
            var AS_ENTRIES = !!(options && options.AS_ENTRIES);
            var IS_RECORD = !!(options && options.IS_RECORD);
            var IS_ITERATOR = !!(options && options.IS_ITERATOR);
            var INTERRUPTED = !!(options && options.INTERRUPTED);
            var fn = bind2(unboundFunction, that);
            var iterator2, iterFn, index2, length, result, next2, step;
            var stop = function(condition) {
              if (iterator2) iteratorClose(iterator2, "normal");
              return new Result(true, condition);
            };
            var callFn = function(value) {
              if (AS_ENTRIES) {
                anObject(value);
                return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
              }
              return INTERRUPTED ? fn(value, stop) : fn(value);
            };
            if (IS_RECORD) {
              iterator2 = iterable.iterator;
            } else if (IS_ITERATOR) {
              iterator2 = iterable;
            } else {
              iterFn = getIteratorMethod(iterable);
              if (!iterFn) throw new $TypeError(tryToString(iterable) + " is not iterable");
              if (isArrayIteratorMethod(iterFn)) {
                for (index2 = 0, length = lengthOfArrayLike(iterable); length > index2; index2++) {
                  result = callFn(iterable[index2]);
                  if (result && isPrototypeOf(ResultPrototype, result)) return result;
                }
                return new Result(false);
              }
              iterator2 = getIterator(iterable, iterFn);
            }
            next2 = IS_RECORD ? iterable.next : iterator2.next;
            while (!(step = call(next2, iterator2)).done) {
              try {
                result = callFn(step.value);
              } catch (error) {
                iteratorClose(iterator2, "throw", error);
              }
              if (typeof result == "object" && result && isPrototypeOf(ResultPrototype, result)) return result;
            }
            return new Result(false);
          };
        }
      ),
      /***/
      2777: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var call = __webpack_require__2(9565);
          var isObject2 = __webpack_require__2(34);
          var isSymbol = __webpack_require__2(757);
          var getMethod = __webpack_require__2(5966);
          var ordinaryToPrimitive = __webpack_require__2(4270);
          var wellKnownSymbol = __webpack_require__2(8227);
          var $TypeError = TypeError;
          var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
          module.exports = function(input, pref) {
            if (!isObject2(input) || isSymbol(input)) return input;
            var exoticToPrim = getMethod(input, TO_PRIMITIVE);
            var result;
            if (exoticToPrim) {
              if (pref === void 0) pref = "default";
              result = call(exoticToPrim, input, pref);
              if (!isObject2(result) || isSymbol(result)) return result;
              throw new $TypeError("Can't convert object to primitive value");
            }
            if (pref === void 0) pref = "number";
            return ordinaryToPrimitive(input, pref);
          };
        }
      ),
      /***/
      2787: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var hasOwn2 = __webpack_require__2(9297);
          var isCallable = __webpack_require__2(4901);
          var toObject = __webpack_require__2(8981);
          var sharedKey = __webpack_require__2(6119);
          var CORRECT_PROTOTYPE_GETTER = __webpack_require__2(2211);
          var IE_PROTO = sharedKey("IE_PROTO");
          var $Object = Object;
          var ObjectPrototype = $Object.prototype;
          module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function(O) {
            var object = toObject(O);
            if (hasOwn2(object, IE_PROTO)) return object[IE_PROTO];
            var constructor = object.constructor;
            if (isCallable(constructor) && object instanceof constructor) {
              return constructor.prototype;
            }
            return object instanceof $Object ? ObjectPrototype : null;
          };
        }
      ),
      /***/
      2796: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var fails = __webpack_require__2(9039);
          var isCallable = __webpack_require__2(4901);
          var replacement = /#|\.prototype\./;
          var isForced = function(feature, detection) {
            var value = data2[normalize(feature)];
            return value === POLYFILL ? true : value === NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
          };
          var normalize = isForced.normalize = function(string) {
            return String(string).replace(replacement, ".").toLowerCase();
          };
          var data2 = isForced.data = {};
          var NATIVE = isForced.NATIVE = "N";
          var POLYFILL = isForced.POLYFILL = "P";
          module.exports = isForced;
        }
      ),
      /***/
      2804: (
        /***/
        (module) => {
          var commonAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
          var base64Alphabet = commonAlphabet + "+/";
          var base64UrlAlphabet = commonAlphabet + "-_";
          var inverse = function(characters) {
            var result = {};
            var index2 = 0;
            for (; index2 < 64; index2++) result[characters.charAt(index2)] = index2;
            return result;
          };
          module.exports = {
            i2c: base64Alphabet,
            c2i: inverse(base64Alphabet),
            i2cUrl: base64UrlAlphabet,
            c2iUrl: inverse(base64UrlAlphabet)
          };
        }
      ),
      /***/
      2812: (
        /***/
        (module) => {
          var $TypeError = TypeError;
          module.exports = function(passed, required) {
            if (passed < required) throw new $TypeError("Not enough arguments");
            return passed;
          };
        }
      ),
      /***/
      2839: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var navigator2 = globalThis2.navigator;
          var userAgent = navigator2 && navigator2.userAgent;
          module.exports = userAgent ? String(userAgent) : "";
        }
      ),
      /***/
      2967: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThisAccessor = __webpack_require__2(6706);
          var isObject2 = __webpack_require__2(34);
          var requireObjectCoercible = __webpack_require__2(7750);
          var aPossiblePrototype = __webpack_require__2(3506);
          module.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
            var CORRECT_SETTER = false;
            var test2 = {};
            var setter;
            try {
              setter = uncurryThisAccessor(Object.prototype, "__proto__", "set");
              setter(test2, []);
              CORRECT_SETTER = test2 instanceof Array;
            } catch (error) {
            }
            return function setPrototypeOf(O, proto) {
              requireObjectCoercible(O);
              aPossiblePrototype(proto);
              if (!isObject2(O)) return O;
              if (CORRECT_SETTER) setter(O, proto);
              else O.__proto__ = proto;
              return O;
            };
          }() : void 0);
        }
      ),
      /***/
      3068: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var uncurryThis = __webpack_require__2(9504);
          var iterate = __webpack_require__2(2652);
          var $RangeError = RangeError;
          var $TypeError = TypeError;
          var $Infinity = Infinity;
          var $NaN = NaN;
          var abs = Math.abs;
          var pow = Math.pow;
          var push = uncurryThis([].push);
          var POW_2_1023 = pow(2, 1023);
          var MAX_SAFE_INTEGER = pow(2, 53) - 1;
          var MAX_DOUBLE = Number.MAX_VALUE;
          var MAX_ULP = pow(2, 971);
          var NOT_A_NUMBER = {};
          var MINUS_INFINITY = {};
          var PLUS_INFINITY = {};
          var MINUS_ZERO = {};
          var FINITE = {};
          var twosum = function(x2, y2) {
            var hi = x2 + y2;
            var lo = y2 - (hi - x2);
            return { hi, lo };
          };
          $3({ target: "Math", stat: true }, {
            // eslint-disable-next-line max-statements -- ok
            sumPrecise: function sumPrecise(items) {
              var numbers = [];
              var count = 0;
              var state = MINUS_ZERO;
              iterate(items, function(n2) {
                if (++count >= MAX_SAFE_INTEGER) throw new $RangeError("Maximum allowed index exceeded");
                if (typeof n2 != "number") throw new $TypeError("Value is not a number");
                if (state !== NOT_A_NUMBER) {
                  if (n2 !== n2) state = NOT_A_NUMBER;
                  else if (n2 === $Infinity) state = state === MINUS_INFINITY ? NOT_A_NUMBER : PLUS_INFINITY;
                  else if (n2 === -$Infinity) state = state === PLUS_INFINITY ? NOT_A_NUMBER : MINUS_INFINITY;
                  else if ((n2 !== 0 || 1 / n2 === $Infinity) && (state === MINUS_ZERO || state === FINITE)) {
                    state = FINITE;
                    push(numbers, n2);
                  }
                }
              });
              switch (state) {
                case NOT_A_NUMBER:
                  return $NaN;
                case MINUS_INFINITY:
                  return -$Infinity;
                case PLUS_INFINITY:
                  return $Infinity;
                case MINUS_ZERO:
                  return -0;
              }
              var partials = [];
              var overflow = 0;
              var x2, y2, sum, hi, lo, tmp;
              for (var i = 0; i < numbers.length; i++) {
                x2 = numbers[i];
                var actuallyUsedPartials = 0;
                for (var j2 = 0; j2 < partials.length; j2++) {
                  y2 = partials[j2];
                  if (abs(x2) < abs(y2)) {
                    tmp = x2;
                    x2 = y2;
                    y2 = tmp;
                  }
                  sum = twosum(x2, y2);
                  hi = sum.hi;
                  lo = sum.lo;
                  if (abs(hi) === $Infinity) {
                    var sign = hi === $Infinity ? 1 : -1;
                    overflow += sign;
                    x2 = x2 - sign * POW_2_1023 - sign * POW_2_1023;
                    if (abs(x2) < abs(y2)) {
                      tmp = x2;
                      x2 = y2;
                      y2 = tmp;
                    }
                    sum = twosum(x2, y2);
                    hi = sum.hi;
                    lo = sum.lo;
                  }
                  if (lo !== 0) partials[actuallyUsedPartials++] = lo;
                  x2 = hi;
                }
                partials.length = actuallyUsedPartials;
                if (x2 !== 0) push(partials, x2);
              }
              var n = partials.length - 1;
              hi = 0;
              lo = 0;
              if (overflow !== 0) {
                var next2 = n >= 0 ? partials[n] : 0;
                n--;
                if (abs(overflow) > 1 || overflow > 0 && next2 > 0 || overflow < 0 && next2 < 0) {
                  return overflow > 0 ? $Infinity : -$Infinity;
                }
                sum = twosum(overflow * POW_2_1023, next2 / 2);
                hi = sum.hi;
                lo = sum.lo;
                lo *= 2;
                if (abs(2 * hi) === $Infinity) {
                  if (hi > 0) {
                    return hi === POW_2_1023 && lo === -(MAX_ULP / 2) && n >= 0 && partials[n] < 0 ? MAX_DOUBLE : $Infinity;
                  }
                  return hi === -POW_2_1023 && lo === MAX_ULP / 2 && n >= 0 && partials[n] > 0 ? -MAX_DOUBLE : -$Infinity;
                }
                if (lo !== 0) {
                  partials[++n] = lo;
                  lo = 0;
                }
                hi *= 2;
              }
              while (n >= 0) {
                sum = twosum(hi, partials[n--]);
                hi = sum.hi;
                lo = sum.lo;
                if (lo !== 0) break;
              }
              if (n >= 0 && (lo < 0 && partials[n] < 0 || lo > 0 && partials[n] > 0)) {
                y2 = lo * 2;
                x2 = hi + y2;
                if (y2 === x2 - hi) hi = x2;
              }
              return hi;
            }
          });
        }
      ),
      /***/
      3167: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var isCallable = __webpack_require__2(4901);
          var isObject2 = __webpack_require__2(34);
          var setPrototypeOf = __webpack_require__2(2967);
          module.exports = function($this, dummy, Wrapper) {
            var NewTarget, NewTargetPrototype;
            if (
              // it can work only with native `setPrototypeOf`
              setPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
              isCallable(NewTarget = dummy.constructor) && NewTarget !== Wrapper && isObject2(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype
            ) setPrototypeOf($this, NewTargetPrototype);
            return $this;
          };
        }
      ),
      /***/
      3238: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var NATIVE_ARRAY_BUFFER = __webpack_require__2(7811);
          var arrayBufferByteLength = __webpack_require__2(7394);
          var DataView2 = globalThis2.DataView;
          module.exports = function(O) {
            if (!NATIVE_ARRAY_BUFFER || arrayBufferByteLength(O) !== 0) return false;
            try {
              new DataView2(O);
              return false;
            } catch (error) {
              return true;
            }
          };
        }
      ),
      /***/
      3392: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(9504);
          var id = 0;
          var postfix = Math.random();
          var toString4 = uncurryThis(1.1.toString);
          module.exports = function(key) {
            return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString4(++id + postfix, 36);
          };
        }
      ),
      /***/
      3440: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var aSet = __webpack_require__2(7080);
          var SetHelpers = __webpack_require__2(4402);
          var clone2 = __webpack_require__2(9286);
          var size = __webpack_require__2(5170);
          var getSetRecord = __webpack_require__2(3789);
          var iterateSet = __webpack_require__2(8469);
          var iterateSimple = __webpack_require__2(507);
          var has2 = SetHelpers.has;
          var remove2 = SetHelpers.remove;
          module.exports = function difference(other) {
            var O = aSet(this);
            var otherRec = getSetRecord(other);
            var result = clone2(O);
            if (size(O) <= otherRec.size) iterateSet(O, function(e) {
              if (otherRec.includes(e)) remove2(result, e);
            });
            else iterateSimple(otherRec.getIterator(), function(e) {
              if (has2(result, e)) remove2(result, e);
            });
            return result;
          };
        }
      ),
      /***/
      3463: (
        /***/
        (module) => {
          var $TypeError = TypeError;
          module.exports = function(argument) {
            if (typeof argument == "string") return argument;
            throw new $TypeError("Argument is not a string");
          };
        }
      ),
      /***/
      3506: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var isPossiblePrototype = __webpack_require__2(3925);
          var $String = String;
          var $TypeError = TypeError;
          module.exports = function(argument) {
            if (isPossiblePrototype(argument)) return argument;
            throw new $TypeError("Can't set " + $String(argument) + " as a prototype");
          };
        }
      ),
      /***/
      3579: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var call = __webpack_require__2(9565);
          var iterate = __webpack_require__2(2652);
          var aCallable = __webpack_require__2(9306);
          var anObject = __webpack_require__2(8551);
          var getIteratorDirect = __webpack_require__2(1767);
          var iteratorClose = __webpack_require__2(9539);
          var iteratorHelperWithoutClosingOnEarlyError = __webpack_require__2(4549);
          var someWithoutClosingOnEarlyError = iteratorHelperWithoutClosingOnEarlyError("some", TypeError);
          $3({ target: "Iterator", proto: true, real: true, forced: someWithoutClosingOnEarlyError }, {
            some: function some2(predicate) {
              anObject(this);
              try {
                aCallable(predicate);
              } catch (error) {
                iteratorClose(this, "throw", error);
              }
              if (someWithoutClosingOnEarlyError) return call(someWithoutClosingOnEarlyError, this, predicate);
              var record = getIteratorDirect(this);
              var counter = 0;
              return iterate(record, function(value, stop) {
                if (predicate(value, counter++)) return stop();
              }, { IS_RECORD: true, INTERRUPTED: true }).stopped;
            }
          });
        }
      ),
      /***/
      3650: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var aSet = __webpack_require__2(7080);
          var SetHelpers = __webpack_require__2(4402);
          var clone2 = __webpack_require__2(9286);
          var getSetRecord = __webpack_require__2(3789);
          var iterateSimple = __webpack_require__2(507);
          var add2 = SetHelpers.add;
          var has2 = SetHelpers.has;
          var remove2 = SetHelpers.remove;
          module.exports = function symmetricDifference(other) {
            var O = aSet(this);
            var keysIter = getSetRecord(other).getIterator();
            var result = clone2(O);
            iterateSimple(keysIter, function(e) {
              if (has2(O, e)) remove2(result, e);
              else add2(result, e);
            });
            return result;
          };
        }
      ),
      /***/
      3706: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(9504);
          var isCallable = __webpack_require__2(4901);
          var store = __webpack_require__2(7629);
          var functionToString = uncurryThis(Function.toString);
          if (!isCallable(store.inspectSource)) {
            store.inspectSource = function(it) {
              return functionToString(it);
            };
          }
          module.exports = store.inspectSource;
        }
      ),
      /***/
      3717: (
        /***/
        (__unused_webpack_module, exports) => {
          exports.f = Object.getOwnPropertySymbols;
        }
      ),
      /***/
      3724: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var fails = __webpack_require__2(9039);
          module.exports = !fails(function() {
            return Object.defineProperty({}, 1, { get: function() {
              return 7;
            } })[1] !== 7;
          });
        }
      ),
      /***/
      3789: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var aCallable = __webpack_require__2(9306);
          var anObject = __webpack_require__2(8551);
          var call = __webpack_require__2(9565);
          var toIntegerOrInfinity = __webpack_require__2(1291);
          var getIteratorDirect = __webpack_require__2(1767);
          var INVALID_SIZE = "Invalid size";
          var $RangeError = RangeError;
          var $TypeError = TypeError;
          var max = Math.max;
          var SetRecord = function(set, intSize) {
            this.set = set;
            this.size = max(intSize, 0);
            this.has = aCallable(set.has);
            this.keys = aCallable(set.keys);
          };
          SetRecord.prototype = {
            getIterator: function() {
              return getIteratorDirect(anObject(call(this.keys, this.set)));
            },
            includes: function(it) {
              return call(this.has, this.set, it);
            }
          };
          module.exports = function(obj) {
            anObject(obj);
            var numSize = +obj.size;
            if (numSize !== numSize) throw new $TypeError(INVALID_SIZE);
            var intSize = toIntegerOrInfinity(numSize);
            if (intSize < 0) throw new $RangeError(INVALID_SIZE);
            return new SetRecord(obj, intSize);
          };
        }
      ),
      /***/
      3838: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var aSet = __webpack_require__2(7080);
          var size = __webpack_require__2(5170);
          var iterate = __webpack_require__2(8469);
          var getSetRecord = __webpack_require__2(3789);
          module.exports = function isSubsetOf(other) {
            var O = aSet(this);
            var otherRec = getSetRecord(other);
            if (size(O) > otherRec.size) return false;
            return iterate(O, function(e) {
              if (!otherRec.includes(e)) return false;
            }, true) !== false;
          };
        }
      ),
      /***/
      3853: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var isDisjointFrom = __webpack_require__2(4449);
          var setMethodAcceptSetLike = __webpack_require__2(4916);
          var INCORRECT = !setMethodAcceptSetLike("isDisjointFrom", function(result) {
            return !result;
          });
          $3({ target: "Set", proto: true, real: true, forced: INCORRECT }, {
            isDisjointFrom
          });
        }
      ),
      /***/
      3925: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var isObject2 = __webpack_require__2(34);
          module.exports = function(argument) {
            return isObject2(argument) || argument === null;
          };
        }
      ),
      /***/
      3972: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var isObject2 = __webpack_require__2(34);
          var $String = String;
          var $TypeError = TypeError;
          module.exports = function(argument) {
            if (argument === void 0 || isObject2(argument)) return argument;
            throw new $TypeError($String(argument) + " is not an object or undefined");
          };
        }
      ),
      /***/
      4055: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var isObject2 = __webpack_require__2(34);
          var document2 = globalThis2.document;
          var EXISTS = isObject2(document2) && isObject2(document2.createElement);
          module.exports = function(it) {
            return EXISTS ? document2.createElement(it) : {};
          };
        }
      ),
      /***/
      4114: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var toObject = __webpack_require__2(8981);
          var lengthOfArrayLike = __webpack_require__2(6198);
          var setArrayLength = __webpack_require__2(4527);
          var doesNotExceedSafeInteger = __webpack_require__2(6837);
          var fails = __webpack_require__2(9039);
          var INCORRECT_TO_LENGTH = fails(function() {
            return [].push.call({ length: 4294967296 }, 1) !== 4294967297;
          });
          var properErrorOnNonWritableLength = function() {
            try {
              Object.defineProperty([], "length", { writable: false }).push();
            } catch (error) {
              return error instanceof TypeError;
            }
          };
          var FORCED = INCORRECT_TO_LENGTH || !properErrorOnNonWritableLength();
          $3({ target: "Array", proto: true, arity: 1, forced: FORCED }, {
            // eslint-disable-next-line no-unused-vars -- required for `.length`
            push: function push(item) {
              var O = toObject(this);
              var len = lengthOfArrayLike(O);
              var argCount = arguments.length;
              doesNotExceedSafeInteger(len + argCount);
              for (var i = 0; i < argCount; i++) {
                O[len] = arguments[i];
                len++;
              }
              setArrayLength(O, len);
              return len;
            }
          });
        }
      ),
      /***/
      4117: (
        /***/
        (module) => {
          module.exports = function(it) {
            return it === null || it === void 0;
          };
        }
      ),
      /***/
      4149: (
        /***/
        (module) => {
          var $RangeError = RangeError;
          module.exports = function(it) {
            if (it === it) return it;
            throw new $RangeError("NaN is not allowed");
          };
        }
      ),
      /***/
      4154: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var classof = __webpack_require__2(6955);
          var $TypeError = TypeError;
          module.exports = function(argument) {
            if (classof(argument) === "Uint8Array") return argument;
            throw new $TypeError("Argument is not an Uint8Array");
          };
        }
      ),
      /***/
      4204: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var aSet = __webpack_require__2(7080);
          var add2 = __webpack_require__2(4402).add;
          var clone2 = __webpack_require__2(9286);
          var getSetRecord = __webpack_require__2(3789);
          var iterateSimple = __webpack_require__2(507);
          module.exports = function union(other) {
            var O = aSet(this);
            var keysIter = getSetRecord(other).getIterator();
            var result = clone2(O);
            iterateSimple(keysIter, function(it) {
              add2(result, it);
            });
            return result;
          };
        }
      ),
      /***/
      4209: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var wellKnownSymbol = __webpack_require__2(8227);
          var Iterators = __webpack_require__2(6269);
          var ITERATOR = wellKnownSymbol("iterator");
          var ArrayPrototype = Array.prototype;
          module.exports = function(it) {
            return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
          };
        }
      ),
      /***/
      4215: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var userAgent = __webpack_require__2(2839);
          var classof = __webpack_require__2(2195);
          var userAgentStartsWith = function(string) {
            return userAgent.slice(0, string.length) === string;
          };
          module.exports = function() {
            if (userAgentStartsWith("Bun/")) return "BUN";
            if (userAgentStartsWith("Cloudflare-Workers")) return "CLOUDFLARE";
            if (userAgentStartsWith("Deno/")) return "DENO";
            if (userAgentStartsWith("Node.js/")) return "NODE";
            if (globalThis2.Bun && typeof Bun.version == "string") return "BUN";
            if (globalThis2.Deno && typeof Deno.version == "object") return "DENO";
            if (classof(globalThis2.process) === "process") return "NODE";
            if (globalThis2.window && globalThis2.document) return "BROWSER";
            return "REST";
          }();
        }
      ),
      /***/
      4226: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var globalThis2 = __webpack_require__2(4576);
          var aString = __webpack_require__2(3463);
          var anUint8Array = __webpack_require__2(4154);
          var notDetached = __webpack_require__2(5169);
          var $fromHex = __webpack_require__2(2303);
          if (globalThis2.Uint8Array) $3({ target: "Uint8Array", proto: true }, {
            setFromHex: function setFromHex(string) {
              anUint8Array(this);
              aString(string);
              notDetached(this.buffer);
              var read = $fromHex(string, this).read;
              return { read, written: read / 2 };
            }
          });
        }
      ),
      /***/
      4235: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          __webpack_require__2(3068);
        }
      ),
      /***/
      4270: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var call = __webpack_require__2(9565);
          var isCallable = __webpack_require__2(4901);
          var isObject2 = __webpack_require__2(34);
          var $TypeError = TypeError;
          module.exports = function(input, pref) {
            var fn, val2;
            if (pref === "string" && isCallable(fn = input.toString) && !isObject2(val2 = call(fn, input))) return val2;
            if (isCallable(fn = input.valueOf) && !isObject2(val2 = call(fn, input))) return val2;
            if (pref !== "string" && isCallable(fn = input.toString) && !isObject2(val2 = call(fn, input))) return val2;
            throw new $TypeError("Can't convert object to primitive value");
          };
        }
      ),
      /***/
      4376: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var classof = __webpack_require__2(2195);
          module.exports = Array.isArray || function isArray2(argument) {
            return classof(argument) === "Array";
          };
        }
      ),
      /***/
      4402: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(9504);
          var SetPrototype = Set.prototype;
          module.exports = {
            // eslint-disable-next-line es/no-set -- safe
            Set,
            add: uncurryThis(SetPrototype.add),
            has: uncurryThis(SetPrototype.has),
            remove: uncurryThis(SetPrototype["delete"]),
            proto: SetPrototype
          };
        }
      ),
      /***/
      4449: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var aSet = __webpack_require__2(7080);
          var has2 = __webpack_require__2(4402).has;
          var size = __webpack_require__2(5170);
          var getSetRecord = __webpack_require__2(3789);
          var iterateSet = __webpack_require__2(8469);
          var iterateSimple = __webpack_require__2(507);
          var iteratorClose = __webpack_require__2(9539);
          module.exports = function isDisjointFrom(other) {
            var O = aSet(this);
            var otherRec = getSetRecord(other);
            if (size(O) <= otherRec.size) return iterateSet(O, function(e) {
              if (otherRec.includes(e)) return false;
            }, true) !== false;
            var iterator2 = otherRec.getIterator();
            return iterateSimple(iterator2, function(e) {
              if (has2(O, e)) return iteratorClose(iterator2, "normal", false);
            }) !== false;
          };
        }
      ),
      /***/
      4483: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var getBuiltInNodeModule = __webpack_require__2(9429);
          var PROPER_STRUCTURED_CLONE_TRANSFER = __webpack_require__2(1548);
          var structuredClone2 = globalThis2.structuredClone;
          var $ArrayBuffer = globalThis2.ArrayBuffer;
          var $MessageChannel = globalThis2.MessageChannel;
          var detach = false;
          var WorkerThreads, channel, buffer, $detach;
          if (PROPER_STRUCTURED_CLONE_TRANSFER) {
            detach = function(transferable) {
              structuredClone2(transferable, { transfer: [transferable] });
            };
          } else if ($ArrayBuffer) try {
            if (!$MessageChannel) {
              WorkerThreads = getBuiltInNodeModule("worker_threads");
              if (WorkerThreads) $MessageChannel = WorkerThreads.MessageChannel;
            }
            if ($MessageChannel) {
              channel = new $MessageChannel();
              buffer = new $ArrayBuffer(2);
              $detach = function(transferable) {
                channel.port1.postMessage(null, [transferable]);
              };
              if (buffer.byteLength === 2) {
                $detach(buffer);
                if (buffer.byteLength === 0) detach = $detach;
              }
            }
          } catch (error) {
          }
          module.exports = detach;
        }
      ),
      /***/
      4495: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var V8_VERSION = __webpack_require__2(9519);
          var fails = __webpack_require__2(9039);
          var globalThis2 = __webpack_require__2(4576);
          var $String = globalThis2.String;
          module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
            var symbol = Symbol("symbol detection");
            return !$String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
            !Symbol.sham && V8_VERSION && V8_VERSION < 41;
          });
        }
      ),
      /***/
      4527: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var DESCRIPTORS = __webpack_require__2(3724);
          var isArray2 = __webpack_require__2(4376);
          var $TypeError = TypeError;
          var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
          var SILENT_ON_NON_WRITABLE_LENGTH_SET = DESCRIPTORS && !function() {
            if (this !== void 0) return true;
            try {
              Object.defineProperty([], "length", { writable: false }).length = 1;
            } catch (error) {
              return error instanceof TypeError;
            }
          }();
          module.exports = SILENT_ON_NON_WRITABLE_LENGTH_SET ? function(O, length) {
            if (isArray2(O) && !getOwnPropertyDescriptor(O, "length").writable) {
              throw new $TypeError("Cannot set read only .length");
            }
            return O.length = length;
          } : function(O, length) {
            return O.length = length;
          };
        }
      ),
      /***/
      4549: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          module.exports = function(METHOD_NAME, ExpectedError) {
            var Iterator2 = globalThis2.Iterator;
            var IteratorPrototype = Iterator2 && Iterator2.prototype;
            var method = IteratorPrototype && IteratorPrototype[METHOD_NAME];
            var CLOSED = false;
            if (method) try {
              method.call({
                next: function() {
                  return { done: true };
                },
                "return": function() {
                  CLOSED = true;
                }
              }, -1);
            } catch (error) {
              if (!(error instanceof ExpectedError)) CLOSED = false;
            }
            if (!CLOSED) return method;
          };
        }
      ),
      /***/
      4576: (
        /***/
        function(module) {
          var check = function(it) {
            return it && it.Math === Math && it;
          };
          module.exports = // eslint-disable-next-line es/no-global-this -- safe
          check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
          check(typeof self == "object" && self) || check(typeof global == "object" && global) || check(typeof this == "object" && this) || // eslint-disable-next-line no-new-func -- fallback
          /* @__PURE__ */ function() {
            return this;
          }() || Function("return this")();
        }
      ),
      /***/
      4603: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var defineBuiltIn = __webpack_require__2(6840);
          var uncurryThis = __webpack_require__2(9504);
          var toString4 = __webpack_require__2(655);
          var validateArgumentsLength = __webpack_require__2(2812);
          var $URLSearchParams = URLSearchParams;
          var URLSearchParamsPrototype = $URLSearchParams.prototype;
          var append4 = uncurryThis(URLSearchParamsPrototype.append);
          var $delete = uncurryThis(URLSearchParamsPrototype["delete"]);
          var forEach2 = uncurryThis(URLSearchParamsPrototype.forEach);
          var push = uncurryThis([].push);
          var params = new $URLSearchParams("a=1&a=2&b=3");
          params["delete"]("a", 1);
          params["delete"]("b", void 0);
          if (params + "" !== "a=2") {
            defineBuiltIn(URLSearchParamsPrototype, "delete", function(name) {
              var length = arguments.length;
              var $value = length < 2 ? void 0 : arguments[1];
              if (length && $value === void 0) return $delete(this, name);
              var entries = [];
              forEach2(this, function(v2, k2) {
                push(entries, { key: k2, value: v2 });
              });
              validateArgumentsLength(length, 1);
              var key = toString4(name);
              var value = toString4($value);
              var index2 = 0;
              var dindex = 0;
              var found = false;
              var entriesLength = entries.length;
              var entry;
              while (index2 < entriesLength) {
                entry = entries[index2++];
                if (found || entry.key === key) {
                  found = true;
                  $delete(this, entry.key);
                } else dindex++;
              }
              while (dindex < entriesLength) {
                entry = entries[dindex++];
                if (!(entry.key === key && entry.value === value)) append4(this, entry.key, entry.value);
              }
            }, { enumerable: true, unsafe: true });
          }
        }
      ),
      /***/
      4628: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var newPromiseCapabilityModule = __webpack_require__2(6043);
          $3({ target: "Promise", stat: true }, {
            withResolvers: function withResolvers() {
              var promiseCapability = newPromiseCapabilityModule.f(this);
              return {
                promise: promiseCapability.promise,
                resolve: promiseCapability.resolve,
                reject: promiseCapability.reject
              };
            }
          });
        }
      ),
      /***/
      4644: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var NATIVE_ARRAY_BUFFER = __webpack_require__2(7811);
          var DESCRIPTORS = __webpack_require__2(3724);
          var globalThis2 = __webpack_require__2(4576);
          var isCallable = __webpack_require__2(4901);
          var isObject2 = __webpack_require__2(34);
          var hasOwn2 = __webpack_require__2(9297);
          var classof = __webpack_require__2(6955);
          var tryToString = __webpack_require__2(6823);
          var createNonEnumerableProperty = __webpack_require__2(6699);
          var defineBuiltIn = __webpack_require__2(6840);
          var defineBuiltInAccessor = __webpack_require__2(2106);
          var isPrototypeOf = __webpack_require__2(1625);
          var getPrototypeOf2 = __webpack_require__2(2787);
          var setPrototypeOf = __webpack_require__2(2967);
          var wellKnownSymbol = __webpack_require__2(8227);
          var uid = __webpack_require__2(3392);
          var InternalStateModule = __webpack_require__2(1181);
          var enforceInternalState = InternalStateModule.enforce;
          var getInternalState = InternalStateModule.get;
          var Int8Array2 = globalThis2.Int8Array;
          var Int8ArrayPrototype = Int8Array2 && Int8Array2.prototype;
          var Uint8ClampedArray2 = globalThis2.Uint8ClampedArray;
          var Uint8ClampedArrayPrototype = Uint8ClampedArray2 && Uint8ClampedArray2.prototype;
          var TypedArray = Int8Array2 && getPrototypeOf2(Int8Array2);
          var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf2(Int8ArrayPrototype);
          var ObjectPrototype = Object.prototype;
          var TypeError2 = globalThis2.TypeError;
          var TO_STRING_TAG = wellKnownSymbol("toStringTag");
          var TYPED_ARRAY_TAG = uid("TYPED_ARRAY_TAG");
          var TYPED_ARRAY_CONSTRUCTOR = "TypedArrayConstructor";
          var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(globalThis2.opera) !== "Opera";
          var TYPED_ARRAY_TAG_REQUIRED = false;
          var NAME, Constructor, Prototype;
          var TypedArrayConstructorsList = {
            Int8Array: 1,
            Uint8Array: 1,
            Uint8ClampedArray: 1,
            Int16Array: 2,
            Uint16Array: 2,
            Int32Array: 4,
            Uint32Array: 4,
            Float32Array: 4,
            Float64Array: 8
          };
          var BigIntArrayConstructorsList = {
            BigInt64Array: 8,
            BigUint64Array: 8
          };
          var isView = function isView2(it) {
            if (!isObject2(it)) return false;
            var klass = classof(it);
            return klass === "DataView" || hasOwn2(TypedArrayConstructorsList, klass) || hasOwn2(BigIntArrayConstructorsList, klass);
          };
          var getTypedArrayConstructor = function(it) {
            var proto = getPrototypeOf2(it);
            if (!isObject2(proto)) return;
            var state = getInternalState(proto);
            return state && hasOwn2(state, TYPED_ARRAY_CONSTRUCTOR) ? state[TYPED_ARRAY_CONSTRUCTOR] : getTypedArrayConstructor(proto);
          };
          var isTypedArray2 = function(it) {
            if (!isObject2(it)) return false;
            var klass = classof(it);
            return hasOwn2(TypedArrayConstructorsList, klass) || hasOwn2(BigIntArrayConstructorsList, klass);
          };
          var aTypedArray = function(it) {
            if (isTypedArray2(it)) return it;
            throw new TypeError2("Target is not a typed array");
          };
          var aTypedArrayConstructor = function(C2) {
            if (isCallable(C2) && (!setPrototypeOf || isPrototypeOf(TypedArray, C2))) return C2;
            throw new TypeError2(tryToString(C2) + " is not a typed array constructor");
          };
          var exportTypedArrayMethod = function(KEY, property, forced, options) {
            if (!DESCRIPTORS) return;
            if (forced) for (var ARRAY in TypedArrayConstructorsList) {
              var TypedArrayConstructor = globalThis2[ARRAY];
              if (TypedArrayConstructor && hasOwn2(TypedArrayConstructor.prototype, KEY)) try {
                delete TypedArrayConstructor.prototype[KEY];
              } catch (error) {
                try {
                  TypedArrayConstructor.prototype[KEY] = property;
                } catch (error2) {
                }
              }
            }
            if (!TypedArrayPrototype[KEY] || forced) {
              defineBuiltIn(TypedArrayPrototype, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property, options);
            }
          };
          var exportTypedArrayStaticMethod = function(KEY, property, forced) {
            var ARRAY, TypedArrayConstructor;
            if (!DESCRIPTORS) return;
            if (setPrototypeOf) {
              if (forced) for (ARRAY in TypedArrayConstructorsList) {
                TypedArrayConstructor = globalThis2[ARRAY];
                if (TypedArrayConstructor && hasOwn2(TypedArrayConstructor, KEY)) try {
                  delete TypedArrayConstructor[KEY];
                } catch (error) {
                }
              }
              if (!TypedArray[KEY] || forced) {
                try {
                  return defineBuiltIn(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);
                } catch (error) {
                }
              } else return;
            }
            for (ARRAY in TypedArrayConstructorsList) {
              TypedArrayConstructor = globalThis2[ARRAY];
              if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
                defineBuiltIn(TypedArrayConstructor, KEY, property);
              }
            }
          };
          for (NAME in TypedArrayConstructorsList) {
            Constructor = globalThis2[NAME];
            Prototype = Constructor && Constructor.prototype;
            if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;
            else NATIVE_ARRAY_BUFFER_VIEWS = false;
          }
          for (NAME in BigIntArrayConstructorsList) {
            Constructor = globalThis2[NAME];
            Prototype = Constructor && Constructor.prototype;
            if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;
          }
          if (!NATIVE_ARRAY_BUFFER_VIEWS || !isCallable(TypedArray) || TypedArray === Function.prototype) {
            TypedArray = function TypedArray2() {
              throw new TypeError2("Incorrect invocation");
            };
            if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
              if (globalThis2[NAME]) setPrototypeOf(globalThis2[NAME], TypedArray);
            }
          }
          if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
            TypedArrayPrototype = TypedArray.prototype;
            if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
              if (globalThis2[NAME]) setPrototypeOf(globalThis2[NAME].prototype, TypedArrayPrototype);
            }
          }
          if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf2(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
            setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
          }
          if (DESCRIPTORS && !hasOwn2(TypedArrayPrototype, TO_STRING_TAG)) {
            TYPED_ARRAY_TAG_REQUIRED = true;
            defineBuiltInAccessor(TypedArrayPrototype, TO_STRING_TAG, {
              configurable: true,
              get: function() {
                return isObject2(this) ? this[TYPED_ARRAY_TAG] : void 0;
              }
            });
            for (NAME in TypedArrayConstructorsList) if (globalThis2[NAME]) {
              createNonEnumerableProperty(globalThis2[NAME], TYPED_ARRAY_TAG, NAME);
            }
          }
          module.exports = {
            NATIVE_ARRAY_BUFFER_VIEWS,
            TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG,
            aTypedArray,
            aTypedArrayConstructor,
            exportTypedArrayMethod,
            exportTypedArrayStaticMethod,
            getTypedArrayConstructor,
            isView,
            isTypedArray: isTypedArray2,
            TypedArray,
            TypedArrayPrototype
          };
        }
      ),
      /***/
      4659: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var DESCRIPTORS = __webpack_require__2(3724);
          var definePropertyModule = __webpack_require__2(4913);
          var createPropertyDescriptor = __webpack_require__2(6980);
          module.exports = function(object, key, value) {
            if (DESCRIPTORS) definePropertyModule.f(object, key, createPropertyDescriptor(0, value));
            else object[key] = value;
          };
        }
      ),
      /***/
      4901: (
        /***/
        (module) => {
          var documentAll = typeof document == "object" && document.all;
          module.exports = typeof documentAll == "undefined" && documentAll !== void 0 ? function(argument) {
            return typeof argument == "function" || argument === documentAll;
          } : function(argument) {
            return typeof argument == "function";
          };
        }
      ),
      /***/
      4913: (
        /***/
        (__unused_webpack_module, exports, __webpack_require__2) => {
          var DESCRIPTORS = __webpack_require__2(3724);
          var IE8_DOM_DEFINE = __webpack_require__2(5917);
          var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__2(8686);
          var anObject = __webpack_require__2(8551);
          var toPropertyKey = __webpack_require__2(6969);
          var $TypeError = TypeError;
          var $defineProperty = Object.defineProperty;
          var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
          var ENUMERABLE = "enumerable";
          var CONFIGURABLE = "configurable";
          var WRITABLE = "writable";
          exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P2, Attributes) {
            anObject(O);
            P2 = toPropertyKey(P2);
            anObject(Attributes);
            if (typeof O === "function" && P2 === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
              var current = $getOwnPropertyDescriptor(O, P2);
              if (current && current[WRITABLE]) {
                O[P2] = Attributes.value;
                Attributes = {
                  configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
                  enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
                  writable: false
                };
              }
            }
            return $defineProperty(O, P2, Attributes);
          } : $defineProperty : function defineProperty(O, P2, Attributes) {
            anObject(O);
            P2 = toPropertyKey(P2);
            anObject(Attributes);
            if (IE8_DOM_DEFINE) try {
              return $defineProperty(O, P2, Attributes);
            } catch (error) {
            }
            if ("get" in Attributes || "set" in Attributes) throw new $TypeError("Accessors not supported");
            if ("value" in Attributes) O[P2] = Attributes.value;
            return O;
          };
        }
      ),
      /***/
      4916: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var getBuiltIn = __webpack_require__2(7751);
          var createSetLike = function(size) {
            return {
              size,
              has: function() {
                return false;
              },
              keys: function() {
                return {
                  next: function() {
                    return { done: true };
                  }
                };
              }
            };
          };
          var createSetLikeWithInfinitySize = function(size) {
            return {
              size,
              has: function() {
                return true;
              },
              keys: function() {
                throw new Error("e");
              }
            };
          };
          module.exports = function(name, callback) {
            var Set2 = getBuiltIn("Set");
            try {
              new Set2()[name](createSetLike(0));
              try {
                new Set2()[name](createSetLike(-1));
                return false;
              } catch (error2) {
                if (!callback) return true;
                try {
                  new Set2()[name](createSetLikeWithInfinitySize(-Infinity));
                  return false;
                } catch (error) {
                  var set = new Set2();
                  set.add(1);
                  set.add(2);
                  return callback(set[name](createSetLikeWithInfinitySize(Infinity)));
                }
              }
            } catch (error) {
              return false;
            }
          };
        }
      ),
      /***/
      4972: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var call = __webpack_require__2(9565);
          var anObject = __webpack_require__2(8551);
          var getIteratorDirect = __webpack_require__2(1767);
          var notANaN = __webpack_require__2(4149);
          var toPositiveInteger = __webpack_require__2(9590);
          var createIteratorProxy = __webpack_require__2(9462);
          var iteratorClose = __webpack_require__2(9539);
          var iteratorHelperWithoutClosingOnEarlyError = __webpack_require__2(4549);
          var IS_PURE = __webpack_require__2(6395);
          var takeWithoutClosingOnEarlyError = !IS_PURE && iteratorHelperWithoutClosingOnEarlyError("take", RangeError);
          var IteratorProxy = createIteratorProxy(function() {
            var iterator2 = this.iterator;
            if (!this.remaining--) {
              this.done = true;
              return iteratorClose(iterator2, "normal", void 0);
            }
            var result = anObject(call(this.next, iterator2));
            var done = this.done = !!result.done;
            if (!done) return result.value;
          });
          $3({ target: "Iterator", proto: true, real: true, forced: IS_PURE || takeWithoutClosingOnEarlyError }, {
            take: function take(limit) {
              anObject(this);
              var remaining;
              try {
                remaining = toPositiveInteger(notANaN(+limit));
              } catch (error) {
                iteratorClose(this, "throw", error);
              }
              if (takeWithoutClosingOnEarlyError) return call(takeWithoutClosingOnEarlyError, this, remaining);
              return new IteratorProxy(getIteratorDirect(this), {
                remaining
              });
            }
          });
        }
      ),
      /***/
      4979: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var globalThis2 = __webpack_require__2(4576);
          var getBuiltIn = __webpack_require__2(7751);
          var createPropertyDescriptor = __webpack_require__2(6980);
          var defineProperty = __webpack_require__2(4913).f;
          var hasOwn2 = __webpack_require__2(9297);
          var anInstance = __webpack_require__2(679);
          var inheritIfRequired = __webpack_require__2(3167);
          var normalizeStringArgument = __webpack_require__2(2603);
          var DOMExceptionConstants = __webpack_require__2(5002);
          var clearErrorStack = __webpack_require__2(8574);
          var DESCRIPTORS = __webpack_require__2(3724);
          var IS_PURE = __webpack_require__2(6395);
          var DOM_EXCEPTION = "DOMException";
          var Error2 = getBuiltIn("Error");
          var NativeDOMException = getBuiltIn(DOM_EXCEPTION);
          var $DOMException = function DOMException() {
            anInstance(this, DOMExceptionPrototype);
            var argumentsLength = arguments.length;
            var message = normalizeStringArgument(argumentsLength < 1 ? void 0 : arguments[0]);
            var name = normalizeStringArgument(argumentsLength < 2 ? void 0 : arguments[1], "Error");
            var that = new NativeDOMException(message, name);
            var error = new Error2(message);
            error.name = DOM_EXCEPTION;
            defineProperty(that, "stack", createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));
            inheritIfRequired(that, this, $DOMException);
            return that;
          };
          var DOMExceptionPrototype = $DOMException.prototype = NativeDOMException.prototype;
          var ERROR_HAS_STACK = "stack" in new Error2(DOM_EXCEPTION);
          var DOM_EXCEPTION_HAS_STACK = "stack" in new NativeDOMException(1, 2);
          var descriptor = NativeDOMException && DESCRIPTORS && Object.getOwnPropertyDescriptor(globalThis2, DOM_EXCEPTION);
          var BUGGY_DESCRIPTOR = !!descriptor && !(descriptor.writable && descriptor.configurable);
          var FORCED_CONSTRUCTOR = ERROR_HAS_STACK && !BUGGY_DESCRIPTOR && !DOM_EXCEPTION_HAS_STACK;
          $3({ global: true, constructor: true, forced: IS_PURE || FORCED_CONSTRUCTOR }, {
            // TODO: fix export logic
            DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException
          });
          var PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION);
          var PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;
          if (PolyfilledDOMExceptionPrototype.constructor !== PolyfilledDOMException) {
            if (!IS_PURE) {
              defineProperty(PolyfilledDOMExceptionPrototype, "constructor", createPropertyDescriptor(1, PolyfilledDOMException));
            }
            for (var key in DOMExceptionConstants) if (hasOwn2(DOMExceptionConstants, key)) {
              var constant = DOMExceptionConstants[key];
              var constantName = constant.s;
              if (!hasOwn2(PolyfilledDOMException, constantName)) {
                defineProperty(PolyfilledDOMException, constantName, createPropertyDescriptor(6, constant.c));
              }
            }
          }
        }
      ),
      /***/
      5002: (
        /***/
        (module) => {
          module.exports = {
            IndexSizeError: { s: "INDEX_SIZE_ERR", c: 1, m: 1 },
            DOMStringSizeError: { s: "DOMSTRING_SIZE_ERR", c: 2, m: 0 },
            HierarchyRequestError: { s: "HIERARCHY_REQUEST_ERR", c: 3, m: 1 },
            WrongDocumentError: { s: "WRONG_DOCUMENT_ERR", c: 4, m: 1 },
            InvalidCharacterError: { s: "INVALID_CHARACTER_ERR", c: 5, m: 1 },
            NoDataAllowedError: { s: "NO_DATA_ALLOWED_ERR", c: 6, m: 0 },
            NoModificationAllowedError: { s: "NO_MODIFICATION_ALLOWED_ERR", c: 7, m: 1 },
            NotFoundError: { s: "NOT_FOUND_ERR", c: 8, m: 1 },
            NotSupportedError: { s: "NOT_SUPPORTED_ERR", c: 9, m: 1 },
            InUseAttributeError: { s: "INUSE_ATTRIBUTE_ERR", c: 10, m: 1 },
            InvalidStateError: { s: "INVALID_STATE_ERR", c: 11, m: 1 },
            SyntaxError: { s: "SYNTAX_ERR", c: 12, m: 1 },
            InvalidModificationError: { s: "INVALID_MODIFICATION_ERR", c: 13, m: 1 },
            NamespaceError: { s: "NAMESPACE_ERR", c: 14, m: 1 },
            InvalidAccessError: { s: "INVALID_ACCESS_ERR", c: 15, m: 1 },
            ValidationError: { s: "VALIDATION_ERR", c: 16, m: 0 },
            TypeMismatchError: { s: "TYPE_MISMATCH_ERR", c: 17, m: 1 },
            SecurityError: { s: "SECURITY_ERR", c: 18, m: 1 },
            NetworkError: { s: "NETWORK_ERR", c: 19, m: 1 },
            AbortError: { s: "ABORT_ERR", c: 20, m: 1 },
            URLMismatchError: { s: "URL_MISMATCH_ERR", c: 21, m: 1 },
            QuotaExceededError: { s: "QUOTA_EXCEEDED_ERR", c: 22, m: 1 },
            TimeoutError: { s: "TIMEOUT_ERR", c: 23, m: 1 },
            InvalidNodeTypeError: { s: "INVALID_NODE_TYPE_ERR", c: 24, m: 1 },
            DataCloneError: { s: "DATA_CLONE_ERR", c: 25, m: 1 }
          };
        }
      ),
      /***/
      5024: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var symmetricDifference = __webpack_require__2(3650);
          var setMethodGetKeysBeforeCloning = __webpack_require__2(9835);
          var setMethodAcceptSetLike = __webpack_require__2(4916);
          var FORCED = !setMethodAcceptSetLike("symmetricDifference") || !setMethodGetKeysBeforeCloning("symmetricDifference");
          $3({ target: "Set", proto: true, real: true, forced: FORCED }, {
            symmetricDifference
          });
        }
      ),
      /***/
      5031: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var getBuiltIn = __webpack_require__2(7751);
          var uncurryThis = __webpack_require__2(9504);
          var getOwnPropertyNamesModule = __webpack_require__2(8480);
          var getOwnPropertySymbolsModule = __webpack_require__2(3717);
          var anObject = __webpack_require__2(8551);
          var concat = uncurryThis([].concat);
          module.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
            var keys = getOwnPropertyNamesModule.f(anObject(it));
            var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
            return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
          };
        }
      ),
      /***/
      5169: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var isDetached = __webpack_require__2(3238);
          var $TypeError = TypeError;
          module.exports = function(it) {
            if (isDetached(it)) throw new $TypeError("ArrayBuffer is detached");
            return it;
          };
        }
      ),
      /***/
      5170: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThisAccessor = __webpack_require__2(6706);
          var SetHelpers = __webpack_require__2(4402);
          module.exports = uncurryThisAccessor(SetHelpers.proto, "size", "get") || function(set) {
            return set.size;
          };
        }
      ),
      /***/
      5213: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var globalThis2 = __webpack_require__2(4576);
          var arrayFromConstructorAndList = __webpack_require__2(5370);
          var $fromBase64 = __webpack_require__2(9143);
          var Uint8Array2 = globalThis2.Uint8Array;
          var INCORRECT_BEHAVIOR_OR_DOESNT_EXISTS = !Uint8Array2 || !Uint8Array2.fromBase64 || !function() {
            try {
              Uint8Array2.fromBase64("a");
              return;
            } catch (error) {
            }
            try {
              Uint8Array2.fromBase64("", null);
            } catch (error) {
              return true;
            }
          }();
          if (Uint8Array2) $3({ target: "Uint8Array", stat: true, forced: INCORRECT_BEHAVIOR_OR_DOESNT_EXISTS }, {
            fromBase64: function fromBase64(string) {
              var result = $fromBase64(string, arguments.length > 1 ? arguments[1] : void 0, null, 9007199254740991);
              return arrayFromConstructorAndList(Uint8Array2, result.bytes);
            }
          });
        }
      ),
      /***/
      5370: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var lengthOfArrayLike = __webpack_require__2(6198);
          module.exports = function(Constructor, list, $length) {
            var index2 = 0;
            var length = arguments.length > 2 ? $length : lengthOfArrayLike(list);
            var result = new Constructor(length);
            while (length > index2) result[index2] = list[index2++];
            return result;
          };
        }
      ),
      /***/
      5397: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var IndexedObject = __webpack_require__2(7055);
          var requireObjectCoercible = __webpack_require__2(7750);
          module.exports = function(it) {
            return IndexedObject(requireObjectCoercible(it));
          };
        }
      ),
      /***/
      5610: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var toIntegerOrInfinity = __webpack_require__2(1291);
          var max = Math.max;
          var min = Math.min;
          module.exports = function(index2, length) {
            var integer = toIntegerOrInfinity(index2);
            return integer < 0 ? max(integer + length, 0) : min(integer, length);
          };
        }
      ),
      /***/
      5623: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          __webpack_require__2(456);
        }
      ),
      /***/
      5636: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var uncurryThis = __webpack_require__2(9504);
          var uncurryThisAccessor = __webpack_require__2(6706);
          var toIndex = __webpack_require__2(7696);
          var notDetached = __webpack_require__2(5169);
          var arrayBufferByteLength = __webpack_require__2(7394);
          var detachTransferable = __webpack_require__2(4483);
          var PROPER_STRUCTURED_CLONE_TRANSFER = __webpack_require__2(1548);
          var structuredClone2 = globalThis2.structuredClone;
          var ArrayBuffer2 = globalThis2.ArrayBuffer;
          var DataView2 = globalThis2.DataView;
          var min = Math.min;
          var ArrayBufferPrototype = ArrayBuffer2.prototype;
          var DataViewPrototype = DataView2.prototype;
          var slice2 = uncurryThis(ArrayBufferPrototype.slice);
          var isResizable = uncurryThisAccessor(ArrayBufferPrototype, "resizable", "get");
          var maxByteLength = uncurryThisAccessor(ArrayBufferPrototype, "maxByteLength", "get");
          var getInt8 = uncurryThis(DataViewPrototype.getInt8);
          var setInt8 = uncurryThis(DataViewPrototype.setInt8);
          module.exports = (PROPER_STRUCTURED_CLONE_TRANSFER || detachTransferable) && function(arrayBuffer, newLength, preserveResizability) {
            var byteLength = arrayBufferByteLength(arrayBuffer);
            var newByteLength = newLength === void 0 ? byteLength : toIndex(newLength);
            var fixedLength = !isResizable || !isResizable(arrayBuffer);
            var newBuffer;
            notDetached(arrayBuffer);
            if (PROPER_STRUCTURED_CLONE_TRANSFER) {
              arrayBuffer = structuredClone2(arrayBuffer, { transfer: [arrayBuffer] });
              if (byteLength === newByteLength && (preserveResizability || fixedLength)) return arrayBuffer;
            }
            if (byteLength >= newByteLength && (!preserveResizability || fixedLength)) {
              newBuffer = slice2(arrayBuffer, 0, newByteLength);
            } else {
              var options = preserveResizability && !fixedLength && maxByteLength ? { maxByteLength: maxByteLength(arrayBuffer) } : void 0;
              newBuffer = new ArrayBuffer2(newByteLength, options);
              var a = new DataView2(arrayBuffer);
              var b2 = new DataView2(newBuffer);
              var copyLength = min(newByteLength, byteLength);
              for (var i = 0; i < copyLength; i++) setInt8(b2, i, getInt8(a, i));
            }
            if (!PROPER_STRUCTURED_CLONE_TRANSFER) detachTransferable(arrayBuffer);
            return newBuffer;
          };
        }
      ),
      /***/
      5745: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var store = __webpack_require__2(7629);
          module.exports = function(key, value) {
            return store[key] || (store[key] = value || {});
          };
        }
      ),
      /***/
      5781: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var getBuiltIn = __webpack_require__2(7751);
          var validateArgumentsLength = __webpack_require__2(2812);
          var toString4 = __webpack_require__2(655);
          var USE_NATIVE_URL = __webpack_require__2(7416);
          var URL2 = getBuiltIn("URL");
          $3({ target: "URL", stat: true, forced: !USE_NATIVE_URL }, {
            parse: function parse6(url) {
              var length = validateArgumentsLength(arguments.length, 1);
              var urlString = toString4(url);
              var base = length < 2 || arguments[1] === void 0 ? void 0 : toString4(arguments[1]);
              try {
                return new URL2(urlString, base);
              } catch (error) {
                return null;
              }
            }
          });
        }
      ),
      /***/
      5854: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var toPrimitive = __webpack_require__2(2777);
          var $TypeError = TypeError;
          module.exports = function(argument) {
            var prim = toPrimitive(argument, "number");
            if (typeof prim == "number") throw new $TypeError("Can't convert number to bigint");
            return BigInt(prim);
          };
        }
      ),
      /***/
      5876: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var isSubsetOf = __webpack_require__2(3838);
          var setMethodAcceptSetLike = __webpack_require__2(4916);
          var INCORRECT = !setMethodAcceptSetLike("isSubsetOf", function(result) {
            return result;
          });
          $3({ target: "Set", proto: true, real: true, forced: INCORRECT }, {
            isSubsetOf
          });
        }
      ),
      /***/
      5917: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var DESCRIPTORS = __webpack_require__2(3724);
          var fails = __webpack_require__2(9039);
          var createElement = __webpack_require__2(4055);
          module.exports = !DESCRIPTORS && !fails(function() {
            return Object.defineProperty(createElement("div"), "a", {
              get: function() {
                return 7;
              }
            }).a !== 7;
          });
        }
      ),
      /***/
      5966: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var aCallable = __webpack_require__2(9306);
          var isNullOrUndefined = __webpack_require__2(4117);
          module.exports = function(V2, P2) {
            var func = V2[P2];
            return isNullOrUndefined(func) ? void 0 : aCallable(func);
          };
        }
      ),
      /***/
      6043: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var aCallable = __webpack_require__2(9306);
          var $TypeError = TypeError;
          var PromiseCapability = function(C2) {
            var resolve, reject;
            this.promise = new C2(function($$resolve, $$reject) {
              if (resolve !== void 0 || reject !== void 0) throw new $TypeError("Bad Promise constructor");
              resolve = $$resolve;
              reject = $$reject;
            });
            this.resolve = aCallable(resolve);
            this.reject = aCallable(reject);
          };
          module.exports.f = function(C2) {
            return new PromiseCapability(C2);
          };
        }
      ),
      /***/
      6080: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(7476);
          var aCallable = __webpack_require__2(9306);
          var NATIVE_BIND = __webpack_require__2(616);
          var bind2 = uncurryThis(uncurryThis.bind);
          module.exports = function(fn, that) {
            aCallable(fn);
            return that === void 0 ? fn : NATIVE_BIND ? bind2(fn, that) : function() {
              return fn.apply(that, arguments);
            };
          };
        }
      ),
      /***/
      6119: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var shared = __webpack_require__2(5745);
          var uid = __webpack_require__2(3392);
          var keys = shared("keys");
          module.exports = function(key) {
            return keys[key] || (keys[key] = uid(key));
          };
        }
      ),
      /***/
      6193: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var ENVIRONMENT = __webpack_require__2(4215);
          module.exports = ENVIRONMENT === "NODE";
        }
      ),
      /***/
      6198: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var toLength = __webpack_require__2(8014);
          module.exports = function(obj) {
            return toLength(obj.length);
          };
        }
      ),
      /***/
      6269: (
        /***/
        (module) => {
          module.exports = {};
        }
      ),
      /***/
      6279: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var defineBuiltIn = __webpack_require__2(6840);
          module.exports = function(target, src, options) {
            for (var key in src) defineBuiltIn(target, key, src[key], options);
            return target;
          };
        }
      ),
      /***/
      6319: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var anObject = __webpack_require__2(8551);
          var iteratorClose = __webpack_require__2(9539);
          module.exports = function(iterator2, fn, value, ENTRIES) {
            try {
              return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
            } catch (error) {
              iteratorClose(iterator2, "throw", error);
            }
          };
        }
      ),
      /***/
      6395: (
        /***/
        (module) => {
          module.exports = false;
        }
      ),
      /***/
      6518: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var getOwnPropertyDescriptor = __webpack_require__2(7347).f;
          var createNonEnumerableProperty = __webpack_require__2(6699);
          var defineBuiltIn = __webpack_require__2(6840);
          var defineGlobalProperty = __webpack_require__2(9433);
          var copyConstructorProperties = __webpack_require__2(7740);
          var isForced = __webpack_require__2(2796);
          module.exports = function(options, source) {
            var TARGET = options.target;
            var GLOBAL = options.global;
            var STATIC = options.stat;
            var FORCED, target, key, targetProperty, sourceProperty, descriptor;
            if (GLOBAL) {
              target = globalThis2;
            } else if (STATIC) {
              target = globalThis2[TARGET] || defineGlobalProperty(TARGET, {});
            } else {
              target = globalThis2[TARGET] && globalThis2[TARGET].prototype;
            }
            if (target) for (key in source) {
              sourceProperty = source[key];
              if (options.dontCallGetSet) {
                descriptor = getOwnPropertyDescriptor(target, key);
                targetProperty = descriptor && descriptor.value;
              } else targetProperty = target[key];
              FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
              if (!FORCED && targetProperty !== void 0) {
                if (typeof sourceProperty == typeof targetProperty) continue;
                copyConstructorProperties(sourceProperty, targetProperty);
              }
              if (options.sham || targetProperty && targetProperty.sham) {
                createNonEnumerableProperty(sourceProperty, "sham", true);
              }
              defineBuiltIn(target, key, sourceProperty, options);
            }
          };
        }
      ),
      /***/
      6573: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var DESCRIPTORS = __webpack_require__2(3724);
          var defineBuiltInAccessor = __webpack_require__2(2106);
          var isDetached = __webpack_require__2(3238);
          var ArrayBufferPrototype = ArrayBuffer.prototype;
          if (DESCRIPTORS && !("detached" in ArrayBufferPrototype)) {
            defineBuiltInAccessor(ArrayBufferPrototype, "detached", {
              configurable: true,
              get: function detached() {
                return isDetached(this);
              }
            });
          }
        }
      ),
      /***/
      6632: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var globalThis2 = __webpack_require__2(4576);
          var $fromBase64 = __webpack_require__2(9143);
          var anUint8Array = __webpack_require__2(4154);
          var Uint8Array2 = globalThis2.Uint8Array;
          var INCORRECT_BEHAVIOR_OR_DOESNT_EXISTS = !Uint8Array2 || !Uint8Array2.prototype.setFromBase64 || !function() {
            var target = new Uint8Array2([255, 255, 255, 255, 255]);
            try {
              target.setFromBase64("", null);
              return;
            } catch (error) {
            }
            try {
              target.setFromBase64("a");
              return;
            } catch (error) {
            }
            try {
              target.setFromBase64("MjYyZg===");
            } catch (error) {
              return target[0] === 50 && target[1] === 54 && target[2] === 50 && target[3] === 255 && target[4] === 255;
            }
          }();
          if (Uint8Array2) $3({ target: "Uint8Array", proto: true, forced: INCORRECT_BEHAVIOR_OR_DOESNT_EXISTS }, {
            setFromBase64: function setFromBase64(string) {
              anUint8Array(this);
              var result = $fromBase64(string, arguments.length > 1 ? arguments[1] : void 0, this, this.length);
              return { read: result.read, written: result.written };
            }
          });
        }
      ),
      /***/
      6699: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var DESCRIPTORS = __webpack_require__2(3724);
          var definePropertyModule = __webpack_require__2(4913);
          var createPropertyDescriptor = __webpack_require__2(6980);
          module.exports = DESCRIPTORS ? function(object, key, value) {
            return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
          } : function(object, key, value) {
            object[key] = value;
            return object;
          };
        }
      ),
      /***/
      6706: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(9504);
          var aCallable = __webpack_require__2(9306);
          module.exports = function(object, key, method) {
            try {
              return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));
            } catch (error) {
            }
          };
        }
      ),
      /***/
      6801: (
        /***/
        (__unused_webpack_module, exports, __webpack_require__2) => {
          var DESCRIPTORS = __webpack_require__2(3724);
          var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__2(8686);
          var definePropertyModule = __webpack_require__2(4913);
          var anObject = __webpack_require__2(8551);
          var toIndexedObject = __webpack_require__2(5397);
          var objectKeys = __webpack_require__2(1072);
          exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
            anObject(O);
            var props = toIndexedObject(Properties);
            var keys = objectKeys(Properties);
            var length = keys.length;
            var index2 = 0;
            var key;
            while (length > index2) definePropertyModule.f(O, key = keys[index2++], props[key]);
            return O;
          };
        }
      ),
      /***/
      6823: (
        /***/
        (module) => {
          var $String = String;
          module.exports = function(argument) {
            try {
              return $String(argument);
            } catch (error) {
              return "Object";
            }
          };
        }
      ),
      /***/
      6837: (
        /***/
        (module) => {
          var $TypeError = TypeError;
          var MAX_SAFE_INTEGER = 9007199254740991;
          module.exports = function(it) {
            if (it > MAX_SAFE_INTEGER) throw $TypeError("Maximum allowed index exceeded");
            return it;
          };
        }
      ),
      /***/
      6840: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var isCallable = __webpack_require__2(4901);
          var definePropertyModule = __webpack_require__2(4913);
          var makeBuiltIn = __webpack_require__2(283);
          var defineGlobalProperty = __webpack_require__2(9433);
          module.exports = function(O, key, value, options) {
            if (!options) options = {};
            var simple = options.enumerable;
            var name = options.name !== void 0 ? options.name : key;
            if (isCallable(value)) makeBuiltIn(value, name, options);
            if (options.global) {
              if (simple) O[key] = value;
              else defineGlobalProperty(key, value);
            } else {
              try {
                if (!options.unsafe) delete O[key];
                else if (O[key]) simple = true;
              } catch (error) {
              }
              if (simple) O[key] = value;
              else definePropertyModule.f(O, key, {
                value,
                enumerable: false,
                configurable: !options.nonConfigurable,
                writable: !options.nonWritable
              });
            }
            return O;
          };
        }
      ),
      /***/
      6955: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var TO_STRING_TAG_SUPPORT = __webpack_require__2(2140);
          var isCallable = __webpack_require__2(4901);
          var classofRaw = __webpack_require__2(2195);
          var wellKnownSymbol = __webpack_require__2(8227);
          var TO_STRING_TAG = wellKnownSymbol("toStringTag");
          var $Object = Object;
          var CORRECT_ARGUMENTS = classofRaw(/* @__PURE__ */ function() {
            return arguments;
          }()) === "Arguments";
          var tryGet = function(it, key) {
            try {
              return it[key];
            } catch (error) {
            }
          };
          module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
            var O, tag, result;
            return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) === "Object" && isCallable(O.callee) ? "Arguments" : result;
          };
        }
      ),
      /***/
      6969: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var toPrimitive = __webpack_require__2(2777);
          var isSymbol = __webpack_require__2(757);
          module.exports = function(argument) {
            var key = toPrimitive(argument, "string");
            return isSymbol(key) ? key : key + "";
          };
        }
      ),
      /***/
      6980: (
        /***/
        (module) => {
          module.exports = function(bitmap, value) {
            return {
              enumerable: !(bitmap & 1),
              configurable: !(bitmap & 2),
              writable: !(bitmap & 4),
              value
            };
          };
        }
      ),
      /***/
      7040: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var NATIVE_SYMBOL = __webpack_require__2(4495);
          module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
        }
      ),
      /***/
      7055: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(9504);
          var fails = __webpack_require__2(9039);
          var classof = __webpack_require__2(2195);
          var $Object = Object;
          var split = uncurryThis("".split);
          module.exports = fails(function() {
            return !$Object("z").propertyIsEnumerable(0);
          }) ? function(it) {
            return classof(it) === "String" ? split(it, "") : $Object(it);
          } : $Object;
        }
      ),
      /***/
      7080: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var has2 = __webpack_require__2(4402).has;
          module.exports = function(it) {
            has2(it);
            return it;
          };
        }
      ),
      /***/
      7347: (
        /***/
        (__unused_webpack_module, exports, __webpack_require__2) => {
          var DESCRIPTORS = __webpack_require__2(3724);
          var call = __webpack_require__2(9565);
          var propertyIsEnumerableModule = __webpack_require__2(8773);
          var createPropertyDescriptor = __webpack_require__2(6980);
          var toIndexedObject = __webpack_require__2(5397);
          var toPropertyKey = __webpack_require__2(6969);
          var hasOwn2 = __webpack_require__2(9297);
          var IE8_DOM_DEFINE = __webpack_require__2(5917);
          var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
          exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P2) {
            O = toIndexedObject(O);
            P2 = toPropertyKey(P2);
            if (IE8_DOM_DEFINE) try {
              return $getOwnPropertyDescriptor(O, P2);
            } catch (error) {
            }
            if (hasOwn2(O, P2)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P2), O[P2]);
          };
        }
      ),
      /***/
      7394: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var uncurryThisAccessor = __webpack_require__2(6706);
          var classof = __webpack_require__2(2195);
          var ArrayBuffer2 = globalThis2.ArrayBuffer;
          var TypeError2 = globalThis2.TypeError;
          module.exports = ArrayBuffer2 && uncurryThisAccessor(ArrayBuffer2.prototype, "byteLength", "get") || function(O) {
            if (classof(O) !== "ArrayBuffer") throw new TypeError2("ArrayBuffer expected");
            return O.byteLength;
          };
        }
      ),
      /***/
      7416: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var fails = __webpack_require__2(9039);
          var wellKnownSymbol = __webpack_require__2(8227);
          var DESCRIPTORS = __webpack_require__2(3724);
          var IS_PURE = __webpack_require__2(6395);
          var ITERATOR = wellKnownSymbol("iterator");
          module.exports = !fails(function() {
            var url = new URL("b?a=1&b=2&c=3", "https://a");
            var params = url.searchParams;
            var params2 = new URLSearchParams("a=1&a=2&b=3");
            var result = "";
            url.pathname = "c%20d";
            params.forEach(function(value, key) {
              params["delete"]("b");
              result += key + value;
            });
            params2["delete"]("a", 2);
            params2["delete"]("b", void 0);
            return IS_PURE && (!url.toJSON || !params2.has("a", 1) || params2.has("a", 2) || !params2.has("a", void 0) || params2.has("b")) || !params.size && (IS_PURE || !DESCRIPTORS) || !params.sort || url.href !== "https://a/c%20d?a=1&c=3" || params.get("c") !== "3" || String(new URLSearchParams("?a=1")) !== "a=1" || !params[ITERATOR] || new URL("https://a@b").username !== "a" || new URLSearchParams(new URLSearchParams("a=b")).get("a") !== "b" || new URL("https://\u0442\u0435\u0441\u0442").host !== "xn--e1aybc" || new URL("https://a#\u0431").hash !== "#%D0%B1" || result !== "a1c3" || new URL("https://x", void 0).host !== "x";
          });
        }
      ),
      /***/
      7476: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var classofRaw = __webpack_require__2(2195);
          var uncurryThis = __webpack_require__2(9504);
          module.exports = function(fn) {
            if (classofRaw(fn) === "Function") return uncurryThis(fn);
          };
        }
      ),
      /***/
      7566: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var defineBuiltIn = __webpack_require__2(6840);
          var uncurryThis = __webpack_require__2(9504);
          var toString4 = __webpack_require__2(655);
          var validateArgumentsLength = __webpack_require__2(2812);
          var $URLSearchParams = URLSearchParams;
          var URLSearchParamsPrototype = $URLSearchParams.prototype;
          var getAll = uncurryThis(URLSearchParamsPrototype.getAll);
          var $has = uncurryThis(URLSearchParamsPrototype.has);
          var params = new $URLSearchParams("a=1");
          if (params.has("a", 2) || !params.has("a", void 0)) {
            defineBuiltIn(URLSearchParamsPrototype, "has", function has2(name) {
              var length = arguments.length;
              var $value = length < 2 ? void 0 : arguments[1];
              if (length && $value === void 0) return $has(this, name);
              var values = getAll(this, name);
              validateArgumentsLength(length, 1);
              var value = toString4($value);
              var index2 = 0;
              while (index2 < values.length) {
                if (values[index2++] === value) return true;
              }
              return false;
            }, { enumerable: true, unsafe: true });
          }
        }
      ),
      /***/
      7588: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var call = __webpack_require__2(9565);
          var iterate = __webpack_require__2(2652);
          var aCallable = __webpack_require__2(9306);
          var anObject = __webpack_require__2(8551);
          var getIteratorDirect = __webpack_require__2(1767);
          var iteratorClose = __webpack_require__2(9539);
          var iteratorHelperWithoutClosingOnEarlyError = __webpack_require__2(4549);
          var forEachWithoutClosingOnEarlyError = iteratorHelperWithoutClosingOnEarlyError("forEach", TypeError);
          $3({ target: "Iterator", proto: true, real: true, forced: forEachWithoutClosingOnEarlyError }, {
            forEach: function forEach2(fn) {
              anObject(this);
              try {
                aCallable(fn);
              } catch (error) {
                iteratorClose(this, "throw", error);
              }
              if (forEachWithoutClosingOnEarlyError) return call(forEachWithoutClosingOnEarlyError, this, fn);
              var record = getIteratorDirect(this);
              var counter = 0;
              iterate(record, function(value) {
                fn(value, counter++);
              }, { IS_RECORD: true });
            }
          });
        }
      ),
      /***/
      7629: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var IS_PURE = __webpack_require__2(6395);
          var globalThis2 = __webpack_require__2(4576);
          var defineGlobalProperty = __webpack_require__2(9433);
          var SHARED = "__core-js_shared__";
          var store = module.exports = globalThis2[SHARED] || defineGlobalProperty(SHARED, {});
          (store.versions || (store.versions = [])).push({
            version: "3.45.1",
            mode: IS_PURE ? "pure" : "global",
            copyright: "\xA9 2014-2025 Denis Pushkarev (zloirock.ru)",
            license: "https://github.com/zloirock/core-js/blob/v3.45.1/LICENSE",
            source: "https://github.com/zloirock/core-js"
          });
        }
      ),
      /***/
      7642: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var difference = __webpack_require__2(3440);
          var fails = __webpack_require__2(9039);
          var setMethodAcceptSetLike = __webpack_require__2(4916);
          var SET_LIKE_INCORRECT_BEHAVIOR = !setMethodAcceptSetLike("difference", function(result) {
            return result.size === 0;
          });
          var FORCED = SET_LIKE_INCORRECT_BEHAVIOR || fails(function() {
            var setLike = {
              size: 1,
              has: function() {
                return true;
              },
              keys: function() {
                var index2 = 0;
                return {
                  next: function() {
                    var done = index2++ > 1;
                    if (baseSet.has(1)) baseSet.clear();
                    return { done, value: 2 };
                  }
                };
              }
            };
            var baseSet = /* @__PURE__ */ new Set([1, 2, 3, 4]);
            return baseSet.difference(setLike).size !== 3;
          });
          $3({ target: "Set", proto: true, real: true, forced: FORCED }, {
            difference
          });
        }
      ),
      /***/
      7657: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var fails = __webpack_require__2(9039);
          var isCallable = __webpack_require__2(4901);
          var isObject2 = __webpack_require__2(34);
          var create = __webpack_require__2(2360);
          var getPrototypeOf2 = __webpack_require__2(2787);
          var defineBuiltIn = __webpack_require__2(6840);
          var wellKnownSymbol = __webpack_require__2(8227);
          var IS_PURE = __webpack_require__2(6395);
          var ITERATOR = wellKnownSymbol("iterator");
          var BUGGY_SAFARI_ITERATORS = false;
          var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;
          if ([].keys) {
            arrayIterator = [].keys();
            if (!("next" in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
            else {
              PrototypeOfArrayIteratorPrototype = getPrototypeOf2(getPrototypeOf2(arrayIterator));
              if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
            }
          }
          var NEW_ITERATOR_PROTOTYPE = !isObject2(IteratorPrototype) || fails(function() {
            var test2 = {};
            return IteratorPrototype[ITERATOR].call(test2) !== test2;
          });
          if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
          else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);
          if (!isCallable(IteratorPrototype[ITERATOR])) {
            defineBuiltIn(IteratorPrototype, ITERATOR, function() {
              return this;
            });
          }
          module.exports = {
            IteratorPrototype,
            BUGGY_SAFARI_ITERATORS
          };
        }
      ),
      /***/
      7680: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(9504);
          module.exports = uncurryThis([].slice);
        }
      ),
      /***/
      7696: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var toIntegerOrInfinity = __webpack_require__2(1291);
          var toLength = __webpack_require__2(8014);
          var $RangeError = RangeError;
          module.exports = function(it) {
            if (it === void 0) return 0;
            var number = toIntegerOrInfinity(it);
            var length = toLength(number);
            if (number !== length) throw new $RangeError("Wrong length or index");
            return length;
          };
        }
      ),
      /***/
      7740: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var hasOwn2 = __webpack_require__2(9297);
          var ownKeys = __webpack_require__2(5031);
          var getOwnPropertyDescriptorModule = __webpack_require__2(7347);
          var definePropertyModule = __webpack_require__2(4913);
          module.exports = function(target, source, exceptions) {
            var keys = ownKeys(source);
            var defineProperty = definePropertyModule.f;
            var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (!hasOwn2(target, key) && !(exceptions && hasOwn2(exceptions, key))) {
                defineProperty(target, key, getOwnPropertyDescriptor(source, key));
              }
            }
          };
        }
      ),
      /***/
      7750: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var isNullOrUndefined = __webpack_require__2(4117);
          var $TypeError = TypeError;
          module.exports = function(it) {
            if (isNullOrUndefined(it)) throw new $TypeError("Can't call method on " + it);
            return it;
          };
        }
      ),
      /***/
      7751: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var isCallable = __webpack_require__2(4901);
          var aFunction = function(argument) {
            return isCallable(argument) ? argument : void 0;
          };
          module.exports = function(namespace, method) {
            return arguments.length < 2 ? aFunction(globalThis2[namespace]) : globalThis2[namespace] && globalThis2[namespace][method];
          };
        }
      ),
      /***/
      7811: (
        /***/
        (module) => {
          module.exports = typeof ArrayBuffer != "undefined" && typeof DataView != "undefined";
        }
      ),
      /***/
      7936: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var $transfer = __webpack_require__2(5636);
          if ($transfer) $3({ target: "ArrayBuffer", proto: true }, {
            transferToFixedLength: function transferToFixedLength() {
              return $transfer(this, arguments.length ? arguments[0] : void 0, false);
            }
          });
        }
      ),
      /***/
      8004: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var fails = __webpack_require__2(9039);
          var intersection = __webpack_require__2(8750);
          var setMethodAcceptSetLike = __webpack_require__2(4916);
          var INCORRECT = !setMethodAcceptSetLike("intersection", function(result) {
            return result.size === 2 && result.has(1) && result.has(2);
          }) || fails(function() {
            return String(Array.from((/* @__PURE__ */ new Set([1, 2, 3])).intersection(/* @__PURE__ */ new Set([3, 2])))) !== "3,2";
          });
          $3({ target: "Set", proto: true, real: true, forced: INCORRECT }, {
            intersection
          });
        }
      ),
      /***/
      8014: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var toIntegerOrInfinity = __webpack_require__2(1291);
          var min = Math.min;
          module.exports = function(argument) {
            var len = toIntegerOrInfinity(argument);
            return len > 0 ? min(len, 9007199254740991) : 0;
          };
        }
      ),
      /***/
      8100: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var $transfer = __webpack_require__2(5636);
          if ($transfer) $3({ target: "ArrayBuffer", proto: true }, {
            transfer: function transfer() {
              return $transfer(this, arguments.length ? arguments[0] : void 0, true);
            }
          });
        }
      ),
      /***/
      8111: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var globalThis2 = __webpack_require__2(4576);
          var anInstance = __webpack_require__2(679);
          var anObject = __webpack_require__2(8551);
          var isCallable = __webpack_require__2(4901);
          var getPrototypeOf2 = __webpack_require__2(2787);
          var defineBuiltInAccessor = __webpack_require__2(2106);
          var createProperty = __webpack_require__2(4659);
          var fails = __webpack_require__2(9039);
          var hasOwn2 = __webpack_require__2(9297);
          var wellKnownSymbol = __webpack_require__2(8227);
          var IteratorPrototype = __webpack_require__2(7657).IteratorPrototype;
          var DESCRIPTORS = __webpack_require__2(3724);
          var IS_PURE = __webpack_require__2(6395);
          var CONSTRUCTOR = "constructor";
          var ITERATOR = "Iterator";
          var TO_STRING_TAG = wellKnownSymbol("toStringTag");
          var $TypeError = TypeError;
          var NativeIterator = globalThis2[ITERATOR];
          var FORCED = IS_PURE || !isCallable(NativeIterator) || NativeIterator.prototype !== IteratorPrototype || !fails(function() {
            NativeIterator({});
          });
          var IteratorConstructor = function Iterator2() {
            anInstance(this, IteratorPrototype);
            if (getPrototypeOf2(this) === IteratorPrototype) throw new $TypeError("Abstract class Iterator not directly constructable");
          };
          var defineIteratorPrototypeAccessor = function(key, value) {
            if (DESCRIPTORS) {
              defineBuiltInAccessor(IteratorPrototype, key, {
                configurable: true,
                get: function() {
                  return value;
                },
                set: function(replacement) {
                  anObject(this);
                  if (this === IteratorPrototype) throw new $TypeError("You can't redefine this property");
                  if (hasOwn2(this, key)) this[key] = replacement;
                  else createProperty(this, key, replacement);
                }
              });
            } else IteratorPrototype[key] = value;
          };
          if (!hasOwn2(IteratorPrototype, TO_STRING_TAG)) defineIteratorPrototypeAccessor(TO_STRING_TAG, ITERATOR);
          if (FORCED || !hasOwn2(IteratorPrototype, CONSTRUCTOR) || IteratorPrototype[CONSTRUCTOR] === Object) {
            defineIteratorPrototypeAccessor(CONSTRUCTOR, IteratorConstructor);
          }
          IteratorConstructor.prototype = IteratorPrototype;
          $3({ global: true, constructor: true, forced: FORCED }, {
            Iterator: IteratorConstructor
          });
        }
      ),
      /***/
      8227: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var shared = __webpack_require__2(5745);
          var hasOwn2 = __webpack_require__2(9297);
          var uid = __webpack_require__2(3392);
          var NATIVE_SYMBOL = __webpack_require__2(4495);
          var USE_SYMBOL_AS_UID = __webpack_require__2(7040);
          var Symbol2 = globalThis2.Symbol;
          var WellKnownSymbolsStore = shared("wks");
          var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2["for"] || Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
          module.exports = function(name) {
            if (!hasOwn2(WellKnownSymbolsStore, name)) {
              WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn2(Symbol2, name) ? Symbol2[name] : createWellKnownSymbol("Symbol." + name);
            }
            return WellKnownSymbolsStore[name];
          };
        }
      ),
      /***/
      8235: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(9504);
          var hasOwn2 = __webpack_require__2(9297);
          var $SyntaxError = SyntaxError;
          var $parseInt = parseInt;
          var fromCharCode = String.fromCharCode;
          var at = uncurryThis("".charAt);
          var slice2 = uncurryThis("".slice);
          var exec = uncurryThis(/./.exec);
          var codePoints = {
            '\\"': '"',
            "\\\\": "\\",
            "\\/": "/",
            "\\b": "\b",
            "\\f": "\f",
            "\\n": "\n",
            "\\r": "\r",
            "\\t": "	"
          };
          var IS_4_HEX_DIGITS = /^[\da-f]{4}$/i;
          var IS_C0_CONTROL_CODE = /^[\u0000-\u001F]$/;
          module.exports = function(source, i) {
            var unterminated = true;
            var value = "";
            while (i < source.length) {
              var chr = at(source, i);
              if (chr === "\\") {
                var twoChars = slice2(source, i, i + 2);
                if (hasOwn2(codePoints, twoChars)) {
                  value += codePoints[twoChars];
                  i += 2;
                } else if (twoChars === "\\u") {
                  i += 2;
                  var fourHexDigits = slice2(source, i, i + 4);
                  if (!exec(IS_4_HEX_DIGITS, fourHexDigits)) throw new $SyntaxError("Bad Unicode escape at: " + i);
                  value += fromCharCode($parseInt(fourHexDigits, 16));
                  i += 4;
                } else throw new $SyntaxError('Unknown escape sequence: "' + twoChars + '"');
              } else if (chr === '"') {
                unterminated = false;
                i++;
                break;
              } else {
                if (exec(IS_C0_CONTROL_CODE, chr)) throw new $SyntaxError("Bad control character in string literal at: " + i);
                value += chr;
                i++;
              }
            }
            if (unterminated) throw new $SyntaxError("Unterminated string at: " + i);
            return { value, end: i };
          };
        }
      ),
      /***/
      8237: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var iterate = __webpack_require__2(2652);
          var aCallable = __webpack_require__2(9306);
          var anObject = __webpack_require__2(8551);
          var getIteratorDirect = __webpack_require__2(1767);
          var iteratorClose = __webpack_require__2(9539);
          var iteratorHelperWithoutClosingOnEarlyError = __webpack_require__2(4549);
          var apply = __webpack_require__2(8745);
          var fails = __webpack_require__2(9039);
          var $TypeError = TypeError;
          var FAILS_ON_INITIAL_UNDEFINED = fails(function() {
            [].keys().reduce(function() {
            }, void 0);
          });
          var reduceWithoutClosingOnEarlyError = !FAILS_ON_INITIAL_UNDEFINED && iteratorHelperWithoutClosingOnEarlyError("reduce", $TypeError);
          $3({ target: "Iterator", proto: true, real: true, forced: FAILS_ON_INITIAL_UNDEFINED || reduceWithoutClosingOnEarlyError }, {
            reduce: function reduce(reducer) {
              anObject(this);
              try {
                aCallable(reducer);
              } catch (error) {
                iteratorClose(this, "throw", error);
              }
              var noInitial = arguments.length < 2;
              var accumulator = noInitial ? void 0 : arguments[1];
              if (reduceWithoutClosingOnEarlyError) {
                return apply(reduceWithoutClosingOnEarlyError, this, noInitial ? [reducer] : [reducer, accumulator]);
              }
              var record = getIteratorDirect(this);
              var counter = 0;
              iterate(record, function(value) {
                if (noInitial) {
                  noInitial = false;
                  accumulator = value;
                } else {
                  accumulator = reducer(accumulator, value, counter);
                }
                counter++;
              }, { IS_RECORD: true });
              if (noInitial) throw new $TypeError("Reduce of empty iterator with no initial value");
              return accumulator;
            }
          });
        }
      ),
      /***/
      8335: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var DESCRIPTORS = __webpack_require__2(3724);
          var globalThis2 = __webpack_require__2(4576);
          var getBuiltIn = __webpack_require__2(7751);
          var uncurryThis = __webpack_require__2(9504);
          var call = __webpack_require__2(9565);
          var isCallable = __webpack_require__2(4901);
          var isObject2 = __webpack_require__2(34);
          var isArray2 = __webpack_require__2(4376);
          var hasOwn2 = __webpack_require__2(9297);
          var toString4 = __webpack_require__2(655);
          var lengthOfArrayLike = __webpack_require__2(6198);
          var createProperty = __webpack_require__2(4659);
          var fails = __webpack_require__2(9039);
          var parseJSONString = __webpack_require__2(8235);
          var NATIVE_SYMBOL = __webpack_require__2(4495);
          var JSON2 = globalThis2.JSON;
          var Number2 = globalThis2.Number;
          var SyntaxError2 = globalThis2.SyntaxError;
          var nativeParse = JSON2 && JSON2.parse;
          var enumerableOwnProperties = getBuiltIn("Object", "keys");
          var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
          var at = uncurryThis("".charAt);
          var slice2 = uncurryThis("".slice);
          var exec = uncurryThis(/./.exec);
          var push = uncurryThis([].push);
          var IS_DIGIT = /^\d$/;
          var IS_NON_ZERO_DIGIT = /^[1-9]$/;
          var IS_NUMBER_START = /^[\d-]$/;
          var IS_WHITESPACE = /^[\t\n\r ]$/;
          var PRIMITIVE = 0;
          var OBJECT = 1;
          var $parse = function(source, reviver) {
            source = toString4(source);
            var context = new Context(source, 0);
            var root2 = context.parse();
            var value = root2.value;
            var endIndex = context.skip(IS_WHITESPACE, root2.end);
            if (endIndex < source.length) {
              throw new SyntaxError2('Unexpected extra character: "' + at(source, endIndex) + '" after the parsed data at: ' + endIndex);
            }
            return isCallable(reviver) ? internalize({ "": value }, "", reviver, root2) : value;
          };
          var internalize = function(holder, name, reviver, node) {
            var val2 = holder[name];
            var unmodified = node && val2 === node.value;
            var context = unmodified && typeof node.source == "string" ? { source: node.source } : {};
            var elementRecordsLen, keys, len, i, P2;
            if (isObject2(val2)) {
              var nodeIsArray = isArray2(val2);
              var nodes = unmodified ? node.nodes : nodeIsArray ? [] : {};
              if (nodeIsArray) {
                elementRecordsLen = nodes.length;
                len = lengthOfArrayLike(val2);
                for (i = 0; i < len; i++) {
                  internalizeProperty(val2, i, internalize(val2, "" + i, reviver, i < elementRecordsLen ? nodes[i] : void 0));
                }
              } else {
                keys = enumerableOwnProperties(val2);
                len = lengthOfArrayLike(keys);
                for (i = 0; i < len; i++) {
                  P2 = keys[i];
                  internalizeProperty(val2, P2, internalize(val2, P2, reviver, hasOwn2(nodes, P2) ? nodes[P2] : void 0));
                }
              }
            }
            return call(reviver, holder, name, val2, context);
          };
          var internalizeProperty = function(object, key, value) {
            if (DESCRIPTORS) {
              var descriptor = getOwnPropertyDescriptor(object, key);
              if (descriptor && !descriptor.configurable) return;
            }
            if (value === void 0) delete object[key];
            else createProperty(object, key, value);
          };
          var Node22 = function(value, end2, source, nodes) {
            this.value = value;
            this.end = end2;
            this.source = source;
            this.nodes = nodes;
          };
          var Context = function(source, index2) {
            this.source = source;
            this.index = index2;
          };
          Context.prototype = {
            fork: function(nextIndex) {
              return new Context(this.source, nextIndex);
            },
            parse: function() {
              var source = this.source;
              var i = this.skip(IS_WHITESPACE, this.index);
              var fork = this.fork(i);
              var chr = at(source, i);
              if (exec(IS_NUMBER_START, chr)) return fork.number();
              switch (chr) {
                case "{":
                  return fork.object();
                case "[":
                  return fork.array();
                case '"':
                  return fork.string();
                case "t":
                  return fork.keyword(true);
                case "f":
                  return fork.keyword(false);
                case "n":
                  return fork.keyword(null);
              }
              throw new SyntaxError2('Unexpected character: "' + chr + '" at: ' + i);
            },
            node: function(type, value, start, end2, nodes) {
              return new Node22(value, end2, type ? null : slice2(this.source, start, end2), nodes);
            },
            object: function() {
              var source = this.source;
              var i = this.index + 1;
              var expectKeypair = false;
              var object = {};
              var nodes = {};
              while (i < source.length) {
                i = this.until(['"', "}"], i);
                if (at(source, i) === "}" && !expectKeypair) {
                  i++;
                  break;
                }
                var result = this.fork(i).string();
                var key = result.value;
                i = result.end;
                i = this.until([":"], i) + 1;
                i = this.skip(IS_WHITESPACE, i);
                result = this.fork(i).parse();
                createProperty(nodes, key, result);
                createProperty(object, key, result.value);
                i = this.until([",", "}"], result.end);
                var chr = at(source, i);
                if (chr === ",") {
                  expectKeypair = true;
                  i++;
                } else if (chr === "}") {
                  i++;
                  break;
                }
              }
              return this.node(OBJECT, object, this.index, i, nodes);
            },
            array: function() {
              var source = this.source;
              var i = this.index + 1;
              var expectElement = false;
              var array = [];
              var nodes = [];
              while (i < source.length) {
                i = this.skip(IS_WHITESPACE, i);
                if (at(source, i) === "]" && !expectElement) {
                  i++;
                  break;
                }
                var result = this.fork(i).parse();
                push(nodes, result);
                push(array, result.value);
                i = this.until([",", "]"], result.end);
                if (at(source, i) === ",") {
                  expectElement = true;
                  i++;
                } else if (at(source, i) === "]") {
                  i++;
                  break;
                }
              }
              return this.node(OBJECT, array, this.index, i, nodes);
            },
            string: function() {
              var index2 = this.index;
              var parsed = parseJSONString(this.source, this.index + 1);
              return this.node(PRIMITIVE, parsed.value, index2, parsed.end);
            },
            number: function() {
              var source = this.source;
              var startIndex = this.index;
              var i = startIndex;
              if (at(source, i) === "-") i++;
              if (at(source, i) === "0") i++;
              else if (exec(IS_NON_ZERO_DIGIT, at(source, i))) i = this.skip(IS_DIGIT, i + 1);
              else throw new SyntaxError2("Failed to parse number at: " + i);
              if (at(source, i) === ".") i = this.skip(IS_DIGIT, i + 1);
              if (at(source, i) === "e" || at(source, i) === "E") {
                i++;
                if (at(source, i) === "+" || at(source, i) === "-") i++;
                var exponentStartIndex = i;
                i = this.skip(IS_DIGIT, i);
                if (exponentStartIndex === i) throw new SyntaxError2("Failed to parse number's exponent value at: " + i);
              }
              return this.node(PRIMITIVE, Number2(slice2(source, startIndex, i)), startIndex, i);
            },
            keyword: function(value) {
              var keyword = "" + value;
              var index2 = this.index;
              var endIndex = index2 + keyword.length;
              if (slice2(this.source, index2, endIndex) !== keyword) throw new SyntaxError2("Failed to parse value at: " + index2);
              return this.node(PRIMITIVE, value, index2, endIndex);
            },
            skip: function(regex, i) {
              var source = this.source;
              for (; i < source.length; i++) if (!exec(regex, at(source, i))) break;
              return i;
            },
            until: function(array, i) {
              i = this.skip(IS_WHITESPACE, i);
              var chr = at(this.source, i);
              for (var j2 = 0; j2 < array.length; j2++) if (array[j2] === chr) return i;
              throw new SyntaxError2('Unexpected character: "' + chr + '" at: ' + i);
            }
          };
          var NO_SOURCE_SUPPORT = fails(function() {
            var unsafeInt = "9007199254740993";
            var source;
            nativeParse(unsafeInt, function(key, value, context) {
              source = context.source;
            });
            return source !== unsafeInt;
          });
          var PROPER_BASE_PARSE = NATIVE_SYMBOL && !fails(function() {
            return 1 / nativeParse("-0 	") !== -Infinity;
          });
          $3({ target: "JSON", stat: true, forced: NO_SOURCE_SUPPORT }, {
            parse: function parse6(text3, reviver) {
              return PROPER_BASE_PARSE && !isCallable(reviver) ? nativeParse(text3) : $parse(text3, reviver);
            }
          });
        }
      ),
      /***/
      8469: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(9504);
          var iterateSimple = __webpack_require__2(507);
          var SetHelpers = __webpack_require__2(4402);
          var Set2 = SetHelpers.Set;
          var SetPrototype = SetHelpers.proto;
          var forEach2 = uncurryThis(SetPrototype.forEach);
          var keys = uncurryThis(SetPrototype.keys);
          var next2 = keys(new Set2()).next;
          module.exports = function(set, fn, interruptible) {
            return interruptible ? iterateSimple({ iterator: keys(set), next: next2 }, fn) : forEach2(set, fn);
          };
        }
      ),
      /***/
      8480: (
        /***/
        (__unused_webpack_module, exports, __webpack_require__2) => {
          var internalObjectKeys = __webpack_require__2(1828);
          var enumBugKeys = __webpack_require__2(8727);
          var hiddenKeys = enumBugKeys.concat("length", "prototype");
          exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
            return internalObjectKeys(O, hiddenKeys);
          };
        }
      ),
      /***/
      8527: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var aSet = __webpack_require__2(7080);
          var has2 = __webpack_require__2(4402).has;
          var size = __webpack_require__2(5170);
          var getSetRecord = __webpack_require__2(3789);
          var iterateSimple = __webpack_require__2(507);
          var iteratorClose = __webpack_require__2(9539);
          module.exports = function isSupersetOf(other) {
            var O = aSet(this);
            var otherRec = getSetRecord(other);
            if (size(O) < otherRec.size) return false;
            var iterator2 = otherRec.getIterator();
            return iterateSimple(iterator2, function(e) {
              if (!has2(O, e)) return iteratorClose(iterator2, "normal", false);
            }) !== false;
          };
        }
      ),
      /***/
      8551: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var isObject2 = __webpack_require__2(34);
          var $String = String;
          var $TypeError = TypeError;
          module.exports = function(argument) {
            if (isObject2(argument)) return argument;
            throw new $TypeError($String(argument) + " is not an object");
          };
        }
      ),
      /***/
      8574: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(9504);
          var $Error = Error;
          var replace = uncurryThis("".replace);
          var TEST = function(arg) {
            return String(new $Error(arg).stack);
          }("zxcasd");
          var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
          var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
          module.exports = function(stack, dropEntries) {
            if (IS_V8_OR_CHAKRA_STACK && typeof stack == "string" && !$Error.prepareStackTrace) {
              while (dropEntries--) stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, "");
            }
            return stack;
          };
        }
      ),
      /***/
      8622: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var isCallable = __webpack_require__2(4901);
          var WeakMap2 = globalThis2.WeakMap;
          module.exports = isCallable(WeakMap2) && /native code/.test(String(WeakMap2));
        }
      ),
      /***/
      8646: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var call = __webpack_require__2(9565);
          var anObject = __webpack_require__2(8551);
          var getIteratorDirect = __webpack_require__2(1767);
          var getIteratorMethod = __webpack_require__2(851);
          module.exports = function(obj, stringHandling) {
            if (!stringHandling || typeof obj !== "string") anObject(obj);
            var method = getIteratorMethod(obj);
            return getIteratorDirect(anObject(method !== void 0 ? call(method, obj) : obj));
          };
        }
      ),
      /***/
      8686: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var DESCRIPTORS = __webpack_require__2(3724);
          var fails = __webpack_require__2(9039);
          module.exports = DESCRIPTORS && fails(function() {
            return Object.defineProperty(function() {
            }, "prototype", {
              value: 42,
              writable: false
            }).prototype !== 42;
          });
        }
      ),
      /***/
      8721: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var DESCRIPTORS = __webpack_require__2(3724);
          var uncurryThis = __webpack_require__2(9504);
          var defineBuiltInAccessor = __webpack_require__2(2106);
          var URLSearchParamsPrototype = URLSearchParams.prototype;
          var forEach2 = uncurryThis(URLSearchParamsPrototype.forEach);
          if (DESCRIPTORS && !("size" in URLSearchParamsPrototype)) {
            defineBuiltInAccessor(URLSearchParamsPrototype, "size", {
              get: function size() {
                var count = 0;
                forEach2(this, function() {
                  count++;
                });
                return count;
              },
              configurable: true,
              enumerable: true
            });
          }
        }
      ),
      /***/
      8727: (
        /***/
        (module) => {
          module.exports = [
            "constructor",
            "hasOwnProperty",
            "isPrototypeOf",
            "propertyIsEnumerable",
            "toLocaleString",
            "toString",
            "valueOf"
          ];
        }
      ),
      /***/
      8745: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var NATIVE_BIND = __webpack_require__2(616);
          var FunctionPrototype = Function.prototype;
          var apply = FunctionPrototype.apply;
          var call = FunctionPrototype.call;
          module.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {
            return call.apply(apply, arguments);
          });
        }
      ),
      /***/
      8750: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var aSet = __webpack_require__2(7080);
          var SetHelpers = __webpack_require__2(4402);
          var size = __webpack_require__2(5170);
          var getSetRecord = __webpack_require__2(3789);
          var iterateSet = __webpack_require__2(8469);
          var iterateSimple = __webpack_require__2(507);
          var Set2 = SetHelpers.Set;
          var add2 = SetHelpers.add;
          var has2 = SetHelpers.has;
          module.exports = function intersection(other) {
            var O = aSet(this);
            var otherRec = getSetRecord(other);
            var result = new Set2();
            if (size(O) > otherRec.size) {
              iterateSimple(otherRec.getIterator(), function(e) {
                if (has2(O, e)) add2(result, e);
              });
            } else {
              iterateSet(O, function(e) {
                if (otherRec.includes(e)) add2(result, e);
              });
            }
            return result;
          };
        }
      ),
      /***/
      8773: (
        /***/
        (__unused_webpack_module, exports) => {
          var $propertyIsEnumerable = {}.propertyIsEnumerable;
          var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
          var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
          exports.f = NASHORN_BUG ? function propertyIsEnumerable(V2) {
            var descriptor = getOwnPropertyDescriptor(this, V2);
            return !!descriptor && descriptor.enumerable;
          } : $propertyIsEnumerable;
        }
      ),
      /***/
      8981: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var requireObjectCoercible = __webpack_require__2(7750);
          var $Object = Object;
          module.exports = function(argument) {
            return $Object(requireObjectCoercible(argument));
          };
        }
      ),
      /***/
      9039: (
        /***/
        (module) => {
          module.exports = function(exec) {
            try {
              return !!exec();
            } catch (error) {
              return true;
            }
          };
        }
      ),
      /***/
      9143: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var uncurryThis = __webpack_require__2(9504);
          var anObjectOrUndefined = __webpack_require__2(3972);
          var aString = __webpack_require__2(3463);
          var hasOwn2 = __webpack_require__2(9297);
          var base64Map = __webpack_require__2(2804);
          var getAlphabetOption = __webpack_require__2(944);
          var notDetached = __webpack_require__2(5169);
          var base64Alphabet = base64Map.c2i;
          var base64UrlAlphabet = base64Map.c2iUrl;
          var SyntaxError2 = globalThis2.SyntaxError;
          var TypeError2 = globalThis2.TypeError;
          var at = uncurryThis("".charAt);
          var skipAsciiWhitespace = function(string, index2) {
            var length = string.length;
            for (; index2 < length; index2++) {
              var chr = at(string, index2);
              if (chr !== " " && chr !== "	" && chr !== "\n" && chr !== "\f" && chr !== "\r") break;
            }
            return index2;
          };
          var decodeBase64Chunk = function(chunk, alphabet, throwOnExtraBits) {
            var chunkLength = chunk.length;
            if (chunkLength < 4) {
              chunk += chunkLength === 2 ? "AA" : "A";
            }
            var triplet = (alphabet[at(chunk, 0)] << 18) + (alphabet[at(chunk, 1)] << 12) + (alphabet[at(chunk, 2)] << 6) + alphabet[at(chunk, 3)];
            var chunkBytes = [
              triplet >> 16 & 255,
              triplet >> 8 & 255,
              triplet & 255
            ];
            if (chunkLength === 2) {
              if (throwOnExtraBits && chunkBytes[1] !== 0) {
                throw new SyntaxError2("Extra bits");
              }
              return [chunkBytes[0]];
            }
            if (chunkLength === 3) {
              if (throwOnExtraBits && chunkBytes[2] !== 0) {
                throw new SyntaxError2("Extra bits");
              }
              return [chunkBytes[0], chunkBytes[1]];
            }
            return chunkBytes;
          };
          var writeBytes = function(bytes, elements, written) {
            var elementsLength = elements.length;
            for (var index2 = 0; index2 < elementsLength; index2++) {
              bytes[written + index2] = elements[index2];
            }
            return written + elementsLength;
          };
          module.exports = function(string, options, into, maxLength) {
            aString(string);
            anObjectOrUndefined(options);
            var alphabet = getAlphabetOption(options) === "base64" ? base64Alphabet : base64UrlAlphabet;
            var lastChunkHandling = options ? options.lastChunkHandling : void 0;
            if (lastChunkHandling === void 0) lastChunkHandling = "loose";
            if (lastChunkHandling !== "loose" && lastChunkHandling !== "strict" && lastChunkHandling !== "stop-before-partial") {
              throw new TypeError2("Incorrect `lastChunkHandling` option");
            }
            if (into) notDetached(into.buffer);
            var stringLength = string.length;
            var bytes = into || [];
            var written = 0;
            var read = 0;
            var chunk = "";
            var index2 = 0;
            if (maxLength) while (true) {
              index2 = skipAsciiWhitespace(string, index2);
              if (index2 === stringLength) {
                if (chunk.length > 0) {
                  if (lastChunkHandling === "stop-before-partial") {
                    break;
                  }
                  if (lastChunkHandling === "loose") {
                    if (chunk.length === 1) {
                      throw new SyntaxError2("Malformed padding: exactly one additional character");
                    }
                    written = writeBytes(bytes, decodeBase64Chunk(chunk, alphabet, false), written);
                  } else {
                    throw new SyntaxError2("Missing padding");
                  }
                }
                read = stringLength;
                break;
              }
              var chr = at(string, index2);
              ++index2;
              if (chr === "=") {
                if (chunk.length < 2) {
                  throw new SyntaxError2("Padding is too early");
                }
                index2 = skipAsciiWhitespace(string, index2);
                if (chunk.length === 2) {
                  if (index2 === stringLength) {
                    if (lastChunkHandling === "stop-before-partial") {
                      break;
                    }
                    throw new SyntaxError2("Malformed padding: only one =");
                  }
                  if (at(string, index2) === "=") {
                    ++index2;
                    index2 = skipAsciiWhitespace(string, index2);
                  }
                }
                if (index2 < stringLength) {
                  throw new SyntaxError2("Unexpected character after padding");
                }
                written = writeBytes(bytes, decodeBase64Chunk(chunk, alphabet, lastChunkHandling === "strict"), written);
                read = stringLength;
                break;
              }
              if (!hasOwn2(alphabet, chr)) {
                throw new SyntaxError2("Unexpected character");
              }
              var remainingBytes = maxLength - written;
              if (remainingBytes === 1 && chunk.length === 2 || remainingBytes === 2 && chunk.length === 3) {
                break;
              }
              chunk += chr;
              if (chunk.length === 4) {
                written = writeBytes(bytes, decodeBase64Chunk(chunk, alphabet, false), written);
                chunk = "";
                read = index2;
                if (written === maxLength) {
                  break;
                }
              }
            }
            return { bytes, read, written };
          };
        }
      ),
      /***/
      9286: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var SetHelpers = __webpack_require__2(4402);
          var iterate = __webpack_require__2(8469);
          var Set2 = SetHelpers.Set;
          var add2 = SetHelpers.add;
          module.exports = function(set) {
            var result = new Set2();
            iterate(set, function(it) {
              add2(result, it);
            });
            return result;
          };
        }
      ),
      /***/
      9297: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var uncurryThis = __webpack_require__2(9504);
          var toObject = __webpack_require__2(8981);
          var hasOwnProperty2 = uncurryThis({}.hasOwnProperty);
          module.exports = Object.hasOwn || function hasOwn2(it, key) {
            return hasOwnProperty2(toObject(it), key);
          };
        }
      ),
      /***/
      9306: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var isCallable = __webpack_require__2(4901);
          var tryToString = __webpack_require__2(6823);
          var $TypeError = TypeError;
          module.exports = function(argument) {
            if (isCallable(argument)) return argument;
            throw new $TypeError(tryToString(argument) + " is not a function");
          };
        }
      ),
      /***/
      9314: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var call = __webpack_require__2(9565);
          var anObject = __webpack_require__2(8551);
          var getIteratorDirect = __webpack_require__2(1767);
          var notANaN = __webpack_require__2(4149);
          var toPositiveInteger = __webpack_require__2(9590);
          var iteratorClose = __webpack_require__2(9539);
          var createIteratorProxy = __webpack_require__2(9462);
          var iteratorHelperThrowsOnInvalidIterator = __webpack_require__2(684);
          var iteratorHelperWithoutClosingOnEarlyError = __webpack_require__2(4549);
          var IS_PURE = __webpack_require__2(6395);
          var DROP_WITHOUT_THROWING_ON_INVALID_ITERATOR = !IS_PURE && !iteratorHelperThrowsOnInvalidIterator("drop", 0);
          var dropWithoutClosingOnEarlyError = !IS_PURE && !DROP_WITHOUT_THROWING_ON_INVALID_ITERATOR && iteratorHelperWithoutClosingOnEarlyError("drop", RangeError);
          var FORCED = IS_PURE || DROP_WITHOUT_THROWING_ON_INVALID_ITERATOR || dropWithoutClosingOnEarlyError;
          var IteratorProxy = createIteratorProxy(function() {
            var iterator2 = this.iterator;
            var next2 = this.next;
            var result, done;
            while (this.remaining) {
              this.remaining--;
              result = anObject(call(next2, iterator2));
              done = this.done = !!result.done;
              if (done) return;
            }
            result = anObject(call(next2, iterator2));
            done = this.done = !!result.done;
            if (!done) return result.value;
          });
          $3({ target: "Iterator", proto: true, real: true, forced: FORCED }, {
            drop: function drop(limit) {
              anObject(this);
              var remaining;
              try {
                remaining = toPositiveInteger(notANaN(+limit));
              } catch (error) {
                iteratorClose(this, "throw", error);
              }
              if (dropWithoutClosingOnEarlyError) return call(dropWithoutClosingOnEarlyError, this, remaining);
              return new IteratorProxy(getIteratorDirect(this), {
                remaining
              });
            }
          });
        }
      ),
      /***/
      9429: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var IS_NODE = __webpack_require__2(6193);
          module.exports = function(name) {
            if (IS_NODE) {
              try {
                return globalThis2.process.getBuiltinModule(name);
              } catch (error) {
              }
              try {
                return Function('return require("' + name + '")')();
              } catch (error) {
              }
            }
          };
        }
      ),
      /***/
      9432: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          __webpack_require__2(5213);
        }
      ),
      /***/
      9433: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var defineProperty = Object.defineProperty;
          module.exports = function(key, value) {
            try {
              defineProperty(globalThis2, key, { value, configurable: true, writable: true });
            } catch (error) {
              globalThis2[key] = value;
            }
            return value;
          };
        }
      ),
      /***/
      9462: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var call = __webpack_require__2(9565);
          var create = __webpack_require__2(2360);
          var createNonEnumerableProperty = __webpack_require__2(6699);
          var defineBuiltIns = __webpack_require__2(6279);
          var wellKnownSymbol = __webpack_require__2(8227);
          var InternalStateModule = __webpack_require__2(1181);
          var getMethod = __webpack_require__2(5966);
          var IteratorPrototype = __webpack_require__2(7657).IteratorPrototype;
          var createIterResultObject = __webpack_require__2(2529);
          var iteratorClose = __webpack_require__2(9539);
          var iteratorCloseAll = __webpack_require__2(1385);
          var TO_STRING_TAG = wellKnownSymbol("toStringTag");
          var ITERATOR_HELPER = "IteratorHelper";
          var WRAP_FOR_VALID_ITERATOR = "WrapForValidIterator";
          var NORMAL = "normal";
          var THROW = "throw";
          var setInternalState = InternalStateModule.set;
          var createIteratorProxyPrototype = function(IS_ITERATOR) {
            var getInternalState = InternalStateModule.getterFor(IS_ITERATOR ? WRAP_FOR_VALID_ITERATOR : ITERATOR_HELPER);
            return defineBuiltIns(create(IteratorPrototype), {
              next: function next2() {
                var state = getInternalState(this);
                if (IS_ITERATOR) return state.nextHandler();
                if (state.done) return createIterResultObject(void 0, true);
                try {
                  var result = state.nextHandler();
                  return state.returnHandlerResult ? result : createIterResultObject(result, state.done);
                } catch (error) {
                  state.done = true;
                  throw error;
                }
              },
              "return": function() {
                var state = getInternalState(this);
                var iterator2 = state.iterator;
                state.done = true;
                if (IS_ITERATOR) {
                  var returnMethod = getMethod(iterator2, "return");
                  return returnMethod ? call(returnMethod, iterator2) : createIterResultObject(void 0, true);
                }
                if (state.inner) try {
                  iteratorClose(state.inner.iterator, NORMAL);
                } catch (error) {
                  return iteratorClose(iterator2, THROW, error);
                }
                if (state.openIters) try {
                  iteratorCloseAll(state.openIters, NORMAL);
                } catch (error) {
                  return iteratorClose(iterator2, THROW, error);
                }
                if (iterator2) iteratorClose(iterator2, NORMAL);
                return createIterResultObject(void 0, true);
              }
            });
          };
          var WrapForValidIteratorPrototype = createIteratorProxyPrototype(true);
          var IteratorHelperPrototype = createIteratorProxyPrototype(false);
          createNonEnumerableProperty(IteratorHelperPrototype, TO_STRING_TAG, "Iterator Helper");
          module.exports = function(nextHandler, IS_ITERATOR, RETURN_HANDLER_RESULT) {
            var IteratorProxy = function Iterator2(record, state) {
              if (state) {
                state.iterator = record.iterator;
                state.next = record.next;
              } else state = record;
              state.type = IS_ITERATOR ? WRAP_FOR_VALID_ITERATOR : ITERATOR_HELPER;
              state.returnHandlerResult = !!RETURN_HANDLER_RESULT;
              state.nextHandler = nextHandler;
              state.counter = 0;
              state.done = false;
              setInternalState(this, state);
            };
            IteratorProxy.prototype = IS_ITERATOR ? WrapForValidIteratorPrototype : IteratorHelperPrototype;
            return IteratorProxy;
          };
        }
      ),
      /***/
      9486: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var $3 = __webpack_require__2(6518);
          var globalThis2 = __webpack_require__2(4576);
          var uncurryThis = __webpack_require__2(9504);
          var anObjectOrUndefined = __webpack_require__2(3972);
          var anUint8Array = __webpack_require__2(4154);
          var notDetached = __webpack_require__2(5169);
          var base64Map = __webpack_require__2(2804);
          var getAlphabetOption = __webpack_require__2(944);
          var base64Alphabet = base64Map.i2c;
          var base64UrlAlphabet = base64Map.i2cUrl;
          var charAt = uncurryThis("".charAt);
          var Uint8Array2 = globalThis2.Uint8Array;
          var INCORRECT_BEHAVIOR_OR_DOESNT_EXISTS = !Uint8Array2 || !Uint8Array2.prototype.toBase64 || !function() {
            try {
              var target = new Uint8Array2();
              target.toBase64(null);
            } catch (error) {
              return true;
            }
          }();
          if (Uint8Array2) $3({ target: "Uint8Array", proto: true, forced: INCORRECT_BEHAVIOR_OR_DOESNT_EXISTS }, {
            toBase64: function toBase64() {
              var array = anUint8Array(this);
              var options = arguments.length ? anObjectOrUndefined(arguments[0]) : void 0;
              var alphabet = getAlphabetOption(options) === "base64" ? base64Alphabet : base64UrlAlphabet;
              var omitPadding = !!options && !!options.omitPadding;
              notDetached(this.buffer);
              var result = "";
              var i = 0;
              var length = array.length;
              var triplet;
              var at = function(shift) {
                return charAt(alphabet, triplet >> 6 * shift & 63);
              };
              for (; i + 2 < length; i += 3) {
                triplet = (array[i] << 16) + (array[i + 1] << 8) + array[i + 2];
                result += at(3) + at(2) + at(1) + at(0);
              }
              if (i + 2 === length) {
                triplet = (array[i] << 16) + (array[i + 1] << 8);
                result += at(3) + at(2) + at(1) + (omitPadding ? "" : "=");
              } else if (i + 1 === length) {
                triplet = array[i] << 16;
                result += at(3) + at(2) + (omitPadding ? "" : "==");
              }
              return result;
            }
          });
        }
      ),
      /***/
      9504: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var NATIVE_BIND = __webpack_require__2(616);
          var FunctionPrototype = Function.prototype;
          var call = FunctionPrototype.call;
          var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);
          module.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
            return function() {
              return call.apply(fn, arguments);
            };
          };
        }
      ),
      /***/
      9519: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var globalThis2 = __webpack_require__2(4576);
          var userAgent = __webpack_require__2(2839);
          var process2 = globalThis2.process;
          var Deno2 = globalThis2.Deno;
          var versions = process2 && process2.versions || Deno2 && Deno2.version;
          var v8 = versions && versions.v8;
          var match, version2;
          if (v8) {
            match = v8.split(".");
            version2 = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
          }
          if (!version2 && userAgent) {
            match = userAgent.match(/Edge\/(\d+)/);
            if (!match || match[1] >= 74) {
              match = userAgent.match(/Chrome\/(\d+)/);
              if (match) version2 = +match[1];
            }
          }
          module.exports = version2;
        }
      ),
      /***/
      9539: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var call = __webpack_require__2(9565);
          var anObject = __webpack_require__2(8551);
          var getMethod = __webpack_require__2(5966);
          module.exports = function(iterator2, kind, value) {
            var innerResult, innerError;
            anObject(iterator2);
            try {
              innerResult = getMethod(iterator2, "return");
              if (!innerResult) {
                if (kind === "throw") throw value;
                return value;
              }
              innerResult = call(innerResult, iterator2);
            } catch (error) {
              innerError = true;
              innerResult = error;
            }
            if (kind === "throw") throw value;
            if (innerError) throw innerResult;
            anObject(innerResult);
            return value;
          };
        }
      ),
      /***/
      9565: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var NATIVE_BIND = __webpack_require__2(616);
          var call = Function.prototype.call;
          module.exports = NATIVE_BIND ? call.bind(call) : function() {
            return call.apply(call, arguments);
          };
        }
      ),
      /***/
      9577: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          var arrayWith = __webpack_require__2(9928);
          var ArrayBufferViewCore = __webpack_require__2(4644);
          var isBigIntArray = __webpack_require__2(1108);
          var toIntegerOrInfinity = __webpack_require__2(1291);
          var toBigInt = __webpack_require__2(5854);
          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
          var PROPER_ORDER = function() {
            try {
              new Int8Array(1)["with"](2, { valueOf: function() {
                throw 8;
              } });
            } catch (error) {
              return error === 8;
            }
          }();
          var THROW_ON_NEGATIVE_FRACTIONAL_INDEX = PROPER_ORDER && function() {
            try {
              new Int8Array(1)["with"](-0.5, 1);
            } catch (error) {
              return true;
            }
          }();
          exportTypedArrayMethod("with", { "with": function(index2, value) {
            var O = aTypedArray(this);
            var relativeIndex = toIntegerOrInfinity(index2);
            var actualValue = isBigIntArray(O) ? toBigInt(value) : +value;
            return arrayWith(O, getTypedArrayConstructor(O), relativeIndex, actualValue);
          } }["with"], !PROPER_ORDER || THROW_ON_NEGATIVE_FRACTIONAL_INDEX);
        }
      ),
      /***/
      9590: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var toIntegerOrInfinity = __webpack_require__2(1291);
          var $RangeError = RangeError;
          module.exports = function(it) {
            var result = toIntegerOrInfinity(it);
            if (result < 0) throw new $RangeError("The argument can't be less than 0");
            return result;
          };
        }
      ),
      /***/
      9617: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var toIndexedObject = __webpack_require__2(5397);
          var toAbsoluteIndex = __webpack_require__2(5610);
          var lengthOfArrayLike = __webpack_require__2(6198);
          var createMethod = function(IS_INCLUDES) {
            return function($this, el, fromIndex) {
              var O = toIndexedObject($this);
              var length = lengthOfArrayLike(O);
              if (length === 0) return !IS_INCLUDES && -1;
              var index2 = toAbsoluteIndex(fromIndex, length);
              var value;
              if (IS_INCLUDES && el !== el) while (length > index2) {
                value = O[index2++];
                if (value !== value) return true;
              }
              else for (; length > index2; index2++) {
                if ((IS_INCLUDES || index2 in O) && O[index2] === el) return IS_INCLUDES || index2 || 0;
              }
              return !IS_INCLUDES && -1;
            };
          };
          module.exports = {
            // `Array.prototype.includes` method
            // https://tc39.es/ecma262/#sec-array.prototype.includes
            includes: createMethod(true),
            // `Array.prototype.indexOf` method
            // https://tc39.es/ecma262/#sec-array.prototype.indexof
            indexOf: createMethod(false)
          };
        }
      ),
      /***/
      9631: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          __webpack_require__2(9486);
        }
      ),
      /***/
      9797: (
        /***/
        (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
          __webpack_require__2(4226);
        }
      ),
      /***/
      9835: (
        /***/
        (module) => {
          module.exports = function(METHOD_NAME) {
            try {
              var baseSet = /* @__PURE__ */ new Set();
              var setLike = {
                size: 0,
                has: function() {
                  return true;
                },
                keys: function() {
                  return Object.defineProperty({}, "next", {
                    get: function() {
                      baseSet.clear();
                      baseSet.add(4);
                      return function() {
                        return { done: true };
                      };
                    }
                  });
                }
              };
              var result = baseSet[METHOD_NAME](setLike);
              return result.size === 1 && result.values().next().value === 4;
            } catch (error) {
              return false;
            }
          };
        }
      ),
      /***/
      9928: (
        /***/
        (module, __unused_webpack_exports, __webpack_require__2) => {
          var lengthOfArrayLike = __webpack_require__2(6198);
          var toIntegerOrInfinity = __webpack_require__2(1291);
          var $RangeError = RangeError;
          module.exports = function(O, C2, index2, value) {
            var len = lengthOfArrayLike(O);
            var relativeIndex = toIntegerOrInfinity(index2);
            var actualIndex = relativeIndex < 0 ? len + relativeIndex : relativeIndex;
            if (actualIndex >= len || actualIndex < 0) throw new $RangeError("Incorrect index");
            var A = new C2(len);
            var k2 = 0;
            for (; k2 < len; k2++) A[k2] = k2 === actualIndex ? value : O[k2];
            return A;
          };
        }
      )
      /******/
    };
    __webpack_module_cache__ = {};
    (() => {
      __webpack_require__.d = (exports, definition) => {
        for (var key in definition) {
          if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
          }
        }
      };
    })();
    (() => {
      __webpack_require__.o = (obj, prop2) => Object.prototype.hasOwnProperty.call(obj, prop2);
    })();
    __webpack_require__(4114);
    __webpack_require__(6573);
    __webpack_require__(8100);
    __webpack_require__(7936);
    __webpack_require__(8111);
    __webpack_require__(8237);
    __webpack_require__(1689);
    __webpack_require__(9577);
    __webpack_require__(4235);
    __webpack_require__(9432);
    __webpack_require__(1549);
    __webpack_require__(9797);
    __webpack_require__(9631);
    __webpack_require__(5623);
    __webpack_require__(4979);
    __webpack_require__(5781);
    isNodeJS = typeof process === "object" && process + "" === "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser");
    FONT_IDENTITY_MATRIX = [1e-3, 0, 0, 1e-3, 0, 0];
    LINE_FACTOR = 1.35;
    RenderingIntentFlag = {
      ANY: 1,
      DISPLAY: 2,
      PRINT: 4,
      ANNOTATIONS_FORMS: 16,
      ANNOTATIONS_STORAGE: 32,
      ANNOTATIONS_DISABLE: 64,
      IS_EDITING: 128,
      OPLIST: 256
    };
    AnnotationMode = {
      DISABLE: 0,
      ENABLE: 1,
      ENABLE_FORMS: 2,
      ENABLE_STORAGE: 3
    };
    AnnotationEditorPrefix = "pdfjs_internal_editor_";
    AnnotationEditorType = {
      DISABLE: -1,
      NONE: 0,
      FREETEXT: 3,
      HIGHLIGHT: 9,
      STAMP: 13,
      INK: 15,
      POPUP: 16,
      SIGNATURE: 101,
      COMMENT: 102
    };
    AnnotationEditorParamsType = {
      RESIZE: 1,
      CREATE: 2,
      FREETEXT_SIZE: 11,
      FREETEXT_COLOR: 12,
      FREETEXT_OPACITY: 13,
      INK_COLOR: 21,
      INK_THICKNESS: 22,
      INK_OPACITY: 23,
      HIGHLIGHT_COLOR: 31,
      HIGHLIGHT_THICKNESS: 32,
      HIGHLIGHT_FREE: 33,
      HIGHLIGHT_SHOW_ALL: 34,
      DRAW_STEP: 41
    };
    PermissionFlag = {
      PRINT: 4,
      MODIFY_CONTENTS: 8,
      COPY: 16,
      MODIFY_ANNOTATIONS: 32,
      FILL_INTERACTIVE_FORMS: 256,
      COPY_FOR_ACCESSIBILITY: 512,
      ASSEMBLE: 1024,
      PRINT_HIGH_QUALITY: 2048
    };
    TextRenderingMode = {
      FILL: 0,
      STROKE: 1,
      FILL_STROKE: 2,
      INVISIBLE: 3,
      FILL_STROKE_MASK: 3,
      ADD_TO_PATH_FLAG: 4
    };
    util_ImageKind = {
      GRAYSCALE_1BPP: 1,
      RGB_24BPP: 2,
      RGBA_32BPP: 3
    };
    AnnotationType = {
      TEXT: 1,
      LINK: 2,
      FREETEXT: 3,
      LINE: 4,
      SQUARE: 5,
      CIRCLE: 6,
      POLYGON: 7,
      POLYLINE: 8,
      HIGHLIGHT: 9,
      UNDERLINE: 10,
      SQUIGGLY: 11,
      STRIKEOUT: 12,
      STAMP: 13,
      CARET: 14,
      INK: 15,
      POPUP: 16,
      FILEATTACHMENT: 17,
      SOUND: 18,
      MOVIE: 19,
      WIDGET: 20,
      SCREEN: 21,
      PRINTERMARK: 22,
      TRAPNET: 23,
      WATERMARK: 24,
      THREED: 25,
      REDACT: 26
    };
    AnnotationBorderStyleType = {
      SOLID: 1,
      DASHED: 2,
      BEVELED: 3,
      INSET: 4,
      UNDERLINE: 5
    };
    VerbosityLevel = {
      ERRORS: 0,
      WARNINGS: 1,
      INFOS: 5
    };
    OPS = {
      dependency: 1,
      setLineWidth: 2,
      setLineCap: 3,
      setLineJoin: 4,
      setMiterLimit: 5,
      setDash: 6,
      setRenderingIntent: 7,
      setFlatness: 8,
      setGState: 9,
      save: 10,
      restore: 11,
      transform: 12,
      moveTo: 13,
      lineTo: 14,
      curveTo: 15,
      curveTo2: 16,
      curveTo3: 17,
      closePath: 18,
      rectangle: 19,
      stroke: 20,
      closeStroke: 21,
      fill: 22,
      eoFill: 23,
      fillStroke: 24,
      eoFillStroke: 25,
      closeFillStroke: 26,
      closeEOFillStroke: 27,
      endPath: 28,
      clip: 29,
      eoClip: 30,
      beginText: 31,
      endText: 32,
      setCharSpacing: 33,
      setWordSpacing: 34,
      setHScale: 35,
      setLeading: 36,
      setFont: 37,
      setTextRenderingMode: 38,
      setTextRise: 39,
      moveText: 40,
      setLeadingMoveText: 41,
      setTextMatrix: 42,
      nextLine: 43,
      showText: 44,
      showSpacedText: 45,
      nextLineShowText: 46,
      nextLineSetSpacingShowText: 47,
      setCharWidth: 48,
      setCharWidthAndBounds: 49,
      setStrokeColorSpace: 50,
      setFillColorSpace: 51,
      setStrokeColor: 52,
      setStrokeColorN: 53,
      setFillColor: 54,
      setFillColorN: 55,
      setStrokeGray: 56,
      setFillGray: 57,
      setStrokeRGBColor: 58,
      setFillRGBColor: 59,
      setStrokeCMYKColor: 60,
      setFillCMYKColor: 61,
      shadingFill: 62,
      beginInlineImage: 63,
      beginImageData: 64,
      endInlineImage: 65,
      paintXObject: 66,
      markPoint: 67,
      markPointProps: 68,
      beginMarkedContent: 69,
      beginMarkedContentProps: 70,
      endMarkedContent: 71,
      beginCompat: 72,
      endCompat: 73,
      paintFormXObjectBegin: 74,
      paintFormXObjectEnd: 75,
      beginGroup: 76,
      endGroup: 77,
      beginAnnotation: 80,
      endAnnotation: 81,
      paintImageMaskXObject: 83,
      paintImageMaskXObjectGroup: 84,
      paintImageXObject: 85,
      paintInlineImageXObject: 86,
      paintInlineImageXObjectGroup: 87,
      paintImageXObjectRepeat: 88,
      paintImageMaskXObjectRepeat: 89,
      paintSolidColorImageMask: 90,
      constructPath: 91,
      setStrokeTransparent: 92,
      setFillTransparent: 93,
      rawFillPath: 94
    };
    DrawOPS = {
      moveTo: 0,
      lineTo: 1,
      curveTo: 2,
      closePath: 3
    };
    PasswordResponses = {
      NEED_PASSWORD: 1,
      INCORRECT_PASSWORD: 2
    };
    verbosity = VerbosityLevel.WARNINGS;
    BaseException = function BaseExceptionClosure() {
      function BaseException2(message, name) {
        this.message = message;
        this.name = name;
      }
      BaseException2.prototype = new Error();
      BaseException2.constructor = BaseException2;
      return BaseException2;
    }();
    PasswordException$1 = class PasswordException extends BaseException {
      constructor(msg, code) {
        super(msg, "PasswordException");
        this.code = code;
      }
    };
    UnknownErrorException$1 = class UnknownErrorException extends BaseException {
      constructor(msg, details) {
        super(msg, "UnknownErrorException");
        this.details = details;
      }
    };
    InvalidPDFException$1 = class InvalidPDFException extends BaseException {
      constructor(msg) {
        super(msg, "InvalidPDFException");
      }
    };
    ResponseException$1 = class ResponseException extends BaseException {
      constructor(msg, status, missing) {
        super(msg, "ResponseException");
        this.status = status;
        this.missing = missing;
      }
    };
    FormatError$1 = class FormatError extends BaseException {
      constructor(msg) {
        super(msg, "FormatError");
      }
    };
    AbortException$1 = class AbortException extends BaseException {
      constructor(msg) {
        super(msg, "AbortException");
      }
    };
    util_FeatureTest = class {
      static get isLittleEndian() {
        return shadow(this, "isLittleEndian", isLittleEndian());
      }
      static get isEvalSupported() {
        return shadow(this, "isEvalSupported", isEvalSupported());
      }
      static get isOffscreenCanvasSupported() {
        return shadow(this, "isOffscreenCanvasSupported", typeof OffscreenCanvas !== "undefined");
      }
      static get isImageDecoderSupported() {
        return shadow(this, "isImageDecoderSupported", typeof ImageDecoder !== "undefined");
      }
      static get platform() {
        const {
          platform,
          userAgent
        } = navigator;
        return shadow(this, "platform", {
          isAndroid: userAgent.includes("Android"),
          isLinux: platform.includes("Linux"),
          isMac: platform.includes("Mac"),
          isWindows: platform.includes("Win"),
          isFirefox: userAgent.includes("Firefox")
        });
      }
      static get isCSSRoundSupported() {
        return shadow(this, "isCSSRoundSupported", globalThis.CSS?.supports?.("width: round(1.5px, 1px)"));
      }
    };
    hexNumbers = Array.from(Array(256).keys(), (n) => n.toString(16).padStart(2, "0"));
    Util = class {
      static makeHexColor(r, g, b2) {
        return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b2]}`;
      }
      static domMatrixToTransform(dm) {
        return [dm.a, dm.b, dm.c, dm.d, dm.e, dm.f];
      }
      static scaleMinMax(transform, minMax) {
        let temp;
        if (transform[0]) {
          if (transform[0] < 0) {
            temp = minMax[0];
            minMax[0] = minMax[2];
            minMax[2] = temp;
          }
          minMax[0] *= transform[0];
          minMax[2] *= transform[0];
          if (transform[3] < 0) {
            temp = minMax[1];
            minMax[1] = minMax[3];
            minMax[3] = temp;
          }
          minMax[1] *= transform[3];
          minMax[3] *= transform[3];
        } else {
          temp = minMax[0];
          minMax[0] = minMax[1];
          minMax[1] = temp;
          temp = minMax[2];
          minMax[2] = minMax[3];
          minMax[3] = temp;
          if (transform[1] < 0) {
            temp = minMax[1];
            minMax[1] = minMax[3];
            minMax[3] = temp;
          }
          minMax[1] *= transform[1];
          minMax[3] *= transform[1];
          if (transform[2] < 0) {
            temp = minMax[0];
            minMax[0] = minMax[2];
            minMax[2] = temp;
          }
          minMax[0] *= transform[2];
          minMax[2] *= transform[2];
        }
        minMax[0] += transform[4];
        minMax[1] += transform[5];
        minMax[2] += transform[4];
        minMax[3] += transform[5];
      }
      static transform(m1, m2) {
        return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];
      }
      static multiplyByDOMMatrix(m2, md) {
        return [m2[0] * md.a + m2[2] * md.b, m2[1] * md.a + m2[3] * md.b, m2[0] * md.c + m2[2] * md.d, m2[1] * md.c + m2[3] * md.d, m2[0] * md.e + m2[2] * md.f + m2[4], m2[1] * md.e + m2[3] * md.f + m2[5]];
      }
      static applyTransform(p, m2, pos = 0) {
        const p0 = p[pos];
        const p1 = p[pos + 1];
        p[pos] = p0 * m2[0] + p1 * m2[2] + m2[4];
        p[pos + 1] = p0 * m2[1] + p1 * m2[3] + m2[5];
      }
      static applyTransformToBezier(p, transform, pos = 0) {
        const m0 = transform[0];
        const m1 = transform[1];
        const m2 = transform[2];
        const m3 = transform[3];
        const m4 = transform[4];
        const m5 = transform[5];
        for (let i = 0; i < 6; i += 2) {
          const pI = p[pos + i];
          const pI1 = p[pos + i + 1];
          p[pos + i] = pI * m0 + pI1 * m2 + m4;
          p[pos + i + 1] = pI * m1 + pI1 * m3 + m5;
        }
      }
      static applyInverseTransform(p, m2) {
        const p0 = p[0];
        const p1 = p[1];
        const d = m2[0] * m2[3] - m2[1] * m2[2];
        p[0] = (p0 * m2[3] - p1 * m2[2] + m2[2] * m2[5] - m2[4] * m2[3]) / d;
        p[1] = (-p0 * m2[1] + p1 * m2[0] + m2[4] * m2[1] - m2[5] * m2[0]) / d;
      }
      static axialAlignedBoundingBox(rect, transform, output) {
        const m0 = transform[0];
        const m1 = transform[1];
        const m2 = transform[2];
        const m3 = transform[3];
        const m4 = transform[4];
        const m5 = transform[5];
        const r0 = rect[0];
        const r1 = rect[1];
        const r2 = rect[2];
        const r3 = rect[3];
        let a0 = m0 * r0 + m4;
        let a2 = a0;
        let a1 = m0 * r2 + m4;
        let a3 = a1;
        let b0 = m3 * r1 + m5;
        let b2 = b0;
        let b1 = m3 * r3 + m5;
        let b3 = b1;
        if (m1 !== 0 || m2 !== 0) {
          const m1r0 = m1 * r0;
          const m1r2 = m1 * r2;
          const m2r1 = m2 * r1;
          const m2r3 = m2 * r3;
          a0 += m2r1;
          a3 += m2r1;
          a1 += m2r3;
          a2 += m2r3;
          b0 += m1r0;
          b3 += m1r0;
          b1 += m1r2;
          b2 += m1r2;
        }
        output[0] = Math.min(output[0], a0, a1, a2, a3);
        output[1] = Math.min(output[1], b0, b1, b2, b3);
        output[2] = Math.max(output[2], a0, a1, a2, a3);
        output[3] = Math.max(output[3], b0, b1, b2, b3);
      }
      static inverseTransform(m2) {
        const d = m2[0] * m2[3] - m2[1] * m2[2];
        return [m2[3] / d, -m2[1] / d, -m2[2] / d, m2[0] / d, (m2[2] * m2[5] - m2[4] * m2[3]) / d, (m2[4] * m2[1] - m2[5] * m2[0]) / d];
      }
      static singularValueDecompose2dScale(matrix, output) {
        const m0 = matrix[0];
        const m1 = matrix[1];
        const m2 = matrix[2];
        const m3 = matrix[3];
        const a = m0 ** 2 + m1 ** 2;
        const b2 = m0 * m2 + m1 * m3;
        const c = m2 ** 2 + m3 ** 2;
        const first2 = (a + c) / 2;
        const second = Math.sqrt(first2 ** 2 - (a * c - b2 ** 2));
        output[0] = Math.sqrt(first2 + second || 1);
        output[1] = Math.sqrt(first2 - second || 1);
      }
      static normalizeRect(rect) {
        const r = rect.slice(0);
        if (rect[0] > rect[2]) {
          r[0] = rect[2];
          r[2] = rect[0];
        }
        if (rect[1] > rect[3]) {
          r[1] = rect[3];
          r[3] = rect[1];
        }
        return r;
      }
      static intersect(rect1, rect2) {
        const xLow = Math.max(Math.min(rect1[0], rect1[2]), Math.min(rect2[0], rect2[2]));
        const xHigh = Math.min(Math.max(rect1[0], rect1[2]), Math.max(rect2[0], rect2[2]));
        if (xLow > xHigh) {
          return null;
        }
        const yLow = Math.max(Math.min(rect1[1], rect1[3]), Math.min(rect2[1], rect2[3]));
        const yHigh = Math.min(Math.max(rect1[1], rect1[3]), Math.max(rect2[1], rect2[3]));
        if (yLow > yHigh) {
          return null;
        }
        return [xLow, yLow, xHigh, yHigh];
      }
      static pointBoundingBox(x2, y2, minMax) {
        minMax[0] = Math.min(minMax[0], x2);
        minMax[1] = Math.min(minMax[1], y2);
        minMax[2] = Math.max(minMax[2], x2);
        minMax[3] = Math.max(minMax[3], y2);
      }
      static rectBoundingBox(x0, y0, x1, y1, minMax) {
        minMax[0] = Math.min(minMax[0], x0, x1);
        minMax[1] = Math.min(minMax[1], y0, y1);
        minMax[2] = Math.max(minMax[2], x0, x1);
        minMax[3] = Math.max(minMax[3], y0, y1);
      }
      static #getExtremumOnCurve(x0, x1, x2, x3, y0, y1, y2, y3, t, minMax) {
        if (t <= 0 || t >= 1) {
          return;
        }
        const mt = 1 - t;
        const tt = t * t;
        const ttt = tt * t;
        const x4 = mt * (mt * (mt * x0 + 3 * t * x1) + 3 * tt * x2) + ttt * x3;
        const y4 = mt * (mt * (mt * y0 + 3 * t * y1) + 3 * tt * y2) + ttt * y3;
        minMax[0] = Math.min(minMax[0], x4);
        minMax[1] = Math.min(minMax[1], y4);
        minMax[2] = Math.max(minMax[2], x4);
        minMax[3] = Math.max(minMax[3], y4);
      }
      static #getExtremum(x0, x1, x2, x3, y0, y1, y2, y3, a, b2, c, minMax) {
        if (Math.abs(a) < 1e-12) {
          if (Math.abs(b2) >= 1e-12) {
            this.#getExtremumOnCurve(x0, x1, x2, x3, y0, y1, y2, y3, -c / b2, minMax);
          }
          return;
        }
        const delta = b2 ** 2 - 4 * c * a;
        if (delta < 0) {
          return;
        }
        const sqrtDelta = Math.sqrt(delta);
        const a2 = 2 * a;
        this.#getExtremumOnCurve(x0, x1, x2, x3, y0, y1, y2, y3, (-b2 + sqrtDelta) / a2, minMax);
        this.#getExtremumOnCurve(x0, x1, x2, x3, y0, y1, y2, y3, (-b2 - sqrtDelta) / a2, minMax);
      }
      static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3, minMax) {
        minMax[0] = Math.min(minMax[0], x0, x3);
        minMax[1] = Math.min(minMax[1], y0, y3);
        minMax[2] = Math.max(minMax[2], x0, x3);
        minMax[3] = Math.max(minMax[3], y0, y3);
        this.#getExtremum(x0, x1, x2, x3, y0, y1, y2, y3, 3 * (-x0 + 3 * (x1 - x2) + x3), 6 * (x0 - 2 * x1 + x2), 3 * (x1 - x0), minMax);
        this.#getExtremum(x0, x1, x2, x3, y0, y1, y2, y3, 3 * (-y0 + 3 * (y1 - y2) + y3), 6 * (y0 - 2 * y1 + y2), 3 * (y1 - y0), minMax);
      }
    };
    NormalizeRegex = null;
    NormalizationMap = null;
    AnnotationPrefix = "pdfjs_internal_id_";
    if (typeof Math.sumPrecise !== "function") {
      Math.sumPrecise = function(numbers) {
        return numbers.reduce((a, b2) => a + b2, 0);
      };
    }
    if (typeof AbortSignal.any !== "function") {
      AbortSignal.any = function(iterable) {
        const ac = new AbortController();
        const {
          signal
        } = ac;
        for (const s of iterable) {
          if (s.aborted) {
            ac.abort(s.reason);
            return signal;
          }
        }
        for (const s of iterable) {
          s.addEventListener("abort", () => {
            ac.abort(s.reason);
          }, {
            signal
          });
        }
        return signal;
      };
    }
    __webpack_require__(1701);
    __webpack_require__(4603);
    __webpack_require__(7566);
    __webpack_require__(8721);
    XfaText = class _XfaText {
      static textContent(xfa) {
        const items = [];
        const output = {
          items,
          styles: /* @__PURE__ */ Object.create(null)
        };
        function walk(node) {
          if (!node) {
            return;
          }
          let str = null;
          const name = node.name;
          if (name === "#text") {
            str = node.value;
          } else if (!_XfaText.shouldBuildText(name)) {
            return;
          } else if (node?.attributes?.textContent) {
            str = node.attributes.textContent;
          } else if (node.value) {
            str = node.value;
          }
          if (str !== null) {
            items.push({
              str
            });
          }
          if (!node.children) {
            return;
          }
          for (const child of node.children) {
            walk(child);
          }
        }
        walk(xfa);
        return output;
      }
      static shouldBuildText(name) {
        return !(name === "textarea" || name === "input" || name === "option" || name === "select");
      }
    };
    XfaLayer = class {
      static setupStorage(html3, id, element, storage, intent) {
        const storedData = storage.getValue(id, {
          value: null
        });
        switch (element.name) {
          case "textarea":
            if (storedData.value !== null) {
              html3.textContent = storedData.value;
            }
            if (intent === "print") {
              break;
            }
            html3.addEventListener("input", (event) => {
              storage.setValue(id, {
                value: event.target.value
              });
            });
            break;
          case "input":
            if (element.attributes.type === "radio" || element.attributes.type === "checkbox") {
              if (storedData.value === element.attributes.xfaOn) {
                html3.setAttribute("checked", true);
              } else if (storedData.value === element.attributes.xfaOff) {
                html3.removeAttribute("checked");
              }
              if (intent === "print") {
                break;
              }
              html3.addEventListener("change", (event) => {
                storage.setValue(id, {
                  value: event.target.checked ? event.target.getAttribute("xfaOn") : event.target.getAttribute("xfaOff")
                });
              });
            } else {
              if (storedData.value !== null) {
                html3.setAttribute("value", storedData.value);
              }
              if (intent === "print") {
                break;
              }
              html3.addEventListener("input", (event) => {
                storage.setValue(id, {
                  value: event.target.value
                });
              });
            }
            break;
          case "select":
            if (storedData.value !== null) {
              html3.setAttribute("value", storedData.value);
              for (const option of element.children) {
                if (option.attributes.value === storedData.value) {
                  option.attributes.selected = true;
                } else if (option.attributes.hasOwnProperty("selected")) {
                  delete option.attributes.selected;
                }
              }
            }
            html3.addEventListener("input", (event) => {
              const options = event.target.options;
              const value = options.selectedIndex === -1 ? "" : options[options.selectedIndex].value;
              storage.setValue(id, {
                value
              });
            });
            break;
        }
      }
      static setAttributes({
        html: html3,
        element,
        storage = null,
        intent,
        linkService
      }) {
        const {
          attributes: attributes2
        } = element;
        const isHTMLAnchorElement = html3 instanceof HTMLAnchorElement;
        if (attributes2.type === "radio") {
          attributes2.name = `${attributes2.name}-${intent}`;
        }
        for (const [key, value] of Object.entries(attributes2)) {
          if (value === null || value === void 0) {
            continue;
          }
          switch (key) {
            case "class":
              if (value.length) {
                html3.setAttribute(key, value.join(" "));
              }
              break;
            case "dataId":
              break;
            case "id":
              html3.setAttribute("data-element-id", value);
              break;
            case "style":
              Object.assign(html3.style, value);
              break;
            case "textContent":
              html3.textContent = value;
              break;
            default:
              if (!isHTMLAnchorElement || key !== "href" && key !== "newWindow") {
                html3.setAttribute(key, value);
              }
          }
        }
        if (isHTMLAnchorElement) {
          linkService.addLinkAttributes(html3, attributes2.href, attributes2.newWindow);
        }
        if (storage && attributes2.dataId) {
          this.setupStorage(html3, attributes2.dataId, element, storage);
        }
      }
      static render(parameters) {
        const storage = parameters.annotationStorage;
        const linkService = parameters.linkService;
        const root2 = parameters.xfaHtml;
        const intent = parameters.intent || "display";
        const rootHtml = document.createElement(root2.name);
        if (root2.attributes) {
          this.setAttributes({
            html: rootHtml,
            element: root2,
            intent,
            linkService
          });
        }
        const isNotForRichText = intent !== "richText";
        const rootDiv = parameters.div;
        rootDiv.append(rootHtml);
        if (parameters.viewport) {
          const transform = `matrix(${parameters.viewport.transform.join(",")})`;
          rootDiv.style.transform = transform;
        }
        if (isNotForRichText) {
          rootDiv.setAttribute("class", "xfaLayer xfaFont");
        }
        const textDivs = [];
        if (root2.children.length === 0) {
          if (root2.value) {
            const node = document.createTextNode(root2.value);
            rootHtml.append(node);
            if (isNotForRichText && XfaText.shouldBuildText(root2.name)) {
              textDivs.push(node);
            }
          }
          return {
            textDivs
          };
        }
        const stack = [[root2, -1, rootHtml]];
        while (stack.length > 0) {
          const [parent2, i, html3] = stack.at(-1);
          if (i + 1 === parent2.children.length) {
            stack.pop();
            continue;
          }
          const child = parent2.children[++stack.at(-1)[1]];
          if (child === null) {
            continue;
          }
          const {
            name
          } = child;
          if (name === "#text") {
            const node = document.createTextNode(child.value);
            textDivs.push(node);
            html3.append(node);
            continue;
          }
          const childHtml = child?.attributes?.xmlns ? document.createElementNS(child.attributes.xmlns, name) : document.createElement(name);
          html3.append(childHtml);
          if (child.attributes) {
            this.setAttributes({
              html: childHtml,
              element: child,
              storage,
              intent,
              linkService
            });
          }
          if (child.children?.length > 0) {
            stack.push([child, -1, childHtml]);
          } else if (child.value) {
            const node = document.createTextNode(child.value);
            if (isNotForRichText && XfaText.shouldBuildText(name)) {
              textDivs.push(node);
            }
            childHtml.append(node);
          }
        }
        for (const el of rootDiv.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea")) {
          el.setAttribute("readOnly", true);
        }
        return {
          textDivs
        };
      }
      static update(parameters) {
        const transform = `matrix(${parameters.viewport.transform.join(",")})`;
        parameters.div.style.transform = transform;
        parameters.div.hidden = false;
      }
    };
    SVG_NS = "http://www.w3.org/2000/svg";
    PixelsPerInch = class {
      static CSS = 96;
      static PDF = 72;
      static PDF_TO_CSS_UNITS = this.CSS / this.PDF;
    };
    PageViewport = class _PageViewport {
      constructor({
        viewBox,
        userUnit,
        scale,
        rotation,
        offsetX = 0,
        offsetY = 0,
        dontFlip = false
      }) {
        this.viewBox = viewBox;
        this.userUnit = userUnit;
        this.scale = scale;
        this.rotation = rotation;
        this.offsetX = offsetX;
        this.offsetY = offsetY;
        scale *= userUnit;
        const centerX = (viewBox[2] + viewBox[0]) / 2;
        const centerY = (viewBox[3] + viewBox[1]) / 2;
        let rotateA, rotateB, rotateC, rotateD;
        rotation %= 360;
        if (rotation < 0) {
          rotation += 360;
        }
        switch (rotation) {
          case 180:
            rotateA = -1;
            rotateB = 0;
            rotateC = 0;
            rotateD = 1;
            break;
          case 90:
            rotateA = 0;
            rotateB = 1;
            rotateC = 1;
            rotateD = 0;
            break;
          case 270:
            rotateA = 0;
            rotateB = -1;
            rotateC = -1;
            rotateD = 0;
            break;
          case 0:
            rotateA = 1;
            rotateB = 0;
            rotateC = 0;
            rotateD = -1;
            break;
          default:
            throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.");
        }
        if (dontFlip) {
          rotateC = -rotateC;
          rotateD = -rotateD;
        }
        let offsetCanvasX, offsetCanvasY;
        let width, height;
        if (rotateA === 0) {
          offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;
          offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;
          width = (viewBox[3] - viewBox[1]) * scale;
          height = (viewBox[2] - viewBox[0]) * scale;
        } else {
          offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;
          offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;
          width = (viewBox[2] - viewBox[0]) * scale;
          height = (viewBox[3] - viewBox[1]) * scale;
        }
        this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];
        this.width = width;
        this.height = height;
      }
      get rawDims() {
        const dims = this.viewBox;
        return shadow(this, "rawDims", {
          pageWidth: dims[2] - dims[0],
          pageHeight: dims[3] - dims[1],
          pageX: dims[0],
          pageY: dims[1]
        });
      }
      clone({
        scale = this.scale,
        rotation = this.rotation,
        offsetX = this.offsetX,
        offsetY = this.offsetY,
        dontFlip = false
      } = {}) {
        return new _PageViewport({
          viewBox: this.viewBox.slice(),
          userUnit: this.userUnit,
          scale,
          rotation,
          offsetX,
          offsetY,
          dontFlip
        });
      }
      convertToViewportPoint(x2, y2) {
        const p = [x2, y2];
        Util.applyTransform(p, this.transform);
        return p;
      }
      convertToViewportRectangle(rect) {
        const topLeft = [rect[0], rect[1]];
        Util.applyTransform(topLeft, this.transform);
        const bottomRight = [rect[2], rect[3]];
        Util.applyTransform(bottomRight, this.transform);
        return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];
      }
      convertToPdfPoint(x2, y2) {
        const p = [x2, y2];
        Util.applyInverseTransform(p, this.transform);
        return p;
      }
    };
    RenderingCancelledException = class extends BaseException {
      constructor(msg, extraDelay = 0) {
        super(msg, "RenderingCancelledException");
        this.extraDelay = extraDelay;
      }
    };
    StatTimer = class {
      started = /* @__PURE__ */ Object.create(null);
      times = [];
      time(name) {
        if (name in this.started) {
          warn(`Timer is already running for ${name}`);
        }
        this.started[name] = Date.now();
      }
      timeEnd(name) {
        if (!(name in this.started)) {
          warn(`Timer has not been started for ${name}`);
        }
        this.times.push({
          name,
          start: this.started[name],
          end: Date.now()
        });
        delete this.started[name];
      }
      toString() {
        const outBuf = [];
        let longest = 0;
        for (const {
          name
        } of this.times) {
          longest = Math.max(name.length, longest);
        }
        for (const {
          name,
          start,
          end: end2
        } of this.times) {
          outBuf.push(`${name.padEnd(longest)} ${end2 - start}ms
`);
        }
        return outBuf.join("");
      }
    };
    PDFDateString = class {
      static #regex;
      static toDateObject(input) {
        if (input instanceof Date) {
          return input;
        }
        if (!input || typeof input !== "string") {
          return null;
        }
        this.#regex ||= new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?");
        const matches = this.#regex.exec(input);
        if (!matches) {
          return null;
        }
        const year = parseInt(matches[1], 10);
        let month = parseInt(matches[2], 10);
        month = month >= 1 && month <= 12 ? month - 1 : 0;
        let day = parseInt(matches[3], 10);
        day = day >= 1 && day <= 31 ? day : 1;
        let hour = parseInt(matches[4], 10);
        hour = hour >= 0 && hour <= 23 ? hour : 0;
        let minute = parseInt(matches[5], 10);
        minute = minute >= 0 && minute <= 59 ? minute : 0;
        let second = parseInt(matches[6], 10);
        second = second >= 0 && second <= 59 ? second : 0;
        const universalTimeRelation = matches[7] || "Z";
        let offsetHour = parseInt(matches[8], 10);
        offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;
        let offsetMinute = parseInt(matches[9], 10) || 0;
        offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;
        if (universalTimeRelation === "-") {
          hour += offsetHour;
          minute += offsetMinute;
        } else if (universalTimeRelation === "+") {
          hour -= offsetHour;
          minute -= offsetMinute;
        }
        return new Date(Date.UTC(year, month, day, hour, minute, second));
      }
    };
    OutputScale = class _OutputScale {
      constructor() {
        const {
          pixelRatio
        } = _OutputScale;
        this.sx = pixelRatio;
        this.sy = pixelRatio;
      }
      get scaled() {
        return this.sx !== 1 || this.sy !== 1;
      }
      get symmetric() {
        return this.sx === this.sy;
      }
      limitCanvas(width, height, maxPixels, maxDim, capAreaFactor = -1) {
        let maxAreaScale = Infinity, maxWidthScale = Infinity, maxHeightScale = Infinity;
        maxPixels = _OutputScale.capPixels(maxPixels, capAreaFactor);
        if (maxPixels > 0) {
          maxAreaScale = Math.sqrt(maxPixels / (width * height));
        }
        if (maxDim !== -1) {
          maxWidthScale = maxDim / width;
          maxHeightScale = maxDim / height;
        }
        const maxScale = Math.min(maxAreaScale, maxWidthScale, maxHeightScale);
        if (this.sx > maxScale || this.sy > maxScale) {
          this.sx = maxScale;
          this.sy = maxScale;
          return true;
        }
        return false;
      }
      static get pixelRatio() {
        return globalThis.devicePixelRatio || 1;
      }
      static capPixels(maxPixels, capAreaFactor) {
        if (capAreaFactor >= 0) {
          const winPixels = Math.ceil(window.screen.availWidth * window.screen.availHeight * this.pixelRatio ** 2 * (1 + capAreaFactor / 100));
          return maxPixels > 0 ? Math.min(maxPixels, winPixels) : winPixels;
        }
        return maxPixels;
      }
    };
    SupportedImageMimeTypes = ["image/apng", "image/avif", "image/bmp", "image/gif", "image/jpeg", "image/png", "image/svg+xml", "image/webp", "image/x-icon"];
    ColorScheme = class {
      static get isDarkMode() {
        return shadow(this, "isDarkMode", !!window?.matchMedia?.("(prefers-color-scheme: dark)").matches);
      }
    };
    CSSConstants = class {
      static get commentForegroundColor() {
        const element = document.createElement("span");
        element.classList.add("comment", "sidebar");
        const {
          style
        } = element;
        style.width = style.height = "0";
        style.display = "none";
        style.color = "var(--comment-fg-color)";
        document.body.append(element);
        const {
          color
        } = window.getComputedStyle(element);
        element.remove();
        return shadow(this, "commentForegroundColor", getRGB(color));
      }
    };
    contrastCache = /* @__PURE__ */ new Map();
    __webpack_require__(4972);
    __webpack_require__(4628);
    __webpack_require__(7642);
    __webpack_require__(8004);
    __webpack_require__(3853);
    __webpack_require__(5876);
    __webpack_require__(2475);
    __webpack_require__(5024);
    __webpack_require__(1698);
    __webpack_require__(9314);
    __webpack_require__(1148);
    __webpack_require__(3579);
    __webpack_require__(8335);
    EditorToolbar = class _EditorToolbar {
      #toolbar = null;
      #colorPicker = null;
      #editor;
      #buttons = null;
      #altText = null;
      #comment = null;
      #commentButtonDivider = null;
      #signatureDescriptionButton = null;
      static #l10nRemove = null;
      constructor(editor) {
        this.#editor = editor;
        _EditorToolbar.#l10nRemove ||= Object.freeze({
          freetext: "pdfjs-editor-remove-freetext-button",
          highlight: "pdfjs-editor-remove-highlight-button",
          ink: "pdfjs-editor-remove-ink-button",
          stamp: "pdfjs-editor-remove-stamp-button",
          signature: "pdfjs-editor-remove-signature-button"
        });
      }
      render() {
        const editToolbar = this.#toolbar = document.createElement("div");
        editToolbar.classList.add("editToolbar", "hidden");
        editToolbar.setAttribute("role", "toolbar");
        const signal = this.#editor._uiManager._signal;
        if (signal instanceof AbortSignal && !signal.aborted) {
          editToolbar.addEventListener("contextmenu", noContextMenu, {
            signal
          });
          editToolbar.addEventListener("pointerdown", _EditorToolbar.#pointerDown, {
            signal
          });
        }
        const buttons = this.#buttons = document.createElement("div");
        buttons.className = "buttons";
        editToolbar.append(buttons);
        const position = this.#editor.toolbarPosition;
        if (position) {
          const {
            style
          } = editToolbar;
          const x2 = this.#editor._uiManager.direction === "ltr" ? 1 - position[0] : position[0];
          style.insetInlineEnd = `${100 * x2}%`;
          style.top = `calc(${100 * position[1]}% + var(--editor-toolbar-vert-offset))`;
        }
        return editToolbar;
      }
      get div() {
        return this.#toolbar;
      }
      static #pointerDown(e) {
        e.stopPropagation();
      }
      #focusIn(e) {
        this.#editor._focusEventsAllowed = false;
        stopEvent(e);
      }
      #focusOut(e) {
        this.#editor._focusEventsAllowed = true;
        stopEvent(e);
      }
      #addListenersToElement(element) {
        const signal = this.#editor._uiManager._signal;
        if (!(signal instanceof AbortSignal) || signal.aborted) {
          return false;
        }
        element.addEventListener("focusin", this.#focusIn.bind(this), {
          capture: true,
          signal
        });
        element.addEventListener("focusout", this.#focusOut.bind(this), {
          capture: true,
          signal
        });
        element.addEventListener("contextmenu", noContextMenu, {
          signal
        });
        return true;
      }
      hide() {
        this.#toolbar.classList.add("hidden");
        this.#colorPicker?.hideDropdown();
      }
      show() {
        this.#toolbar.classList.remove("hidden");
        this.#altText?.shown();
        this.#comment?.shown();
      }
      addDeleteButton() {
        const {
          editorType,
          _uiManager
        } = this.#editor;
        const button = document.createElement("button");
        button.classList.add("basic", "deleteButton");
        button.tabIndex = 0;
        button.setAttribute("data-l10n-id", _EditorToolbar.#l10nRemove[editorType]);
        if (this.#addListenersToElement(button)) {
          button.addEventListener("click", (e) => {
            _uiManager.delete();
          }, {
            signal: _uiManager._signal
          });
        }
        this.#buttons.append(button);
      }
      get #divider() {
        const divider = document.createElement("div");
        divider.className = "divider";
        return divider;
      }
      async addAltText(altText) {
        const button = await altText.render();
        this.#addListenersToElement(button);
        this.#buttons.append(button, this.#divider);
        this.#altText = altText;
      }
      addComment(comment, beforeElement = null) {
        if (this.#comment) {
          return;
        }
        const button = comment.renderForToolbar();
        if (!button) {
          return;
        }
        this.#addListenersToElement(button);
        const divider = this.#commentButtonDivider = this.#divider;
        if (!beforeElement) {
          this.#buttons.append(button, divider);
        } else {
          this.#buttons.insertBefore(button, beforeElement);
          this.#buttons.insertBefore(divider, beforeElement);
        }
        this.#comment = comment;
        comment.toolbar = this;
      }
      addColorPicker(colorPicker) {
        if (this.#colorPicker) {
          return;
        }
        this.#colorPicker = colorPicker;
        const button = colorPicker.renderButton();
        this.#addListenersToElement(button);
        this.#buttons.append(button, this.#divider);
      }
      async addEditSignatureButton(signatureManager) {
        const button = this.#signatureDescriptionButton = await signatureManager.renderEditButton(this.#editor);
        this.#addListenersToElement(button);
        this.#buttons.append(button, this.#divider);
      }
      removeButton(name) {
        switch (name) {
          case "comment":
            this.#comment?.removeToolbarCommentButton();
            this.#comment = null;
            this.#commentButtonDivider?.remove();
            this.#commentButtonDivider = null;
            break;
        }
      }
      async addButton(name, tool) {
        switch (name) {
          case "colorPicker":
            this.addColorPicker(tool);
            break;
          case "altText":
            await this.addAltText(tool);
            break;
          case "editSignature":
            await this.addEditSignatureButton(tool);
            break;
          case "delete":
            this.addDeleteButton();
            break;
          case "comment":
            this.addComment(tool);
            break;
        }
      }
      async addButtonBefore(name, tool, beforeSelector) {
        const beforeElement = this.#buttons.querySelector(beforeSelector);
        if (!beforeElement) {
          return;
        }
        if (name === "comment") {
          this.addComment(tool, beforeElement);
        }
      }
      updateEditSignatureButton(description) {
        if (this.#signatureDescriptionButton) {
          this.#signatureDescriptionButton.title = description;
        }
      }
      remove() {
        this.#toolbar.remove();
        this.#colorPicker?.destroy();
        this.#colorPicker = null;
      }
    };
    FloatingToolbar = class {
      #buttons = null;
      #toolbar = null;
      #uiManager;
      constructor(uiManager) {
        this.#uiManager = uiManager;
      }
      #render() {
        const editToolbar = this.#toolbar = document.createElement("div");
        editToolbar.className = "editToolbar";
        editToolbar.setAttribute("role", "toolbar");
        const signal = this.#uiManager._signal;
        if (signal instanceof AbortSignal && !signal.aborted) {
          editToolbar.addEventListener("contextmenu", noContextMenu, {
            signal
          });
        }
        const buttons = this.#buttons = document.createElement("div");
        buttons.className = "buttons";
        editToolbar.append(buttons);
        if (this.#uiManager.hasCommentManager()) {
          this.#makeButton("commentButton", `pdfjs-comment-floating-button`, "pdfjs-comment-floating-button-label", () => {
            this.#uiManager.commentSelection("floating_button");
          });
        }
        this.#makeButton("highlightButton", `pdfjs-highlight-floating-button1`, "pdfjs-highlight-floating-button-label", () => {
          this.#uiManager.highlightSelection("floating_button");
        });
        return editToolbar;
      }
      #getLastPoint(boxes, isLTR) {
        let lastY = 0;
        let lastX = 0;
        for (const box of boxes) {
          const y2 = box.y + box.height;
          if (y2 < lastY) {
            continue;
          }
          const x2 = box.x + (isLTR ? box.width : 0);
          if (y2 > lastY) {
            lastX = x2;
            lastY = y2;
            continue;
          }
          if (isLTR) {
            if (x2 > lastX) {
              lastX = x2;
            }
          } else if (x2 < lastX) {
            lastX = x2;
          }
        }
        return [isLTR ? 1 - lastX : lastX, lastY];
      }
      show(parent2, boxes, isLTR) {
        const [x2, y2] = this.#getLastPoint(boxes, isLTR);
        const {
          style
        } = this.#toolbar ||= this.#render();
        parent2.append(this.#toolbar);
        style.insetInlineEnd = `${100 * x2}%`;
        style.top = `calc(${100 * y2}% + var(--editor-toolbar-vert-offset))`;
      }
      hide() {
        this.#toolbar.remove();
      }
      #makeButton(buttonClass, l10nId, labelL10nId, clickHandler) {
        const button = document.createElement("button");
        button.classList.add("basic", buttonClass);
        button.tabIndex = 0;
        button.setAttribute("data-l10n-id", l10nId);
        const span = document.createElement("span");
        button.append(span);
        span.className = "visuallyHidden";
        span.setAttribute("data-l10n-id", labelL10nId);
        const signal = this.#uiManager._signal;
        if (signal instanceof AbortSignal && !signal.aborted) {
          button.addEventListener("contextmenu", noContextMenu, {
            signal
          });
          button.addEventListener("click", clickHandler, {
            signal
          });
        }
        this.#buttons.append(button);
      }
    };
    IdManager = class {
      #id = 0;
      get id() {
        return `${AnnotationEditorPrefix}${this.#id++}`;
      }
    };
    ImageManager = class _ImageManager {
      #baseId = getUuid();
      #id = 0;
      #cache = null;
      static get _isSVGFittingCanvas() {
        const svg = `data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>`;
        const canvas = new OffscreenCanvas(1, 3);
        const ctx = canvas.getContext("2d", {
          willReadFrequently: true
        });
        const image = new Image();
        image.src = svg;
        const promise = image.decode().then(() => {
          ctx.drawImage(image, 0, 0, 1, 1, 0, 0, 1, 3);
          return new Uint32Array(ctx.getImageData(0, 0, 1, 1).data.buffer)[0] === 0;
        });
        return shadow(this, "_isSVGFittingCanvas", promise);
      }
      async #get(key, rawData) {
        this.#cache ||= /* @__PURE__ */ new Map();
        let data2 = this.#cache.get(key);
        if (data2 === null) {
          return null;
        }
        if (data2?.bitmap) {
          data2.refCounter += 1;
          return data2;
        }
        try {
          data2 ||= {
            bitmap: null,
            id: `image_${this.#baseId}_${this.#id++}`,
            refCounter: 0,
            isSvg: false
          };
          let image;
          if (typeof rawData === "string") {
            data2.url = rawData;
            image = await fetchData(rawData, "blob");
          } else if (rawData instanceof File) {
            image = data2.file = rawData;
          } else if (rawData instanceof Blob) {
            image = rawData;
          }
          if (image.type === "image/svg+xml") {
            const mustRemoveAspectRatioPromise = _ImageManager._isSVGFittingCanvas;
            const fileReader = new FileReader();
            const imageElement = new Image();
            const imagePromise = new Promise((resolve, reject) => {
              imageElement.onload = () => {
                data2.bitmap = imageElement;
                data2.isSvg = true;
                resolve();
              };
              fileReader.onload = async () => {
                const url = data2.svgUrl = fileReader.result;
                imageElement.src = await mustRemoveAspectRatioPromise ? `${url}#svgView(preserveAspectRatio(none))` : url;
              };
              imageElement.onerror = fileReader.onerror = reject;
            });
            fileReader.readAsDataURL(image);
            await imagePromise;
          } else {
            data2.bitmap = await createImageBitmap(image);
          }
          data2.refCounter = 1;
        } catch (e) {
          warn(e);
          data2 = null;
        }
        this.#cache.set(key, data2);
        if (data2) {
          this.#cache.set(data2.id, data2);
        }
        return data2;
      }
      async getFromFile(file) {
        const {
          lastModified,
          name,
          size,
          type
        } = file;
        return this.#get(`${lastModified}_${name}_${size}_${type}`, file);
      }
      async getFromUrl(url) {
        return this.#get(url, url);
      }
      async getFromBlob(id, blobPromise) {
        const blob = await blobPromise;
        return this.#get(id, blob);
      }
      async getFromId(id) {
        this.#cache ||= /* @__PURE__ */ new Map();
        const data2 = this.#cache.get(id);
        if (!data2) {
          return null;
        }
        if (data2.bitmap) {
          data2.refCounter += 1;
          return data2;
        }
        if (data2.file) {
          return this.getFromFile(data2.file);
        }
        if (data2.blobPromise) {
          const {
            blobPromise
          } = data2;
          delete data2.blobPromise;
          return this.getFromBlob(data2.id, blobPromise);
        }
        return this.getFromUrl(data2.url);
      }
      getFromCanvas(id, canvas) {
        this.#cache ||= /* @__PURE__ */ new Map();
        let data2 = this.#cache.get(id);
        if (data2?.bitmap) {
          data2.refCounter += 1;
          return data2;
        }
        const offscreen = new OffscreenCanvas(canvas.width, canvas.height);
        const ctx = offscreen.getContext("2d");
        ctx.drawImage(canvas, 0, 0);
        data2 = {
          bitmap: offscreen.transferToImageBitmap(),
          id: `image_${this.#baseId}_${this.#id++}`,
          refCounter: 1,
          isSvg: false
        };
        this.#cache.set(id, data2);
        this.#cache.set(data2.id, data2);
        return data2;
      }
      getSvgUrl(id) {
        const data2 = this.#cache.get(id);
        if (!data2?.isSvg) {
          return null;
        }
        return data2.svgUrl;
      }
      deleteId(id) {
        this.#cache ||= /* @__PURE__ */ new Map();
        const data2 = this.#cache.get(id);
        if (!data2) {
          return;
        }
        data2.refCounter -= 1;
        if (data2.refCounter !== 0) {
          return;
        }
        const {
          bitmap
        } = data2;
        if (!data2.url && !data2.file) {
          const canvas = new OffscreenCanvas(bitmap.width, bitmap.height);
          const ctx = canvas.getContext("bitmaprenderer");
          ctx.transferFromImageBitmap(bitmap);
          data2.blobPromise = canvas.convertToBlob();
        }
        bitmap.close?.();
        data2.bitmap = null;
      }
      isValidId(id) {
        return id.startsWith(`image_${this.#baseId}_`);
      }
    };
    CommandManager = class {
      #commands = [];
      #locked = false;
      #maxSize;
      #position = -1;
      constructor(maxSize = 128) {
        this.#maxSize = maxSize;
      }
      add({
        cmd,
        undo,
        post,
        mustExec,
        type = NaN,
        overwriteIfSameType = false,
        keepUndo = false
      }) {
        if (mustExec) {
          cmd();
        }
        if (this.#locked) {
          return;
        }
        const save = {
          cmd,
          undo,
          post,
          type
        };
        if (this.#position === -1) {
          if (this.#commands.length > 0) {
            this.#commands.length = 0;
          }
          this.#position = 0;
          this.#commands.push(save);
          return;
        }
        if (overwriteIfSameType && this.#commands[this.#position].type === type) {
          if (keepUndo) {
            save.undo = this.#commands[this.#position].undo;
          }
          this.#commands[this.#position] = save;
          return;
        }
        const next2 = this.#position + 1;
        if (next2 === this.#maxSize) {
          this.#commands.splice(0, 1);
        } else {
          this.#position = next2;
          if (next2 < this.#commands.length) {
            this.#commands.splice(next2);
          }
        }
        this.#commands.push(save);
      }
      undo() {
        if (this.#position === -1) {
          return;
        }
        this.#locked = true;
        const {
          undo,
          post
        } = this.#commands[this.#position];
        undo();
        post?.();
        this.#locked = false;
        this.#position -= 1;
      }
      redo() {
        if (this.#position < this.#commands.length - 1) {
          this.#position += 1;
          this.#locked = true;
          const {
            cmd,
            post
          } = this.#commands[this.#position];
          cmd();
          post?.();
          this.#locked = false;
        }
      }
      hasSomethingToUndo() {
        return this.#position !== -1;
      }
      hasSomethingToRedo() {
        return this.#position < this.#commands.length - 1;
      }
      cleanType(type) {
        if (this.#position === -1) {
          return;
        }
        for (let i = this.#position; i >= 0; i--) {
          if (this.#commands[i].type !== type) {
            this.#commands.splice(i + 1, this.#position - i);
            this.#position = i;
            return;
          }
        }
        this.#commands.length = 0;
        this.#position = -1;
      }
      destroy() {
        this.#commands = null;
      }
    };
    KeyboardManager = class {
      constructor(callbacks) {
        this.buffer = [];
        this.callbacks = /* @__PURE__ */ new Map();
        this.allKeys = /* @__PURE__ */ new Set();
        const {
          isMac
        } = util_FeatureTest.platform;
        for (const [keys, callback, options = {}] of callbacks) {
          for (const key of keys) {
            const isMacKey = key.startsWith("mac+");
            if (isMac && isMacKey) {
              this.callbacks.set(key.slice(4), {
                callback,
                options
              });
              this.allKeys.add(key.split("+").at(-1));
            } else if (!isMac && !isMacKey) {
              this.callbacks.set(key, {
                callback,
                options
              });
              this.allKeys.add(key.split("+").at(-1));
            }
          }
        }
      }
      #serialize(event) {
        if (event.altKey) {
          this.buffer.push("alt");
        }
        if (event.ctrlKey) {
          this.buffer.push("ctrl");
        }
        if (event.metaKey) {
          this.buffer.push("meta");
        }
        if (event.shiftKey) {
          this.buffer.push("shift");
        }
        this.buffer.push(event.key);
        const str = this.buffer.join("+");
        this.buffer.length = 0;
        return str;
      }
      exec(self2, event) {
        if (!this.allKeys.has(event.key)) {
          return;
        }
        const info2 = this.callbacks.get(this.#serialize(event));
        if (!info2) {
          return;
        }
        const {
          callback,
          options: {
            bubbles = false,
            args = [],
            checker = null
          }
        } = info2;
        if (checker && !checker(self2, event)) {
          return;
        }
        callback.bind(self2, ...args, event)();
        if (!bubbles) {
          stopEvent(event);
        }
      }
    };
    ColorManager = class _ColorManager {
      static _colorsMapping = /* @__PURE__ */ new Map([["CanvasText", [0, 0, 0]], ["Canvas", [255, 255, 255]]]);
      get _colors() {
        const colors = /* @__PURE__ */ new Map([["CanvasText", null], ["Canvas", null]]);
        getColorValues(colors);
        return shadow(this, "_colors", colors);
      }
      convert(color) {
        const rgb = getRGB(color);
        if (!window.matchMedia("(forced-colors: active)").matches) {
          return rgb;
        }
        for (const [name, RGB] of this._colors) {
          if (RGB.every((x2, i) => x2 === rgb[i])) {
            return _ColorManager._colorsMapping.get(name);
          }
        }
        return rgb;
      }
      getHexCode(name) {
        const rgb = this._colors.get(name);
        if (!rgb) {
          return name;
        }
        return Util.makeHexColor(...rgb);
      }
    };
    AnnotationEditorUIManager = class _AnnotationEditorUIManager {
      #abortController = new AbortController();
      #activeEditor = null;
      #allEditableAnnotations = null;
      #allEditors = /* @__PURE__ */ new Map();
      #allLayers = /* @__PURE__ */ new Map();
      #altTextManager = null;
      #annotationStorage = null;
      #changedExistingAnnotations = null;
      #commandManager = new CommandManager();
      #commentManager = null;
      #copyPasteAC = null;
      #currentDrawingSession = null;
      #currentPageIndex = 0;
      #deletedAnnotationsElementIds = /* @__PURE__ */ new Set();
      #draggingEditors = null;
      #editorTypes = null;
      #editorsToRescale = /* @__PURE__ */ new Set();
      _editorUndoBar = null;
      #enableHighlightFloatingButton = false;
      #enableUpdatedAddImage = false;
      #enableNewAltTextWhenAddingImage = false;
      #filterFactory = null;
      #focusMainContainerTimeoutId = null;
      #focusManagerAC = null;
      #highlightColors = null;
      #highlightWhenShiftUp = false;
      #floatingToolbar = null;
      #idManager = new IdManager();
      #isEnabled = false;
      #isPointerDown = false;
      #isWaiting = false;
      #keyboardManagerAC = null;
      #lastActiveElement = null;
      #mainHighlightColorPicker = null;
      #missingCanvases = null;
      #mlManager = null;
      #mode = AnnotationEditorType.NONE;
      #selectedEditors = /* @__PURE__ */ new Set();
      #selectedTextNode = null;
      #signatureManager = null;
      #pageColors = null;
      #showAllStates = null;
      #pdfDocument = null;
      #previousStates = {
        isEditing: false,
        isEmpty: true,
        hasSomethingToUndo: false,
        hasSomethingToRedo: false,
        hasSelectedEditor: false,
        hasSelectedText: false
      };
      #translation = [0, 0];
      #translationTimeoutId = null;
      #container = null;
      #viewer = null;
      #viewerAlert = null;
      #updateModeCapability = null;
      static TRANSLATE_SMALL = 1;
      static TRANSLATE_BIG = 10;
      static get _keyboardManager() {
        const proto = _AnnotationEditorUIManager.prototype;
        const arrowChecker = (self2) => self2.#container.contains(document.activeElement) && document.activeElement.tagName !== "BUTTON" && self2.hasSomethingToControl();
        const textInputChecker = (_self, {
          target: el
        }) => {
          if (el instanceof HTMLInputElement) {
            const {
              type
            } = el;
            return type !== "text" && type !== "number";
          }
          return true;
        };
        const small = this.TRANSLATE_SMALL;
        const big = this.TRANSLATE_BIG;
        return shadow(this, "_keyboardManager", new KeyboardManager([[["ctrl+a", "mac+meta+a"], proto.selectAll, {
          checker: textInputChecker
        }], [["ctrl+z", "mac+meta+z"], proto.undo, {
          checker: textInputChecker
        }], [["ctrl+y", "ctrl+shift+z", "mac+meta+shift+z", "ctrl+shift+Z", "mac+meta+shift+Z"], proto.redo, {
          checker: textInputChecker
        }], [["Backspace", "alt+Backspace", "ctrl+Backspace", "shift+Backspace", "mac+Backspace", "mac+alt+Backspace", "mac+ctrl+Backspace", "Delete", "ctrl+Delete", "shift+Delete", "mac+Delete"], proto.delete, {
          checker: textInputChecker
        }], [["Enter", "mac+Enter"], proto.addNewEditorFromKeyboard, {
          checker: (self2, {
            target: el
          }) => !(el instanceof HTMLButtonElement) && self2.#container.contains(el) && !self2.isEnterHandled
        }], [[" ", "mac+ "], proto.addNewEditorFromKeyboard, {
          checker: (self2, {
            target: el
          }) => !(el instanceof HTMLButtonElement) && self2.#container.contains(document.activeElement)
        }], [["Escape", "mac+Escape"], proto.unselectAll], [["ArrowLeft", "mac+ArrowLeft"], proto.translateSelectedEditors, {
          args: [-small, 0],
          checker: arrowChecker
        }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], proto.translateSelectedEditors, {
          args: [-big, 0],
          checker: arrowChecker
        }], [["ArrowRight", "mac+ArrowRight"], proto.translateSelectedEditors, {
          args: [small, 0],
          checker: arrowChecker
        }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], proto.translateSelectedEditors, {
          args: [big, 0],
          checker: arrowChecker
        }], [["ArrowUp", "mac+ArrowUp"], proto.translateSelectedEditors, {
          args: [0, -small],
          checker: arrowChecker
        }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], proto.translateSelectedEditors, {
          args: [0, -big],
          checker: arrowChecker
        }], [["ArrowDown", "mac+ArrowDown"], proto.translateSelectedEditors, {
          args: [0, small],
          checker: arrowChecker
        }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], proto.translateSelectedEditors, {
          args: [0, big],
          checker: arrowChecker
        }]]));
      }
      constructor(container, viewer, viewerAlert, altTextManager, commentManager, signatureManager, eventBus, pdfDocument, pageColors, highlightColors, enableHighlightFloatingButton, enableUpdatedAddImage, enableNewAltTextWhenAddingImage, mlManager, editorUndoBar, supportsPinchToZoom) {
        const signal = this._signal = this.#abortController.signal;
        this.#container = container;
        this.#viewer = viewer;
        this.#viewerAlert = viewerAlert;
        this.#altTextManager = altTextManager;
        this.#commentManager = commentManager;
        this.#signatureManager = signatureManager;
        this.#pdfDocument = pdfDocument;
        this._eventBus = eventBus;
        eventBus._on("editingaction", this.onEditingAction.bind(this), {
          signal
        });
        eventBus._on("pagechanging", this.onPageChanging.bind(this), {
          signal
        });
        eventBus._on("scalechanging", this.onScaleChanging.bind(this), {
          signal
        });
        eventBus._on("rotationchanging", this.onRotationChanging.bind(this), {
          signal
        });
        eventBus._on("setpreference", this.onSetPreference.bind(this), {
          signal
        });
        eventBus._on("switchannotationeditorparams", (evt) => this.updateParams(evt.type, evt.value), {
          signal
        });
        window.addEventListener("pointerdown", () => {
          this.#isPointerDown = true;
        }, {
          capture: true,
          signal
        });
        window.addEventListener("pointerup", () => {
          this.#isPointerDown = false;
        }, {
          capture: true,
          signal
        });
        this.#addSelectionListener();
        this.#addDragAndDropListeners();
        this.#addKeyboardManager();
        this.#annotationStorage = pdfDocument.annotationStorage;
        this.#filterFactory = pdfDocument.filterFactory;
        this.#pageColors = pageColors;
        this.#highlightColors = highlightColors || null;
        this.#enableHighlightFloatingButton = enableHighlightFloatingButton;
        this.#enableUpdatedAddImage = enableUpdatedAddImage;
        this.#enableNewAltTextWhenAddingImage = enableNewAltTextWhenAddingImage;
        this.#mlManager = mlManager || null;
        this.viewParameters = {
          realScale: PixelsPerInch.PDF_TO_CSS_UNITS,
          rotation: 0
        };
        this.isShiftKeyDown = false;
        this._editorUndoBar = editorUndoBar || null;
        this._supportsPinchToZoom = supportsPinchToZoom !== false;
        commentManager?.setSidebarUiManager(this);
      }
      destroy() {
        this.#updateModeCapability?.resolve();
        this.#updateModeCapability = null;
        this.#abortController?.abort();
        this.#abortController = null;
        this._signal = null;
        for (const layer of this.#allLayers.values()) {
          layer.destroy();
        }
        this.#allLayers.clear();
        this.#allEditors.clear();
        this.#editorsToRescale.clear();
        this.#missingCanvases?.clear();
        this.#activeEditor = null;
        this.#selectedEditors.clear();
        this.#commandManager.destroy();
        this.#altTextManager?.destroy();
        this.#commentManager?.destroy();
        this.#signatureManager?.destroy();
        this.#floatingToolbar?.hide();
        this.#floatingToolbar = null;
        this.#mainHighlightColorPicker?.destroy();
        this.#mainHighlightColorPicker = null;
        this.#allEditableAnnotations = null;
        if (this.#focusMainContainerTimeoutId) {
          clearTimeout(this.#focusMainContainerTimeoutId);
          this.#focusMainContainerTimeoutId = null;
        }
        if (this.#translationTimeoutId) {
          clearTimeout(this.#translationTimeoutId);
          this.#translationTimeoutId = null;
        }
        this._editorUndoBar?.destroy();
        this.#pdfDocument = null;
      }
      combinedSignal(ac) {
        return AbortSignal.any([this._signal, ac.signal]);
      }
      get mlManager() {
        return this.#mlManager;
      }
      get useNewAltTextFlow() {
        return this.#enableUpdatedAddImage;
      }
      get useNewAltTextWhenAddingImage() {
        return this.#enableNewAltTextWhenAddingImage;
      }
      get hcmFilter() {
        return shadow(this, "hcmFilter", this.#pageColors ? this.#filterFactory.addHCMFilter(this.#pageColors.foreground, this.#pageColors.background) : "none");
      }
      get direction() {
        return shadow(this, "direction", getComputedStyle(this.#container).direction);
      }
      get _highlightColors() {
        return shadow(this, "_highlightColors", this.#highlightColors ? new Map(this.#highlightColors.split(",").map((pair) => {
          pair = pair.split("=").map((x2) => x2.trim());
          pair[1] = pair[1].toUpperCase();
          return pair;
        })) : null);
      }
      get highlightColors() {
        const {
          _highlightColors
        } = this;
        if (!_highlightColors) {
          return shadow(this, "highlightColors", null);
        }
        const map2 = /* @__PURE__ */ new Map();
        const hasHCM = !!this.#pageColors;
        for (const [name, color] of _highlightColors) {
          const isNameForHCM = name.endsWith("_HCM");
          if (hasHCM && isNameForHCM) {
            map2.set(name.replace("_HCM", ""), color);
            continue;
          }
          if (!hasHCM && !isNameForHCM) {
            map2.set(name, color);
          }
        }
        return shadow(this, "highlightColors", map2);
      }
      get highlightColorNames() {
        return shadow(this, "highlightColorNames", this.highlightColors ? new Map(Array.from(this.highlightColors, (e) => e.reverse())) : null);
      }
      getNonHCMColor(color) {
        if (!this._highlightColors) {
          return color;
        }
        const colorName = this.highlightColorNames.get(color);
        return this._highlightColors.get(colorName) || color;
      }
      getNonHCMColorName(color) {
        return this.highlightColorNames.get(color) || color;
      }
      setCurrentDrawingSession(layer) {
        if (layer) {
          this.unselectAll();
          this.disableUserSelect(true);
        } else {
          this.disableUserSelect(false);
        }
        this.#currentDrawingSession = layer;
      }
      setMainHighlightColorPicker(colorPicker) {
        this.#mainHighlightColorPicker = colorPicker;
      }
      editAltText(editor, firstTime = false) {
        this.#altTextManager?.editAltText(this, editor, firstTime);
      }
      hasCommentManager() {
        return !!this.#commentManager;
      }
      editComment(editor, posX, posY, options) {
        this.#commentManager?.showDialog(this, editor, posX, posY, options);
      }
      selectComment(pageIndex, uid) {
        const layer = this.#allLayers.get(pageIndex);
        const editor = layer?.getEditorByUID(uid);
        editor?.toggleComment(true, true);
      }
      updateComment(editor) {
        this.#commentManager?.updateComment(editor.getData());
      }
      updatePopupColor(editor) {
        this.#commentManager?.updatePopupColor(editor);
      }
      removeComment(editor) {
        this.#commentManager?.removeComments([editor.uid]);
      }
      toggleComment(editor, isSelected, visibility = void 0) {
        this.#commentManager?.toggleCommentPopup(editor, isSelected, visibility);
      }
      makeCommentColor(color, opacity) {
        return color && this.#commentManager?.makeCommentColor(color, opacity) || null;
      }
      getCommentDialogElement() {
        return this.#commentManager?.dialogElement || null;
      }
      async waitForEditorsRendered(pageNumber) {
        if (this.#allLayers.has(pageNumber - 1)) {
          return;
        }
        const {
          resolve,
          promise
        } = Promise.withResolvers();
        const onEditorsRendered = (evt) => {
          if (evt.pageNumber === pageNumber) {
            this._eventBus._off("editorsrendered", onEditorsRendered);
            resolve();
          }
        };
        this._eventBus.on("editorsrendered", onEditorsRendered);
        await promise;
      }
      getSignature(editor) {
        this.#signatureManager?.getSignature({
          uiManager: this,
          editor
        });
      }
      get signatureManager() {
        return this.#signatureManager;
      }
      switchToMode(mode, callback) {
        this._eventBus.on("annotationeditormodechanged", callback, {
          once: true,
          signal: this._signal
        });
        this._eventBus.dispatch("showannotationeditorui", {
          source: this,
          mode
        });
      }
      setPreference(name, value) {
        this._eventBus.dispatch("setpreference", {
          source: this,
          name,
          value
        });
      }
      onSetPreference({
        name,
        value
      }) {
        switch (name) {
          case "enableNewAltTextWhenAddingImage":
            this.#enableNewAltTextWhenAddingImage = value;
            break;
        }
      }
      onPageChanging({
        pageNumber
      }) {
        this.#currentPageIndex = pageNumber - 1;
      }
      focusMainContainer() {
        this.#container.focus();
      }
      findParent(x2, y2) {
        for (const layer of this.#allLayers.values()) {
          const {
            x: layerX,
            y: layerY,
            width,
            height
          } = layer.div.getBoundingClientRect();
          if (x2 >= layerX && x2 <= layerX + width && y2 >= layerY && y2 <= layerY + height) {
            return layer;
          }
        }
        return null;
      }
      disableUserSelect(value = false) {
        this.#viewer.classList.toggle("noUserSelect", value);
      }
      addShouldRescale(editor) {
        this.#editorsToRescale.add(editor);
      }
      removeShouldRescale(editor) {
        this.#editorsToRescale.delete(editor);
      }
      onScaleChanging({
        scale
      }) {
        this.commitOrRemove();
        this.viewParameters.realScale = scale * PixelsPerInch.PDF_TO_CSS_UNITS;
        for (const editor of this.#editorsToRescale) {
          editor.onScaleChanging();
        }
        this.#currentDrawingSession?.onScaleChanging();
      }
      onRotationChanging({
        pagesRotation
      }) {
        this.commitOrRemove();
        this.viewParameters.rotation = pagesRotation;
      }
      #getAnchorElementForSelection({
        anchorNode
      }) {
        return anchorNode.nodeType === Node.TEXT_NODE ? anchorNode.parentElement : anchorNode;
      }
      #getLayerForTextLayer(textLayer) {
        const {
          currentLayer
        } = this;
        if (currentLayer.hasTextLayer(textLayer)) {
          return currentLayer;
        }
        for (const layer of this.#allLayers.values()) {
          if (layer.hasTextLayer(textLayer)) {
            return layer;
          }
        }
        return null;
      }
      highlightSelection(methodOfCreation = "", comment = false) {
        const selection = document.getSelection();
        if (!selection || selection.isCollapsed) {
          return;
        }
        const {
          anchorNode,
          anchorOffset,
          focusNode,
          focusOffset
        } = selection;
        const text3 = selection.toString();
        const anchorElement = this.#getAnchorElementForSelection(selection);
        const textLayer = anchorElement.closest(".textLayer");
        const boxes = this.getSelectionBoxes(textLayer);
        if (!boxes) {
          return;
        }
        selection.empty();
        const layer = this.#getLayerForTextLayer(textLayer);
        const isNoneMode = this.#mode === AnnotationEditorType.NONE;
        const callback = () => {
          const editor = layer?.createAndAddNewEditor({
            x: 0,
            y: 0
          }, false, {
            methodOfCreation,
            boxes,
            anchorNode,
            anchorOffset,
            focusNode,
            focusOffset,
            text: text3
          });
          if (isNoneMode) {
            this.showAllEditors("highlight", true, true);
          }
          if (comment) {
            editor?.editComment();
          }
        };
        if (isNoneMode) {
          this.switchToMode(AnnotationEditorType.HIGHLIGHT, callback);
          return;
        }
        callback();
      }
      commentSelection(methodOfCreation = "") {
        this.highlightSelection(methodOfCreation, true);
      }
      #displayFloatingToolbar() {
        const selection = document.getSelection();
        if (!selection || selection.isCollapsed) {
          return;
        }
        const anchorElement = this.#getAnchorElementForSelection(selection);
        const textLayer = anchorElement.closest(".textLayer");
        const boxes = this.getSelectionBoxes(textLayer);
        if (!boxes) {
          return;
        }
        this.#floatingToolbar ||= new FloatingToolbar(this);
        this.#floatingToolbar.show(textLayer, boxes, this.direction === "ltr");
      }
      getAndRemoveDataFromAnnotationStorage(annotationId) {
        if (!this.#annotationStorage) {
          return null;
        }
        const key = `${AnnotationEditorPrefix}${annotationId}`;
        const storedValue = this.#annotationStorage.getRawValue(key);
        if (storedValue) {
          this.#annotationStorage.remove(key);
        }
        return storedValue;
      }
      addToAnnotationStorage(editor) {
        if (!editor.isEmpty() && this.#annotationStorage && !this.#annotationStorage.has(editor.id)) {
          this.#annotationStorage.setValue(editor.id, editor);
        }
      }
      a11yAlert(messageId, args = null) {
        const viewerAlert = this.#viewerAlert;
        if (!viewerAlert) {
          return;
        }
        viewerAlert.setAttribute("data-l10n-id", messageId);
        if (args) {
          viewerAlert.setAttribute("data-l10n-args", JSON.stringify(args));
        } else {
          viewerAlert.removeAttribute("data-l10n-args");
        }
      }
      #selectionChange() {
        const selection = document.getSelection();
        if (!selection || selection.isCollapsed) {
          if (this.#selectedTextNode) {
            this.#floatingToolbar?.hide();
            this.#selectedTextNode = null;
            this.#dispatchUpdateStates({
              hasSelectedText: false
            });
          }
          return;
        }
        const {
          anchorNode
        } = selection;
        if (anchorNode === this.#selectedTextNode) {
          return;
        }
        const anchorElement = this.#getAnchorElementForSelection(selection);
        const textLayer = anchorElement.closest(".textLayer");
        if (!textLayer) {
          if (this.#selectedTextNode) {
            this.#floatingToolbar?.hide();
            this.#selectedTextNode = null;
            this.#dispatchUpdateStates({
              hasSelectedText: false
            });
          }
          return;
        }
        this.#floatingToolbar?.hide();
        this.#selectedTextNode = anchorNode;
        this.#dispatchUpdateStates({
          hasSelectedText: true
        });
        if (this.#mode !== AnnotationEditorType.HIGHLIGHT && this.#mode !== AnnotationEditorType.NONE) {
          return;
        }
        if (this.#mode === AnnotationEditorType.HIGHLIGHT) {
          this.showAllEditors("highlight", true, true);
        }
        this.#highlightWhenShiftUp = this.isShiftKeyDown;
        if (!this.isShiftKeyDown) {
          const activeLayer = this.#mode === AnnotationEditorType.HIGHLIGHT ? this.#getLayerForTextLayer(textLayer) : null;
          activeLayer?.toggleDrawing();
          if (this.#isPointerDown) {
            const ac = new AbortController();
            const signal = this.combinedSignal(ac);
            const pointerup = (e) => {
              if (e.type === "pointerup" && e.button !== 0) {
                return;
              }
              ac.abort();
              activeLayer?.toggleDrawing(true);
              if (e.type === "pointerup") {
                this.#onSelectEnd("main_toolbar");
              }
            };
            window.addEventListener("pointerup", pointerup, {
              signal
            });
            window.addEventListener("blur", pointerup, {
              signal
            });
          } else {
            activeLayer?.toggleDrawing(true);
            this.#onSelectEnd("main_toolbar");
          }
        }
      }
      #onSelectEnd(methodOfCreation = "") {
        if (this.#mode === AnnotationEditorType.HIGHLIGHT) {
          this.highlightSelection(methodOfCreation);
        } else if (this.#enableHighlightFloatingButton) {
          this.#displayFloatingToolbar();
        }
      }
      #addSelectionListener() {
        document.addEventListener("selectionchange", this.#selectionChange.bind(this), {
          signal: this._signal
        });
      }
      #addFocusManager() {
        if (this.#focusManagerAC) {
          return;
        }
        this.#focusManagerAC = new AbortController();
        const signal = this.combinedSignal(this.#focusManagerAC);
        window.addEventListener("focus", this.focus.bind(this), {
          signal
        });
        window.addEventListener("blur", this.blur.bind(this), {
          signal
        });
      }
      #removeFocusManager() {
        this.#focusManagerAC?.abort();
        this.#focusManagerAC = null;
      }
      blur() {
        this.isShiftKeyDown = false;
        if (this.#highlightWhenShiftUp) {
          this.#highlightWhenShiftUp = false;
          this.#onSelectEnd("main_toolbar");
        }
        if (!this.hasSelection) {
          return;
        }
        const {
          activeElement
        } = document;
        for (const editor of this.#selectedEditors) {
          if (editor.div.contains(activeElement)) {
            this.#lastActiveElement = [editor, activeElement];
            editor._focusEventsAllowed = false;
            break;
          }
        }
      }
      focus() {
        if (!this.#lastActiveElement) {
          return;
        }
        const [lastEditor, lastActiveElement] = this.#lastActiveElement;
        this.#lastActiveElement = null;
        lastActiveElement.addEventListener("focusin", () => {
          lastEditor._focusEventsAllowed = true;
        }, {
          once: true,
          signal: this._signal
        });
        lastActiveElement.focus();
      }
      #addKeyboardManager() {
        if (this.#keyboardManagerAC) {
          return;
        }
        this.#keyboardManagerAC = new AbortController();
        const signal = this.combinedSignal(this.#keyboardManagerAC);
        window.addEventListener("keydown", this.keydown.bind(this), {
          signal
        });
        window.addEventListener("keyup", this.keyup.bind(this), {
          signal
        });
      }
      #removeKeyboardManager() {
        this.#keyboardManagerAC?.abort();
        this.#keyboardManagerAC = null;
      }
      #addCopyPasteListeners() {
        if (this.#copyPasteAC) {
          return;
        }
        this.#copyPasteAC = new AbortController();
        const signal = this.combinedSignal(this.#copyPasteAC);
        document.addEventListener("copy", this.copy.bind(this), {
          signal
        });
        document.addEventListener("cut", this.cut.bind(this), {
          signal
        });
        document.addEventListener("paste", this.paste.bind(this), {
          signal
        });
      }
      #removeCopyPasteListeners() {
        this.#copyPasteAC?.abort();
        this.#copyPasteAC = null;
      }
      #addDragAndDropListeners() {
        const signal = this._signal;
        document.addEventListener("dragover", this.dragOver.bind(this), {
          signal
        });
        document.addEventListener("drop", this.drop.bind(this), {
          signal
        });
      }
      addEditListeners() {
        this.#addKeyboardManager();
        this.#addCopyPasteListeners();
      }
      removeEditListeners() {
        this.#removeKeyboardManager();
        this.#removeCopyPasteListeners();
      }
      dragOver(event) {
        for (const {
          type
        } of event.dataTransfer.items) {
          for (const editorType of this.#editorTypes) {
            if (editorType.isHandlingMimeForPasting(type)) {
              event.dataTransfer.dropEffect = "copy";
              event.preventDefault();
              return;
            }
          }
        }
      }
      drop(event) {
        for (const item of event.dataTransfer.items) {
          for (const editorType of this.#editorTypes) {
            if (editorType.isHandlingMimeForPasting(item.type)) {
              editorType.paste(item, this.currentLayer);
              event.preventDefault();
              return;
            }
          }
        }
      }
      copy(event) {
        event.preventDefault();
        this.#activeEditor?.commitOrRemove();
        if (!this.hasSelection) {
          return;
        }
        const editors = [];
        for (const editor of this.#selectedEditors) {
          const serialized = editor.serialize(true);
          if (serialized) {
            editors.push(serialized);
          }
        }
        if (editors.length === 0) {
          return;
        }
        event.clipboardData.setData("application/pdfjs", JSON.stringify(editors));
      }
      cut(event) {
        this.copy(event);
        this.delete();
      }
      async paste(event) {
        event.preventDefault();
        const {
          clipboardData
        } = event;
        for (const item of clipboardData.items) {
          for (const editorType of this.#editorTypes) {
            if (editorType.isHandlingMimeForPasting(item.type)) {
              editorType.paste(item, this.currentLayer);
              return;
            }
          }
        }
        let data2 = clipboardData.getData("application/pdfjs");
        if (!data2) {
          return;
        }
        try {
          data2 = JSON.parse(data2);
        } catch (ex) {
          warn(`paste: "${ex.message}".`);
          return;
        }
        if (!Array.isArray(data2)) {
          return;
        }
        this.unselectAll();
        const layer = this.currentLayer;
        try {
          const newEditors = [];
          for (const editor of data2) {
            const deserializedEditor = await layer.deserialize(editor);
            if (!deserializedEditor) {
              return;
            }
            newEditors.push(deserializedEditor);
          }
          const cmd = () => {
            for (const editor of newEditors) {
              this.#addEditorToLayer(editor);
            }
            this.#selectEditors(newEditors);
          };
          const undo = () => {
            for (const editor of newEditors) {
              editor.remove();
            }
          };
          this.addCommands({
            cmd,
            undo,
            mustExec: true
          });
        } catch (ex) {
          warn(`paste: "${ex.message}".`);
        }
      }
      keydown(event) {
        if (!this.isShiftKeyDown && event.key === "Shift") {
          this.isShiftKeyDown = true;
        }
        if (this.#mode !== AnnotationEditorType.NONE && !this.isEditorHandlingKeyboard) {
          _AnnotationEditorUIManager._keyboardManager.exec(this, event);
        }
      }
      keyup(event) {
        if (this.isShiftKeyDown && event.key === "Shift") {
          this.isShiftKeyDown = false;
          if (this.#highlightWhenShiftUp) {
            this.#highlightWhenShiftUp = false;
            this.#onSelectEnd("main_toolbar");
          }
        }
      }
      onEditingAction({
        name
      }) {
        switch (name) {
          case "undo":
          case "redo":
          case "delete":
          case "selectAll":
            this[name]();
            break;
          case "highlightSelection":
            this.highlightSelection("context_menu");
            break;
          case "commentSelection":
            this.commentSelection("context_menu");
            break;
        }
      }
      #dispatchUpdateStates(details) {
        const hasChanged = Object.entries(details).some(([key, value]) => this.#previousStates[key] !== value);
        if (hasChanged) {
          this._eventBus.dispatch("annotationeditorstateschanged", {
            source: this,
            details: Object.assign(this.#previousStates, details)
          });
          if (this.#mode === AnnotationEditorType.HIGHLIGHT && details.hasSelectedEditor === false) {
            this.#dispatchUpdateUI([[AnnotationEditorParamsType.HIGHLIGHT_FREE, true]]);
          }
        }
      }
      #dispatchUpdateUI(details) {
        this._eventBus.dispatch("annotationeditorparamschanged", {
          source: this,
          details
        });
      }
      setEditingState(isEditing) {
        if (isEditing) {
          this.#addFocusManager();
          this.#addCopyPasteListeners();
          this.#dispatchUpdateStates({
            isEditing: this.#mode !== AnnotationEditorType.NONE,
            isEmpty: this.#isEmpty(),
            hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),
            hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),
            hasSelectedEditor: false
          });
        } else {
          this.#removeFocusManager();
          this.#removeCopyPasteListeners();
          this.#dispatchUpdateStates({
            isEditing: false
          });
          this.disableUserSelect(false);
        }
      }
      registerEditorTypes(types) {
        if (this.#editorTypes) {
          return;
        }
        this.#editorTypes = types;
        for (const editorType of this.#editorTypes) {
          this.#dispatchUpdateUI(editorType.defaultPropertiesToUpdate);
        }
      }
      getId() {
        return this.#idManager.id;
      }
      get currentLayer() {
        return this.#allLayers.get(this.#currentPageIndex);
      }
      getLayer(pageIndex) {
        return this.#allLayers.get(pageIndex);
      }
      get currentPageIndex() {
        return this.#currentPageIndex;
      }
      addLayer(layer) {
        this.#allLayers.set(layer.pageIndex, layer);
        if (this.#isEnabled) {
          layer.enable();
        } else {
          layer.disable();
        }
      }
      removeLayer(layer) {
        this.#allLayers.delete(layer.pageIndex);
      }
      async updateMode(mode, editId = null, isFromKeyboard = false, mustEnterInEditMode = false, editComment = false) {
        if (this.#mode === mode) {
          return;
        }
        if (this.#updateModeCapability) {
          await this.#updateModeCapability.promise;
          if (!this.#updateModeCapability) {
            return;
          }
        }
        this.#updateModeCapability = Promise.withResolvers();
        this.#currentDrawingSession?.commitOrRemove();
        if (this.#mode === AnnotationEditorType.POPUP) {
          this.#commentManager?.hideSidebar();
        }
        this.#commentManager?.destroyPopup();
        this.#mode = mode;
        if (mode === AnnotationEditorType.NONE) {
          this.setEditingState(false);
          this.#disableAll();
          for (const editor of this.#allEditors.values()) {
            editor.hideStandaloneCommentButton();
          }
          this._editorUndoBar?.hide();
          this.toggleComment(null);
          this.#updateModeCapability.resolve();
          return;
        }
        for (const editor of this.#allEditors.values()) {
          editor.addStandaloneCommentButton();
        }
        if (mode === AnnotationEditorType.SIGNATURE) {
          await this.#signatureManager?.loadSignatures();
        }
        this.setEditingState(true);
        await this.#enableAll();
        this.unselectAll();
        for (const layer of this.#allLayers.values()) {
          layer.updateMode(mode);
        }
        if (mode === AnnotationEditorType.POPUP) {
          this.#allEditableAnnotations ||= await this.#pdfDocument.getAnnotationsByType(new Set(this.#editorTypes.map((editorClass) => editorClass._editorType)));
          const elementIds = /* @__PURE__ */ new Set();
          const allComments = [];
          for (const editor of this.#allEditors.values()) {
            const {
              annotationElementId,
              hasComment,
              deleted
            } = editor;
            if (annotationElementId) {
              elementIds.add(annotationElementId);
            }
            if (hasComment && !deleted) {
              allComments.push(editor.getData());
            }
          }
          for (const annotation of this.#allEditableAnnotations) {
            const {
              id,
              popupRef,
              contentsObj
            } = annotation;
            if (popupRef && contentsObj?.str && !elementIds.has(id) && !this.#deletedAnnotationsElementIds.has(id)) {
              allComments.push(annotation);
            }
          }
          this.#commentManager?.showSidebar(allComments);
        }
        if (!editId) {
          if (isFromKeyboard) {
            this.addNewEditorFromKeyboard();
          }
          this.#updateModeCapability.resolve();
          return;
        }
        for (const editor of this.#allEditors.values()) {
          if (editor.uid === editId) {
            this.setSelected(editor);
            if (editComment) {
              editor.editComment();
            } else if (mustEnterInEditMode) {
              editor.enterInEditMode();
            } else {
              editor.focus();
            }
          } else {
            editor.unselect();
          }
        }
        this.#updateModeCapability.resolve();
      }
      addNewEditorFromKeyboard() {
        if (this.currentLayer.canCreateNewEmptyEditor()) {
          this.currentLayer.addNewEditor();
        }
      }
      updateToolbar(options) {
        if (options.mode === this.#mode) {
          return;
        }
        this._eventBus.dispatch("switchannotationeditormode", {
          source: this,
          ...options
        });
      }
      updateParams(type, value) {
        if (!this.#editorTypes) {
          return;
        }
        switch (type) {
          case AnnotationEditorParamsType.CREATE:
            this.currentLayer.addNewEditor(value);
            return;
          case AnnotationEditorParamsType.HIGHLIGHT_SHOW_ALL:
            this._eventBus.dispatch("reporttelemetry", {
              source: this,
              details: {
                type: "editing",
                data: {
                  type: "highlight",
                  action: "toggle_visibility"
                }
              }
            });
            (this.#showAllStates ||= /* @__PURE__ */ new Map()).set(type, value);
            this.showAllEditors("highlight", value);
            break;
        }
        if (this.hasSelection) {
          for (const editor of this.#selectedEditors) {
            editor.updateParams(type, value);
          }
        } else {
          for (const editorType of this.#editorTypes) {
            editorType.updateDefaultParams(type, value);
          }
        }
      }
      showAllEditors(type, visible, updateButton = false) {
        for (const editor of this.#allEditors.values()) {
          if (editor.editorType === type) {
            editor.show(visible);
          }
        }
        const state = this.#showAllStates?.get(AnnotationEditorParamsType.HIGHLIGHT_SHOW_ALL) ?? true;
        if (state !== visible) {
          this.#dispatchUpdateUI([[AnnotationEditorParamsType.HIGHLIGHT_SHOW_ALL, visible]]);
        }
      }
      enableWaiting(mustWait = false) {
        if (this.#isWaiting === mustWait) {
          return;
        }
        this.#isWaiting = mustWait;
        for (const layer of this.#allLayers.values()) {
          if (mustWait) {
            layer.disableClick();
          } else {
            layer.enableClick();
          }
          layer.div.classList.toggle("waiting", mustWait);
        }
      }
      async #enableAll() {
        if (!this.#isEnabled) {
          this.#isEnabled = true;
          const promises = [];
          for (const layer of this.#allLayers.values()) {
            promises.push(layer.enable());
          }
          await Promise.all(promises);
          for (const editor of this.#allEditors.values()) {
            editor.enable();
          }
        }
      }
      #disableAll() {
        this.unselectAll();
        if (this.#isEnabled) {
          this.#isEnabled = false;
          for (const layer of this.#allLayers.values()) {
            layer.disable();
          }
          for (const editor of this.#allEditors.values()) {
            editor.disable();
          }
        }
      }
      *getEditors(pageIndex) {
        for (const editor of this.#allEditors.values()) {
          if (editor.pageIndex === pageIndex) {
            yield editor;
          }
        }
      }
      getEditor(id) {
        return this.#allEditors.get(id);
      }
      addEditor(editor) {
        this.#allEditors.set(editor.id, editor);
      }
      removeEditor(editor) {
        if (editor.div.contains(document.activeElement)) {
          if (this.#focusMainContainerTimeoutId) {
            clearTimeout(this.#focusMainContainerTimeoutId);
          }
          this.#focusMainContainerTimeoutId = setTimeout(() => {
            this.focusMainContainer();
            this.#focusMainContainerTimeoutId = null;
          }, 0);
        }
        this.#allEditors.delete(editor.id);
        if (editor.annotationElementId) {
          this.#missingCanvases?.delete(editor.annotationElementId);
        }
        this.unselect(editor);
        if (!editor.annotationElementId || !this.#deletedAnnotationsElementIds.has(editor.annotationElementId)) {
          this.#annotationStorage?.remove(editor.id);
        }
      }
      addDeletedAnnotationElement(editor) {
        this.#deletedAnnotationsElementIds.add(editor.annotationElementId);
        this.addChangedExistingAnnotation(editor);
        editor.deleted = true;
      }
      isDeletedAnnotationElement(annotationElementId) {
        return this.#deletedAnnotationsElementIds.has(annotationElementId);
      }
      removeDeletedAnnotationElement(editor) {
        this.#deletedAnnotationsElementIds.delete(editor.annotationElementId);
        this.removeChangedExistingAnnotation(editor);
        editor.deleted = false;
      }
      #addEditorToLayer(editor) {
        const layer = this.#allLayers.get(editor.pageIndex);
        if (layer) {
          layer.addOrRebuild(editor);
        } else {
          this.addEditor(editor);
          this.addToAnnotationStorage(editor);
        }
      }
      setActiveEditor(editor) {
        if (this.#activeEditor === editor) {
          return;
        }
        this.#activeEditor = editor;
        if (editor) {
          this.#dispatchUpdateUI(editor.propertiesToUpdate);
        }
      }
      get #lastSelectedEditor() {
        let ed = null;
        for (ed of this.#selectedEditors) {
        }
        return ed;
      }
      updateUI(editor) {
        if (this.#lastSelectedEditor === editor) {
          this.#dispatchUpdateUI(editor.propertiesToUpdate);
        }
      }
      updateUIForDefaultProperties(editorType) {
        this.#dispatchUpdateUI(editorType.defaultPropertiesToUpdate);
      }
      toggleSelected(editor) {
        if (this.#selectedEditors.has(editor)) {
          this.#selectedEditors.delete(editor);
          editor.unselect();
          this.#dispatchUpdateStates({
            hasSelectedEditor: this.hasSelection
          });
          return;
        }
        this.#selectedEditors.add(editor);
        editor.select();
        this.#dispatchUpdateUI(editor.propertiesToUpdate);
        this.#dispatchUpdateStates({
          hasSelectedEditor: true
        });
      }
      setSelected(editor) {
        this.updateToolbar({
          mode: editor.mode,
          editId: editor.id
        });
        this.#currentDrawingSession?.commitOrRemove();
        for (const ed of this.#selectedEditors) {
          if (ed !== editor) {
            ed.unselect();
          }
        }
        this.#selectedEditors.clear();
        this.#selectedEditors.add(editor);
        editor.select();
        this.#dispatchUpdateUI(editor.propertiesToUpdate);
        this.#dispatchUpdateStates({
          hasSelectedEditor: true
        });
      }
      isSelected(editor) {
        return this.#selectedEditors.has(editor);
      }
      get firstSelectedEditor() {
        return this.#selectedEditors.values().next().value;
      }
      unselect(editor) {
        editor.unselect();
        this.#selectedEditors.delete(editor);
        this.#dispatchUpdateStates({
          hasSelectedEditor: this.hasSelection
        });
      }
      get hasSelection() {
        return this.#selectedEditors.size !== 0;
      }
      get isEnterHandled() {
        return this.#selectedEditors.size === 1 && this.firstSelectedEditor.isEnterHandled;
      }
      undo() {
        this.#commandManager.undo();
        this.#dispatchUpdateStates({
          hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),
          hasSomethingToRedo: true,
          isEmpty: this.#isEmpty()
        });
        this._editorUndoBar?.hide();
      }
      redo() {
        this.#commandManager.redo();
        this.#dispatchUpdateStates({
          hasSomethingToUndo: true,
          hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),
          isEmpty: this.#isEmpty()
        });
      }
      addCommands(params) {
        this.#commandManager.add(params);
        this.#dispatchUpdateStates({
          hasSomethingToUndo: true,
          hasSomethingToRedo: false,
          isEmpty: this.#isEmpty()
        });
      }
      cleanUndoStack(type) {
        this.#commandManager.cleanType(type);
      }
      #isEmpty() {
        if (this.#allEditors.size === 0) {
          return true;
        }
        if (this.#allEditors.size === 1) {
          for (const editor of this.#allEditors.values()) {
            return editor.isEmpty();
          }
        }
        return false;
      }
      delete() {
        this.commitOrRemove();
        const drawingEditor = this.currentLayer?.endDrawingSession(true);
        if (!this.hasSelection && !drawingEditor) {
          return;
        }
        const editors = drawingEditor ? [drawingEditor] : [...this.#selectedEditors];
        const cmd = () => {
          this._editorUndoBar?.show(undo, editors.length === 1 ? editors[0].editorType : editors.length);
          for (const editor of editors) {
            editor.remove();
          }
        };
        const undo = () => {
          for (const editor of editors) {
            this.#addEditorToLayer(editor);
          }
        };
        this.addCommands({
          cmd,
          undo,
          mustExec: true
        });
      }
      commitOrRemove() {
        this.#activeEditor?.commitOrRemove();
      }
      hasSomethingToControl() {
        return this.#activeEditor || this.hasSelection;
      }
      #selectEditors(editors) {
        for (const editor of this.#selectedEditors) {
          editor.unselect();
        }
        this.#selectedEditors.clear();
        for (const editor of editors) {
          if (editor.isEmpty()) {
            continue;
          }
          this.#selectedEditors.add(editor);
          editor.select();
        }
        this.#dispatchUpdateStates({
          hasSelectedEditor: this.hasSelection
        });
      }
      selectAll() {
        for (const editor of this.#selectedEditors) {
          editor.commit();
        }
        this.#selectEditors(this.#allEditors.values());
      }
      unselectAll() {
        if (this.#activeEditor) {
          this.#activeEditor.commitOrRemove();
          if (this.#mode !== AnnotationEditorType.NONE) {
            return;
          }
        }
        if (this.#currentDrawingSession?.commitOrRemove()) {
          return;
        }
        if (!this.hasSelection) {
          return;
        }
        for (const editor of this.#selectedEditors) {
          editor.unselect();
        }
        this.#selectedEditors.clear();
        this.#dispatchUpdateStates({
          hasSelectedEditor: false
        });
      }
      translateSelectedEditors(x2, y2, noCommit = false) {
        if (!noCommit) {
          this.commitOrRemove();
        }
        if (!this.hasSelection) {
          return;
        }
        this.#translation[0] += x2;
        this.#translation[1] += y2;
        const [totalX, totalY] = this.#translation;
        const editors = [...this.#selectedEditors];
        const TIME_TO_WAIT = 1e3;
        if (this.#translationTimeoutId) {
          clearTimeout(this.#translationTimeoutId);
        }
        this.#translationTimeoutId = setTimeout(() => {
          this.#translationTimeoutId = null;
          this.#translation[0] = this.#translation[1] = 0;
          this.addCommands({
            cmd: () => {
              for (const editor of editors) {
                if (this.#allEditors.has(editor.id)) {
                  editor.translateInPage(totalX, totalY);
                  editor.translationDone();
                }
              }
            },
            undo: () => {
              for (const editor of editors) {
                if (this.#allEditors.has(editor.id)) {
                  editor.translateInPage(-totalX, -totalY);
                  editor.translationDone();
                }
              }
            },
            mustExec: false
          });
        }, TIME_TO_WAIT);
        for (const editor of editors) {
          editor.translateInPage(x2, y2);
          editor.translationDone();
        }
      }
      setUpDragSession() {
        if (!this.hasSelection) {
          return;
        }
        this.disableUserSelect(true);
        this.#draggingEditors = /* @__PURE__ */ new Map();
        for (const editor of this.#selectedEditors) {
          this.#draggingEditors.set(editor, {
            savedX: editor.x,
            savedY: editor.y,
            savedPageIndex: editor.pageIndex,
            newX: 0,
            newY: 0,
            newPageIndex: -1
          });
        }
      }
      endDragSession() {
        if (!this.#draggingEditors) {
          return false;
        }
        this.disableUserSelect(false);
        const map2 = this.#draggingEditors;
        this.#draggingEditors = null;
        let mustBeAddedInUndoStack = false;
        for (const [{
          x: x2,
          y: y2,
          pageIndex
        }, value] of map2) {
          value.newX = x2;
          value.newY = y2;
          value.newPageIndex = pageIndex;
          mustBeAddedInUndoStack ||= x2 !== value.savedX || y2 !== value.savedY || pageIndex !== value.savedPageIndex;
        }
        if (!mustBeAddedInUndoStack) {
          return false;
        }
        const move = (editor, x2, y2, pageIndex) => {
          if (this.#allEditors.has(editor.id)) {
            const parent2 = this.#allLayers.get(pageIndex);
            if (parent2) {
              editor._setParentAndPosition(parent2, x2, y2);
            } else {
              editor.pageIndex = pageIndex;
              editor.x = x2;
              editor.y = y2;
            }
          }
        };
        this.addCommands({
          cmd: () => {
            for (const [editor, {
              newX,
              newY,
              newPageIndex
            }] of map2) {
              move(editor, newX, newY, newPageIndex);
            }
          },
          undo: () => {
            for (const [editor, {
              savedX,
              savedY,
              savedPageIndex
            }] of map2) {
              move(editor, savedX, savedY, savedPageIndex);
            }
          },
          mustExec: true
        });
        return true;
      }
      dragSelectedEditors(tx, ty) {
        if (!this.#draggingEditors) {
          return;
        }
        for (const editor of this.#draggingEditors.keys()) {
          editor.drag(tx, ty);
        }
      }
      rebuild(editor) {
        if (editor.parent === null) {
          const parent2 = this.getLayer(editor.pageIndex);
          if (parent2) {
            parent2.changeParent(editor);
            parent2.addOrRebuild(editor);
          } else {
            this.addEditor(editor);
            this.addToAnnotationStorage(editor);
            editor.rebuild();
          }
        } else {
          editor.parent.addOrRebuild(editor);
        }
      }
      get isEditorHandlingKeyboard() {
        return this.getActive()?.shouldGetKeyboardEvents() || this.#selectedEditors.size === 1 && this.firstSelectedEditor.shouldGetKeyboardEvents();
      }
      isActive(editor) {
        return this.#activeEditor === editor;
      }
      getActive() {
        return this.#activeEditor;
      }
      getMode() {
        return this.#mode;
      }
      isEditingMode() {
        return this.#mode !== AnnotationEditorType.NONE;
      }
      get imageManager() {
        return shadow(this, "imageManager", new ImageManager());
      }
      getSelectionBoxes(textLayer) {
        if (!textLayer) {
          return null;
        }
        const selection = document.getSelection();
        for (let i = 0, ii = selection.rangeCount; i < ii; i++) {
          if (!textLayer.contains(selection.getRangeAt(i).commonAncestorContainer)) {
            return null;
          }
        }
        const {
          x: layerX,
          y: layerY,
          width: parentWidth,
          height: parentHeight
        } = textLayer.getBoundingClientRect();
        let rotator;
        switch (textLayer.getAttribute("data-main-rotation")) {
          case "90":
            rotator = (x2, y2, w2, h2) => ({
              x: (y2 - layerY) / parentHeight,
              y: 1 - (x2 + w2 - layerX) / parentWidth,
              width: h2 / parentHeight,
              height: w2 / parentWidth
            });
            break;
          case "180":
            rotator = (x2, y2, w2, h2) => ({
              x: 1 - (x2 + w2 - layerX) / parentWidth,
              y: 1 - (y2 + h2 - layerY) / parentHeight,
              width: w2 / parentWidth,
              height: h2 / parentHeight
            });
            break;
          case "270":
            rotator = (x2, y2, w2, h2) => ({
              x: 1 - (y2 + h2 - layerY) / parentHeight,
              y: (x2 - layerX) / parentWidth,
              width: h2 / parentHeight,
              height: w2 / parentWidth
            });
            break;
          default:
            rotator = (x2, y2, w2, h2) => ({
              x: (x2 - layerX) / parentWidth,
              y: (y2 - layerY) / parentHeight,
              width: w2 / parentWidth,
              height: h2 / parentHeight
            });
            break;
        }
        const boxes = [];
        for (let i = 0, ii = selection.rangeCount; i < ii; i++) {
          const range = selection.getRangeAt(i);
          if (range.collapsed) {
            continue;
          }
          for (const {
            x: x2,
            y: y2,
            width,
            height
          } of range.getClientRects()) {
            if (width === 0 || height === 0) {
              continue;
            }
            boxes.push(rotator(x2, y2, width, height));
          }
        }
        return boxes.length === 0 ? null : boxes;
      }
      addChangedExistingAnnotation({
        annotationElementId,
        id
      }) {
        (this.#changedExistingAnnotations ||= /* @__PURE__ */ new Map()).set(annotationElementId, id);
      }
      removeChangedExistingAnnotation({
        annotationElementId
      }) {
        this.#changedExistingAnnotations?.delete(annotationElementId);
      }
      renderAnnotationElement(annotation) {
        const editorId = this.#changedExistingAnnotations?.get(annotation.data.id);
        if (!editorId) {
          return;
        }
        const editor = this.#annotationStorage.getRawValue(editorId);
        if (!editor) {
          return;
        }
        if (this.#mode === AnnotationEditorType.NONE && !editor.hasBeenModified) {
          return;
        }
        editor.renderAnnotationElement(annotation);
      }
      setMissingCanvas(annotationId, annotationElementId, canvas) {
        const editor = this.#missingCanvases?.get(annotationId);
        if (!editor) {
          return;
        }
        editor.setCanvas(annotationElementId, canvas);
        this.#missingCanvases.delete(annotationId);
      }
      addMissingCanvas(annotationId, editor) {
        (this.#missingCanvases ||= /* @__PURE__ */ new Map()).set(annotationId, editor);
      }
    };
    AltText = class _AltText {
      #altText = null;
      #altTextDecorative = false;
      #altTextButton = null;
      #altTextButtonLabel = null;
      #altTextTooltip = null;
      #altTextTooltipTimeout = null;
      #altTextWasFromKeyBoard = false;
      #badge = null;
      #editor = null;
      #guessedText = null;
      #textWithDisclaimer = null;
      #useNewAltTextFlow = false;
      static #l10nNewButton = null;
      static _l10n = null;
      constructor(editor) {
        this.#editor = editor;
        this.#useNewAltTextFlow = editor._uiManager.useNewAltTextFlow;
        _AltText.#l10nNewButton ||= Object.freeze({
          added: "pdfjs-editor-new-alt-text-added-button",
          "added-label": "pdfjs-editor-new-alt-text-added-button-label",
          missing: "pdfjs-editor-new-alt-text-missing-button",
          "missing-label": "pdfjs-editor-new-alt-text-missing-button-label",
          review: "pdfjs-editor-new-alt-text-to-review-button",
          "review-label": "pdfjs-editor-new-alt-text-to-review-button-label"
        });
      }
      static initialize(l10n) {
        _AltText._l10n ??= l10n;
      }
      async render() {
        const altText = this.#altTextButton = document.createElement("button");
        altText.className = "altText";
        altText.tabIndex = "0";
        const label = this.#altTextButtonLabel = document.createElement("span");
        altText.append(label);
        if (this.#useNewAltTextFlow) {
          altText.classList.add("new");
          altText.setAttribute("data-l10n-id", _AltText.#l10nNewButton.missing);
          label.setAttribute("data-l10n-id", _AltText.#l10nNewButton["missing-label"]);
        } else {
          altText.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-button");
          label.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-button-label");
        }
        const signal = this.#editor._uiManager._signal;
        altText.addEventListener("contextmenu", noContextMenu, {
          signal
        });
        altText.addEventListener("pointerdown", (event) => event.stopPropagation(), {
          signal
        });
        const onClick = (event) => {
          event.preventDefault();
          this.#editor._uiManager.editAltText(this.#editor);
          if (this.#useNewAltTextFlow) {
            this.#editor._reportTelemetry({
              action: "pdfjs.image.alt_text.image_status_label_clicked",
              data: {
                label: this.#label
              }
            });
          }
        };
        altText.addEventListener("click", onClick, {
          capture: true,
          signal
        });
        altText.addEventListener("keydown", (event) => {
          if (event.target === altText && event.key === "Enter") {
            this.#altTextWasFromKeyBoard = true;
            onClick(event);
          }
        }, {
          signal
        });
        await this.#setState();
        return altText;
      }
      get #label() {
        return this.#altText && "added" || this.#altText === null && this.guessedText && "review" || "missing";
      }
      finish() {
        if (!this.#altTextButton) {
          return;
        }
        this.#altTextButton.focus({
          focusVisible: this.#altTextWasFromKeyBoard
        });
        this.#altTextWasFromKeyBoard = false;
      }
      isEmpty() {
        if (this.#useNewAltTextFlow) {
          return this.#altText === null;
        }
        return !this.#altText && !this.#altTextDecorative;
      }
      hasData() {
        if (this.#useNewAltTextFlow) {
          return this.#altText !== null || !!this.#guessedText;
        }
        return this.isEmpty();
      }
      get guessedText() {
        return this.#guessedText;
      }
      async setGuessedText(guessedText) {
        if (this.#altText !== null) {
          return;
        }
        this.#guessedText = guessedText;
        this.#textWithDisclaimer = await _AltText._l10n.get("pdfjs-editor-new-alt-text-generated-alt-text-with-disclaimer", {
          generatedAltText: guessedText
        });
        this.#setState();
      }
      toggleAltTextBadge(visibility = false) {
        if (!this.#useNewAltTextFlow || this.#altText) {
          this.#badge?.remove();
          this.#badge = null;
          return;
        }
        if (!this.#badge) {
          const badge = this.#badge = document.createElement("div");
          badge.className = "noAltTextBadge";
          this.#editor.div.append(badge);
        }
        this.#badge.classList.toggle("hidden", !visibility);
      }
      serialize(isForCopying) {
        let altText = this.#altText;
        if (!isForCopying && this.#guessedText === altText) {
          altText = this.#textWithDisclaimer;
        }
        return {
          altText,
          decorative: this.#altTextDecorative,
          guessedText: this.#guessedText,
          textWithDisclaimer: this.#textWithDisclaimer
        };
      }
      get data() {
        return {
          altText: this.#altText,
          decorative: this.#altTextDecorative
        };
      }
      set data({
        altText,
        decorative,
        guessedText,
        textWithDisclaimer,
        cancel = false
      }) {
        if (guessedText) {
          this.#guessedText = guessedText;
          this.#textWithDisclaimer = textWithDisclaimer;
        }
        if (this.#altText === altText && this.#altTextDecorative === decorative) {
          return;
        }
        if (!cancel) {
          this.#altText = altText;
          this.#altTextDecorative = decorative;
        }
        this.#setState();
      }
      toggle(enabled = false) {
        if (!this.#altTextButton) {
          return;
        }
        if (!enabled && this.#altTextTooltipTimeout) {
          clearTimeout(this.#altTextTooltipTimeout);
          this.#altTextTooltipTimeout = null;
        }
        this.#altTextButton.disabled = !enabled;
      }
      shown() {
        this.#editor._reportTelemetry({
          action: "pdfjs.image.alt_text.image_status_label_displayed",
          data: {
            label: this.#label
          }
        });
      }
      destroy() {
        this.#altTextButton?.remove();
        this.#altTextButton = null;
        this.#altTextButtonLabel = null;
        this.#altTextTooltip = null;
        this.#badge?.remove();
        this.#badge = null;
      }
      async #setState() {
        const button = this.#altTextButton;
        if (!button) {
          return;
        }
        if (this.#useNewAltTextFlow) {
          button.classList.toggle("done", !!this.#altText);
          button.setAttribute("data-l10n-id", _AltText.#l10nNewButton[this.#label]);
          this.#altTextButtonLabel?.setAttribute("data-l10n-id", _AltText.#l10nNewButton[`${this.#label}-label`]);
          if (!this.#altText) {
            this.#altTextTooltip?.remove();
            return;
          }
        } else {
          if (!this.#altText && !this.#altTextDecorative) {
            button.classList.remove("done");
            this.#altTextTooltip?.remove();
            return;
          }
          button.classList.add("done");
          button.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-edit-button");
        }
        let tooltip = this.#altTextTooltip;
        if (!tooltip) {
          this.#altTextTooltip = tooltip = document.createElement("span");
          tooltip.className = "tooltip";
          tooltip.setAttribute("role", "tooltip");
          tooltip.id = `alt-text-tooltip-${this.#editor.id}`;
          const DELAY_TO_SHOW_TOOLTIP = 100;
          const signal = this.#editor._uiManager._signal;
          signal.addEventListener("abort", () => {
            clearTimeout(this.#altTextTooltipTimeout);
            this.#altTextTooltipTimeout = null;
          }, {
            once: true
          });
          button.addEventListener("mouseenter", () => {
            this.#altTextTooltipTimeout = setTimeout(() => {
              this.#altTextTooltipTimeout = null;
              this.#altTextTooltip.classList.add("show");
              this.#editor._reportTelemetry({
                action: "alt_text_tooltip"
              });
            }, DELAY_TO_SHOW_TOOLTIP);
          }, {
            signal
          });
          button.addEventListener("mouseleave", () => {
            if (this.#altTextTooltipTimeout) {
              clearTimeout(this.#altTextTooltipTimeout);
              this.#altTextTooltipTimeout = null;
            }
            this.#altTextTooltip?.classList.remove("show");
          }, {
            signal
          });
        }
        if (this.#altTextDecorative) {
          tooltip.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-decorative-tooltip");
        } else {
          tooltip.removeAttribute("data-l10n-id");
          tooltip.textContent = this.#altText;
        }
        if (!tooltip.parentNode) {
          button.append(tooltip);
        }
        const element = this.#editor.getElementForAltText();
        element?.setAttribute("aria-describedby", tooltip.id);
      }
    };
    Comment3 = class {
      #commentStandaloneButton = null;
      #commentToolbarButton = null;
      #commentWasFromKeyBoard = false;
      #editor = null;
      #initialText = null;
      #richText = null;
      #text = null;
      #date = null;
      #deleted = false;
      #popupPosition = null;
      constructor(editor) {
        this.#editor = editor;
      }
      renderForToolbar() {
        const button = this.#commentToolbarButton = document.createElement("button");
        button.className = "comment";
        return this.#render(button, false);
      }
      renderForStandalone() {
        const button = this.#commentStandaloneButton = document.createElement("button");
        button.className = "annotationCommentButton";
        const position = this.#editor.commentButtonPosition;
        if (position) {
          const {
            style
          } = button;
          style.insetInlineEnd = `calc(${100 * (this.#editor._uiManager.direction === "ltr" ? 1 - position[0] : position[0])}% - var(--comment-button-dim))`;
          style.top = `calc(${100 * position[1]}% - var(--comment-button-dim))`;
          const color = this.#editor.commentButtonColor;
          if (color) {
            style.backgroundColor = color;
          }
        }
        return this.#render(button, true);
      }
      focusButton() {
        setTimeout(() => {
          (this.#commentStandaloneButton ?? this.#commentToolbarButton)?.focus();
        }, 0);
      }
      onUpdatedColor() {
        if (!this.#commentStandaloneButton) {
          return;
        }
        const color = this.#editor.commentButtonColor;
        if (color) {
          this.#commentStandaloneButton.style.backgroundColor = color;
        }
        this.#editor._uiManager.updatePopupColor(this.#editor);
      }
      get commentButtonWidth() {
        return (this.#commentStandaloneButton?.getBoundingClientRect().width ?? 0) / this.#editor.parent.boundingClientRect.width;
      }
      get commentPopupPositionInLayer() {
        if (this.#popupPosition) {
          return this.#popupPosition;
        }
        if (!this.#commentStandaloneButton) {
          return null;
        }
        const {
          x: x2,
          y: y2,
          height
        } = this.#commentStandaloneButton.getBoundingClientRect();
        const {
          x: parentX,
          y: parentY,
          width: parentWidth,
          height: parentHeight
        } = this.#editor.parent.boundingClientRect;
        return [(x2 - parentX) / parentWidth, (y2 + height - parentY) / parentHeight];
      }
      set commentPopupPositionInLayer(pos) {
        this.#popupPosition = pos;
      }
      hasDefaultPopupPosition() {
        return this.#popupPosition === null;
      }
      removeStandaloneCommentButton() {
        this.#commentStandaloneButton?.remove();
        this.#commentStandaloneButton = null;
      }
      removeToolbarCommentButton() {
        this.#commentToolbarButton?.remove();
        this.#commentToolbarButton = null;
      }
      setCommentButtonStates({
        selected,
        hasPopup
      }) {
        if (!this.#commentStandaloneButton) {
          return;
        }
        this.#commentStandaloneButton.classList.toggle("selected", selected);
        this.#commentStandaloneButton.ariaExpanded = hasPopup;
      }
      #render(comment, isStandalone) {
        if (!this.#editor._uiManager.hasCommentManager()) {
          return null;
        }
        comment.tabIndex = "0";
        comment.ariaHasPopup = "dialog";
        if (isStandalone) {
          comment.ariaControls = "commentPopup";
          comment.setAttribute("data-l10n-id", "pdfjs-show-comment-button");
        } else {
          comment.ariaControlsElements = [this.#editor._uiManager.getCommentDialogElement()];
          comment.setAttribute("data-l10n-id", "pdfjs-editor-edit-comment-button");
        }
        const signal = this.#editor._uiManager._signal;
        if (!(signal instanceof AbortSignal) || signal.aborted) {
          return comment;
        }
        comment.addEventListener("contextmenu", noContextMenu, {
          signal
        });
        if (isStandalone) {
          comment.addEventListener("focusin", (e) => {
            this.#editor._focusEventsAllowed = false;
            stopEvent(e);
          }, {
            capture: true,
            signal
          });
          comment.addEventListener("focusout", (e) => {
            this.#editor._focusEventsAllowed = true;
            stopEvent(e);
          }, {
            capture: true,
            signal
          });
        }
        comment.addEventListener("pointerdown", (event) => event.stopPropagation(), {
          signal
        });
        const onClick = (event) => {
          event.preventDefault();
          if (comment === this.#commentToolbarButton) {
            this.edit();
          } else {
            this.#editor.toggleComment(true);
          }
        };
        comment.addEventListener("click", onClick, {
          capture: true,
          signal
        });
        comment.addEventListener("keydown", (event) => {
          if (event.target === comment && event.key === "Enter") {
            this.#commentWasFromKeyBoard = true;
            onClick(event);
          }
        }, {
          signal
        });
        comment.addEventListener("pointerenter", () => {
          this.#editor.toggleComment(false, true);
        }, {
          signal
        });
        comment.addEventListener("pointerleave", () => {
          this.#editor.toggleComment(false, false);
        }, {
          signal
        });
        return comment;
      }
      edit(options) {
        const position = this.commentPopupPositionInLayer;
        let posX, posY;
        if (position) {
          [posX, posY] = position;
        } else {
          [posX, posY] = this.#editor.commentButtonPosition;
          const {
            width,
            height,
            x: x2,
            y: y2
          } = this.#editor;
          posX = x2 + posX * width;
          posY = y2 + posY * height;
        }
        const parentDimensions = this.#editor.parent.boundingClientRect;
        const {
          x: parentX,
          y: parentY,
          width: parentWidth,
          height: parentHeight
        } = parentDimensions;
        this.#editor._uiManager.editComment(this.#editor, parentX + posX * parentWidth, parentY + posY * parentHeight, {
          ...options,
          parentDimensions
        });
      }
      finish() {
        if (!this.#commentToolbarButton) {
          return;
        }
        this.#commentToolbarButton.focus({
          focusVisible: this.#commentWasFromKeyBoard
        });
        this.#commentWasFromKeyBoard = false;
      }
      isDeleted() {
        return this.#deleted || this.#text === "";
      }
      isEmpty() {
        return this.#text === null;
      }
      hasBeenEdited() {
        return this.isDeleted() || this.#text !== this.#initialText;
      }
      serialize() {
        return this.data;
      }
      get data() {
        return {
          text: this.#text,
          richText: this.#richText,
          date: this.#date,
          deleted: this.isDeleted()
        };
      }
      set data(text3) {
        if (text3 !== this.#text) {
          this.#richText = null;
        }
        if (text3 === null) {
          this.#text = "";
          this.#deleted = true;
          return;
        }
        this.#text = text3;
        this.#date = /* @__PURE__ */ new Date();
        this.#deleted = false;
      }
      setInitialText(text3, richText = null) {
        this.#initialText = text3;
        this.data = text3;
        this.#date = null;
        this.#richText = richText;
      }
      shown() {
      }
      destroy() {
        this.#commentToolbarButton?.remove();
        this.#commentToolbarButton = null;
        this.#commentStandaloneButton?.remove();
        this.#commentStandaloneButton = null;
        this.#text = "";
        this.#richText = null;
        this.#date = null;
        this.#editor = null;
        this.#commentWasFromKeyBoard = false;
        this.#deleted = false;
      }
    };
    TouchManager = class _TouchManager {
      #container;
      #isPinching = false;
      #isPinchingStopped = null;
      #isPinchingDisabled;
      #onPinchStart;
      #onPinching;
      #onPinchEnd;
      #pointerDownAC = null;
      #signal;
      #touchInfo = null;
      #touchManagerAC;
      #touchMoveAC = null;
      constructor({
        container,
        isPinchingDisabled = null,
        isPinchingStopped = null,
        onPinchStart = null,
        onPinching = null,
        onPinchEnd = null,
        signal
      }) {
        this.#container = container;
        this.#isPinchingStopped = isPinchingStopped;
        this.#isPinchingDisabled = isPinchingDisabled;
        this.#onPinchStart = onPinchStart;
        this.#onPinching = onPinching;
        this.#onPinchEnd = onPinchEnd;
        this.#touchManagerAC = new AbortController();
        this.#signal = AbortSignal.any([signal, this.#touchManagerAC.signal]);
        container.addEventListener("touchstart", this.#onTouchStart.bind(this), {
          passive: false,
          signal: this.#signal
        });
      }
      get MIN_TOUCH_DISTANCE_TO_PINCH() {
        return 35 / OutputScale.pixelRatio;
      }
      #onTouchStart(evt) {
        if (this.#isPinchingDisabled?.()) {
          return;
        }
        if (evt.touches.length === 1) {
          if (this.#pointerDownAC) {
            return;
          }
          const pointerDownAC = this.#pointerDownAC = new AbortController();
          const signal = AbortSignal.any([this.#signal, pointerDownAC.signal]);
          const container = this.#container;
          const opts = {
            capture: true,
            signal,
            passive: false
          };
          const cancelPointerDown = (e) => {
            if (e.pointerType === "touch") {
              this.#pointerDownAC?.abort();
              this.#pointerDownAC = null;
            }
          };
          container.addEventListener("pointerdown", (e) => {
            if (e.pointerType === "touch") {
              stopEvent(e);
              cancelPointerDown(e);
            }
          }, opts);
          container.addEventListener("pointerup", cancelPointerDown, opts);
          container.addEventListener("pointercancel", cancelPointerDown, opts);
          return;
        }
        if (!this.#touchMoveAC) {
          this.#touchMoveAC = new AbortController();
          const signal = AbortSignal.any([this.#signal, this.#touchMoveAC.signal]);
          const container = this.#container;
          const opt = {
            signal,
            capture: false,
            passive: false
          };
          container.addEventListener("touchmove", this.#onTouchMove.bind(this), opt);
          const onTouchEnd = this.#onTouchEnd.bind(this);
          container.addEventListener("touchend", onTouchEnd, opt);
          container.addEventListener("touchcancel", onTouchEnd, opt);
          opt.capture = true;
          container.addEventListener("pointerdown", stopEvent, opt);
          container.addEventListener("pointermove", stopEvent, opt);
          container.addEventListener("pointercancel", stopEvent, opt);
          container.addEventListener("pointerup", stopEvent, opt);
          this.#onPinchStart?.();
        }
        stopEvent(evt);
        if (evt.touches.length !== 2 || this.#isPinchingStopped?.()) {
          this.#touchInfo = null;
          return;
        }
        let [touch0, touch1] = evt.touches;
        if (touch0.identifier > touch1.identifier) {
          [touch0, touch1] = [touch1, touch0];
        }
        this.#touchInfo = {
          touch0X: touch0.screenX,
          touch0Y: touch0.screenY,
          touch1X: touch1.screenX,
          touch1Y: touch1.screenY
        };
      }
      #onTouchMove(evt) {
        if (!this.#touchInfo || evt.touches.length !== 2) {
          return;
        }
        stopEvent(evt);
        let [touch0, touch1] = evt.touches;
        if (touch0.identifier > touch1.identifier) {
          [touch0, touch1] = [touch1, touch0];
        }
        const {
          screenX: screen0X,
          screenY: screen0Y
        } = touch0;
        const {
          screenX: screen1X,
          screenY: screen1Y
        } = touch1;
        const touchInfo = this.#touchInfo;
        const {
          touch0X: pTouch0X,
          touch0Y: pTouch0Y,
          touch1X: pTouch1X,
          touch1Y: pTouch1Y
        } = touchInfo;
        const prevGapX = pTouch1X - pTouch0X;
        const prevGapY = pTouch1Y - pTouch0Y;
        const currGapX = screen1X - screen0X;
        const currGapY = screen1Y - screen0Y;
        const distance = Math.hypot(currGapX, currGapY) || 1;
        const pDistance = Math.hypot(prevGapX, prevGapY) || 1;
        if (!this.#isPinching && Math.abs(pDistance - distance) <= _TouchManager.MIN_TOUCH_DISTANCE_TO_PINCH) {
          return;
        }
        touchInfo.touch0X = screen0X;
        touchInfo.touch0Y = screen0Y;
        touchInfo.touch1X = screen1X;
        touchInfo.touch1Y = screen1Y;
        if (!this.#isPinching) {
          this.#isPinching = true;
          return;
        }
        const origin2 = [(screen0X + screen1X) / 2, (screen0Y + screen1Y) / 2];
        this.#onPinching?.(origin2, pDistance, distance);
      }
      #onTouchEnd(evt) {
        if (evt.touches.length >= 2) {
          return;
        }
        if (this.#touchMoveAC) {
          this.#touchMoveAC.abort();
          this.#touchMoveAC = null;
          this.#onPinchEnd?.();
        }
        if (!this.#touchInfo) {
          return;
        }
        stopEvent(evt);
        this.#touchInfo = null;
        this.#isPinching = false;
      }
      destroy() {
        this.#touchManagerAC?.abort();
        this.#touchManagerAC = null;
        this.#pointerDownAC?.abort();
        this.#pointerDownAC = null;
      }
    };
    AnnotationEditor = class _AnnotationEditor {
      #accessibilityData = null;
      #allResizerDivs = null;
      #altText = null;
      #comment = null;
      #commentStandaloneButton = null;
      #disabled = false;
      #dragPointerId = null;
      #dragPointerType = "";
      #resizersDiv = null;
      #lastPointerCoords = null;
      #savedDimensions = null;
      #fakeAnnotation = null;
      #focusAC = null;
      #focusedResizerName = "";
      #hasBeenClicked = false;
      #initialRect = null;
      #isEditing = false;
      #isInEditMode = false;
      #isResizerEnabledForKeyboard = false;
      #moveInDOMTimeout = null;
      #prevDragX = 0;
      #prevDragY = 0;
      #telemetryTimeouts = null;
      #touchManager = null;
      isSelected = false;
      _isCopy = false;
      _editToolbar = null;
      _initialOptions = /* @__PURE__ */ Object.create(null);
      _initialData = null;
      _isVisible = true;
      _uiManager = null;
      _focusEventsAllowed = true;
      static _l10n = null;
      static _l10nResizer = null;
      #isDraggable = false;
      #zIndex = _AnnotationEditor._zIndex++;
      static _borderLineWidth = -1;
      static _colorManager = new ColorManager();
      static _zIndex = 1;
      static _telemetryTimeout = 1e3;
      static get _resizerKeyboardManager() {
        const resize = _AnnotationEditor.prototype._resizeWithKeyboard;
        const small = AnnotationEditorUIManager.TRANSLATE_SMALL;
        const big = AnnotationEditorUIManager.TRANSLATE_BIG;
        return shadow(this, "_resizerKeyboardManager", new KeyboardManager([[["ArrowLeft", "mac+ArrowLeft"], resize, {
          args: [-small, 0]
        }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], resize, {
          args: [-big, 0]
        }], [["ArrowRight", "mac+ArrowRight"], resize, {
          args: [small, 0]
        }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], resize, {
          args: [big, 0]
        }], [["ArrowUp", "mac+ArrowUp"], resize, {
          args: [0, -small]
        }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], resize, {
          args: [0, -big]
        }], [["ArrowDown", "mac+ArrowDown"], resize, {
          args: [0, small]
        }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], resize, {
          args: [0, big]
        }], [["Escape", "mac+Escape"], _AnnotationEditor.prototype._stopResizingWithKeyboard]]));
      }
      constructor(parameters) {
        this.parent = parameters.parent;
        this.id = parameters.id;
        this.width = this.height = null;
        this.pageIndex = parameters.parent.pageIndex;
        this.name = parameters.name;
        this.div = null;
        this._uiManager = parameters.uiManager;
        this.annotationElementId = null;
        this._willKeepAspectRatio = false;
        this._initialOptions.isCentered = parameters.isCentered;
        this._structTreeParentId = null;
        this.annotationElementId = parameters.annotationElementId || null;
        this.creationDate = parameters.creationDate || /* @__PURE__ */ new Date();
        this.modificationDate = parameters.modificationDate || null;
        const {
          rotation,
          rawDims: {
            pageWidth,
            pageHeight,
            pageX,
            pageY
          }
        } = this.parent.viewport;
        this.rotation = rotation;
        this.pageRotation = (360 + rotation - this._uiManager.viewParameters.rotation) % 360;
        this.pageDimensions = [pageWidth, pageHeight];
        this.pageTranslation = [pageX, pageY];
        const [width, height] = this.parentDimensions;
        this.x = parameters.x / width;
        this.y = parameters.y / height;
        this.isAttachedToDOM = false;
        this.deleted = false;
      }
      get editorType() {
        return Object.getPrototypeOf(this).constructor._type;
      }
      get mode() {
        return Object.getPrototypeOf(this).constructor._editorType;
      }
      static get isDrawer() {
        return false;
      }
      static get _defaultLineColor() {
        return shadow(this, "_defaultLineColor", this._colorManager.getHexCode("CanvasText"));
      }
      static deleteAnnotationElement(editor) {
        const fakeEditor = new FakeEditor({
          id: editor.parent.getNextId(),
          parent: editor.parent,
          uiManager: editor._uiManager
        });
        fakeEditor.annotationElementId = editor.annotationElementId;
        fakeEditor.deleted = true;
        fakeEditor._uiManager.addToAnnotationStorage(fakeEditor);
      }
      static initialize(l10n, _uiManager) {
        _AnnotationEditor._l10n ??= l10n;
        _AnnotationEditor._l10nResizer ||= Object.freeze({
          topLeft: "pdfjs-editor-resizer-top-left",
          topMiddle: "pdfjs-editor-resizer-top-middle",
          topRight: "pdfjs-editor-resizer-top-right",
          middleRight: "pdfjs-editor-resizer-middle-right",
          bottomRight: "pdfjs-editor-resizer-bottom-right",
          bottomMiddle: "pdfjs-editor-resizer-bottom-middle",
          bottomLeft: "pdfjs-editor-resizer-bottom-left",
          middleLeft: "pdfjs-editor-resizer-middle-left"
        });
        if (_AnnotationEditor._borderLineWidth !== -1) {
          return;
        }
        const style = getComputedStyle(document.documentElement);
        _AnnotationEditor._borderLineWidth = parseFloat(style.getPropertyValue("--outline-width")) || 0;
      }
      static updateDefaultParams(_type, _value) {
      }
      static get defaultPropertiesToUpdate() {
        return [];
      }
      static isHandlingMimeForPasting(mime) {
        return false;
      }
      static paste(item, parent2) {
        unreachable("Not implemented");
      }
      get propertiesToUpdate() {
        return [];
      }
      get _isDraggable() {
        return this.#isDraggable;
      }
      set _isDraggable(value) {
        this.#isDraggable = value;
        this.div?.classList.toggle("draggable", value);
      }
      get uid() {
        return this.annotationElementId || this.id;
      }
      get isEnterHandled() {
        return true;
      }
      center() {
        const [pageWidth, pageHeight] = this.pageDimensions;
        switch (this.parentRotation) {
          case 90:
            this.x -= this.height * pageHeight / (pageWidth * 2);
            this.y += this.width * pageWidth / (pageHeight * 2);
            break;
          case 180:
            this.x += this.width / 2;
            this.y += this.height / 2;
            break;
          case 270:
            this.x += this.height * pageHeight / (pageWidth * 2);
            this.y -= this.width * pageWidth / (pageHeight * 2);
            break;
          default:
            this.x -= this.width / 2;
            this.y -= this.height / 2;
            break;
        }
        this.fixAndSetPosition();
      }
      addCommands(params) {
        this._uiManager.addCommands(params);
      }
      get currentLayer() {
        return this._uiManager.currentLayer;
      }
      setInBackground() {
        this.div.style.zIndex = 0;
      }
      setInForeground() {
        this.div.style.zIndex = this.#zIndex;
      }
      setParent(parent2) {
        if (parent2 !== null) {
          this.pageIndex = parent2.pageIndex;
          this.pageDimensions = parent2.pageDimensions;
        } else {
          this.#stopResizing();
          this.#fakeAnnotation?.remove();
          this.#fakeAnnotation = null;
        }
        this.parent = parent2;
      }
      focusin(event) {
        if (!this._focusEventsAllowed) {
          return;
        }
        if (!this.#hasBeenClicked) {
          this.parent.setSelected(this);
        } else {
          this.#hasBeenClicked = false;
        }
      }
      focusout(event) {
        if (!this._focusEventsAllowed) {
          return;
        }
        if (!this.isAttachedToDOM) {
          return;
        }
        const target = event.relatedTarget;
        if (target?.closest(`#${this.id}`)) {
          return;
        }
        event.preventDefault();
        if (!this.parent?.isMultipleSelection) {
          this.commitOrRemove();
        }
      }
      commitOrRemove() {
        if (this.isEmpty()) {
          this.remove();
        } else {
          this.commit();
        }
      }
      commit() {
        if (!this.isInEditMode()) {
          return;
        }
        this.addToAnnotationStorage();
      }
      addToAnnotationStorage() {
        this._uiManager.addToAnnotationStorage(this);
      }
      setAt(x2, y2, tx, ty) {
        const [width, height] = this.parentDimensions;
        [tx, ty] = this.screenToPageTranslation(tx, ty);
        this.x = (x2 + tx) / width;
        this.y = (y2 + ty) / height;
        this.fixAndSetPosition();
      }
      _moveAfterPaste(baseX, baseY) {
        const [parentWidth, parentHeight] = this.parentDimensions;
        this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);
        this._onTranslated();
      }
      #translate([width, height], x2, y2) {
        [x2, y2] = this.screenToPageTranslation(x2, y2);
        this.x += x2 / width;
        this.y += y2 / height;
        this._onTranslating(this.x, this.y);
        this.fixAndSetPosition();
      }
      translate(x2, y2) {
        this.#translate(this.parentDimensions, x2, y2);
      }
      translateInPage(x2, y2) {
        this.#initialRect ||= [this.x, this.y, this.width, this.height];
        this.#translate(this.pageDimensions, x2, y2);
        this.div.scrollIntoView({
          block: "nearest"
        });
      }
      translationDone() {
        this._onTranslated(this.x, this.y);
      }
      drag(tx, ty) {
        this.#initialRect ||= [this.x, this.y, this.width, this.height];
        const {
          div,
          parentDimensions: [parentWidth, parentHeight]
        } = this;
        this.x += tx / parentWidth;
        this.y += ty / parentHeight;
        if (this.parent && (this.x < 0 || this.x > 1 || this.y < 0 || this.y > 1)) {
          const {
            x: x22,
            y: y22
          } = this.div.getBoundingClientRect();
          if (this.parent.findNewParent(this, x22, y22)) {
            this.x -= Math.floor(this.x);
            this.y -= Math.floor(this.y);
          }
        }
        let {
          x: x2,
          y: y2
        } = this;
        const [bx, by] = this.getBaseTranslation();
        x2 += bx;
        y2 += by;
        const {
          style
        } = div;
        style.left = `${(100 * x2).toFixed(2)}%`;
        style.top = `${(100 * y2).toFixed(2)}%`;
        this._onTranslating(x2, y2);
        div.scrollIntoView({
          block: "nearest"
        });
      }
      _onTranslating(x2, y2) {
      }
      _onTranslated(x2, y2) {
      }
      get _hasBeenMoved() {
        return !!this.#initialRect && (this.#initialRect[0] !== this.x || this.#initialRect[1] !== this.y);
      }
      get _hasBeenResized() {
        return !!this.#initialRect && (this.#initialRect[2] !== this.width || this.#initialRect[3] !== this.height);
      }
      getBaseTranslation() {
        const [parentWidth, parentHeight] = this.parentDimensions;
        const {
          _borderLineWidth
        } = _AnnotationEditor;
        const x2 = _borderLineWidth / parentWidth;
        const y2 = _borderLineWidth / parentHeight;
        switch (this.rotation) {
          case 90:
            return [-x2, y2];
          case 180:
            return [x2, y2];
          case 270:
            return [x2, -y2];
          default:
            return [-x2, -y2];
        }
      }
      get _mustFixPosition() {
        return true;
      }
      fixAndSetPosition(rotation = this.rotation) {
        const {
          div: {
            style
          },
          pageDimensions: [pageWidth, pageHeight]
        } = this;
        let {
          x: x2,
          y: y2,
          width,
          height
        } = this;
        width *= pageWidth;
        height *= pageHeight;
        x2 *= pageWidth;
        y2 *= pageHeight;
        if (this._mustFixPosition) {
          switch (rotation) {
            case 0:
              x2 = MathClamp(x2, 0, pageWidth - width);
              y2 = MathClamp(y2, 0, pageHeight - height);
              break;
            case 90:
              x2 = MathClamp(x2, 0, pageWidth - height);
              y2 = MathClamp(y2, width, pageHeight);
              break;
            case 180:
              x2 = MathClamp(x2, width, pageWidth);
              y2 = MathClamp(y2, height, pageHeight);
              break;
            case 270:
              x2 = MathClamp(x2, height, pageWidth);
              y2 = MathClamp(y2, 0, pageHeight - width);
              break;
          }
        }
        this.x = x2 /= pageWidth;
        this.y = y2 /= pageHeight;
        const [bx, by] = this.getBaseTranslation();
        x2 += bx;
        y2 += by;
        style.left = `${(100 * x2).toFixed(2)}%`;
        style.top = `${(100 * y2).toFixed(2)}%`;
        this.moveInDOM();
      }
      static #rotatePoint(x2, y2, angle) {
        switch (angle) {
          case 90:
            return [y2, -x2];
          case 180:
            return [-x2, -y2];
          case 270:
            return [-y2, x2];
          default:
            return [x2, y2];
        }
      }
      screenToPageTranslation(x2, y2) {
        return _AnnotationEditor.#rotatePoint(x2, y2, this.parentRotation);
      }
      pageTranslationToScreen(x2, y2) {
        return _AnnotationEditor.#rotatePoint(x2, y2, 360 - this.parentRotation);
      }
      #getRotationMatrix(rotation) {
        switch (rotation) {
          case 90: {
            const [pageWidth, pageHeight] = this.pageDimensions;
            return [0, -pageWidth / pageHeight, pageHeight / pageWidth, 0];
          }
          case 180:
            return [-1, 0, 0, -1];
          case 270: {
            const [pageWidth, pageHeight] = this.pageDimensions;
            return [0, pageWidth / pageHeight, -pageHeight / pageWidth, 0];
          }
          default:
            return [1, 0, 0, 1];
        }
      }
      get parentScale() {
        return this._uiManager.viewParameters.realScale;
      }
      get parentRotation() {
        return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;
      }
      get parentDimensions() {
        const {
          parentScale,
          pageDimensions: [pageWidth, pageHeight]
        } = this;
        return [pageWidth * parentScale, pageHeight * parentScale];
      }
      setDims() {
        const {
          div: {
            style
          },
          width,
          height
        } = this;
        style.width = `${(100 * width).toFixed(2)}%`;
        style.height = `${(100 * height).toFixed(2)}%`;
      }
      getInitialTranslation() {
        return [0, 0];
      }
      #createResizers() {
        if (this.#resizersDiv) {
          return;
        }
        this.#resizersDiv = document.createElement("div");
        this.#resizersDiv.classList.add("resizers");
        const classes = this._willKeepAspectRatio ? ["topLeft", "topRight", "bottomRight", "bottomLeft"] : ["topLeft", "topMiddle", "topRight", "middleRight", "bottomRight", "bottomMiddle", "bottomLeft", "middleLeft"];
        const signal = this._uiManager._signal;
        for (const name of classes) {
          const div = document.createElement("div");
          this.#resizersDiv.append(div);
          div.classList.add("resizer", name);
          div.setAttribute("data-resizer-name", name);
          div.addEventListener("pointerdown", this.#resizerPointerdown.bind(this, name), {
            signal
          });
          div.addEventListener("contextmenu", noContextMenu, {
            signal
          });
          div.tabIndex = -1;
        }
        this.div.prepend(this.#resizersDiv);
      }
      #resizerPointerdown(name, event) {
        event.preventDefault();
        const {
          isMac
        } = util_FeatureTest.platform;
        if (event.button !== 0 || event.ctrlKey && isMac) {
          return;
        }
        this.#altText?.toggle(false);
        const savedDraggable = this._isDraggable;
        this._isDraggable = false;
        this.#lastPointerCoords = [event.screenX, event.screenY];
        const ac = new AbortController();
        const signal = this._uiManager.combinedSignal(ac);
        this.parent.togglePointerEvents(false);
        window.addEventListener("pointermove", this.#resizerPointermove.bind(this, name), {
          passive: true,
          capture: true,
          signal
        });
        window.addEventListener("touchmove", stopEvent, {
          passive: false,
          signal
        });
        window.addEventListener("contextmenu", noContextMenu, {
          signal
        });
        this.#savedDimensions = {
          savedX: this.x,
          savedY: this.y,
          savedWidth: this.width,
          savedHeight: this.height
        };
        const savedParentCursor = this.parent.div.style.cursor;
        const savedCursor = this.div.style.cursor;
        this.div.style.cursor = this.parent.div.style.cursor = window.getComputedStyle(event.target).cursor;
        const pointerUpCallback = () => {
          ac.abort();
          this.parent.togglePointerEvents(true);
          this.#altText?.toggle(true);
          this._isDraggable = savedDraggable;
          this.parent.div.style.cursor = savedParentCursor;
          this.div.style.cursor = savedCursor;
          this.#addResizeToUndoStack();
        };
        window.addEventListener("pointerup", pointerUpCallback, {
          signal
        });
        window.addEventListener("blur", pointerUpCallback, {
          signal
        });
      }
      #resize(x2, y2, width, height) {
        this.width = width;
        this.height = height;
        this.x = x2;
        this.y = y2;
        this.setDims();
        this.fixAndSetPosition();
        this._onResized();
      }
      _onResized() {
      }
      #addResizeToUndoStack() {
        if (!this.#savedDimensions) {
          return;
        }
        const {
          savedX,
          savedY,
          savedWidth,
          savedHeight
        } = this.#savedDimensions;
        this.#savedDimensions = null;
        const newX = this.x;
        const newY = this.y;
        const newWidth = this.width;
        const newHeight = this.height;
        if (newX === savedX && newY === savedY && newWidth === savedWidth && newHeight === savedHeight) {
          return;
        }
        this.addCommands({
          cmd: this.#resize.bind(this, newX, newY, newWidth, newHeight),
          undo: this.#resize.bind(this, savedX, savedY, savedWidth, savedHeight),
          mustExec: true
        });
      }
      static _round(x2) {
        return Math.round(x2 * 1e4) / 1e4;
      }
      #resizerPointermove(name, event) {
        const [parentWidth, parentHeight] = this.parentDimensions;
        const savedX = this.x;
        const savedY = this.y;
        const savedWidth = this.width;
        const savedHeight = this.height;
        const minWidth = _AnnotationEditor.MIN_SIZE / parentWidth;
        const minHeight = _AnnotationEditor.MIN_SIZE / parentHeight;
        const rotationMatrix = this.#getRotationMatrix(this.rotation);
        const transf = (x2, y2) => [rotationMatrix[0] * x2 + rotationMatrix[2] * y2, rotationMatrix[1] * x2 + rotationMatrix[3] * y2];
        const invRotationMatrix = this.#getRotationMatrix(360 - this.rotation);
        const invTransf = (x2, y2) => [invRotationMatrix[0] * x2 + invRotationMatrix[2] * y2, invRotationMatrix[1] * x2 + invRotationMatrix[3] * y2];
        let getPoint;
        let getOpposite;
        let isDiagonal = false;
        let isHorizontal = false;
        switch (name) {
          case "topLeft":
            isDiagonal = true;
            getPoint = (w2, h2) => [0, 0];
            getOpposite = (w2, h2) => [w2, h2];
            break;
          case "topMiddle":
            getPoint = (w2, h2) => [w2 / 2, 0];
            getOpposite = (w2, h2) => [w2 / 2, h2];
            break;
          case "topRight":
            isDiagonal = true;
            getPoint = (w2, h2) => [w2, 0];
            getOpposite = (w2, h2) => [0, h2];
            break;
          case "middleRight":
            isHorizontal = true;
            getPoint = (w2, h2) => [w2, h2 / 2];
            getOpposite = (w2, h2) => [0, h2 / 2];
            break;
          case "bottomRight":
            isDiagonal = true;
            getPoint = (w2, h2) => [w2, h2];
            getOpposite = (w2, h2) => [0, 0];
            break;
          case "bottomMiddle":
            getPoint = (w2, h2) => [w2 / 2, h2];
            getOpposite = (w2, h2) => [w2 / 2, 0];
            break;
          case "bottomLeft":
            isDiagonal = true;
            getPoint = (w2, h2) => [0, h2];
            getOpposite = (w2, h2) => [w2, 0];
            break;
          case "middleLeft":
            isHorizontal = true;
            getPoint = (w2, h2) => [0, h2 / 2];
            getOpposite = (w2, h2) => [w2, h2 / 2];
            break;
        }
        const point = getPoint(savedWidth, savedHeight);
        const oppositePoint = getOpposite(savedWidth, savedHeight);
        let transfOppositePoint = transf(...oppositePoint);
        const oppositeX = _AnnotationEditor._round(savedX + transfOppositePoint[0]);
        const oppositeY = _AnnotationEditor._round(savedY + transfOppositePoint[1]);
        let ratioX = 1;
        let ratioY = 1;
        let deltaX, deltaY;
        if (!event.fromKeyboard) {
          const {
            screenX,
            screenY
          } = event;
          const [lastScreenX, lastScreenY] = this.#lastPointerCoords;
          [deltaX, deltaY] = this.screenToPageTranslation(screenX - lastScreenX, screenY - lastScreenY);
          this.#lastPointerCoords[0] = screenX;
          this.#lastPointerCoords[1] = screenY;
        } else {
          ({
            deltaX,
            deltaY
          } = event);
        }
        [deltaX, deltaY] = invTransf(deltaX / parentWidth, deltaY / parentHeight);
        if (isDiagonal) {
          const oldDiag = Math.hypot(savedWidth, savedHeight);
          ratioX = ratioY = Math.max(Math.min(Math.hypot(oppositePoint[0] - point[0] - deltaX, oppositePoint[1] - point[1] - deltaY) / oldDiag, 1 / savedWidth, 1 / savedHeight), minWidth / savedWidth, minHeight / savedHeight);
        } else if (isHorizontal) {
          ratioX = MathClamp(Math.abs(oppositePoint[0] - point[0] - deltaX), minWidth, 1) / savedWidth;
        } else {
          ratioY = MathClamp(Math.abs(oppositePoint[1] - point[1] - deltaY), minHeight, 1) / savedHeight;
        }
        const newWidth = _AnnotationEditor._round(savedWidth * ratioX);
        const newHeight = _AnnotationEditor._round(savedHeight * ratioY);
        transfOppositePoint = transf(...getOpposite(newWidth, newHeight));
        const newX = oppositeX - transfOppositePoint[0];
        const newY = oppositeY - transfOppositePoint[1];
        this.#initialRect ||= [this.x, this.y, this.width, this.height];
        this.width = newWidth;
        this.height = newHeight;
        this.x = newX;
        this.y = newY;
        this.setDims();
        this.fixAndSetPosition();
        this._onResizing();
      }
      _onResizing() {
      }
      altTextFinish() {
        this.#altText?.finish();
      }
      get toolbarButtons() {
        return null;
      }
      async addEditToolbar() {
        if (this._editToolbar || this.#isInEditMode) {
          return this._editToolbar;
        }
        this._editToolbar = new EditorToolbar(this);
        this.div.append(this._editToolbar.render());
        const {
          toolbarButtons
        } = this;
        if (toolbarButtons) {
          for (const [name, tool] of toolbarButtons) {
            await this._editToolbar.addButton(name, tool);
          }
        }
        if (!this.hasComment) {
          this._editToolbar.addButton("comment", this.addCommentButton());
        }
        this._editToolbar.addButton("delete");
        return this._editToolbar;
      }
      addCommentButtonInToolbar() {
        this._editToolbar?.addButtonBefore("comment", this.addCommentButton(), ".deleteButton");
      }
      removeCommentButtonFromToolbar() {
        this._editToolbar?.removeButton("comment");
      }
      removeEditToolbar() {
        this._editToolbar?.remove();
        this._editToolbar = null;
        this.#altText?.destroy();
      }
      addContainer(container) {
        const editToolbarDiv = this._editToolbar?.div;
        if (editToolbarDiv) {
          editToolbarDiv.before(container);
        } else {
          this.div.append(container);
        }
      }
      getClientDimensions() {
        return this.div.getBoundingClientRect();
      }
      createAltText() {
        if (!this.#altText) {
          AltText.initialize(_AnnotationEditor._l10n);
          this.#altText = new AltText(this);
          if (this.#accessibilityData) {
            this.#altText.data = this.#accessibilityData;
            this.#accessibilityData = null;
          }
        }
        return this.#altText;
      }
      get altTextData() {
        return this.#altText?.data;
      }
      set altTextData(data2) {
        if (!this.#altText) {
          return;
        }
        this.#altText.data = data2;
      }
      get guessedAltText() {
        return this.#altText?.guessedText;
      }
      async setGuessedAltText(text3) {
        await this.#altText?.setGuessedText(text3);
      }
      serializeAltText(isForCopying) {
        return this.#altText?.serialize(isForCopying);
      }
      hasAltText() {
        return !!this.#altText && !this.#altText.isEmpty();
      }
      hasAltTextData() {
        return this.#altText?.hasData() ?? false;
      }
      focusCommentButton() {
        this.#comment?.focusButton();
      }
      addCommentButton() {
        return this.#comment ||= new Comment3(this);
      }
      addStandaloneCommentButton() {
        if (this.#commentStandaloneButton) {
          if (this._uiManager.isEditingMode()) {
            this.#commentStandaloneButton.classList.remove("hidden");
          }
          return;
        }
        if (!this.hasComment) {
          return;
        }
        this.#commentStandaloneButton = this.#comment.renderForStandalone();
        this.div.append(this.#commentStandaloneButton);
      }
      removeStandaloneCommentButton() {
        this.#comment.removeStandaloneCommentButton();
        this.#commentStandaloneButton = null;
      }
      hideStandaloneCommentButton() {
        this.#commentStandaloneButton?.classList.add("hidden");
      }
      get comment() {
        const {
          data: {
            richText,
            text: text3,
            date,
            deleted
          }
        } = this.#comment;
        return {
          text: text3,
          richText,
          date,
          deleted,
          color: this.getNonHCMColor(),
          opacity: this.opacity ?? 1
        };
      }
      set comment(text3) {
        this.#comment ||= new Comment3(this);
        this.#comment.data = text3;
        if (this.hasComment) {
          this.removeCommentButtonFromToolbar();
          this.addStandaloneCommentButton();
          this._uiManager.updateComment(this);
        } else {
          this.addCommentButtonInToolbar();
          this.removeStandaloneCommentButton();
          this._uiManager.removeComment(this);
        }
      }
      setCommentData({
        comment,
        popupRef,
        richText
      }) {
        if (!popupRef) {
          return;
        }
        this.#comment ||= new Comment3(this);
        this.#comment.setInitialText(comment, richText);
        if (!this.annotationElementId) {
          return;
        }
        const storedData = this._uiManager.getAndRemoveDataFromAnnotationStorage(this.annotationElementId);
        if (storedData) {
          this.updateFromAnnotationLayer(storedData);
        }
      }
      get hasEditedComment() {
        return this.#comment?.hasBeenEdited();
      }
      get hasDeletedComment() {
        return this.#comment?.isDeleted();
      }
      get hasComment() {
        return !!this.#comment && !this.#comment.isEmpty() && !this.#comment.isDeleted();
      }
      async editComment(options) {
        this.#comment ||= new Comment3(this);
        this.#comment.edit(options);
      }
      toggleComment(isSelected, visibility = void 0) {
        if (this.hasComment) {
          this._uiManager.toggleComment(this, isSelected, visibility);
        }
      }
      setSelectedCommentButton(selected) {
        this.#comment.setSelectedButton(selected);
      }
      addComment(serialized) {
        if (this.hasEditedComment) {
          const DEFAULT_POPUP_WIDTH = 180;
          const DEFAULT_POPUP_HEIGHT = 100;
          const [, , , trY] = serialized.rect;
          const [pageWidth] = this.pageDimensions;
          const [pageX] = this.pageTranslation;
          const blX = pageX + pageWidth + 1;
          const blY = trY - DEFAULT_POPUP_HEIGHT;
          const trX = blX + DEFAULT_POPUP_WIDTH;
          serialized.popup = {
            contents: this.comment.text,
            deleted: this.comment.deleted,
            rect: [blX, blY, trX, trY]
          };
        }
      }
      updateFromAnnotationLayer({
        popup: {
          contents: contents2,
          deleted
        }
      }) {
        this.#comment.data = deleted ? null : contents2;
      }
      get parentBoundingClientRect() {
        return this.parent.boundingClientRect;
      }
      render() {
        const div = this.div = document.createElement("div");
        div.setAttribute("data-editor-rotation", (360 - this.rotation) % 360);
        div.className = this.name;
        div.setAttribute("id", this.id);
        div.tabIndex = this.#disabled ? -1 : 0;
        div.setAttribute("role", "application");
        if (this.defaultL10nId) {
          div.setAttribute("data-l10n-id", this.defaultL10nId);
        }
        if (!this._isVisible) {
          div.classList.add("hidden");
        }
        this.setInForeground();
        this.#addFocusListeners();
        const [parentWidth, parentHeight] = this.parentDimensions;
        if (this.parentRotation % 180 !== 0) {
          div.style.maxWidth = `${(100 * parentHeight / parentWidth).toFixed(2)}%`;
          div.style.maxHeight = `${(100 * parentWidth / parentHeight).toFixed(2)}%`;
        }
        const [tx, ty] = this.getInitialTranslation();
        this.translate(tx, ty);
        bindEvents(this, div, ["keydown", "pointerdown", "dblclick"]);
        if (this.isResizable && this._uiManager._supportsPinchToZoom) {
          this.#touchManager ||= new TouchManager({
            container: div,
            isPinchingDisabled: () => !this.isSelected,
            onPinchStart: this.#touchPinchStartCallback.bind(this),
            onPinching: this.#touchPinchCallback.bind(this),
            onPinchEnd: this.#touchPinchEndCallback.bind(this),
            signal: this._uiManager._signal
          });
        }
        this.addStandaloneCommentButton();
        this._uiManager._editorUndoBar?.hide();
        return div;
      }
      #touchPinchStartCallback() {
        this.#savedDimensions = {
          savedX: this.x,
          savedY: this.y,
          savedWidth: this.width,
          savedHeight: this.height
        };
        this.#altText?.toggle(false);
        this.parent.togglePointerEvents(false);
      }
      #touchPinchCallback(_origin, prevDistance, distance) {
        const slowDownFactor = 0.7;
        let factor = slowDownFactor * (distance / prevDistance) + 1 - slowDownFactor;
        if (factor === 1) {
          return;
        }
        const rotationMatrix = this.#getRotationMatrix(this.rotation);
        const transf = (x2, y2) => [rotationMatrix[0] * x2 + rotationMatrix[2] * y2, rotationMatrix[1] * x2 + rotationMatrix[3] * y2];
        const [parentWidth, parentHeight] = this.parentDimensions;
        const savedX = this.x;
        const savedY = this.y;
        const savedWidth = this.width;
        const savedHeight = this.height;
        const minWidth = _AnnotationEditor.MIN_SIZE / parentWidth;
        const minHeight = _AnnotationEditor.MIN_SIZE / parentHeight;
        factor = Math.max(Math.min(factor, 1 / savedWidth, 1 / savedHeight), minWidth / savedWidth, minHeight / savedHeight);
        const newWidth = _AnnotationEditor._round(savedWidth * factor);
        const newHeight = _AnnotationEditor._round(savedHeight * factor);
        if (newWidth === savedWidth && newHeight === savedHeight) {
          return;
        }
        this.#initialRect ||= [savedX, savedY, savedWidth, savedHeight];
        const transfCenterPoint = transf(savedWidth / 2, savedHeight / 2);
        const centerX = _AnnotationEditor._round(savedX + transfCenterPoint[0]);
        const centerY = _AnnotationEditor._round(savedY + transfCenterPoint[1]);
        const newTransfCenterPoint = transf(newWidth / 2, newHeight / 2);
        this.x = centerX - newTransfCenterPoint[0];
        this.y = centerY - newTransfCenterPoint[1];
        this.width = newWidth;
        this.height = newHeight;
        this.setDims();
        this.fixAndSetPosition();
        this._onResizing();
      }
      #touchPinchEndCallback() {
        this.#altText?.toggle(true);
        this.parent.togglePointerEvents(true);
        this.#addResizeToUndoStack();
      }
      pointerdown(event) {
        const {
          isMac
        } = util_FeatureTest.platform;
        if (event.button !== 0 || event.ctrlKey && isMac) {
          event.preventDefault();
          return;
        }
        this.#hasBeenClicked = true;
        if (this._isDraggable) {
          this.#setUpDragSession(event);
          return;
        }
        this.#selectOnPointerEvent(event);
      }
      #selectOnPointerEvent(event) {
        const {
          isMac
        } = util_FeatureTest.platform;
        if (event.ctrlKey && !isMac || event.shiftKey || event.metaKey && isMac) {
          this.parent.toggleSelected(this);
        } else {
          this.parent.setSelected(this);
        }
      }
      #setUpDragSession(event) {
        const {
          isSelected
        } = this;
        this._uiManager.setUpDragSession();
        let hasDraggingStarted = false;
        const ac = new AbortController();
        const signal = this._uiManager.combinedSignal(ac);
        const opts = {
          capture: true,
          passive: false,
          signal
        };
        const cancelDrag = (e) => {
          ac.abort();
          this.#dragPointerId = null;
          this.#hasBeenClicked = false;
          if (!this._uiManager.endDragSession()) {
            this.#selectOnPointerEvent(e);
          }
          if (hasDraggingStarted) {
            this._onStopDragging();
          }
        };
        if (isSelected) {
          this.#prevDragX = event.clientX;
          this.#prevDragY = event.clientY;
          this.#dragPointerId = event.pointerId;
          this.#dragPointerType = event.pointerType;
          window.addEventListener("pointermove", (e) => {
            if (!hasDraggingStarted) {
              hasDraggingStarted = true;
              this._uiManager.toggleComment(this, true, false);
              this._onStartDragging();
            }
            const {
              clientX: x2,
              clientY: y2,
              pointerId
            } = e;
            if (pointerId !== this.#dragPointerId) {
              stopEvent(e);
              return;
            }
            const [tx, ty] = this.screenToPageTranslation(x2 - this.#prevDragX, y2 - this.#prevDragY);
            this.#prevDragX = x2;
            this.#prevDragY = y2;
            this._uiManager.dragSelectedEditors(tx, ty);
          }, opts);
          window.addEventListener("touchmove", stopEvent, opts);
          window.addEventListener("pointerdown", (e) => {
            if (e.pointerType === this.#dragPointerType) {
              if (this.#touchManager || e.isPrimary) {
                cancelDrag(e);
              }
            }
            stopEvent(e);
          }, opts);
        }
        const pointerUpCallback = (e) => {
          if (!this.#dragPointerId || this.#dragPointerId === e.pointerId) {
            cancelDrag(e);
            return;
          }
          stopEvent(e);
        };
        window.addEventListener("pointerup", pointerUpCallback, {
          signal
        });
        window.addEventListener("blur", pointerUpCallback, {
          signal
        });
      }
      _onStartDragging() {
      }
      _onStopDragging() {
      }
      moveInDOM() {
        if (this.#moveInDOMTimeout) {
          clearTimeout(this.#moveInDOMTimeout);
        }
        this.#moveInDOMTimeout = setTimeout(() => {
          this.#moveInDOMTimeout = null;
          this.parent?.moveEditorInDOM(this);
        }, 0);
      }
      _setParentAndPosition(parent2, x2, y2) {
        parent2.changeParent(this);
        this.x = x2;
        this.y = y2;
        this.fixAndSetPosition();
        this._onTranslated();
      }
      getRect(tx, ty, rotation = this.rotation) {
        const scale = this.parentScale;
        const [pageWidth, pageHeight] = this.pageDimensions;
        const [pageX, pageY] = this.pageTranslation;
        const shiftX = tx / scale;
        const shiftY = ty / scale;
        const x2 = this.x * pageWidth;
        const y2 = this.y * pageHeight;
        const width = this.width * pageWidth;
        const height = this.height * pageHeight;
        switch (rotation) {
          case 0:
            return [x2 + shiftX + pageX, pageHeight - y2 - shiftY - height + pageY, x2 + shiftX + width + pageX, pageHeight - y2 - shiftY + pageY];
          case 90:
            return [x2 + shiftY + pageX, pageHeight - y2 + shiftX + pageY, x2 + shiftY + height + pageX, pageHeight - y2 + shiftX + width + pageY];
          case 180:
            return [x2 - shiftX - width + pageX, pageHeight - y2 + shiftY + pageY, x2 - shiftX + pageX, pageHeight - y2 + shiftY + height + pageY];
          case 270:
            return [x2 - shiftY - height + pageX, pageHeight - y2 - shiftX - width + pageY, x2 - shiftY + pageX, pageHeight - y2 - shiftX + pageY];
          default:
            throw new Error("Invalid rotation");
        }
      }
      getRectInCurrentCoords(rect, pageHeight) {
        const [x1, y1, x2, y2] = rect;
        const width = x2 - x1;
        const height = y2 - y1;
        switch (this.rotation) {
          case 0:
            return [x1, pageHeight - y2, width, height];
          case 90:
            return [x1, pageHeight - y1, height, width];
          case 180:
            return [x2, pageHeight - y1, width, height];
          case 270:
            return [x2, pageHeight - y2, height, width];
          default:
            throw new Error("Invalid rotation");
        }
      }
      getPDFRect() {
        return this.getRect(0, 0);
      }
      getNonHCMColor() {
        return this.color && _AnnotationEditor._colorManager.convert(this._uiManager.getNonHCMColor(this.color));
      }
      onUpdatedColor() {
        this.#comment?.onUpdatedColor();
      }
      getData() {
        const {
          comment: {
            text: str,
            color,
            date,
            opacity,
            deleted,
            richText
          },
          uid: id,
          pageIndex,
          creationDate,
          modificationDate
        } = this;
        return {
          id,
          pageIndex,
          rect: this.getPDFRect(),
          richText,
          contentsObj: {
            str
          },
          creationDate,
          modificationDate: date || modificationDate,
          popupRef: !deleted,
          color,
          opacity
        };
      }
      onceAdded(focus) {
      }
      isEmpty() {
        return false;
      }
      enableEditMode() {
        if (this.isInEditMode()) {
          return false;
        }
        this.parent.setEditingState(false);
        this.#isInEditMode = true;
        return true;
      }
      disableEditMode() {
        if (!this.isInEditMode()) {
          return false;
        }
        this.parent.setEditingState(true);
        this.#isInEditMode = false;
        return true;
      }
      isInEditMode() {
        return this.#isInEditMode;
      }
      shouldGetKeyboardEvents() {
        return this.#isResizerEnabledForKeyboard;
      }
      needsToBeRebuilt() {
        return this.div && !this.isAttachedToDOM;
      }
      get isOnScreen() {
        const {
          top,
          left,
          bottom,
          right
        } = this.getClientDimensions();
        const {
          innerHeight,
          innerWidth
        } = window;
        return left < innerWidth && right > 0 && top < innerHeight && bottom > 0;
      }
      #addFocusListeners() {
        if (this.#focusAC || !this.div) {
          return;
        }
        this.#focusAC = new AbortController();
        const signal = this._uiManager.combinedSignal(this.#focusAC);
        this.div.addEventListener("focusin", this.focusin.bind(this), {
          signal
        });
        this.div.addEventListener("focusout", this.focusout.bind(this), {
          signal
        });
      }
      rebuild() {
        this.#addFocusListeners();
      }
      rotate(_angle) {
      }
      resize() {
      }
      serializeDeleted() {
        return {
          id: this.annotationElementId,
          deleted: true,
          pageIndex: this.pageIndex,
          popupRef: this._initialData?.popupRef || ""
        };
      }
      serialize(isForCopying = false, context = null) {
        return {
          annotationType: this.mode,
          pageIndex: this.pageIndex,
          rect: this.getPDFRect(),
          rotation: this.rotation,
          structTreeParentId: this._structTreeParentId,
          popupRef: this._initialData?.popupRef || ""
        };
      }
      static async deserialize(data2, parent2, uiManager) {
        const editor = new this.prototype.constructor({
          parent: parent2,
          id: parent2.getNextId(),
          uiManager,
          annotationElementId: data2.annotationElementId,
          creationDate: data2.creationDate,
          modificationDate: data2.modificationDate
        });
        editor.rotation = data2.rotation;
        editor.#accessibilityData = data2.accessibilityData;
        editor._isCopy = data2.isCopy || false;
        const [pageWidth, pageHeight] = editor.pageDimensions;
        const [x2, y2, width, height] = editor.getRectInCurrentCoords(data2.rect, pageHeight);
        editor.x = x2 / pageWidth;
        editor.y = y2 / pageHeight;
        editor.width = width / pageWidth;
        editor.height = height / pageHeight;
        return editor;
      }
      get hasBeenModified() {
        return !!this.annotationElementId && (this.deleted || this.serialize() !== null);
      }
      remove() {
        this.#focusAC?.abort();
        this.#focusAC = null;
        if (!this.isEmpty()) {
          this.commit();
        }
        if (this.parent) {
          this.parent.remove(this);
        } else {
          this._uiManager.removeEditor(this);
        }
        if (this.#moveInDOMTimeout) {
          clearTimeout(this.#moveInDOMTimeout);
          this.#moveInDOMTimeout = null;
        }
        this.#stopResizing();
        this.removeEditToolbar();
        if (this.#telemetryTimeouts) {
          for (const timeout of this.#telemetryTimeouts.values()) {
            clearTimeout(timeout);
          }
          this.#telemetryTimeouts = null;
        }
        this.parent = null;
        this.#touchManager?.destroy();
        this.#touchManager = null;
      }
      get isResizable() {
        return false;
      }
      makeResizable() {
        if (this.isResizable) {
          this.#createResizers();
          this.#resizersDiv.classList.remove("hidden");
        }
      }
      get toolbarPosition() {
        return null;
      }
      get commentButtonPosition() {
        return this._uiManager.direction === "ltr" ? [1, 0] : [0, 0];
      }
      get commentButtonPositionInPage() {
        const {
          commentButtonPosition: [posX, posY]
        } = this;
        const [blX, blY, trX, trY] = this.getPDFRect();
        return [_AnnotationEditor._round(blX + (trX - blX) * posX), _AnnotationEditor._round(blY + (trY - blY) * (1 - posY))];
      }
      get commentButtonColor() {
        return this._uiManager.makeCommentColor(this.getNonHCMColor(), this.opacity);
      }
      get commentPopupPosition() {
        return this.#comment.commentPopupPositionInLayer;
      }
      set commentPopupPosition(pos) {
        this.#comment.commentPopupPositionInLayer = pos;
      }
      hasDefaultPopupPosition() {
        return this.#comment.hasDefaultPopupPosition();
      }
      get commentButtonWidth() {
        return this.#comment.commentButtonWidth;
      }
      get elementBeforePopup() {
        return this.div;
      }
      setCommentButtonStates(options) {
        this.#comment.setCommentButtonStates(options);
      }
      keydown(event) {
        if (!this.isResizable || event.target !== this.div || event.key !== "Enter") {
          return;
        }
        this._uiManager.setSelected(this);
        this.#savedDimensions = {
          savedX: this.x,
          savedY: this.y,
          savedWidth: this.width,
          savedHeight: this.height
        };
        const children2 = this.#resizersDiv.children;
        if (!this.#allResizerDivs) {
          this.#allResizerDivs = Array.from(children2);
          const boundResizerKeydown = this.#resizerKeydown.bind(this);
          const boundResizerBlur = this.#resizerBlur.bind(this);
          const signal = this._uiManager._signal;
          for (const div of this.#allResizerDivs) {
            const name = div.getAttribute("data-resizer-name");
            div.setAttribute("role", "spinbutton");
            div.addEventListener("keydown", boundResizerKeydown, {
              signal
            });
            div.addEventListener("blur", boundResizerBlur, {
              signal
            });
            div.addEventListener("focus", this.#resizerFocus.bind(this, name), {
              signal
            });
            div.setAttribute("data-l10n-id", _AnnotationEditor._l10nResizer[name]);
          }
        }
        const first2 = this.#allResizerDivs[0];
        let firstPosition = 0;
        for (const div of children2) {
          if (div === first2) {
            break;
          }
          firstPosition++;
        }
        const nextFirstPosition = (360 - this.rotation + this.parentRotation) % 360 / 90 * (this.#allResizerDivs.length / 4);
        if (nextFirstPosition !== firstPosition) {
          if (nextFirstPosition < firstPosition) {
            for (let i2 = 0; i2 < firstPosition - nextFirstPosition; i2++) {
              this.#resizersDiv.append(this.#resizersDiv.firstChild);
            }
          } else if (nextFirstPosition > firstPosition) {
            for (let i2 = 0; i2 < nextFirstPosition - firstPosition; i2++) {
              this.#resizersDiv.firstChild.before(this.#resizersDiv.lastChild);
            }
          }
          let i = 0;
          for (const child of children2) {
            const div = this.#allResizerDivs[i++];
            const name = div.getAttribute("data-resizer-name");
            child.setAttribute("data-l10n-id", _AnnotationEditor._l10nResizer[name]);
          }
        }
        this.#setResizerTabIndex(0);
        this.#isResizerEnabledForKeyboard = true;
        this.#resizersDiv.firstChild.focus({
          focusVisible: true
        });
        event.preventDefault();
        event.stopImmediatePropagation();
      }
      #resizerKeydown(event) {
        _AnnotationEditor._resizerKeyboardManager.exec(this, event);
      }
      #resizerBlur(event) {
        if (this.#isResizerEnabledForKeyboard && event.relatedTarget?.parentNode !== this.#resizersDiv) {
          this.#stopResizing();
        }
      }
      #resizerFocus(name) {
        this.#focusedResizerName = this.#isResizerEnabledForKeyboard ? name : "";
      }
      #setResizerTabIndex(value) {
        if (!this.#allResizerDivs) {
          return;
        }
        for (const div of this.#allResizerDivs) {
          div.tabIndex = value;
        }
      }
      _resizeWithKeyboard(x2, y2) {
        if (!this.#isResizerEnabledForKeyboard) {
          return;
        }
        this.#resizerPointermove(this.#focusedResizerName, {
          deltaX: x2,
          deltaY: y2,
          fromKeyboard: true
        });
      }
      #stopResizing() {
        this.#isResizerEnabledForKeyboard = false;
        this.#setResizerTabIndex(-1);
        this.#addResizeToUndoStack();
      }
      _stopResizingWithKeyboard() {
        this.#stopResizing();
        this.div.focus();
      }
      select() {
        if (this.isSelected && this._editToolbar) {
          this._editToolbar.show();
          return;
        }
        this.isSelected = true;
        this.makeResizable();
        this.div?.classList.add("selectedEditor");
        if (!this._editToolbar) {
          this.addEditToolbar().then(() => {
            if (this.div?.classList.contains("selectedEditor")) {
              this._editToolbar?.show();
            }
          });
          return;
        }
        this._editToolbar?.show();
        this.#altText?.toggleAltTextBadge(false);
      }
      focus() {
        if (this.div && !this.div.contains(document.activeElement)) {
          setTimeout(() => this.div?.focus({
            preventScroll: true
          }), 0);
        }
      }
      unselect() {
        if (!this.isSelected) {
          return;
        }
        this.isSelected = false;
        this.#resizersDiv?.classList.add("hidden");
        this.div?.classList.remove("selectedEditor");
        if (this.div?.contains(document.activeElement)) {
          this._uiManager.currentLayer.div.focus({
            preventScroll: true
          });
        }
        this._editToolbar?.hide();
        this.#altText?.toggleAltTextBadge(true);
        if (this.hasComment) {
          this._uiManager.toggleComment(this, false, false);
        }
      }
      updateParams(type, value) {
      }
      disableEditing() {
      }
      enableEditing() {
      }
      get canChangeContent() {
        return false;
      }
      enterInEditMode() {
        if (!this.canChangeContent) {
          return;
        }
        this.enableEditMode();
        this.div.focus();
      }
      dblclick(event) {
        if (event.target.nodeName === "BUTTON") {
          return;
        }
        this.enterInEditMode();
        this.parent.updateToolbar({
          mode: this.constructor._editorType,
          editId: this.id
        });
      }
      getElementForAltText() {
        return this.div;
      }
      get contentDiv() {
        return this.div;
      }
      get isEditing() {
        return this.#isEditing;
      }
      set isEditing(value) {
        this.#isEditing = value;
        if (!this.parent) {
          return;
        }
        if (value) {
          this.parent.setSelected(this);
          this.parent.setActiveEditor(this);
        } else {
          this.parent.setActiveEditor(null);
        }
      }
      static get MIN_SIZE() {
        return 16;
      }
      static canCreateNewEmptyEditor() {
        return true;
      }
      get telemetryInitialData() {
        return {
          action: "added"
        };
      }
      get telemetryFinalData() {
        return null;
      }
      _reportTelemetry(data2, mustWait = false) {
        if (mustWait) {
          this.#telemetryTimeouts ||= /* @__PURE__ */ new Map();
          const {
            action
          } = data2;
          let timeout = this.#telemetryTimeouts.get(action);
          if (timeout) {
            clearTimeout(timeout);
          }
          timeout = setTimeout(() => {
            this._reportTelemetry(data2);
            this.#telemetryTimeouts.delete(action);
            if (this.#telemetryTimeouts.size === 0) {
              this.#telemetryTimeouts = null;
            }
          }, _AnnotationEditor._telemetryTimeout);
          this.#telemetryTimeouts.set(action, timeout);
          return;
        }
        data2.type ||= this.editorType;
        this._uiManager._eventBus.dispatch("reporttelemetry", {
          source: this,
          details: {
            type: "editing",
            data: data2
          }
        });
      }
      show(visible = this._isVisible) {
        this.div.classList.toggle("hidden", !visible);
        this._isVisible = visible;
      }
      enable() {
        if (this.div) {
          this.div.tabIndex = 0;
        }
        this.#disabled = false;
      }
      disable() {
        if (this.div) {
          this.div.tabIndex = -1;
        }
        this.#disabled = true;
      }
      updateFakeAnnotationElement(annotationLayer) {
        if (!this.#fakeAnnotation && !this.deleted) {
          this.#fakeAnnotation = annotationLayer.addFakeAnnotation(this);
          return;
        }
        if (this.deleted) {
          this.#fakeAnnotation.remove();
          this.#fakeAnnotation = null;
          return;
        }
        if (this.hasEditedComment || this._hasBeenMoved || this._hasBeenResized) {
          this.#fakeAnnotation.updateEdited({
            rect: this.getPDFRect(),
            popup: this.comment
          });
        }
      }
      renderAnnotationElement(annotation) {
        if (this.deleted) {
          annotation.hide();
          return null;
        }
        let content = annotation.container.querySelector(".annotationContent");
        if (!content) {
          content = document.createElement("div");
          content.classList.add("annotationContent", this.editorType);
          annotation.container.prepend(content);
        } else if (content.nodeName === "CANVAS") {
          const canvas = content;
          content = document.createElement("div");
          content.classList.add("annotationContent", this.editorType);
          canvas.before(content);
        }
        return content;
      }
      resetAnnotationElement(annotation) {
        const {
          firstChild
        } = annotation.container;
        if (firstChild?.nodeName === "DIV" && firstChild.classList.contains("annotationContent")) {
          firstChild.remove();
        }
      }
    };
    FakeEditor = class extends AnnotationEditor {
      constructor(params) {
        super(params);
        this.annotationElementId = params.annotationElementId;
        this.deleted = true;
      }
      serialize() {
        return this.serializeDeleted();
      }
    };
    SEED = 3285377520;
    MASK_HIGH = 4294901760;
    MASK_LOW = 65535;
    MurmurHash3_64 = class {
      constructor(seed) {
        this.h1 = seed ? seed & 4294967295 : SEED;
        this.h2 = seed ? seed & 4294967295 : SEED;
      }
      update(input) {
        let data2, length;
        if (typeof input === "string") {
          data2 = new Uint8Array(input.length * 2);
          length = 0;
          for (let i = 0, ii = input.length; i < ii; i++) {
            const code = input.charCodeAt(i);
            if (code <= 255) {
              data2[length++] = code;
            } else {
              data2[length++] = code >>> 8;
              data2[length++] = code & 255;
            }
          }
        } else if (ArrayBuffer.isView(input)) {
          data2 = input.slice();
          length = data2.byteLength;
        } else {
          throw new Error("Invalid data format, must be a string or TypedArray.");
        }
        const blockCounts = length >> 2;
        const tailLength = length - blockCounts * 4;
        const dataUint32 = new Uint32Array(data2.buffer, 0, blockCounts);
        let k1 = 0, k2 = 0;
        let h1 = this.h1, h2 = this.h2;
        const C1 = 3432918353, C2 = 461845907;
        const C1_LOW = C1 & MASK_LOW, C2_LOW = C2 & MASK_LOW;
        for (let i = 0; i < blockCounts; i++) {
          if (i & 1) {
            k1 = dataUint32[i];
            k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;
            k1 = k1 << 15 | k1 >>> 17;
            k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;
            h1 ^= k1;
            h1 = h1 << 13 | h1 >>> 19;
            h1 = h1 * 5 + 3864292196;
          } else {
            k2 = dataUint32[i];
            k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;
            k2 = k2 << 15 | k2 >>> 17;
            k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;
            h2 ^= k2;
            h2 = h2 << 13 | h2 >>> 19;
            h2 = h2 * 5 + 3864292196;
          }
        }
        k1 = 0;
        switch (tailLength) {
          case 3:
            k1 ^= data2[blockCounts * 4 + 2] << 16;
          case 2:
            k1 ^= data2[blockCounts * 4 + 1] << 8;
          case 1:
            k1 ^= data2[blockCounts * 4];
            k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;
            k1 = k1 << 15 | k1 >>> 17;
            k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;
            if (blockCounts & 1) {
              h1 ^= k1;
            } else {
              h2 ^= k1;
            }
        }
        this.h1 = h1;
        this.h2 = h2;
      }
      hexdigest() {
        let h1 = this.h1, h2 = this.h2;
        h1 ^= h2 >>> 1;
        h1 = h1 * 3981806797 & MASK_HIGH | h1 * 36045 & MASK_LOW;
        h2 = h2 * 4283543511 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 2950163797 & MASK_HIGH) >>> 16;
        h1 ^= h2 >>> 1;
        h1 = h1 * 444984403 & MASK_HIGH | h1 * 60499 & MASK_LOW;
        h2 = h2 * 3301882366 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 3120437893 & MASK_HIGH) >>> 16;
        h1 ^= h2 >>> 1;
        return (h1 >>> 0).toString(16).padStart(8, "0") + (h2 >>> 0).toString(16).padStart(8, "0");
      }
    };
    SerializableEmpty = Object.freeze({
      map: null,
      hash: "",
      transfer: void 0
    });
    AnnotationStorage = class {
      #modified = false;
      #modifiedIds = null;
      #editorsMap = null;
      #storage = /* @__PURE__ */ new Map();
      constructor() {
        this.onSetModified = null;
        this.onResetModified = null;
        this.onAnnotationEditor = null;
      }
      getValue(key, defaultValue) {
        const value = this.#storage.get(key);
        if (value === void 0) {
          return defaultValue;
        }
        return Object.assign(defaultValue, value);
      }
      getRawValue(key) {
        return this.#storage.get(key);
      }
      remove(key) {
        const storedValue = this.#storage.get(key);
        if (storedValue === void 0) {
          return;
        }
        if (storedValue instanceof AnnotationEditor) {
          this.#editorsMap.delete(storedValue.annotationElementId);
        }
        this.#storage.delete(key);
        if (this.#storage.size === 0) {
          this.resetModified();
        }
        if (typeof this.onAnnotationEditor === "function") {
          for (const value of this.#storage.values()) {
            if (value instanceof AnnotationEditor) {
              return;
            }
          }
          this.onAnnotationEditor(null);
        }
      }
      setValue(key, value) {
        const obj = this.#storage.get(key);
        let modified = false;
        if (obj !== void 0) {
          for (const [entry, val2] of Object.entries(value)) {
            if (obj[entry] !== val2) {
              modified = true;
              obj[entry] = val2;
            }
          }
        } else {
          modified = true;
          this.#storage.set(key, value);
        }
        if (modified) {
          this.#setModified();
        }
        if (value instanceof AnnotationEditor) {
          (this.#editorsMap ||= /* @__PURE__ */ new Map()).set(value.annotationElementId, value);
          if (typeof this.onAnnotationEditor === "function") {
            this.onAnnotationEditor(value.constructor._type);
          }
        }
      }
      has(key) {
        return this.#storage.has(key);
      }
      get size() {
        return this.#storage.size;
      }
      #setModified() {
        if (!this.#modified) {
          this.#modified = true;
          if (typeof this.onSetModified === "function") {
            this.onSetModified();
          }
        }
      }
      resetModified() {
        if (this.#modified) {
          this.#modified = false;
          if (typeof this.onResetModified === "function") {
            this.onResetModified();
          }
        }
      }
      get print() {
        return new PrintAnnotationStorage(this);
      }
      get serializable() {
        if (this.#storage.size === 0) {
          return SerializableEmpty;
        }
        const map2 = /* @__PURE__ */ new Map(), hash = new MurmurHash3_64(), transfer = [];
        const context = /* @__PURE__ */ Object.create(null);
        let hasBitmap = false;
        for (const [key, val2] of this.#storage) {
          const serialized = val2 instanceof AnnotationEditor ? val2.serialize(false, context) : val2;
          if (serialized) {
            map2.set(key, serialized);
            hash.update(`${key}:${JSON.stringify(serialized)}`);
            hasBitmap ||= !!serialized.bitmap;
          }
        }
        if (hasBitmap) {
          for (const value of map2.values()) {
            if (value.bitmap) {
              transfer.push(value.bitmap);
            }
          }
        }
        return map2.size > 0 ? {
          map: map2,
          hash: hash.hexdigest(),
          transfer
        } : SerializableEmpty;
      }
      get editorStats() {
        let stats = null;
        const typeToEditor = /* @__PURE__ */ new Map();
        let numberOfEditedComments = 0;
        let numberOfDeletedComments = 0;
        for (const value of this.#storage.values()) {
          if (!(value instanceof AnnotationEditor)) {
            if (value.popup) {
              if (value.popup.deleted) {
                numberOfDeletedComments += 1;
              } else {
                numberOfEditedComments += 1;
              }
            }
            continue;
          }
          if (value.isCommentDeleted) {
            numberOfDeletedComments += 1;
          } else if (value.hasEditedComment) {
            numberOfEditedComments += 1;
          }
          const editorStats = value.telemetryFinalData;
          if (!editorStats) {
            continue;
          }
          const {
            type
          } = editorStats;
          if (!typeToEditor.has(type)) {
            typeToEditor.set(type, Object.getPrototypeOf(value).constructor);
          }
          stats ||= /* @__PURE__ */ Object.create(null);
          const map2 = stats[type] ||= /* @__PURE__ */ new Map();
          for (const [key, val2] of Object.entries(editorStats)) {
            if (key === "type") {
              continue;
            }
            let counters = map2.get(key);
            if (!counters) {
              counters = /* @__PURE__ */ new Map();
              map2.set(key, counters);
            }
            const count = counters.get(val2) ?? 0;
            counters.set(val2, count + 1);
          }
        }
        if (numberOfDeletedComments > 0 || numberOfEditedComments > 0) {
          stats ||= /* @__PURE__ */ Object.create(null);
          stats.comments = {
            deleted: numberOfDeletedComments,
            edited: numberOfEditedComments
          };
        }
        if (!stats) {
          return null;
        }
        for (const [type, editor] of typeToEditor) {
          stats[type] = editor.computeTelemetryFinalData(stats[type]);
        }
        return stats;
      }
      resetModifiedIds() {
        this.#modifiedIds = null;
      }
      updateEditor(annotationId, data2) {
        const value = this.#editorsMap?.get(annotationId);
        if (value) {
          value.updateFromAnnotationLayer(data2);
          return true;
        }
        return false;
      }
      getEditor(annotationId) {
        return this.#editorsMap?.get(annotationId) || null;
      }
      get modifiedIds() {
        if (this.#modifiedIds) {
          return this.#modifiedIds;
        }
        const ids = [];
        if (this.#editorsMap) {
          for (const value of this.#editorsMap.values()) {
            if (!value.serialize()) {
              continue;
            }
            ids.push(value.annotationElementId);
          }
        }
        return this.#modifiedIds = {
          ids: new Set(ids),
          hash: ids.join(",")
        };
      }
      [Symbol.iterator]() {
        return this.#storage.entries();
      }
    };
    PrintAnnotationStorage = class extends AnnotationStorage {
      #serializable;
      constructor(parent2) {
        super();
        const {
          map: map2,
          hash,
          transfer
        } = parent2.serializable;
        const clone2 = structuredClone(map2, transfer ? {
          transfer
        } : null);
        this.#serializable = {
          map: clone2,
          hash,
          transfer
        };
      }
      get print() {
        unreachable("Should not call PrintAnnotationStorage.print");
      }
      get serializable() {
        return this.#serializable;
      }
      get modifiedIds() {
        return shadow(this, "modifiedIds", {
          ids: /* @__PURE__ */ new Set(),
          hash: ""
        });
      }
    };
    FontLoader = class {
      #systemFonts = /* @__PURE__ */ new Set();
      constructor({
        ownerDocument = globalThis.document,
        styleElement = null
      }) {
        this._document = ownerDocument;
        this.nativeFontFaces = /* @__PURE__ */ new Set();
        this.styleElement = null;
        this.loadingRequests = [];
        this.loadTestFontId = 0;
      }
      addNativeFontFace(nativeFontFace) {
        this.nativeFontFaces.add(nativeFontFace);
        this._document.fonts.add(nativeFontFace);
      }
      removeNativeFontFace(nativeFontFace) {
        this.nativeFontFaces.delete(nativeFontFace);
        this._document.fonts.delete(nativeFontFace);
      }
      insertRule(rule) {
        if (!this.styleElement) {
          this.styleElement = this._document.createElement("style");
          this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement);
        }
        const styleSheet = this.styleElement.sheet;
        styleSheet.insertRule(rule, styleSheet.cssRules.length);
      }
      clear() {
        for (const nativeFontFace of this.nativeFontFaces) {
          this._document.fonts.delete(nativeFontFace);
        }
        this.nativeFontFaces.clear();
        this.#systemFonts.clear();
        if (this.styleElement) {
          this.styleElement.remove();
          this.styleElement = null;
        }
      }
      async loadSystemFont({
        systemFontInfo: info2,
        disableFontFace,
        _inspectFont
      }) {
        if (!info2 || this.#systemFonts.has(info2.loadedName)) {
          return;
        }
        assert(!disableFontFace, "loadSystemFont shouldn't be called when `disableFontFace` is set.");
        if (this.isFontLoadingAPISupported) {
          const {
            loadedName,
            src,
            style
          } = info2;
          const fontFace = new FontFace(loadedName, src, style);
          this.addNativeFontFace(fontFace);
          try {
            await fontFace.load();
            this.#systemFonts.add(loadedName);
            _inspectFont?.(info2);
          } catch {
            warn(`Cannot load system font: ${info2.baseFontName}, installing it could help to improve PDF rendering.`);
            this.removeNativeFontFace(fontFace);
          }
          return;
        }
        unreachable("Not implemented: loadSystemFont without the Font Loading API.");
      }
      async bind(font) {
        if (font.attached || font.missingFile && !font.systemFontInfo) {
          return;
        }
        font.attached = true;
        if (font.systemFontInfo) {
          await this.loadSystemFont(font);
          return;
        }
        if (this.isFontLoadingAPISupported) {
          const nativeFontFace = font.createNativeFontFace();
          if (nativeFontFace) {
            this.addNativeFontFace(nativeFontFace);
            try {
              await nativeFontFace.loaded;
            } catch (ex) {
              warn(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);
              font.disableFontFace = true;
              throw ex;
            }
          }
          return;
        }
        const rule = font.createFontFaceRule();
        if (rule) {
          this.insertRule(rule);
          if (this.isSyncFontLoadingSupported) {
            return;
          }
          await new Promise((resolve) => {
            const request = this._queueLoadingCallback(resolve);
            this._prepareFontLoadEvent(font, request);
          });
        }
      }
      get isFontLoadingAPISupported() {
        const hasFonts = !!this._document?.fonts;
        return shadow(this, "isFontLoadingAPISupported", hasFonts);
      }
      get isSyncFontLoadingSupported() {
        return shadow(this, "isSyncFontLoadingSupported", isNodeJS || util_FeatureTest.platform.isFirefox);
      }
      _queueLoadingCallback(callback) {
        function completeRequest() {
          assert(!request.done, "completeRequest() cannot be called twice.");
          request.done = true;
          while (loadingRequests.length > 0 && loadingRequests[0].done) {
            const otherRequest = loadingRequests.shift();
            setTimeout(otherRequest.callback, 0);
          }
        }
        const {
          loadingRequests
        } = this;
        const request = {
          done: false,
          complete: completeRequest,
          callback
        };
        loadingRequests.push(request);
        return request;
      }
      get _loadTestFont() {
        const testFont = atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");
        return shadow(this, "_loadTestFont", testFont);
      }
      _prepareFontLoadEvent(font, request) {
        function int32(data22, offset) {
          return data22.charCodeAt(offset) << 24 | data22.charCodeAt(offset + 1) << 16 | data22.charCodeAt(offset + 2) << 8 | data22.charCodeAt(offset + 3) & 255;
        }
        function spliceString(s, offset, remove2, insert) {
          const chunk1 = s.substring(0, offset);
          const chunk2 = s.substring(offset + remove2);
          return chunk1 + insert + chunk2;
        }
        let i, ii;
        const canvas = this._document.createElement("canvas");
        canvas.width = 1;
        canvas.height = 1;
        const ctx = canvas.getContext("2d");
        let called = 0;
        function isFontReady(name, callback) {
          if (++called > 30) {
            warn("Load test font never loaded.");
            callback();
            return;
          }
          ctx.font = "30px " + name;
          ctx.fillText(".", 0, 20);
          const imageData = ctx.getImageData(0, 0, 1, 1);
          if (imageData.data[3] > 0) {
            callback();
            return;
          }
          setTimeout(isFontReady.bind(null, name, callback));
        }
        const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;
        let data2 = this._loadTestFont;
        const COMMENT_OFFSET = 976;
        data2 = spliceString(data2, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);
        const CFF_CHECKSUM_OFFSET = 16;
        const XXXX_VALUE = 1482184792;
        let checksum = int32(data2, CFF_CHECKSUM_OFFSET);
        for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {
          checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;
        }
        if (i < loadTestFontId.length) {
          checksum = checksum - XXXX_VALUE + int32(loadTestFontId + "XXX", i) | 0;
        }
        data2 = spliceString(data2, CFF_CHECKSUM_OFFSET, 4, string32(checksum));
        const url = `url(data:font/opentype;base64,${btoa(data2)});`;
        const rule = `@font-face {font-family:"${loadTestFontId}";src:${url}}`;
        this.insertRule(rule);
        const div = this._document.createElement("div");
        div.style.visibility = "hidden";
        div.style.width = div.style.height = "10px";
        div.style.position = "absolute";
        div.style.top = div.style.left = "0px";
        for (const name of [font.loadedName, loadTestFontId]) {
          const span = this._document.createElement("span");
          span.textContent = "Hi";
          span.style.fontFamily = name;
          div.append(span);
        }
        this._document.body.append(div);
        isFontReady(loadTestFontId, () => {
          div.remove();
          request.complete();
        });
      }
    };
    FontFaceObject = class {
      #fontData;
      constructor(translatedData, inspectFont = null, extra, charProcOperatorList) {
        this.compiledGlyphs = /* @__PURE__ */ Object.create(null);
        this.#fontData = translatedData;
        this._inspectFont = inspectFont;
        if (extra) {
          Object.assign(this, extra);
        }
        if (charProcOperatorList) {
          this.charProcOperatorList = charProcOperatorList;
        }
      }
      createNativeFontFace() {
        if (!this.data || this.disableFontFace) {
          return null;
        }
        let nativeFontFace;
        if (!this.cssFontInfo) {
          nativeFontFace = new FontFace(this.loadedName, this.data, {});
        } else {
          const css2 = {
            weight: this.cssFontInfo.fontWeight
          };
          if (this.cssFontInfo.italicAngle) {
            css2.style = `oblique ${this.cssFontInfo.italicAngle}deg`;
          }
          nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css2);
        }
        this._inspectFont?.(this);
        return nativeFontFace;
      }
      createFontFaceRule() {
        if (!this.data || this.disableFontFace) {
          return null;
        }
        const url = `url(data:${this.mimetype};base64,${toBase64Util(this.data)});`;
        let rule;
        if (!this.cssFontInfo) {
          rule = `@font-face {font-family:"${this.loadedName}";src:${url}}`;
        } else {
          let css2 = `font-weight: ${this.cssFontInfo.fontWeight};`;
          if (this.cssFontInfo.italicAngle) {
            css2 += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;
          }
          rule = `@font-face {font-family:"${this.cssFontInfo.fontFamily}";${css2}src:${url}}`;
        }
        this._inspectFont?.(this, url);
        return rule;
      }
      getPathGenerator(objs, character) {
        if (this.compiledGlyphs[character] !== void 0) {
          return this.compiledGlyphs[character];
        }
        const objId = this.loadedName + "_path_" + character;
        let cmds;
        try {
          cmds = objs.get(objId);
        } catch (ex) {
          warn(`getPathGenerator - ignoring character: "${ex}".`);
        }
        const path = new Path2D(cmds || "");
        if (!this.fontExtraProperties) {
          objs.delete(objId);
        }
        return this.compiledGlyphs[character] = path;
      }
      get black() {
        return this.#fontData.black;
      }
      get bold() {
        return this.#fontData.bold;
      }
      get disableFontFace() {
        return this.#fontData.disableFontFace ?? false;
      }
      get fontExtraProperties() {
        return this.#fontData.fontExtraProperties ?? false;
      }
      get isInvalidPDFjsFont() {
        return this.#fontData.isInvalidPDFjsFont;
      }
      get isType3Font() {
        return this.#fontData.isType3Font;
      }
      get italic() {
        return this.#fontData.italic;
      }
      get missingFile() {
        return this.#fontData.missingFile;
      }
      get remeasure() {
        return this.#fontData.remeasure;
      }
      get vertical() {
        return this.#fontData.vertical;
      }
      get ascent() {
        return this.#fontData.ascent;
      }
      get defaultWidth() {
        return this.#fontData.defaultWidth;
      }
      get descent() {
        return this.#fontData.descent;
      }
      get bbox() {
        return this.#fontData.bbox;
      }
      get fontMatrix() {
        return this.#fontData.fontMatrix;
      }
      get fallbackName() {
        return this.#fontData.fallbackName;
      }
      get loadedName() {
        return this.#fontData.loadedName;
      }
      get mimetype() {
        return this.#fontData.mimetype;
      }
      get name() {
        return this.#fontData.name;
      }
      get data() {
        return this.#fontData.data;
      }
      clearData() {
        this.#fontData.clearData();
      }
      get cssFontInfo() {
        return this.#fontData.cssFontInfo;
      }
      get systemFontInfo() {
        return this.#fontData.systemFontInfo;
      }
      get defaultVMetrics() {
        return this.#fontData.defaultVMetrics;
      }
    };
    isRefProxy = (v2) => typeof v2 === "object" && Number.isInteger(v2?.num) && v2.num >= 0 && Number.isInteger(v2?.gen) && v2.gen >= 0;
    isNameProxy = (v2) => typeof v2 === "object" && typeof v2?.name === "string";
    isValidExplicitDest = _isValidExplicitDest.bind(null, isRefProxy, isNameProxy);
    LoopbackPort = class {
      #listeners = /* @__PURE__ */ new Map();
      #deferred = Promise.resolve();
      postMessage(obj, transfer) {
        const event = {
          data: structuredClone(obj, transfer ? {
            transfer
          } : null)
        };
        this.#deferred.then(() => {
          for (const [listener] of this.#listeners) {
            listener.call(this, event);
          }
        });
      }
      addEventListener(name, listener, options = null) {
        let rmAbort = null;
        if (options?.signal instanceof AbortSignal) {
          const {
            signal
          } = options;
          if (signal.aborted) {
            warn("LoopbackPort - cannot use an `aborted` signal.");
            return;
          }
          const onAbort = () => this.removeEventListener(name, listener);
          rmAbort = () => signal.removeEventListener("abort", onAbort);
          signal.addEventListener("abort", onAbort);
        }
        this.#listeners.set(listener, rmAbort);
      }
      removeEventListener(name, listener) {
        const rmAbort = this.#listeners.get(listener);
        rmAbort?.();
        this.#listeners.delete(listener);
      }
      terminate() {
        for (const [, rmAbort] of this.#listeners) {
          rmAbort?.();
        }
        this.#listeners.clear();
      }
    };
    CallbackKind = {
      DATA: 1,
      ERROR: 2
    };
    StreamKind = {
      CANCEL: 1,
      CANCEL_COMPLETE: 2,
      CLOSE: 3,
      ENQUEUE: 4,
      ERROR: 5,
      PULL: 6,
      PULL_COMPLETE: 7,
      START_COMPLETE: 8
    };
    MessageHandler = class {
      #messageAC = new AbortController();
      constructor(sourceName, targetName, comObj) {
        this.sourceName = sourceName;
        this.targetName = targetName;
        this.comObj = comObj;
        this.callbackId = 1;
        this.streamId = 1;
        this.streamSinks = /* @__PURE__ */ Object.create(null);
        this.streamControllers = /* @__PURE__ */ Object.create(null);
        this.callbackCapabilities = /* @__PURE__ */ Object.create(null);
        this.actionHandler = /* @__PURE__ */ Object.create(null);
        comObj.addEventListener("message", this.#onMessage.bind(this), {
          signal: this.#messageAC.signal
        });
      }
      #onMessage({
        data: data2
      }) {
        if (data2.targetName !== this.sourceName) {
          return;
        }
        if (data2.stream) {
          this.#processStreamMessage(data2);
          return;
        }
        if (data2.callback) {
          const callbackId = data2.callbackId;
          const capability = this.callbackCapabilities[callbackId];
          if (!capability) {
            throw new Error(`Cannot resolve callback ${callbackId}`);
          }
          delete this.callbackCapabilities[callbackId];
          if (data2.callback === CallbackKind.DATA) {
            capability.resolve(data2.data);
          } else if (data2.callback === CallbackKind.ERROR) {
            capability.reject(wrapReason(data2.reason));
          } else {
            throw new Error("Unexpected callback case");
          }
          return;
        }
        const action = this.actionHandler[data2.action];
        if (!action) {
          throw new Error(`Unknown action from worker: ${data2.action}`);
        }
        if (data2.callbackId) {
          const sourceName = this.sourceName, targetName = data2.sourceName, comObj = this.comObj;
          Promise.try(action, data2.data).then(function(result) {
            comObj.postMessage({
              sourceName,
              targetName,
              callback: CallbackKind.DATA,
              callbackId: data2.callbackId,
              data: result
            });
          }, function(reason) {
            comObj.postMessage({
              sourceName,
              targetName,
              callback: CallbackKind.ERROR,
              callbackId: data2.callbackId,
              reason: wrapReason(reason)
            });
          });
          return;
        }
        if (data2.streamId) {
          this.#createStreamSink(data2);
          return;
        }
        action(data2.data);
      }
      on(actionName, handler) {
        const ah = this.actionHandler;
        if (ah[actionName]) {
          throw new Error(`There is already an actionName called "${actionName}"`);
        }
        ah[actionName] = handler;
      }
      send(actionName, data2, transfers) {
        this.comObj.postMessage({
          sourceName: this.sourceName,
          targetName: this.targetName,
          action: actionName,
          data: data2
        }, transfers);
      }
      sendWithPromise(actionName, data2, transfers) {
        const callbackId = this.callbackId++;
        const capability = Promise.withResolvers();
        this.callbackCapabilities[callbackId] = capability;
        try {
          this.comObj.postMessage({
            sourceName: this.sourceName,
            targetName: this.targetName,
            action: actionName,
            callbackId,
            data: data2
          }, transfers);
        } catch (ex) {
          capability.reject(ex);
        }
        return capability.promise;
      }
      sendWithStream(actionName, data2, queueingStrategy, transfers) {
        const streamId = this.streamId++, sourceName = this.sourceName, targetName = this.targetName, comObj = this.comObj;
        return new ReadableStream({
          start: (controller) => {
            const startCapability = Promise.withResolvers();
            this.streamControllers[streamId] = {
              controller,
              startCall: startCapability,
              pullCall: null,
              cancelCall: null,
              isClosed: false
            };
            comObj.postMessage({
              sourceName,
              targetName,
              action: actionName,
              streamId,
              data: data2,
              desiredSize: controller.desiredSize
            }, transfers);
            return startCapability.promise;
          },
          pull: (controller) => {
            const pullCapability = Promise.withResolvers();
            this.streamControllers[streamId].pullCall = pullCapability;
            comObj.postMessage({
              sourceName,
              targetName,
              stream: StreamKind.PULL,
              streamId,
              desiredSize: controller.desiredSize
            });
            return pullCapability.promise;
          },
          cancel: (reason) => {
            assert(reason instanceof Error, "cancel must have a valid reason");
            const cancelCapability = Promise.withResolvers();
            this.streamControllers[streamId].cancelCall = cancelCapability;
            this.streamControllers[streamId].isClosed = true;
            comObj.postMessage({
              sourceName,
              targetName,
              stream: StreamKind.CANCEL,
              streamId,
              reason: wrapReason(reason)
            });
            return cancelCapability.promise;
          }
        }, queueingStrategy);
      }
      #createStreamSink(data2) {
        const streamId = data2.streamId, sourceName = this.sourceName, targetName = data2.sourceName, comObj = this.comObj;
        const self2 = this, action = this.actionHandler[data2.action];
        const streamSink = {
          enqueue(chunk, size = 1, transfers) {
            if (this.isCancelled) {
              return;
            }
            const lastDesiredSize = this.desiredSize;
            this.desiredSize -= size;
            if (lastDesiredSize > 0 && this.desiredSize <= 0) {
              this.sinkCapability = Promise.withResolvers();
              this.ready = this.sinkCapability.promise;
            }
            comObj.postMessage({
              sourceName,
              targetName,
              stream: StreamKind.ENQUEUE,
              streamId,
              chunk
            }, transfers);
          },
          close() {
            if (this.isCancelled) {
              return;
            }
            this.isCancelled = true;
            comObj.postMessage({
              sourceName,
              targetName,
              stream: StreamKind.CLOSE,
              streamId
            });
            delete self2.streamSinks[streamId];
          },
          error(reason) {
            assert(reason instanceof Error, "error must have a valid reason");
            if (this.isCancelled) {
              return;
            }
            this.isCancelled = true;
            comObj.postMessage({
              sourceName,
              targetName,
              stream: StreamKind.ERROR,
              streamId,
              reason: wrapReason(reason)
            });
          },
          sinkCapability: Promise.withResolvers(),
          onPull: null,
          onCancel: null,
          isCancelled: false,
          desiredSize: data2.desiredSize,
          ready: null
        };
        streamSink.sinkCapability.resolve();
        streamSink.ready = streamSink.sinkCapability.promise;
        this.streamSinks[streamId] = streamSink;
        Promise.try(action, data2.data, streamSink).then(function() {
          comObj.postMessage({
            sourceName,
            targetName,
            stream: StreamKind.START_COMPLETE,
            streamId,
            success: true
          });
        }, function(reason) {
          comObj.postMessage({
            sourceName,
            targetName,
            stream: StreamKind.START_COMPLETE,
            streamId,
            reason: wrapReason(reason)
          });
        });
      }
      #processStreamMessage(data2) {
        const streamId = data2.streamId, sourceName = this.sourceName, targetName = data2.sourceName, comObj = this.comObj;
        const streamController = this.streamControllers[streamId], streamSink = this.streamSinks[streamId];
        switch (data2.stream) {
          case StreamKind.START_COMPLETE:
            if (data2.success) {
              streamController.startCall.resolve();
            } else {
              streamController.startCall.reject(wrapReason(data2.reason));
            }
            break;
          case StreamKind.PULL_COMPLETE:
            if (data2.success) {
              streamController.pullCall.resolve();
            } else {
              streamController.pullCall.reject(wrapReason(data2.reason));
            }
            break;
          case StreamKind.PULL:
            if (!streamSink) {
              comObj.postMessage({
                sourceName,
                targetName,
                stream: StreamKind.PULL_COMPLETE,
                streamId,
                success: true
              });
              break;
            }
            if (streamSink.desiredSize <= 0 && data2.desiredSize > 0) {
              streamSink.sinkCapability.resolve();
            }
            streamSink.desiredSize = data2.desiredSize;
            Promise.try(streamSink.onPull || onFn).then(function() {
              comObj.postMessage({
                sourceName,
                targetName,
                stream: StreamKind.PULL_COMPLETE,
                streamId,
                success: true
              });
            }, function(reason) {
              comObj.postMessage({
                sourceName,
                targetName,
                stream: StreamKind.PULL_COMPLETE,
                streamId,
                reason: wrapReason(reason)
              });
            });
            break;
          case StreamKind.ENQUEUE:
            assert(streamController, "enqueue should have stream controller");
            if (streamController.isClosed) {
              break;
            }
            streamController.controller.enqueue(data2.chunk);
            break;
          case StreamKind.CLOSE:
            assert(streamController, "close should have stream controller");
            if (streamController.isClosed) {
              break;
            }
            streamController.isClosed = true;
            streamController.controller.close();
            this.#deleteStreamController(streamController, streamId);
            break;
          case StreamKind.ERROR:
            assert(streamController, "error should have stream controller");
            streamController.controller.error(wrapReason(data2.reason));
            this.#deleteStreamController(streamController, streamId);
            break;
          case StreamKind.CANCEL_COMPLETE:
            if (data2.success) {
              streamController.cancelCall.resolve();
            } else {
              streamController.cancelCall.reject(wrapReason(data2.reason));
            }
            this.#deleteStreamController(streamController, streamId);
            break;
          case StreamKind.CANCEL:
            if (!streamSink) {
              break;
            }
            const dataReason = wrapReason(data2.reason);
            Promise.try(streamSink.onCancel || onFn, dataReason).then(function() {
              comObj.postMessage({
                sourceName,
                targetName,
                stream: StreamKind.CANCEL_COMPLETE,
                streamId,
                success: true
              });
            }, function(reason) {
              comObj.postMessage({
                sourceName,
                targetName,
                stream: StreamKind.CANCEL_COMPLETE,
                streamId,
                reason: wrapReason(reason)
              });
            });
            streamSink.sinkCapability.reject(dataReason);
            streamSink.isCancelled = true;
            delete this.streamSinks[streamId];
            break;
          default:
            throw new Error("Unexpected stream case");
        }
      }
      async #deleteStreamController(streamController, streamId) {
        await Promise.allSettled([streamController.startCall?.promise, streamController.pullCall?.promise, streamController.cancelCall?.promise]);
        delete this.streamControllers[streamId];
      }
      destroy() {
        this.#messageAC?.abort();
        this.#messageAC = null;
      }
    };
    BaseCanvasFactory = class {
      #enableHWA = false;
      constructor({
        enableHWA = false
      }) {
        this.#enableHWA = enableHWA;
      }
      create(width, height) {
        if (width <= 0 || height <= 0) {
          throw new Error("Invalid canvas size");
        }
        const canvas = this._createCanvas(width, height);
        return {
          canvas,
          context: canvas.getContext("2d", {
            willReadFrequently: !this.#enableHWA
          })
        };
      }
      reset(canvasAndContext, width, height) {
        if (!canvasAndContext.canvas) {
          throw new Error("Canvas is not specified");
        }
        if (width <= 0 || height <= 0) {
          throw new Error("Invalid canvas size");
        }
        canvasAndContext.canvas.width = width;
        canvasAndContext.canvas.height = height;
      }
      destroy(canvasAndContext) {
        if (!canvasAndContext.canvas) {
          throw new Error("Canvas is not specified");
        }
        canvasAndContext.canvas.width = 0;
        canvasAndContext.canvas.height = 0;
        canvasAndContext.canvas = null;
        canvasAndContext.context = null;
      }
      _createCanvas(width, height) {
        unreachable("Abstract method `_createCanvas` called.");
      }
    };
    DOMCanvasFactory = class extends BaseCanvasFactory {
      constructor({
        ownerDocument = globalThis.document,
        enableHWA = false
      }) {
        super({
          enableHWA
        });
        this._document = ownerDocument;
      }
      _createCanvas(width, height) {
        const canvas = this._document.createElement("canvas");
        canvas.width = width;
        canvas.height = height;
        return canvas;
      }
    };
    BaseCMapReaderFactory = class {
      constructor({
        baseUrl = null,
        isCompressed = true
      }) {
        this.baseUrl = baseUrl;
        this.isCompressed = isCompressed;
      }
      async fetch({
        name
      }) {
        if (!this.baseUrl) {
          throw new Error("Ensure that the `cMapUrl` and `cMapPacked` API parameters are provided.");
        }
        if (!name) {
          throw new Error("CMap name must be specified.");
        }
        const url = this.baseUrl + name + (this.isCompressed ? ".bcmap" : "");
        return this._fetch(url).then((cMapData) => ({
          cMapData,
          isCompressed: this.isCompressed
        })).catch((reason) => {
          throw new Error(`Unable to load ${this.isCompressed ? "binary " : ""}CMap at: ${url}`);
        });
      }
      async _fetch(url) {
        unreachable("Abstract method `_fetch` called.");
      }
    };
    DOMCMapReaderFactory = class extends BaseCMapReaderFactory {
      async _fetch(url) {
        const data2 = await fetchData(url, this.isCompressed ? "arraybuffer" : "text");
        return data2 instanceof ArrayBuffer ? new Uint8Array(data2) : stringToBytes(data2);
      }
    };
    __webpack_require__(2489);
    BaseFilterFactory = class {
      addFilter(maps) {
        return "none";
      }
      addHCMFilter(fgColor, bgColor) {
        return "none";
      }
      addAlphaFilter(map2) {
        return "none";
      }
      addLuminosityFilter(map2) {
        return "none";
      }
      addHighlightHCMFilter(filterName, fgColor, bgColor, newFgColor, newBgColor) {
        return "none";
      }
      destroy(keepHCM = false) {
      }
    };
    DOMFilterFactory = class extends BaseFilterFactory {
      #baseUrl;
      #_cache;
      #_defs;
      #docId;
      #document;
      #_hcmCache;
      #id = 0;
      constructor({
        docId,
        ownerDocument = globalThis.document
      }) {
        super();
        this.#docId = docId;
        this.#document = ownerDocument;
      }
      get #cache() {
        return this.#_cache ||= /* @__PURE__ */ new Map();
      }
      get #hcmCache() {
        return this.#_hcmCache ||= /* @__PURE__ */ new Map();
      }
      get #defs() {
        if (!this.#_defs) {
          const div = this.#document.createElement("div");
          const {
            style
          } = div;
          style.visibility = "hidden";
          style.contain = "strict";
          style.width = style.height = 0;
          style.position = "absolute";
          style.top = style.left = 0;
          style.zIndex = -1;
          const svg = this.#document.createElementNS(SVG_NS, "svg");
          svg.setAttribute("width", 0);
          svg.setAttribute("height", 0);
          this.#_defs = this.#document.createElementNS(SVG_NS, "defs");
          div.append(svg);
          svg.append(this.#_defs);
          this.#document.body.append(div);
        }
        return this.#_defs;
      }
      #createTables(maps) {
        if (maps.length === 1) {
          const mapR2 = maps[0];
          const buffer = new Array(256);
          for (let i = 0; i < 256; i++) {
            buffer[i] = mapR2[i] / 255;
          }
          const table = buffer.join(",");
          return [table, table, table];
        }
        const [mapR, mapG, mapB] = maps;
        const bufferR = new Array(256);
        const bufferG = new Array(256);
        const bufferB = new Array(256);
        for (let i = 0; i < 256; i++) {
          bufferR[i] = mapR[i] / 255;
          bufferG[i] = mapG[i] / 255;
          bufferB[i] = mapB[i] / 255;
        }
        return [bufferR.join(","), bufferG.join(","), bufferB.join(",")];
      }
      #createUrl(id) {
        if (this.#baseUrl === void 0) {
          this.#baseUrl = "";
          const url = this.#document.URL;
          if (url !== this.#document.baseURI) {
            if (isDataScheme(url)) {
              warn('#createUrl: ignore "data:"-URL for performance reasons.');
            } else {
              this.#baseUrl = updateUrlHash(url, "");
            }
          }
        }
        return `url(${this.#baseUrl}#${id})`;
      }
      addFilter(maps) {
        if (!maps) {
          return "none";
        }
        let value = this.#cache.get(maps);
        if (value) {
          return value;
        }
        const [tableR, tableG, tableB] = this.#createTables(maps);
        const key = maps.length === 1 ? tableR : `${tableR}${tableG}${tableB}`;
        value = this.#cache.get(key);
        if (value) {
          this.#cache.set(maps, value);
          return value;
        }
        const id = `g_${this.#docId}_transfer_map_${this.#id++}`;
        const url = this.#createUrl(id);
        this.#cache.set(maps, url);
        this.#cache.set(key, url);
        const filter5 = this.#createFilter(id);
        this.#addTransferMapConversion(tableR, tableG, tableB, filter5);
        return url;
      }
      addHCMFilter(fgColor, bgColor) {
        const key = `${fgColor}-${bgColor}`;
        const filterName = "base";
        let info2 = this.#hcmCache.get(filterName);
        if (info2?.key === key) {
          return info2.url;
        }
        if (info2) {
          info2.filter?.remove();
          info2.key = key;
          info2.url = "none";
          info2.filter = null;
        } else {
          info2 = {
            key,
            url: "none",
            filter: null
          };
          this.#hcmCache.set(filterName, info2);
        }
        if (!fgColor || !bgColor) {
          return info2.url;
        }
        const fgRGB = this.#getRGB(fgColor);
        fgColor = Util.makeHexColor(...fgRGB);
        const bgRGB = this.#getRGB(bgColor);
        bgColor = Util.makeHexColor(...bgRGB);
        this.#defs.style.color = "";
        if (fgColor === "#000000" && bgColor === "#ffffff" || fgColor === bgColor) {
          return info2.url;
        }
        const map2 = new Array(256);
        for (let i = 0; i <= 255; i++) {
          const x2 = i / 255;
          map2[i] = x2 <= 0.03928 ? x2 / 12.92 : ((x2 + 0.055) / 1.055) ** 2.4;
        }
        const table = map2.join(",");
        const id = `g_${this.#docId}_hcm_filter`;
        const filter5 = info2.filter = this.#createFilter(id);
        this.#addTransferMapConversion(table, table, table, filter5);
        this.#addGrayConversion(filter5);
        const getSteps = (c, n) => {
          const start = fgRGB[c] / 255;
          const end2 = bgRGB[c] / 255;
          const arr = new Array(n + 1);
          for (let i = 0; i <= n; i++) {
            arr[i] = start + i / n * (end2 - start);
          }
          return arr.join(",");
        };
        this.#addTransferMapConversion(getSteps(0, 5), getSteps(1, 5), getSteps(2, 5), filter5);
        info2.url = this.#createUrl(id);
        return info2.url;
      }
      addAlphaFilter(map2) {
        let value = this.#cache.get(map2);
        if (value) {
          return value;
        }
        const [tableA] = this.#createTables([map2]);
        const key = `alpha_${tableA}`;
        value = this.#cache.get(key);
        if (value) {
          this.#cache.set(map2, value);
          return value;
        }
        const id = `g_${this.#docId}_alpha_map_${this.#id++}`;
        const url = this.#createUrl(id);
        this.#cache.set(map2, url);
        this.#cache.set(key, url);
        const filter5 = this.#createFilter(id);
        this.#addTransferMapAlphaConversion(tableA, filter5);
        return url;
      }
      addLuminosityFilter(map2) {
        let value = this.#cache.get(map2 || "luminosity");
        if (value) {
          return value;
        }
        let tableA, key;
        if (map2) {
          [tableA] = this.#createTables([map2]);
          key = `luminosity_${tableA}`;
        } else {
          key = "luminosity";
        }
        value = this.#cache.get(key);
        if (value) {
          this.#cache.set(map2, value);
          return value;
        }
        const id = `g_${this.#docId}_luminosity_map_${this.#id++}`;
        const url = this.#createUrl(id);
        this.#cache.set(map2, url);
        this.#cache.set(key, url);
        const filter5 = this.#createFilter(id);
        this.#addLuminosityConversion(filter5);
        if (map2) {
          this.#addTransferMapAlphaConversion(tableA, filter5);
        }
        return url;
      }
      addHighlightHCMFilter(filterName, fgColor, bgColor, newFgColor, newBgColor) {
        const key = `${fgColor}-${bgColor}-${newFgColor}-${newBgColor}`;
        let info2 = this.#hcmCache.get(filterName);
        if (info2?.key === key) {
          return info2.url;
        }
        if (info2) {
          info2.filter?.remove();
          info2.key = key;
          info2.url = "none";
          info2.filter = null;
        } else {
          info2 = {
            key,
            url: "none",
            filter: null
          };
          this.#hcmCache.set(filterName, info2);
        }
        if (!fgColor || !bgColor) {
          return info2.url;
        }
        const [fgRGB, bgRGB] = [fgColor, bgColor].map(this.#getRGB.bind(this));
        let fgGray = Math.round(0.2126 * fgRGB[0] + 0.7152 * fgRGB[1] + 0.0722 * fgRGB[2]);
        let bgGray = Math.round(0.2126 * bgRGB[0] + 0.7152 * bgRGB[1] + 0.0722 * bgRGB[2]);
        let [newFgRGB, newBgRGB] = [newFgColor, newBgColor].map(this.#getRGB.bind(this));
        if (bgGray < fgGray) {
          [fgGray, bgGray, newFgRGB, newBgRGB] = [bgGray, fgGray, newBgRGB, newFgRGB];
        }
        this.#defs.style.color = "";
        const getSteps = (fg, bg, n) => {
          const arr = new Array(256);
          const step = (bgGray - fgGray) / n;
          const newStart = fg / 255;
          const newStep = (bg - fg) / (255 * n);
          let prev2 = 0;
          for (let i = 0; i <= n; i++) {
            const k2 = Math.round(fgGray + i * step);
            const value = newStart + i * newStep;
            for (let j2 = prev2; j2 <= k2; j2++) {
              arr[j2] = value;
            }
            prev2 = k2 + 1;
          }
          for (let i = prev2; i < 256; i++) {
            arr[i] = arr[prev2 - 1];
          }
          return arr.join(",");
        };
        const id = `g_${this.#docId}_hcm_${filterName}_filter`;
        const filter5 = info2.filter = this.#createFilter(id);
        this.#addGrayConversion(filter5);
        this.#addTransferMapConversion(getSteps(newFgRGB[0], newBgRGB[0], 5), getSteps(newFgRGB[1], newBgRGB[1], 5), getSteps(newFgRGB[2], newBgRGB[2], 5), filter5);
        info2.url = this.#createUrl(id);
        return info2.url;
      }
      destroy(keepHCM = false) {
        if (keepHCM && this.#_hcmCache?.size) {
          return;
        }
        this.#_defs?.parentNode.parentNode.remove();
        this.#_defs = null;
        this.#_cache?.clear();
        this.#_cache = null;
        this.#_hcmCache?.clear();
        this.#_hcmCache = null;
        this.#id = 0;
      }
      #addLuminosityConversion(filter5) {
        const feColorMatrix = this.#document.createElementNS(SVG_NS, "feColorMatrix");
        feColorMatrix.setAttribute("type", "matrix");
        feColorMatrix.setAttribute("values", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0.59 0.11 0 0");
        filter5.append(feColorMatrix);
      }
      #addGrayConversion(filter5) {
        const feColorMatrix = this.#document.createElementNS(SVG_NS, "feColorMatrix");
        feColorMatrix.setAttribute("type", "matrix");
        feColorMatrix.setAttribute("values", "0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0");
        filter5.append(feColorMatrix);
      }
      #createFilter(id) {
        const filter5 = this.#document.createElementNS(SVG_NS, "filter");
        filter5.setAttribute("color-interpolation-filters", "sRGB");
        filter5.setAttribute("id", id);
        this.#defs.append(filter5);
        return filter5;
      }
      #appendFeFunc(feComponentTransfer, func, table) {
        const feFunc = this.#document.createElementNS(SVG_NS, func);
        feFunc.setAttribute("type", "discrete");
        feFunc.setAttribute("tableValues", table);
        feComponentTransfer.append(feFunc);
      }
      #addTransferMapConversion(rTable, gTable, bTable, filter5) {
        const feComponentTransfer = this.#document.createElementNS(SVG_NS, "feComponentTransfer");
        filter5.append(feComponentTransfer);
        this.#appendFeFunc(feComponentTransfer, "feFuncR", rTable);
        this.#appendFeFunc(feComponentTransfer, "feFuncG", gTable);
        this.#appendFeFunc(feComponentTransfer, "feFuncB", bTable);
      }
      #addTransferMapAlphaConversion(aTable, filter5) {
        const feComponentTransfer = this.#document.createElementNS(SVG_NS, "feComponentTransfer");
        filter5.append(feComponentTransfer);
        this.#appendFeFunc(feComponentTransfer, "feFuncA", aTable);
      }
      #getRGB(color) {
        this.#defs.style.color = color;
        return getRGB(getComputedStyle(this.#defs).getPropertyValue("color"));
      }
    };
    BaseStandardFontDataFactory = class {
      constructor({
        baseUrl = null
      }) {
        this.baseUrl = baseUrl;
      }
      async fetch({
        filename
      }) {
        if (!this.baseUrl) {
          throw new Error("Ensure that the `standardFontDataUrl` API parameter is provided.");
        }
        if (!filename) {
          throw new Error("Font filename must be specified.");
        }
        const url = `${this.baseUrl}${filename}`;
        return this._fetch(url).catch((reason) => {
          throw new Error(`Unable to load font data at: ${url}`);
        });
      }
      async _fetch(url) {
        unreachable("Abstract method `_fetch` called.");
      }
    };
    DOMStandardFontDataFactory = class extends BaseStandardFontDataFactory {
      async _fetch(url) {
        const data2 = await fetchData(url, "arraybuffer");
        return new Uint8Array(data2);
      }
    };
    BaseWasmFactory = class {
      constructor({
        baseUrl = null
      }) {
        this.baseUrl = baseUrl;
      }
      async fetch({
        filename
      }) {
        if (!this.baseUrl) {
          throw new Error("Ensure that the `wasmUrl` API parameter is provided.");
        }
        if (!filename) {
          throw new Error("Wasm filename must be specified.");
        }
        const url = `${this.baseUrl}${filename}`;
        return this._fetch(url).catch((reason) => {
          throw new Error(`Unable to load wasm data at: ${url}`);
        });
      }
      async _fetch(url) {
        unreachable("Abstract method `_fetch` called.");
      }
    };
    DOMWasmFactory = class extends BaseWasmFactory {
      async _fetch(url) {
        const data2 = await fetchData(url, "arraybuffer");
        return new Uint8Array(data2);
      }
    };
    if (isNodeJS) {
      let canvas;
      try {
        const require2 = process.getBuiltinModule("module").createRequire(import.meta.url);
        try {
          canvas = require2("@napi-rs/canvas");
        } catch (ex) {
          warn(`Cannot load "@napi-rs/canvas" package: "${ex}".`);
        }
      } catch (ex) {
        warn(`Cannot access the \`require\` function: "${ex}".`);
      }
      if (!globalThis.DOMMatrix) {
        if (canvas?.DOMMatrix) {
          globalThis.DOMMatrix = canvas.DOMMatrix;
        } else {
          warn("Cannot polyfill `DOMMatrix`, rendering may be broken.");
        }
      }
      if (!globalThis.ImageData) {
        if (canvas?.ImageData) {
          globalThis.ImageData = canvas.ImageData;
        } else {
          warn("Cannot polyfill `ImageData`, rendering may be broken.");
        }
      }
      if (!globalThis.Path2D) {
        if (canvas?.Path2D) {
          globalThis.Path2D = canvas.Path2D;
        } else {
          warn("Cannot polyfill `Path2D`, rendering may be broken.");
        }
      }
      if (!globalThis.navigator?.language) {
        globalThis.navigator = {
          language: "en-US",
          platform: "",
          userAgent: ""
        };
      }
    }
    NodeFilterFactory = class extends BaseFilterFactory {
    };
    NodeCanvasFactory = class extends BaseCanvasFactory {
      _createCanvas(width, height) {
        const require2 = process.getBuiltinModule("module").createRequire(import.meta.url);
        const canvas = require2("@napi-rs/canvas");
        return canvas.createCanvas(width, height);
      }
    };
    NodeCMapReaderFactory = class extends BaseCMapReaderFactory {
      async _fetch(url) {
        return node_utils_fetchData(url);
      }
    };
    NodeStandardFontDataFactory = class extends BaseStandardFontDataFactory {
      async _fetch(url) {
        return node_utils_fetchData(url);
      }
    };
    NodeWasmFactory = class extends BaseWasmFactory {
      async _fetch(url) {
        return node_utils_fetchData(url);
      }
    };
    __webpack_require__(7588);
    FORCED_DEPENDENCY_LABEL = "__forcedDependency";
    ({
      floor,
      ceil
    } = Math);
    EMPTY_BBOX = new Uint32Array(new Uint8Array([255, 255, 0, 0]).buffer)[0];
    BBoxReader = class {
      #bboxes;
      #coords;
      constructor(bboxes, coords) {
        this.#bboxes = bboxes;
        this.#coords = coords;
      }
      get length() {
        return this.#bboxes.length;
      }
      isEmpty(i) {
        return this.#bboxes[i] === EMPTY_BBOX;
      }
      minX(i) {
        return this.#coords[i * 4 + 0] / 256;
      }
      minY(i) {
        return this.#coords[i * 4 + 1] / 256;
      }
      maxX(i) {
        return (this.#coords[i * 4 + 2] + 1) / 256;
      }
      maxY(i) {
        return (this.#coords[i * 4 + 3] + 1) / 256;
      }
    };
    ensureDebugMetadata = (map2, key) => {
      if (!map2) {
        return void 0;
      }
      let value = map2.get(key);
      if (!value) {
        value = {
          dependencies: /* @__PURE__ */ new Set(),
          isRenderingOperation: false
        };
        map2.set(key, value);
      }
      return value;
    };
    CanvasDependencyTracker = class {
      #simple = {
        __proto__: null
      };
      #incremental = {
        __proto__: null,
        transform: [],
        moveText: [],
        sameLineText: [],
        [FORCED_DEPENDENCY_LABEL]: []
      };
      #namedDependencies = /* @__PURE__ */ new Map();
      #savesStack = [];
      #markedContentStack = [];
      #baseTransformStack = [[1, 0, 0, 1, 0, 0]];
      #clipBox = [-Infinity, -Infinity, Infinity, Infinity];
      #pendingBBox = new Float64Array([Infinity, Infinity, -Infinity, -Infinity]);
      #pendingBBoxIdx = -1;
      #pendingDependencies = /* @__PURE__ */ new Set();
      #operations = /* @__PURE__ */ new Map();
      #fontBBoxTrustworthy = /* @__PURE__ */ new Map();
      #canvasWidth;
      #canvasHeight;
      #bboxesCoords;
      #bboxes;
      #debugMetadata;
      constructor(canvas, operationsCount, recordDebugMetadata = false) {
        this.#canvasWidth = canvas.width;
        this.#canvasHeight = canvas.height;
        this.#initializeBBoxes(operationsCount);
        if (recordDebugMetadata) {
          this.#debugMetadata = /* @__PURE__ */ new Map();
        }
      }
      growOperationsCount(operationsCount) {
        if (operationsCount >= this.#bboxes.length) {
          this.#initializeBBoxes(operationsCount, this.#bboxes);
        }
      }
      #initializeBBoxes(operationsCount, oldBBoxes) {
        const buffer = new ArrayBuffer(operationsCount * 4);
        this.#bboxesCoords = new Uint8ClampedArray(buffer);
        this.#bboxes = new Uint32Array(buffer);
        if (oldBBoxes && oldBBoxes.length > 0) {
          this.#bboxes.set(oldBBoxes);
          this.#bboxes.fill(EMPTY_BBOX, oldBBoxes.length);
        } else {
          this.#bboxes.fill(EMPTY_BBOX);
        }
      }
      save(opIdx) {
        this.#simple = {
          __proto__: this.#simple
        };
        this.#incremental = {
          __proto__: this.#incremental,
          transform: {
            __proto__: this.#incremental.transform
          },
          moveText: {
            __proto__: this.#incremental.moveText
          },
          sameLineText: {
            __proto__: this.#incremental.sameLineText
          },
          [FORCED_DEPENDENCY_LABEL]: {
            __proto__: this.#incremental[FORCED_DEPENDENCY_LABEL]
          }
        };
        this.#clipBox = {
          __proto__: this.#clipBox
        };
        this.#savesStack.push(opIdx);
        return this;
      }
      restore(opIdx) {
        const previous = Object.getPrototypeOf(this.#simple);
        if (previous === null) {
          return this;
        }
        this.#simple = previous;
        this.#incremental = Object.getPrototypeOf(this.#incremental);
        this.#clipBox = Object.getPrototypeOf(this.#clipBox);
        const lastSave = this.#savesStack.pop();
        if (lastSave !== void 0) {
          ensureDebugMetadata(this.#debugMetadata, opIdx)?.dependencies.add(lastSave);
          this.#bboxes[opIdx] = this.#bboxes[lastSave];
        }
        return this;
      }
      recordOpenMarker(idx) {
        this.#savesStack.push(idx);
        return this;
      }
      getOpenMarker() {
        if (this.#savesStack.length === 0) {
          return null;
        }
        return this.#savesStack.at(-1);
      }
      recordCloseMarker(opIdx) {
        const lastSave = this.#savesStack.pop();
        if (lastSave !== void 0) {
          ensureDebugMetadata(this.#debugMetadata, opIdx)?.dependencies.add(lastSave);
          this.#bboxes[opIdx] = this.#bboxes[lastSave];
        }
        return this;
      }
      beginMarkedContent(opIdx) {
        this.#markedContentStack.push(opIdx);
        return this;
      }
      endMarkedContent(opIdx) {
        const lastSave = this.#markedContentStack.pop();
        if (lastSave !== void 0) {
          ensureDebugMetadata(this.#debugMetadata, opIdx)?.dependencies.add(lastSave);
          this.#bboxes[opIdx] = this.#bboxes[lastSave];
        }
        return this;
      }
      pushBaseTransform(ctx) {
        this.#baseTransformStack.push(Util.multiplyByDOMMatrix(this.#baseTransformStack.at(-1), ctx.getTransform()));
        return this;
      }
      popBaseTransform() {
        if (this.#baseTransformStack.length > 1) {
          this.#baseTransformStack.pop();
        }
        return this;
      }
      recordSimpleData(name, idx) {
        this.#simple[name] = idx;
        return this;
      }
      recordIncrementalData(name, idx) {
        this.#incremental[name].push(idx);
        return this;
      }
      resetIncrementalData(name, idx) {
        this.#incremental[name].length = 0;
        return this;
      }
      recordNamedData(name, idx) {
        this.#namedDependencies.set(name, idx);
        return this;
      }
      recordSimpleDataFromNamed(name, depName, fallbackIdx) {
        this.#simple[name] = this.#namedDependencies.get(depName) ?? fallbackIdx;
      }
      recordFutureForcedDependency(name, idx) {
        this.recordIncrementalData(FORCED_DEPENDENCY_LABEL, idx);
        return this;
      }
      inheritSimpleDataAsFutureForcedDependencies(names) {
        for (const name of names) {
          if (name in this.#simple) {
            this.recordFutureForcedDependency(name, this.#simple[name]);
          }
        }
        return this;
      }
      inheritPendingDependenciesAsFutureForcedDependencies() {
        for (const dep of this.#pendingDependencies) {
          this.recordFutureForcedDependency(FORCED_DEPENDENCY_LABEL, dep);
        }
        return this;
      }
      resetBBox(idx) {
        if (this.#pendingBBoxIdx !== idx) {
          this.#pendingBBoxIdx = idx;
          this.#pendingBBox[0] = Infinity;
          this.#pendingBBox[1] = Infinity;
          this.#pendingBBox[2] = -Infinity;
          this.#pendingBBox[3] = -Infinity;
        }
        return this;
      }
      recordClipBox(idx, ctx, minX, maxX, minY, maxY) {
        const transform = Util.multiplyByDOMMatrix(this.#baseTransformStack.at(-1), ctx.getTransform());
        const clipBox = [Infinity, Infinity, -Infinity, -Infinity];
        Util.axialAlignedBoundingBox([minX, minY, maxX, maxY], transform, clipBox);
        const intersection = Util.intersect(this.#clipBox, clipBox);
        if (intersection) {
          this.#clipBox[0] = intersection[0];
          this.#clipBox[1] = intersection[1];
          this.#clipBox[2] = intersection[2];
          this.#clipBox[3] = intersection[3];
        } else {
          this.#clipBox[0] = this.#clipBox[1] = Infinity;
          this.#clipBox[2] = this.#clipBox[3] = -Infinity;
        }
        return this;
      }
      recordBBox(idx, ctx, minX, maxX, minY, maxY) {
        const clipBox = this.#clipBox;
        if (clipBox[0] === Infinity) {
          return this;
        }
        const transform = Util.multiplyByDOMMatrix(this.#baseTransformStack.at(-1), ctx.getTransform());
        if (clipBox[0] === -Infinity) {
          Util.axialAlignedBoundingBox([minX, minY, maxX, maxY], transform, this.#pendingBBox);
          return this;
        }
        const bbox = [Infinity, Infinity, -Infinity, -Infinity];
        Util.axialAlignedBoundingBox([minX, minY, maxX, maxY], transform, bbox);
        this.#pendingBBox[0] = Math.min(this.#pendingBBox[0], Math.max(bbox[0], clipBox[0]));
        this.#pendingBBox[1] = Math.min(this.#pendingBBox[1], Math.max(bbox[1], clipBox[1]));
        this.#pendingBBox[2] = Math.max(this.#pendingBBox[2], Math.min(bbox[2], clipBox[2]));
        this.#pendingBBox[3] = Math.max(this.#pendingBBox[3], Math.min(bbox[3], clipBox[3]));
        return this;
      }
      recordCharacterBBox(idx, ctx, font, scale = 1, x2 = 0, y2 = 0, getMeasure) {
        const fontBBox = font.bbox;
        let isBBoxTrustworthy;
        let computedBBox;
        if (fontBBox) {
          isBBoxTrustworthy = fontBBox[2] !== fontBBox[0] && fontBBox[3] !== fontBBox[1] && this.#fontBBoxTrustworthy.get(font);
          if (isBBoxTrustworthy !== false) {
            computedBBox = [0, 0, 0, 0];
            Util.axialAlignedBoundingBox(fontBBox, font.fontMatrix, computedBBox);
            if (scale !== 1 || x2 !== 0 || y2 !== 0) {
              Util.scaleMinMax([scale, 0, 0, -scale, x2, y2], computedBBox);
            }
            if (isBBoxTrustworthy) {
              return this.recordBBox(idx, ctx, computedBBox[0], computedBBox[2], computedBBox[1], computedBBox[3]);
            }
          }
        }
        if (!getMeasure) {
          return this.recordFullPageBBox(idx);
        }
        const measure = getMeasure();
        if (fontBBox && computedBBox && isBBoxTrustworthy === void 0) {
          isBBoxTrustworthy = computedBBox[0] <= x2 - measure.actualBoundingBoxLeft && computedBBox[2] >= x2 + measure.actualBoundingBoxRight && computedBBox[1] <= y2 - measure.actualBoundingBoxAscent && computedBBox[3] >= y2 + measure.actualBoundingBoxDescent;
          this.#fontBBoxTrustworthy.set(font, isBBoxTrustworthy);
          if (isBBoxTrustworthy) {
            return this.recordBBox(idx, ctx, computedBBox[0], computedBBox[2], computedBBox[1], computedBBox[3]);
          }
        }
        return this.recordBBox(idx, ctx, x2 - measure.actualBoundingBoxLeft, x2 + measure.actualBoundingBoxRight, y2 - measure.actualBoundingBoxAscent, y2 + measure.actualBoundingBoxDescent);
      }
      recordFullPageBBox(idx) {
        this.#pendingBBox[0] = Math.max(0, this.#clipBox[0]);
        this.#pendingBBox[1] = Math.max(0, this.#clipBox[1]);
        this.#pendingBBox[2] = Math.min(this.#canvasWidth, this.#clipBox[2]);
        this.#pendingBBox[3] = Math.min(this.#canvasHeight, this.#clipBox[3]);
        return this;
      }
      getSimpleIndex(dependencyName) {
        return this.#simple[dependencyName];
      }
      recordDependencies(idx, dependencyNames) {
        const pendingDependencies = this.#pendingDependencies;
        const simple = this.#simple;
        const incremental = this.#incremental;
        for (const name of dependencyNames) {
          if (name in this.#simple) {
            pendingDependencies.add(simple[name]);
          } else if (name in incremental) {
            incremental[name].forEach(pendingDependencies.add, pendingDependencies);
          }
        }
        return this;
      }
      recordNamedDependency(idx, name) {
        if (this.#namedDependencies.has(name)) {
          this.#pendingDependencies.add(this.#namedDependencies.get(name));
        }
        return this;
      }
      recordOperation(idx, preserve = false) {
        this.recordDependencies(idx, [FORCED_DEPENDENCY_LABEL]);
        if (this.#debugMetadata) {
          const metadata = ensureDebugMetadata(this.#debugMetadata, idx);
          const {
            dependencies
          } = metadata;
          this.#pendingDependencies.forEach(dependencies.add, dependencies);
          this.#savesStack.forEach(dependencies.add, dependencies);
          this.#markedContentStack.forEach(dependencies.add, dependencies);
          dependencies.delete(idx);
          metadata.isRenderingOperation = true;
        }
        if (this.#pendingBBoxIdx === idx) {
          const minX = floor(this.#pendingBBox[0] * 256 / this.#canvasWidth);
          const minY = floor(this.#pendingBBox[1] * 256 / this.#canvasHeight);
          const maxX = ceil(this.#pendingBBox[2] * 256 / this.#canvasWidth);
          const maxY = ceil(this.#pendingBBox[3] * 256 / this.#canvasHeight);
          expandBBox(this.#bboxesCoords, idx, minX, minY, maxX, maxY);
          for (const depIdx of this.#pendingDependencies) {
            if (depIdx !== idx) {
              expandBBox(this.#bboxesCoords, depIdx, minX, minY, maxX, maxY);
            }
          }
          for (const saveIdx of this.#savesStack) {
            if (saveIdx !== idx) {
              expandBBox(this.#bboxesCoords, saveIdx, minX, minY, maxX, maxY);
            }
          }
          for (const saveIdx of this.#markedContentStack) {
            if (saveIdx !== idx) {
              expandBBox(this.#bboxesCoords, saveIdx, minX, minY, maxX, maxY);
            }
          }
          if (!preserve) {
            this.#pendingDependencies.clear();
            this.#pendingBBoxIdx = -1;
          }
        }
        return this;
      }
      recordShowTextOperation(idx, preserve = false) {
        const deps = Array.from(this.#pendingDependencies);
        this.recordOperation(idx, preserve);
        this.recordIncrementalData("sameLineText", idx);
        for (const dep of deps) {
          this.recordIncrementalData("sameLineText", dep);
        }
        return this;
      }
      bboxToClipBoxDropOperation(idx, preserve = false) {
        if (this.#pendingBBoxIdx === idx) {
          this.#pendingBBoxIdx = -1;
          this.#clipBox[0] = Math.max(this.#clipBox[0], this.#pendingBBox[0]);
          this.#clipBox[1] = Math.max(this.#clipBox[1], this.#pendingBBox[1]);
          this.#clipBox[2] = Math.min(this.#clipBox[2], this.#pendingBBox[2]);
          this.#clipBox[3] = Math.min(this.#clipBox[3], this.#pendingBBox[3]);
          if (!preserve) {
            this.#pendingDependencies.clear();
          }
        }
        return this;
      }
      _takePendingDependencies() {
        const pendingDependencies = this.#pendingDependencies;
        this.#pendingDependencies = /* @__PURE__ */ new Set();
        return pendingDependencies;
      }
      _extractOperation(idx) {
        const operation = this.#operations.get(idx);
        this.#operations.delete(idx);
        return operation;
      }
      _pushPendingDependencies(dependencies) {
        for (const dep of dependencies) {
          this.#pendingDependencies.add(dep);
        }
      }
      take() {
        this.#fontBBoxTrustworthy.clear();
        return new BBoxReader(this.#bboxes, this.#bboxesCoords);
      }
      takeDebugMetadata() {
        return this.#debugMetadata;
      }
    };
    CanvasNestedDependencyTracker = class _CanvasNestedDependencyTracker {
      #dependencyTracker;
      #opIdx;
      #ignoreBBoxes;
      #nestingLevel = 0;
      #savesLevel = 0;
      constructor(dependencyTracker, opIdx, ignoreBBoxes) {
        if (dependencyTracker instanceof _CanvasNestedDependencyTracker && dependencyTracker.#ignoreBBoxes === !!ignoreBBoxes) {
          return dependencyTracker;
        }
        this.#dependencyTracker = dependencyTracker;
        this.#opIdx = opIdx;
        this.#ignoreBBoxes = !!ignoreBBoxes;
      }
      growOperationsCount() {
        throw new Error("Unreachable");
      }
      save(opIdx) {
        this.#savesLevel++;
        this.#dependencyTracker.save(this.#opIdx);
        return this;
      }
      restore(opIdx) {
        if (this.#savesLevel > 0) {
          this.#dependencyTracker.restore(this.#opIdx);
          this.#savesLevel--;
        }
        return this;
      }
      recordOpenMarker(idx) {
        this.#nestingLevel++;
        return this;
      }
      getOpenMarker() {
        return this.#nestingLevel > 0 ? this.#opIdx : this.#dependencyTracker.getOpenMarker();
      }
      recordCloseMarker(idx) {
        this.#nestingLevel--;
        return this;
      }
      beginMarkedContent(opIdx) {
        return this;
      }
      endMarkedContent(opIdx) {
        return this;
      }
      pushBaseTransform(ctx) {
        this.#dependencyTracker.pushBaseTransform(ctx);
        return this;
      }
      popBaseTransform() {
        this.#dependencyTracker.popBaseTransform();
        return this;
      }
      recordSimpleData(name, idx) {
        this.#dependencyTracker.recordSimpleData(name, this.#opIdx);
        return this;
      }
      recordIncrementalData(name, idx) {
        this.#dependencyTracker.recordIncrementalData(name, this.#opIdx);
        return this;
      }
      resetIncrementalData(name, idx) {
        this.#dependencyTracker.resetIncrementalData(name, this.#opIdx);
        return this;
      }
      recordNamedData(name, idx) {
        return this;
      }
      recordSimpleDataFromNamed(name, depName, fallbackIdx) {
        this.#dependencyTracker.recordSimpleDataFromNamed(name, depName, this.#opIdx);
        return this;
      }
      recordFutureForcedDependency(name, idx) {
        this.#dependencyTracker.recordFutureForcedDependency(name, this.#opIdx);
        return this;
      }
      inheritSimpleDataAsFutureForcedDependencies(names) {
        this.#dependencyTracker.inheritSimpleDataAsFutureForcedDependencies(names);
        return this;
      }
      inheritPendingDependenciesAsFutureForcedDependencies() {
        this.#dependencyTracker.inheritPendingDependenciesAsFutureForcedDependencies();
        return this;
      }
      resetBBox(idx) {
        if (!this.#ignoreBBoxes) {
          this.#dependencyTracker.resetBBox(this.#opIdx);
        }
        return this;
      }
      recordClipBox(idx, ctx, minX, maxX, minY, maxY) {
        if (!this.#ignoreBBoxes) {
          this.#dependencyTracker.recordClipBox(this.#opIdx, ctx, minX, maxX, minY, maxY);
        }
        return this;
      }
      recordBBox(idx, ctx, minX, maxX, minY, maxY) {
        if (!this.#ignoreBBoxes) {
          this.#dependencyTracker.recordBBox(this.#opIdx, ctx, minX, maxX, minY, maxY);
        }
        return this;
      }
      recordCharacterBBox(idx, ctx, font, scale, x2, y2, getMeasure) {
        if (!this.#ignoreBBoxes) {
          this.#dependencyTracker.recordCharacterBBox(this.#opIdx, ctx, font, scale, x2, y2, getMeasure);
        }
        return this;
      }
      recordFullPageBBox(idx) {
        if (!this.#ignoreBBoxes) {
          this.#dependencyTracker.recordFullPageBBox(this.#opIdx);
        }
        return this;
      }
      getSimpleIndex(dependencyName) {
        return this.#dependencyTracker.getSimpleIndex(dependencyName);
      }
      recordDependencies(idx, dependencyNames) {
        this.#dependencyTracker.recordDependencies(this.#opIdx, dependencyNames);
        return this;
      }
      recordNamedDependency(idx, name) {
        this.#dependencyTracker.recordNamedDependency(this.#opIdx, name);
        return this;
      }
      recordOperation(idx) {
        this.#dependencyTracker.recordOperation(this.#opIdx, true);
        return this;
      }
      recordShowTextOperation(idx) {
        this.#dependencyTracker.recordShowTextOperation(this.#opIdx, true);
        return this;
      }
      bboxToClipBoxDropOperation(idx) {
        if (!this.#ignoreBBoxes) {
          this.#dependencyTracker.bboxToClipBoxDropOperation(this.#opIdx, true);
        }
        return this;
      }
      take() {
        throw new Error("Unreachable");
      }
      takeDebugMetadata() {
        throw new Error("Unreachable");
      }
    };
    Dependencies = {
      stroke: ["path", "transform", "filter", "strokeColor", "strokeAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "dash"],
      fill: ["path", "transform", "filter", "fillColor", "fillAlpha", "globalCompositeOperation", "SMask"],
      imageXObject: ["transform", "SMask", "filter", "fillAlpha", "strokeAlpha", "globalCompositeOperation"],
      rawFillPath: ["filter", "fillColor", "fillAlpha"],
      showText: ["transform", "leading", "charSpacing", "wordSpacing", "hScale", "textRise", "moveText", "textMatrix", "font", "fontObj", "filter", "fillColor", "textRenderingMode", "SMask", "fillAlpha", "strokeAlpha", "globalCompositeOperation", "sameLineText"],
      transform: ["transform"],
      transformAndFill: ["transform", "fillColor"]
    };
    PathType = {
      FILL: "Fill",
      STROKE: "Stroke",
      SHADING: "Shading"
    };
    BaseShadingPattern = class {
      isModifyingCurrentTransform() {
        return false;
      }
      getPattern() {
        unreachable("Abstract method `getPattern` called.");
      }
    };
    RadialAxialShadingPattern = class extends BaseShadingPattern {
      constructor(IR) {
        super();
        this._type = IR[1];
        this._bbox = IR[2];
        this._colorStops = IR[3];
        this._p0 = IR[4];
        this._p1 = IR[5];
        this._r0 = IR[6];
        this._r1 = IR[7];
        this.matrix = null;
      }
      _createGradient(ctx) {
        let grad;
        if (this._type === "axial") {
          grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);
        } else if (this._type === "radial") {
          grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);
        }
        for (const colorStop of this._colorStops) {
          grad.addColorStop(colorStop[0], colorStop[1]);
        }
        return grad;
      }
      getPattern(ctx, owner, inverse, pathType) {
        let pattern;
        if (pathType === PathType.STROKE || pathType === PathType.FILL) {
          const ownerBBox = owner.current.getClippedPathBoundingBox(pathType, getCurrentTransform(ctx)) || [0, 0, 0, 0];
          const width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;
          const height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;
          const tmpCanvas = owner.cachedCanvases.getCanvas("pattern", width, height);
          const tmpCtx = tmpCanvas.context;
          tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);
          tmpCtx.beginPath();
          tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);
          tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);
          inverse = Util.transform(inverse, [1, 0, 0, 1, ownerBBox[0], ownerBBox[1]]);
          tmpCtx.transform(...owner.baseTransform);
          if (this.matrix) {
            tmpCtx.transform(...this.matrix);
          }
          applyBoundingBox(tmpCtx, this._bbox);
          tmpCtx.fillStyle = this._createGradient(tmpCtx);
          tmpCtx.fill();
          pattern = ctx.createPattern(tmpCanvas.canvas, "no-repeat");
          const domMatrix = new DOMMatrix(inverse);
          pattern.setTransform(domMatrix);
        } else {
          applyBoundingBox(ctx, this._bbox);
          pattern = this._createGradient(ctx);
        }
        return pattern;
      }
    };
    MeshShadingPattern = class extends BaseShadingPattern {
      constructor(IR) {
        super();
        this._coords = IR[2];
        this._colors = IR[3];
        this._figures = IR[4];
        this._bounds = IR[5];
        this._bbox = IR[6];
        this._background = IR[7];
        this.matrix = null;
      }
      _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {
        const EXPECTED_SCALE = 1.1;
        const MAX_PATTERN_SIZE = 3e3;
        const BORDER_SIZE = 2;
        const offsetX = Math.floor(this._bounds[0]);
        const offsetY = Math.floor(this._bounds[1]);
        const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;
        const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;
        const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
        const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
        const scaleX = boundsWidth / width;
        const scaleY = boundsHeight / height;
        const context = {
          coords: this._coords,
          colors: this._colors,
          offsetX: -offsetX,
          offsetY: -offsetY,
          scaleX: 1 / scaleX,
          scaleY: 1 / scaleY
        };
        const paddedWidth = width + BORDER_SIZE * 2;
        const paddedHeight = height + BORDER_SIZE * 2;
        const tmpCanvas = cachedCanvases.getCanvas("mesh", paddedWidth, paddedHeight);
        const tmpCtx = tmpCanvas.context;
        const data2 = tmpCtx.createImageData(width, height);
        if (backgroundColor) {
          const bytes = data2.data;
          for (let i = 0, ii = bytes.length; i < ii; i += 4) {
            bytes[i] = backgroundColor[0];
            bytes[i + 1] = backgroundColor[1];
            bytes[i + 2] = backgroundColor[2];
            bytes[i + 3] = 255;
          }
        }
        for (const figure of this._figures) {
          drawFigure(data2, figure, context);
        }
        tmpCtx.putImageData(data2, BORDER_SIZE, BORDER_SIZE);
        const canvas = tmpCanvas.canvas;
        return {
          canvas,
          offsetX: offsetX - BORDER_SIZE * scaleX,
          offsetY: offsetY - BORDER_SIZE * scaleY,
          scaleX,
          scaleY
        };
      }
      isModifyingCurrentTransform() {
        return true;
      }
      getPattern(ctx, owner, inverse, pathType) {
        applyBoundingBox(ctx, this._bbox);
        const scale = new Float32Array(2);
        if (pathType === PathType.SHADING) {
          Util.singularValueDecompose2dScale(getCurrentTransform(ctx), scale);
        } else if (this.matrix) {
          Util.singularValueDecompose2dScale(this.matrix, scale);
          const [matrixScaleX, matrixScaleY] = scale;
          Util.singularValueDecompose2dScale(owner.baseTransform, scale);
          scale[0] *= matrixScaleX;
          scale[1] *= matrixScaleY;
        } else {
          Util.singularValueDecompose2dScale(owner.baseTransform, scale);
        }
        const temporaryPatternCanvas = this._createMeshCanvas(scale, pathType === PathType.SHADING ? null : this._background, owner.cachedCanvases);
        if (pathType !== PathType.SHADING) {
          ctx.setTransform(...owner.baseTransform);
          if (this.matrix) {
            ctx.transform(...this.matrix);
          }
        }
        ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
        ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);
        return ctx.createPattern(temporaryPatternCanvas.canvas, "no-repeat");
      }
    };
    DummyShadingPattern = class extends BaseShadingPattern {
      getPattern() {
        return "hotpink";
      }
    };
    PaintType = {
      COLORED: 1,
      UNCOLORED: 2
    };
    TilingPattern = class _TilingPattern {
      static MAX_PATTERN_SIZE = 3e3;
      constructor(IR, ctx, canvasGraphicsFactory, baseTransform) {
        this.color = IR[1];
        this.operatorList = IR[2];
        this.matrix = IR[3];
        this.bbox = IR[4];
        this.xstep = IR[5];
        this.ystep = IR[6];
        this.paintType = IR[7];
        this.tilingType = IR[8];
        this.ctx = ctx;
        this.canvasGraphicsFactory = canvasGraphicsFactory;
        this.baseTransform = baseTransform;
      }
      createPatternCanvas(owner, opIdx) {
        const {
          bbox,
          operatorList,
          paintType,
          tilingType,
          color,
          canvasGraphicsFactory
        } = this;
        let {
          xstep,
          ystep
        } = this;
        xstep = Math.abs(xstep);
        ystep = Math.abs(ystep);
        info("TilingType: " + tilingType);
        const x0 = bbox[0], y0 = bbox[1], x1 = bbox[2], y1 = bbox[3];
        const width = x1 - x0;
        const height = y1 - y0;
        const scale = new Float32Array(2);
        Util.singularValueDecompose2dScale(this.matrix, scale);
        const [matrixScaleX, matrixScaleY] = scale;
        Util.singularValueDecompose2dScale(this.baseTransform, scale);
        const combinedScaleX = matrixScaleX * scale[0];
        const combinedScaleY = matrixScaleY * scale[1];
        let canvasWidth = width, canvasHeight = height, redrawHorizontally = false, redrawVertically = false;
        const xScaledStep = Math.ceil(xstep * combinedScaleX);
        const yScaledStep = Math.ceil(ystep * combinedScaleY);
        const xScaledWidth = Math.ceil(width * combinedScaleX);
        const yScaledHeight = Math.ceil(height * combinedScaleY);
        if (xScaledStep >= xScaledWidth) {
          canvasWidth = xstep;
        } else {
          redrawHorizontally = true;
        }
        if (yScaledStep >= yScaledHeight) {
          canvasHeight = ystep;
        } else {
          redrawVertically = true;
        }
        const dimx = this.getSizeAndScale(canvasWidth, this.ctx.canvas.width, combinedScaleX);
        const dimy = this.getSizeAndScale(canvasHeight, this.ctx.canvas.height, combinedScaleY);
        const tmpCanvas = owner.cachedCanvases.getCanvas("pattern", dimx.size, dimy.size);
        const tmpCtx = tmpCanvas.context;
        const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx, opIdx);
        graphics.groupLevel = owner.groupLevel;
        this.setFillAndStrokeStyleToContext(graphics, paintType, color);
        tmpCtx.translate(-dimx.scale * x0, -dimy.scale * y0);
        graphics.transform(0, dimx.scale, 0, 0, dimy.scale, 0, 0);
        tmpCtx.save();
        graphics.dependencyTracker?.save();
        this.clipBbox(graphics, x0, y0, x1, y1);
        graphics.baseTransform = getCurrentTransform(graphics.ctx);
        graphics.executeOperatorList(operatorList);
        graphics.endDrawing();
        graphics.dependencyTracker?.restore();
        tmpCtx.restore();
        if (redrawHorizontally || redrawVertically) {
          const image = tmpCanvas.canvas;
          if (redrawHorizontally) {
            canvasWidth = xstep;
          }
          if (redrawVertically) {
            canvasHeight = ystep;
          }
          const dimx2 = this.getSizeAndScale(canvasWidth, this.ctx.canvas.width, combinedScaleX);
          const dimy2 = this.getSizeAndScale(canvasHeight, this.ctx.canvas.height, combinedScaleY);
          const xSize = dimx2.size;
          const ySize = dimy2.size;
          const tmpCanvas2 = owner.cachedCanvases.getCanvas("pattern-workaround", xSize, ySize);
          const tmpCtx2 = tmpCanvas2.context;
          const ii = redrawHorizontally ? Math.floor(width / xstep) : 0;
          const jj = redrawVertically ? Math.floor(height / ystep) : 0;
          for (let i = 0; i <= ii; i++) {
            for (let j2 = 0; j2 <= jj; j2++) {
              tmpCtx2.drawImage(image, xSize * i, ySize * j2, xSize, ySize, 0, 0, xSize, ySize);
            }
          }
          return {
            canvas: tmpCanvas2.canvas,
            scaleX: dimx2.scale,
            scaleY: dimy2.scale,
            offsetX: x0,
            offsetY: y0
          };
        }
        return {
          canvas: tmpCanvas.canvas,
          scaleX: dimx.scale,
          scaleY: dimy.scale,
          offsetX: x0,
          offsetY: y0
        };
      }
      getSizeAndScale(step, realOutputSize, scale) {
        const maxSize = Math.max(_TilingPattern.MAX_PATTERN_SIZE, realOutputSize);
        let size = Math.ceil(step * scale);
        if (size >= maxSize) {
          size = maxSize;
        } else {
          scale = size / step;
        }
        return {
          scale,
          size
        };
      }
      clipBbox(graphics, x0, y0, x1, y1) {
        const bboxWidth = x1 - x0;
        const bboxHeight = y1 - y0;
        graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);
        Util.axialAlignedBoundingBox([x0, y0, x1, y1], getCurrentTransform(graphics.ctx), graphics.current.minMax);
        graphics.clip();
        graphics.endPath();
      }
      setFillAndStrokeStyleToContext(graphics, paintType, color) {
        const context = graphics.ctx, current = graphics.current;
        switch (paintType) {
          case PaintType.COLORED:
            const {
              fillStyle,
              strokeStyle
            } = this.ctx;
            context.fillStyle = current.fillColor = fillStyle;
            context.strokeStyle = current.strokeColor = strokeStyle;
            break;
          case PaintType.UNCOLORED:
            context.fillStyle = context.strokeStyle = color;
            current.fillColor = current.strokeColor = color;
            break;
          default:
            throw new FormatError$1(`Unsupported paint type: ${paintType}`);
        }
      }
      isModifyingCurrentTransform() {
        return false;
      }
      getPattern(ctx, owner, inverse, pathType, opIdx) {
        let matrix = inverse;
        if (pathType !== PathType.SHADING) {
          matrix = Util.transform(matrix, owner.baseTransform);
          if (this.matrix) {
            matrix = Util.transform(matrix, this.matrix);
          }
        }
        const temporaryPatternCanvas = this.createPatternCanvas(owner, opIdx);
        let domMatrix = new DOMMatrix(matrix);
        domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
        domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);
        const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, "repeat");
        pattern.setTransform(domMatrix);
        return pattern;
      }
    };
    MIN_FONT_SIZE = 16;
    MAX_FONT_SIZE = 100;
    EXECUTION_TIME = 15;
    EXECUTION_STEPS = 10;
    FULL_CHUNK_HEIGHT = 16;
    SCALE_MATRIX = new DOMMatrix();
    XY = new Float32Array(2);
    MIN_MAX_INIT = new Float32Array([Infinity, Infinity, -Infinity, -Infinity]);
    CachedCanvases = class {
      constructor(canvasFactory) {
        this.canvasFactory = canvasFactory;
        this.cache = /* @__PURE__ */ Object.create(null);
      }
      getCanvas(id, width, height) {
        let canvasEntry;
        if (this.cache[id] !== void 0) {
          canvasEntry = this.cache[id];
          this.canvasFactory.reset(canvasEntry, width, height);
        } else {
          canvasEntry = this.canvasFactory.create(width, height);
          this.cache[id] = canvasEntry;
        }
        return canvasEntry;
      }
      delete(id) {
        delete this.cache[id];
      }
      clear() {
        for (const id in this.cache) {
          const canvasEntry = this.cache[id];
          this.canvasFactory.destroy(canvasEntry);
          delete this.cache[id];
        }
      }
    };
    CanvasExtraState = class {
      alphaIsShape = false;
      fontSize = 0;
      fontSizeScale = 1;
      textMatrix = null;
      textMatrixScale = 1;
      fontMatrix = FONT_IDENTITY_MATRIX;
      leading = 0;
      x = 0;
      y = 0;
      lineX = 0;
      lineY = 0;
      charSpacing = 0;
      wordSpacing = 0;
      textHScale = 1;
      textRenderingMode = TextRenderingMode.FILL;
      textRise = 0;
      fillColor = "#000000";
      strokeColor = "#000000";
      patternFill = false;
      patternStroke = false;
      fillAlpha = 1;
      strokeAlpha = 1;
      lineWidth = 1;
      activeSMask = null;
      transferMaps = "none";
      constructor(width, height, preInit) {
        preInit?.(this);
        this.clipBox = new Float32Array([0, 0, width, height]);
        this.minMax = MIN_MAX_INIT.slice();
      }
      clone() {
        const clone2 = Object.create(this);
        clone2.clipBox = this.clipBox.slice();
        clone2.minMax = this.minMax.slice();
        return clone2;
      }
      getPathBoundingBox(pathType = PathType.FILL, transform = null) {
        const box = this.minMax.slice();
        if (pathType === PathType.STROKE) {
          if (!transform) {
            unreachable("Stroke bounding box must include transform.");
          }
          Util.singularValueDecompose2dScale(transform, XY);
          const xStrokePad = XY[0] * this.lineWidth / 2;
          const yStrokePad = XY[1] * this.lineWidth / 2;
          box[0] -= xStrokePad;
          box[1] -= yStrokePad;
          box[2] += xStrokePad;
          box[3] += yStrokePad;
        }
        return box;
      }
      updateClipFromPath() {
        const intersect = Util.intersect(this.clipBox, this.getPathBoundingBox());
        this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);
      }
      isEmptyClip() {
        return this.minMax[0] === Infinity;
      }
      startNewPathAndClipBox(box) {
        this.clipBox.set(box, 0);
        this.minMax.set(MIN_MAX_INIT, 0);
      }
      getClippedPathBoundingBox(pathType = PathType.FILL, transform = null) {
        return Util.intersect(this.clipBox, this.getPathBoundingBox(pathType, transform));
      }
    };
    LINE_CAP_STYLES = ["butt", "round", "square"];
    LINE_JOIN_STYLES = ["miter", "round", "bevel"];
    NORMAL_CLIP = {};
    EO_CLIP = {};
    CanvasGraphics = class _CanvasGraphics {
      constructor(canvasCtx, commonObjs, objs, canvasFactory, filterFactory, {
        optionalContentConfig,
        markedContentStack = null
      }, annotationCanvasMap, pageColors, dependencyTracker) {
        this.ctx = canvasCtx;
        this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);
        this.stateStack = [];
        this.pendingClip = null;
        this.pendingEOFill = false;
        this.res = null;
        this.xobjs = null;
        this.commonObjs = commonObjs;
        this.objs = objs;
        this.canvasFactory = canvasFactory;
        this.filterFactory = filterFactory;
        this.groupStack = [];
        this.baseTransform = null;
        this.baseTransformStack = [];
        this.groupLevel = 0;
        this.smaskStack = [];
        this.smaskCounter = 0;
        this.tempSMask = null;
        this.suspendedCtx = null;
        this.contentVisible = true;
        this.markedContentStack = markedContentStack || [];
        this.optionalContentConfig = optionalContentConfig;
        this.cachedCanvases = new CachedCanvases(this.canvasFactory);
        this.cachedPatterns = /* @__PURE__ */ new Map();
        this.annotationCanvasMap = annotationCanvasMap;
        this.viewportScale = 1;
        this.outputScaleX = 1;
        this.outputScaleY = 1;
        this.pageColors = pageColors;
        this._cachedScaleForStroking = [-1, 0];
        this._cachedGetSinglePixelWidth = null;
        this._cachedBitmapsMap = /* @__PURE__ */ new Map();
        this.dependencyTracker = dependencyTracker ?? null;
      }
      getObject(opIdx, data2, fallback = null) {
        if (typeof data2 === "string") {
          this.dependencyTracker?.recordNamedDependency(opIdx, data2);
          return data2.startsWith("g_") ? this.commonObjs.get(data2) : this.objs.get(data2);
        }
        return fallback;
      }
      beginDrawing({
        transform,
        viewport,
        transparency = false,
        background = null
      }) {
        const width = this.ctx.canvas.width;
        const height = this.ctx.canvas.height;
        const savedFillStyle = this.ctx.fillStyle;
        this.ctx.fillStyle = background || "#ffffff";
        this.ctx.fillRect(0, 0, width, height);
        this.ctx.fillStyle = savedFillStyle;
        if (transparency) {
          const transparentCanvas = this.cachedCanvases.getCanvas("transparent", width, height);
          this.compositeCtx = this.ctx;
          this.transparentCanvas = transparentCanvas.canvas;
          this.ctx = transparentCanvas.context;
          this.ctx.save();
          this.ctx.transform(...getCurrentTransform(this.compositeCtx));
        }
        this.ctx.save();
        resetCtxToDefault(this.ctx);
        if (transform) {
          this.ctx.transform(...transform);
          this.outputScaleX = transform[0];
          this.outputScaleY = transform[0];
        }
        this.ctx.transform(...viewport.transform);
        this.viewportScale = viewport.scale;
        this.baseTransform = getCurrentTransform(this.ctx);
      }
      executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper, operationsFilter) {
        const argsArray = operatorList.argsArray;
        const fnArray = operatorList.fnArray;
        let i = executionStartIdx || 0;
        const argsArrayLen = argsArray.length;
        if (argsArrayLen === i) {
          return i;
        }
        const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === "function";
        const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;
        let steps = 0;
        const commonObjs = this.commonObjs;
        const objs = this.objs;
        let fnId, fnArgs;
        while (true) {
          if (stepper !== void 0 && i === stepper.nextBreakPoint) {
            stepper.breakIt(i, continueCallback);
            return i;
          }
          if (!operationsFilter || operationsFilter(i)) {
            fnId = fnArray[i];
            fnArgs = argsArray[i] ?? null;
            if (fnId !== OPS.dependency) {
              if (fnArgs === null) {
                this[fnId](i);
              } else {
                this[fnId](i, ...fnArgs);
              }
            } else {
              for (const depObjId of fnArgs) {
                this.dependencyTracker?.recordNamedData(depObjId, i);
                const objsPool = depObjId.startsWith("g_") ? commonObjs : objs;
                if (!objsPool.has(depObjId)) {
                  objsPool.get(depObjId, continueCallback);
                  return i;
                }
              }
            }
          }
          i++;
          if (i === argsArrayLen) {
            return i;
          }
          if (chunkOperations && ++steps > EXECUTION_STEPS) {
            if (Date.now() > endTime) {
              continueCallback();
              return i;
            }
            steps = 0;
          }
        }
      }
      #restoreInitialState() {
        while (this.stateStack.length || this.inSMaskMode) {
          this.restore();
        }
        this.current.activeSMask = null;
        this.ctx.restore();
        if (this.transparentCanvas) {
          this.ctx = this.compositeCtx;
          this.ctx.save();
          this.ctx.setTransform(1, 0, 0, 1, 0, 0);
          this.ctx.drawImage(this.transparentCanvas, 0, 0);
          this.ctx.restore();
          this.transparentCanvas = null;
        }
      }
      endDrawing() {
        this.#restoreInitialState();
        this.cachedCanvases.clear();
        this.cachedPatterns.clear();
        for (const cache of this._cachedBitmapsMap.values()) {
          for (const canvas of cache.values()) {
            if (typeof HTMLCanvasElement !== "undefined" && canvas instanceof HTMLCanvasElement) {
              canvas.width = canvas.height = 0;
            }
          }
          cache.clear();
        }
        this._cachedBitmapsMap.clear();
        this.#drawFilter();
      }
      #drawFilter() {
        if (this.pageColors) {
          const hcmFilterId = this.filterFactory.addHCMFilter(this.pageColors.foreground, this.pageColors.background);
          if (hcmFilterId !== "none") {
            const savedFilter = this.ctx.filter;
            this.ctx.filter = hcmFilterId;
            this.ctx.drawImage(this.ctx.canvas, 0, 0);
            this.ctx.filter = savedFilter;
          }
        }
      }
      _scaleImage(img, inverseTransform) {
        const width = img.width ?? img.displayWidth;
        const height = img.height ?? img.displayHeight;
        let widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);
        let heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);
        let paintWidth = width, paintHeight = height;
        let tmpCanvasId = "prescale1";
        let tmpCanvas, tmpCtx;
        while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {
          let newWidth = paintWidth, newHeight = paintHeight;
          if (widthScale > 2 && paintWidth > 1) {
            newWidth = paintWidth >= 16384 ? Math.floor(paintWidth / 2) - 1 || 1 : Math.ceil(paintWidth / 2);
            widthScale /= paintWidth / newWidth;
          }
          if (heightScale > 2 && paintHeight > 1) {
            newHeight = paintHeight >= 16384 ? Math.floor(paintHeight / 2) - 1 || 1 : Math.ceil(paintHeight) / 2;
            heightScale /= paintHeight / newHeight;
          }
          tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);
          tmpCtx = tmpCanvas.context;
          tmpCtx.clearRect(0, 0, newWidth, newHeight);
          tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);
          img = tmpCanvas.canvas;
          paintWidth = newWidth;
          paintHeight = newHeight;
          tmpCanvasId = tmpCanvasId === "prescale1" ? "prescale2" : "prescale1";
        }
        return {
          img,
          paintWidth,
          paintHeight
        };
      }
      _createMaskCanvas(opIdx, img) {
        const ctx = this.ctx;
        const {
          width,
          height
        } = img;
        const fillColor = this.current.fillColor;
        const isPatternFill = this.current.patternFill;
        const currentTransform = getCurrentTransform(ctx);
        let cache, cacheKey, scaled, maskCanvas;
        if ((img.bitmap || img.data) && img.count > 1) {
          const mainKey = img.bitmap || img.data.buffer;
          cacheKey = JSON.stringify(isPatternFill ? currentTransform : [currentTransform.slice(0, 4), fillColor]);
          cache = this._cachedBitmapsMap.get(mainKey);
          if (!cache) {
            cache = /* @__PURE__ */ new Map();
            this._cachedBitmapsMap.set(mainKey, cache);
          }
          const cachedImage = cache.get(cacheKey);
          if (cachedImage && !isPatternFill) {
            const offsetX2 = Math.round(Math.min(currentTransform[0], currentTransform[2]) + currentTransform[4]);
            const offsetY2 = Math.round(Math.min(currentTransform[1], currentTransform[3]) + currentTransform[5]);
            this.dependencyTracker?.recordDependencies(opIdx, Dependencies.transformAndFill);
            return {
              canvas: cachedImage,
              offsetX: offsetX2,
              offsetY: offsetY2
            };
          }
          scaled = cachedImage;
        }
        if (!scaled) {
          maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
          putBinaryImageMask(maskCanvas.context, img);
        }
        let maskToCanvas = Util.transform(currentTransform, [1 / width, 0, 0, -1 / height, 0, 0]);
        maskToCanvas = Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);
        const minMax = MIN_MAX_INIT.slice();
        Util.axialAlignedBoundingBox([0, 0, width, height], maskToCanvas, minMax);
        const [minX, minY, maxX, maxY] = minMax;
        const drawnWidth = Math.round(maxX - minX) || 1;
        const drawnHeight = Math.round(maxY - minY) || 1;
        const fillCanvas = this.cachedCanvases.getCanvas("fillCanvas", drawnWidth, drawnHeight);
        const fillCtx = fillCanvas.context;
        const offsetX = minX;
        const offsetY = minY;
        fillCtx.translate(-offsetX, -offsetY);
        fillCtx.transform(...maskToCanvas);
        if (!scaled) {
          scaled = this._scaleImage(maskCanvas.canvas, getCurrentTransformInverse(fillCtx));
          scaled = scaled.img;
          if (cache && isPatternFill) {
            cache.set(cacheKey, scaled);
          }
        }
        fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(getCurrentTransform(fillCtx), img.interpolate);
        drawImageAtIntegerCoords(fillCtx, scaled, 0, 0, scaled.width, scaled.height, 0, 0, width, height);
        fillCtx.globalCompositeOperation = "source-in";
        const inverse = Util.transform(getCurrentTransformInverse(fillCtx), [1, 0, 0, 1, -offsetX, -offsetY]);
        fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, PathType.FILL, opIdx) : fillColor;
        fillCtx.fillRect(0, 0, width, height);
        if (cache && !isPatternFill) {
          this.cachedCanvases.delete("fillCanvas");
          cache.set(cacheKey, fillCanvas.canvas);
        }
        this.dependencyTracker?.recordDependencies(opIdx, Dependencies.transformAndFill);
        return {
          canvas: fillCanvas.canvas,
          offsetX: Math.round(offsetX),
          offsetY: Math.round(offsetY)
        };
      }
      setLineWidth(opIdx, width) {
        this.dependencyTracker?.recordSimpleData("lineWidth", opIdx);
        if (width !== this.current.lineWidth) {
          this._cachedScaleForStroking[0] = -1;
        }
        this.current.lineWidth = width;
        this.ctx.lineWidth = width;
      }
      setLineCap(opIdx, style) {
        this.dependencyTracker?.recordSimpleData("lineCap", opIdx);
        this.ctx.lineCap = LINE_CAP_STYLES[style];
      }
      setLineJoin(opIdx, style) {
        this.dependencyTracker?.recordSimpleData("lineJoin", opIdx);
        this.ctx.lineJoin = LINE_JOIN_STYLES[style];
      }
      setMiterLimit(opIdx, limit) {
        this.dependencyTracker?.recordSimpleData("miterLimit", opIdx);
        this.ctx.miterLimit = limit;
      }
      setDash(opIdx, dashArray, dashPhase) {
        this.dependencyTracker?.recordSimpleData("dash", opIdx);
        const ctx = this.ctx;
        if (ctx.setLineDash !== void 0) {
          ctx.setLineDash(dashArray);
          ctx.lineDashOffset = dashPhase;
        }
      }
      setRenderingIntent(opIdx, intent) {
      }
      setFlatness(opIdx, flatness) {
      }
      setGState(opIdx, states) {
        for (const [key, value] of states) {
          switch (key) {
            case "LW":
              this.setLineWidth(opIdx, value);
              break;
            case "LC":
              this.setLineCap(opIdx, value);
              break;
            case "LJ":
              this.setLineJoin(opIdx, value);
              break;
            case "ML":
              this.setMiterLimit(opIdx, value);
              break;
            case "D":
              this.setDash(opIdx, value[0], value[1]);
              break;
            case "RI":
              this.setRenderingIntent(opIdx, value);
              break;
            case "FL":
              this.setFlatness(opIdx, value);
              break;
            case "Font":
              this.setFont(opIdx, value[0], value[1]);
              break;
            case "CA":
              this.dependencyTracker?.recordSimpleData("strokeAlpha", opIdx);
              this.current.strokeAlpha = value;
              break;
            case "ca":
              this.dependencyTracker?.recordSimpleData("fillAlpha", opIdx);
              this.ctx.globalAlpha = this.current.fillAlpha = value;
              break;
            case "BM":
              this.dependencyTracker?.recordSimpleData("globalCompositeOperation", opIdx);
              this.ctx.globalCompositeOperation = value;
              break;
            case "SMask":
              this.dependencyTracker?.recordSimpleData("SMask", opIdx);
              this.current.activeSMask = value ? this.tempSMask : null;
              this.tempSMask = null;
              this.checkSMaskState();
              break;
            case "TR":
              this.dependencyTracker?.recordSimpleData("filter", opIdx);
              this.ctx.filter = this.current.transferMaps = this.filterFactory.addFilter(value);
              break;
          }
        }
      }
      get inSMaskMode() {
        return !!this.suspendedCtx;
      }
      checkSMaskState() {
        const inSMaskMode = this.inSMaskMode;
        if (this.current.activeSMask && !inSMaskMode) {
          this.beginSMaskMode();
        } else if (!this.current.activeSMask && inSMaskMode) {
          this.endSMaskMode();
        }
      }
      beginSMaskMode(opIdx) {
        if (this.inSMaskMode) {
          throw new Error("beginSMaskMode called while already in smask mode");
        }
        const drawnWidth = this.ctx.canvas.width;
        const drawnHeight = this.ctx.canvas.height;
        const cacheId = "smaskGroupAt" + this.groupLevel;
        const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);
        this.suspendedCtx = this.ctx;
        const ctx = this.ctx = scratchCanvas.context;
        ctx.setTransform(this.suspendedCtx.getTransform());
        copyCtxState(this.suspendedCtx, ctx);
        mirrorContextOperations(ctx, this.suspendedCtx);
        this.setGState(opIdx, [["BM", "source-over"]]);
      }
      endSMaskMode() {
        if (!this.inSMaskMode) {
          throw new Error("endSMaskMode called while not in smask mode");
        }
        this.ctx._removeMirroring();
        copyCtxState(this.ctx, this.suspendedCtx);
        this.ctx = this.suspendedCtx;
        this.suspendedCtx = null;
      }
      compose(dirtyBox) {
        if (!this.current.activeSMask) {
          return;
        }
        if (!dirtyBox) {
          dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];
        } else {
          dirtyBox[0] = Math.floor(dirtyBox[0]);
          dirtyBox[1] = Math.floor(dirtyBox[1]);
          dirtyBox[2] = Math.ceil(dirtyBox[2]);
          dirtyBox[3] = Math.ceil(dirtyBox[3]);
        }
        const smask = this.current.activeSMask;
        const suspendedCtx = this.suspendedCtx;
        this.composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);
        this.ctx.save();
        this.ctx.setTransform(1, 0, 0, 1, 0, 0);
        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
        this.ctx.restore();
      }
      composeSMask(ctx, smask, layerCtx, layerBox) {
        const layerOffsetX = layerBox[0];
        const layerOffsetY = layerBox[1];
        const layerWidth = layerBox[2] - layerOffsetX;
        const layerHeight = layerBox[3] - layerOffsetY;
        if (layerWidth === 0 || layerHeight === 0) {
          return;
        }
        this.genericComposeSMask(smask.context, layerCtx, layerWidth, layerHeight, smask.subtype, smask.backdrop, smask.transferMap, layerOffsetX, layerOffsetY, smask.offsetX, smask.offsetY);
        ctx.save();
        ctx.globalAlpha = 1;
        ctx.globalCompositeOperation = "source-over";
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.drawImage(layerCtx.canvas, 0, 0);
        ctx.restore();
      }
      genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap, layerOffsetX, layerOffsetY, maskOffsetX, maskOffsetY) {
        let maskCanvas = maskCtx.canvas;
        let maskX = layerOffsetX - maskOffsetX;
        let maskY = layerOffsetY - maskOffsetY;
        if (backdrop) {
          if (maskX < 0 || maskY < 0 || maskX + width > maskCanvas.width || maskY + height > maskCanvas.height) {
            const canvas = this.cachedCanvases.getCanvas("maskExtension", width, height);
            const ctx = canvas.context;
            ctx.drawImage(maskCanvas, -maskX, -maskY);
            ctx.globalCompositeOperation = "destination-atop";
            ctx.fillStyle = backdrop;
            ctx.fillRect(0, 0, width, height);
            ctx.globalCompositeOperation = "source-over";
            maskCanvas = canvas.canvas;
            maskX = maskY = 0;
          } else {
            maskCtx.save();
            maskCtx.globalAlpha = 1;
            maskCtx.setTransform(1, 0, 0, 1, 0, 0);
            const clip2 = new Path2D();
            clip2.rect(maskX, maskY, width, height);
            maskCtx.clip(clip2);
            maskCtx.globalCompositeOperation = "destination-atop";
            maskCtx.fillStyle = backdrop;
            maskCtx.fillRect(maskX, maskY, width, height);
            maskCtx.restore();
          }
        }
        layerCtx.save();
        layerCtx.globalAlpha = 1;
        layerCtx.setTransform(1, 0, 0, 1, 0, 0);
        if (subtype === "Alpha" && transferMap) {
          layerCtx.filter = this.filterFactory.addAlphaFilter(transferMap);
        } else if (subtype === "Luminosity") {
          layerCtx.filter = this.filterFactory.addLuminosityFilter(transferMap);
        }
        const clip = new Path2D();
        clip.rect(layerOffsetX, layerOffsetY, width, height);
        layerCtx.clip(clip);
        layerCtx.globalCompositeOperation = "destination-in";
        layerCtx.drawImage(maskCanvas, maskX, maskY, width, height, layerOffsetX, layerOffsetY, width, height);
        layerCtx.restore();
      }
      save(opIdx) {
        if (this.inSMaskMode) {
          copyCtxState(this.ctx, this.suspendedCtx);
        }
        this.ctx.save();
        const old = this.current;
        this.stateStack.push(old);
        this.current = old.clone();
        this.dependencyTracker?.save(opIdx);
      }
      restore(opIdx) {
        this.dependencyTracker?.restore(opIdx);
        if (this.stateStack.length === 0) {
          if (this.inSMaskMode) {
            this.endSMaskMode();
          }
          return;
        }
        this.current = this.stateStack.pop();
        this.ctx.restore();
        if (this.inSMaskMode) {
          copyCtxState(this.suspendedCtx, this.ctx);
        }
        this.checkSMaskState();
        this.pendingClip = null;
        this._cachedScaleForStroking[0] = -1;
        this._cachedGetSinglePixelWidth = null;
      }
      transform(opIdx, a, b2, c, d, e, f) {
        this.dependencyTracker?.recordIncrementalData("transform", opIdx);
        this.ctx.transform(a, b2, c, d, e, f);
        this._cachedScaleForStroking[0] = -1;
        this._cachedGetSinglePixelWidth = null;
      }
      constructPath(opIdx, op, data2, minMax) {
        let [path] = data2;
        if (!minMax) {
          path ||= data2[0] = new Path2D();
          this[op](opIdx, path);
          return;
        }
        if (this.dependencyTracker !== null) {
          const outerExtraSize = op === OPS.stroke ? this.current.lineWidth / 2 : 0;
          this.dependencyTracker.resetBBox(opIdx).recordBBox(opIdx, this.ctx, minMax[0] - outerExtraSize, minMax[2] + outerExtraSize, minMax[1] - outerExtraSize, minMax[3] + outerExtraSize).recordDependencies(opIdx, ["transform"]);
        }
        if (!(path instanceof Path2D)) {
          const path2d = data2[0] = new Path2D();
          for (let i = 0, ii = path.length; i < ii; ) {
            switch (path[i++]) {
              case DrawOPS.moveTo:
                path2d.moveTo(path[i++], path[i++]);
                break;
              case DrawOPS.lineTo:
                path2d.lineTo(path[i++], path[i++]);
                break;
              case DrawOPS.curveTo:
                path2d.bezierCurveTo(path[i++], path[i++], path[i++], path[i++], path[i++], path[i++]);
                break;
              case DrawOPS.closePath:
                path2d.closePath();
                break;
              default:
                warn(`Unrecognized drawing path operator: ${path[i - 1]}`);
                break;
            }
          }
          path = path2d;
        }
        Util.axialAlignedBoundingBox(minMax, getCurrentTransform(this.ctx), this.current.minMax);
        this[op](opIdx, path);
        this._pathStartIdx = opIdx;
      }
      closePath(opIdx) {
        this.ctx.closePath();
      }
      stroke(opIdx, path, consumePath = true) {
        const ctx = this.ctx;
        const strokeColor = this.current.strokeColor;
        ctx.globalAlpha = this.current.strokeAlpha;
        if (this.contentVisible) {
          if (typeof strokeColor === "object" && strokeColor?.getPattern) {
            const baseTransform = strokeColor.isModifyingCurrentTransform() ? ctx.getTransform() : null;
            ctx.save();
            ctx.strokeStyle = strokeColor.getPattern(ctx, this, getCurrentTransformInverse(ctx), PathType.STROKE, opIdx);
            if (baseTransform) {
              const newPath = new Path2D();
              newPath.addPath(path, ctx.getTransform().invertSelf().multiplySelf(baseTransform));
              path = newPath;
            }
            this.rescaleAndStroke(path, false);
            ctx.restore();
          } else {
            this.rescaleAndStroke(path, true);
          }
        }
        this.dependencyTracker?.recordDependencies(opIdx, Dependencies.stroke);
        if (consumePath) {
          this.consumePath(opIdx, path, this.current.getClippedPathBoundingBox(PathType.STROKE, getCurrentTransform(this.ctx)));
        }
        ctx.globalAlpha = this.current.fillAlpha;
      }
      closeStroke(opIdx, path) {
        this.stroke(opIdx, path);
      }
      fill(opIdx, path, consumePath = true) {
        const ctx = this.ctx;
        const fillColor = this.current.fillColor;
        const isPatternFill = this.current.patternFill;
        let needRestore = false;
        if (isPatternFill) {
          const baseTransform = fillColor.isModifyingCurrentTransform() ? ctx.getTransform() : null;
          this.dependencyTracker?.save(opIdx);
          ctx.save();
          ctx.fillStyle = fillColor.getPattern(ctx, this, getCurrentTransformInverse(ctx), PathType.FILL, opIdx);
          if (baseTransform) {
            const newPath = new Path2D();
            newPath.addPath(path, ctx.getTransform().invertSelf().multiplySelf(baseTransform));
            path = newPath;
          }
          needRestore = true;
        }
        const intersect = this.current.getClippedPathBoundingBox();
        if (this.contentVisible && intersect !== null) {
          if (this.pendingEOFill) {
            ctx.fill(path, "evenodd");
            this.pendingEOFill = false;
          } else {
            ctx.fill(path);
          }
        }
        this.dependencyTracker?.recordDependencies(opIdx, Dependencies.fill);
        if (needRestore) {
          ctx.restore();
          this.dependencyTracker?.restore(opIdx);
        }
        if (consumePath) {
          this.consumePath(opIdx, path, intersect);
        }
      }
      eoFill(opIdx, path) {
        this.pendingEOFill = true;
        this.fill(opIdx, path);
      }
      fillStroke(opIdx, path) {
        this.fill(opIdx, path, false);
        this.stroke(opIdx, path, false);
        this.consumePath(opIdx, path);
      }
      eoFillStroke(opIdx, path) {
        this.pendingEOFill = true;
        this.fillStroke(opIdx, path);
      }
      closeFillStroke(opIdx, path) {
        this.fillStroke(opIdx, path);
      }
      closeEOFillStroke(opIdx, path) {
        this.pendingEOFill = true;
        this.fillStroke(opIdx, path);
      }
      endPath(opIdx, path) {
        this.consumePath(opIdx, path);
      }
      rawFillPath(opIdx, path) {
        this.ctx.fill(path);
        this.dependencyTracker?.recordDependencies(opIdx, Dependencies.rawFillPath).recordOperation(opIdx);
      }
      clip(opIdx) {
        this.dependencyTracker?.recordFutureForcedDependency("clipMode", opIdx);
        this.pendingClip = NORMAL_CLIP;
      }
      eoClip(opIdx) {
        this.dependencyTracker?.recordFutureForcedDependency("clipMode", opIdx);
        this.pendingClip = EO_CLIP;
      }
      beginText(opIdx) {
        this.current.textMatrix = null;
        this.current.textMatrixScale = 1;
        this.current.x = this.current.lineX = 0;
        this.current.y = this.current.lineY = 0;
        this.dependencyTracker?.recordOpenMarker(opIdx).resetIncrementalData("sameLineText").resetIncrementalData("moveText", opIdx);
      }
      endText(opIdx) {
        const paths = this.pendingTextPaths;
        const ctx = this.ctx;
        if (this.dependencyTracker) {
          const {
            dependencyTracker
          } = this;
          if (paths !== void 0) {
            dependencyTracker.recordFutureForcedDependency("textClip", dependencyTracker.getOpenMarker()).recordFutureForcedDependency("textClip", opIdx);
          }
          dependencyTracker.recordCloseMarker(opIdx);
        }
        if (paths !== void 0) {
          const newPath = new Path2D();
          const invTransf = ctx.getTransform().invertSelf();
          for (const {
            transform,
            x: x2,
            y: y2,
            fontSize,
            path
          } of paths) {
            if (!path) {
              continue;
            }
            newPath.addPath(path, new DOMMatrix(transform).preMultiplySelf(invTransf).translate(x2, y2).scale(fontSize, -fontSize));
          }
          ctx.clip(newPath);
        }
        delete this.pendingTextPaths;
      }
      setCharSpacing(opIdx, spacing) {
        this.dependencyTracker?.recordSimpleData("charSpacing", opIdx);
        this.current.charSpacing = spacing;
      }
      setWordSpacing(opIdx, spacing) {
        this.dependencyTracker?.recordSimpleData("wordSpacing", opIdx);
        this.current.wordSpacing = spacing;
      }
      setHScale(opIdx, scale) {
        this.dependencyTracker?.recordSimpleData("hScale", opIdx);
        this.current.textHScale = scale / 100;
      }
      setLeading(opIdx, leading) {
        this.dependencyTracker?.recordSimpleData("leading", opIdx);
        this.current.leading = -leading;
      }
      setFont(opIdx, fontRefName, size) {
        this.dependencyTracker?.recordSimpleData("font", opIdx).recordSimpleDataFromNamed("fontObj", fontRefName, opIdx);
        const fontObj = this.commonObjs.get(fontRefName);
        const current = this.current;
        if (!fontObj) {
          throw new Error(`Can't find font for ${fontRefName}`);
        }
        current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;
        if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {
          warn("Invalid font matrix for font " + fontRefName);
        }
        if (size < 0) {
          size = -size;
          current.fontDirection = -1;
        } else {
          current.fontDirection = 1;
        }
        this.current.font = fontObj;
        this.current.fontSize = size;
        if (fontObj.isType3Font) {
          return;
        }
        const name = fontObj.loadedName || "sans-serif";
        const typeface = fontObj.systemFontInfo?.css || `"${name}", ${fontObj.fallbackName}`;
        let bold = "normal";
        if (fontObj.black) {
          bold = "900";
        } else if (fontObj.bold) {
          bold = "bold";
        }
        const italic = fontObj.italic ? "italic" : "normal";
        let browserFontSize = size;
        if (size < MIN_FONT_SIZE) {
          browserFontSize = MIN_FONT_SIZE;
        } else if (size > MAX_FONT_SIZE) {
          browserFontSize = MAX_FONT_SIZE;
        }
        this.current.fontSizeScale = size / browserFontSize;
        this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;
      }
      setTextRenderingMode(opIdx, mode) {
        this.dependencyTracker?.recordSimpleData("textRenderingMode", opIdx);
        this.current.textRenderingMode = mode;
      }
      setTextRise(opIdx, rise) {
        this.dependencyTracker?.recordSimpleData("textRise", opIdx);
        this.current.textRise = rise;
      }
      moveText(opIdx, x2, y2) {
        this.dependencyTracker?.resetIncrementalData("sameLineText").recordIncrementalData("moveText", opIdx);
        this.current.x = this.current.lineX += x2;
        this.current.y = this.current.lineY += y2;
      }
      setLeadingMoveText(opIdx, x2, y2) {
        this.setLeading(opIdx, -y2);
        this.moveText(opIdx, x2, y2);
      }
      setTextMatrix(opIdx, matrix) {
        this.dependencyTracker?.recordSimpleData("textMatrix", opIdx);
        const {
          current
        } = this;
        current.textMatrix = matrix;
        current.textMatrixScale = Math.hypot(matrix[0], matrix[1]);
        current.x = current.lineX = 0;
        current.y = current.lineY = 0;
      }
      nextLine(opIdx) {
        this.moveText(opIdx, 0, this.current.leading);
        this.dependencyTracker?.recordIncrementalData("moveText", this.dependencyTracker.getSimpleIndex("leading") ?? opIdx);
      }
      #getScaledPath(path, currentTransform, transform) {
        const newPath = new Path2D();
        newPath.addPath(path, new DOMMatrix(transform).invertSelf().multiplySelf(currentTransform));
        return newPath;
      }
      paintChar(opIdx, character, x2, y2, patternFillTransform, patternStrokeTransform) {
        const ctx = this.ctx;
        const current = this.current;
        const font = current.font;
        const textRenderingMode = current.textRenderingMode;
        const fontSize = current.fontSize / current.fontSizeScale;
        const fillStrokeMode = textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;
        const isAddToPathSet = !!(textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG);
        const patternFill = current.patternFill && !font.missingFile;
        const patternStroke = current.patternStroke && !font.missingFile;
        let path;
        if ((font.disableFontFace || isAddToPathSet || patternFill || patternStroke) && !font.missingFile) {
          path = font.getPathGenerator(this.commonObjs, character);
        }
        if (path && (font.disableFontFace || patternFill || patternStroke)) {
          ctx.save();
          ctx.translate(x2, y2);
          ctx.scale(fontSize, -fontSize);
          this.dependencyTracker?.recordCharacterBBox(opIdx, ctx, font);
          let currentTransform;
          if (fillStrokeMode === TextRenderingMode.FILL || fillStrokeMode === TextRenderingMode.FILL_STROKE) {
            if (patternFillTransform) {
              currentTransform = ctx.getTransform();
              ctx.setTransform(...patternFillTransform);
              const scaledPath = this.#getScaledPath(path, currentTransform, patternFillTransform);
              ctx.fill(scaledPath);
            } else {
              ctx.fill(path);
            }
          }
          if (fillStrokeMode === TextRenderingMode.STROKE || fillStrokeMode === TextRenderingMode.FILL_STROKE) {
            if (patternStrokeTransform) {
              currentTransform ||= ctx.getTransform();
              ctx.setTransform(...patternStrokeTransform);
              const {
                a,
                b: b2,
                c,
                d
              } = currentTransform;
              const invPatternTransform = Util.inverseTransform(patternStrokeTransform);
              const transf = Util.transform([a, b2, c, d, 0, 0], invPatternTransform);
              Util.singularValueDecompose2dScale(transf, XY);
              ctx.lineWidth *= Math.max(XY[0], XY[1]) / fontSize;
              ctx.stroke(this.#getScaledPath(path, currentTransform, patternStrokeTransform));
            } else {
              ctx.lineWidth /= fontSize;
              ctx.stroke(path);
            }
          }
          ctx.restore();
        } else {
          if (fillStrokeMode === TextRenderingMode.FILL || fillStrokeMode === TextRenderingMode.FILL_STROKE) {
            ctx.fillText(character, x2, y2);
            this.dependencyTracker?.recordCharacterBBox(opIdx, ctx, font, fontSize, x2, y2, () => ctx.measureText(character));
          }
          if (fillStrokeMode === TextRenderingMode.STROKE || fillStrokeMode === TextRenderingMode.FILL_STROKE) {
            if (this.dependencyTracker) {
              this.dependencyTracker?.recordCharacterBBox(opIdx, ctx, font, fontSize, x2, y2, () => ctx.measureText(character)).recordDependencies(opIdx, Dependencies.stroke);
            }
            ctx.strokeText(character, x2, y2);
          }
        }
        if (isAddToPathSet) {
          const paths = this.pendingTextPaths ||= [];
          paths.push({
            transform: getCurrentTransform(ctx),
            x: x2,
            y: y2,
            fontSize,
            path
          });
          this.dependencyTracker?.recordCharacterBBox(opIdx, ctx, font, fontSize, x2, y2);
        }
      }
      get isFontSubpixelAAEnabled() {
        const {
          context: ctx
        } = this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled", 10, 10);
        ctx.scale(1.5, 1);
        ctx.fillText("I", 0, 10);
        const data2 = ctx.getImageData(0, 0, 10, 10).data;
        let enabled = false;
        for (let i = 3; i < data2.length; i += 4) {
          if (data2[i] > 0 && data2[i] < 255) {
            enabled = true;
            break;
          }
        }
        return shadow(this, "isFontSubpixelAAEnabled", enabled);
      }
      showText(opIdx, glyphs) {
        if (this.dependencyTracker) {
          this.dependencyTracker.recordDependencies(opIdx, Dependencies.showText).resetBBox(opIdx);
          if (this.current.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG) {
            this.dependencyTracker.recordFutureForcedDependency("textClip", opIdx).inheritPendingDependenciesAsFutureForcedDependencies();
          }
        }
        const current = this.current;
        const font = current.font;
        if (font.isType3Font) {
          this.showType3Text(opIdx, glyphs);
          this.dependencyTracker?.recordShowTextOperation(opIdx);
          return void 0;
        }
        const fontSize = current.fontSize;
        if (fontSize === 0) {
          this.dependencyTracker?.recordOperation(opIdx);
          return void 0;
        }
        const ctx = this.ctx;
        const fontSizeScale = current.fontSizeScale;
        const charSpacing = current.charSpacing;
        const wordSpacing = current.wordSpacing;
        const fontDirection = current.fontDirection;
        const textHScale = current.textHScale * fontDirection;
        const glyphsLength = glyphs.length;
        const vertical = font.vertical;
        const spacingDir = vertical ? 1 : -1;
        const defaultVMetrics = font.defaultVMetrics;
        const widthAdvanceScale = fontSize * current.fontMatrix[0];
        const simpleFillText = current.textRenderingMode === TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;
        ctx.save();
        if (current.textMatrix) {
          ctx.transform(...current.textMatrix);
        }
        ctx.translate(current.x, current.y + current.textRise);
        if (fontDirection > 0) {
          ctx.scale(textHScale, -1);
        } else {
          ctx.scale(textHScale, 1);
        }
        let patternFillTransform, patternStrokeTransform;
        if (current.patternFill) {
          ctx.save();
          const pattern = current.fillColor.getPattern(ctx, this, getCurrentTransformInverse(ctx), PathType.FILL, opIdx);
          patternFillTransform = getCurrentTransform(ctx);
          ctx.restore();
          ctx.fillStyle = pattern;
        }
        if (current.patternStroke) {
          ctx.save();
          const pattern = current.strokeColor.getPattern(ctx, this, getCurrentTransformInverse(ctx), PathType.STROKE, opIdx);
          patternStrokeTransform = getCurrentTransform(ctx);
          ctx.restore();
          ctx.strokeStyle = pattern;
        }
        let lineWidth = current.lineWidth;
        const scale = current.textMatrixScale;
        if (scale === 0 || lineWidth === 0) {
          const fillStrokeMode = current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;
          if (fillStrokeMode === TextRenderingMode.STROKE || fillStrokeMode === TextRenderingMode.FILL_STROKE) {
            lineWidth = this.getSinglePixelWidth();
          }
        } else {
          lineWidth /= scale;
        }
        if (fontSizeScale !== 1) {
          ctx.scale(fontSizeScale, fontSizeScale);
          lineWidth /= fontSizeScale;
        }
        ctx.lineWidth = lineWidth;
        if (font.isInvalidPDFjsFont) {
          const chars = [];
          let width = 0;
          for (const glyph of glyphs) {
            chars.push(glyph.unicode);
            width += glyph.width;
          }
          const joinedChars = chars.join("");
          ctx.fillText(joinedChars, 0, 0);
          if (this.dependencyTracker !== null) {
            const measure = ctx.measureText(joinedChars);
            this.dependencyTracker.recordBBox(opIdx, this.ctx, -measure.actualBoundingBoxLeft, measure.actualBoundingBoxRight, -measure.actualBoundingBoxAscent, measure.actualBoundingBoxDescent).recordShowTextOperation(opIdx);
          }
          current.x += width * widthAdvanceScale * textHScale;
          ctx.restore();
          this.compose();
          return void 0;
        }
        let x2 = 0, i;
        for (i = 0; i < glyphsLength; ++i) {
          const glyph = glyphs[i];
          if (typeof glyph === "number") {
            x2 += spacingDir * glyph * fontSize / 1e3;
            continue;
          }
          let restoreNeeded = false;
          const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
          const character = glyph.fontChar;
          const accent = glyph.accent;
          let scaledX, scaledY;
          let width = glyph.width;
          if (vertical) {
            const vmetric = glyph.vmetric || defaultVMetrics;
            const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;
            const vy = vmetric[2] * widthAdvanceScale;
            width = vmetric ? -vmetric[0] : width;
            scaledX = vx / fontSizeScale;
            scaledY = (x2 + vy) / fontSizeScale;
          } else {
            scaledX = x2 / fontSizeScale;
            scaledY = 0;
          }
          let measure;
          if (font.remeasure && width > 0) {
            measure = ctx.measureText(character);
            const measuredWidth = measure.width * 1e3 / fontSize * fontSizeScale;
            if (width < measuredWidth && this.isFontSubpixelAAEnabled) {
              const characterScaleX = width / measuredWidth;
              restoreNeeded = true;
              ctx.save();
              ctx.scale(characterScaleX, 1);
              scaledX /= characterScaleX;
            } else if (width !== measuredWidth) {
              scaledX += (width - measuredWidth) / 2e3 * fontSize / fontSizeScale;
            }
          }
          if (this.contentVisible && (glyph.isInFont || font.missingFile)) {
            if (simpleFillText && !accent) {
              ctx.fillText(character, scaledX, scaledY);
              this.dependencyTracker?.recordCharacterBBox(opIdx, ctx, measure ? {
                bbox: null
              } : font, fontSize / fontSizeScale, scaledX, scaledY, () => measure ?? ctx.measureText(character));
            } else {
              this.paintChar(opIdx, character, scaledX, scaledY, patternFillTransform, patternStrokeTransform);
              if (accent) {
                const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;
                const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;
                this.paintChar(opIdx, accent.fontChar, scaledAccentX, scaledAccentY, patternFillTransform, patternStrokeTransform);
              }
            }
          }
          const charWidth = vertical ? width * widthAdvanceScale - spacing * fontDirection : width * widthAdvanceScale + spacing * fontDirection;
          x2 += charWidth;
          if (restoreNeeded) {
            ctx.restore();
          }
        }
        if (vertical) {
          current.y -= x2;
        } else {
          current.x += x2 * textHScale;
        }
        ctx.restore();
        this.compose();
        this.dependencyTracker?.recordShowTextOperation(opIdx);
        return void 0;
      }
      showType3Text(opIdx, glyphs) {
        const ctx = this.ctx;
        const current = this.current;
        const font = current.font;
        const fontSize = current.fontSize;
        const fontDirection = current.fontDirection;
        const spacingDir = font.vertical ? 1 : -1;
        const charSpacing = current.charSpacing;
        const wordSpacing = current.wordSpacing;
        const textHScale = current.textHScale * fontDirection;
        const fontMatrix = current.fontMatrix || FONT_IDENTITY_MATRIX;
        const glyphsLength = glyphs.length;
        const isTextInvisible = current.textRenderingMode === TextRenderingMode.INVISIBLE;
        let i, glyph, width, spacingLength;
        if (isTextInvisible || fontSize === 0) {
          return;
        }
        this._cachedScaleForStroking[0] = -1;
        this._cachedGetSinglePixelWidth = null;
        ctx.save();
        if (current.textMatrix) {
          ctx.transform(...current.textMatrix);
        }
        ctx.translate(current.x, current.y + current.textRise);
        ctx.scale(textHScale, fontDirection);
        const dependencyTracker = this.dependencyTracker;
        this.dependencyTracker = dependencyTracker ? new CanvasNestedDependencyTracker(dependencyTracker, opIdx) : null;
        for (i = 0; i < glyphsLength; ++i) {
          glyph = glyphs[i];
          if (typeof glyph === "number") {
            spacingLength = spacingDir * glyph * fontSize / 1e3;
            this.ctx.translate(spacingLength, 0);
            current.x += spacingLength * textHScale;
            continue;
          }
          const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
          const operatorList = font.charProcOperatorList[glyph.operatorListId];
          if (!operatorList) {
            warn(`Type3 character "${glyph.operatorListId}" is not available.`);
          } else if (this.contentVisible) {
            this.save();
            ctx.scale(fontSize, fontSize);
            ctx.transform(...fontMatrix);
            this.executeOperatorList(operatorList);
            this.restore();
          }
          const p = [glyph.width, 0];
          Util.applyTransform(p, fontMatrix);
          width = p[0] * fontSize + spacing;
          ctx.translate(width, 0);
          current.x += width * textHScale;
        }
        ctx.restore();
        if (dependencyTracker) {
          this.dependencyTracker = dependencyTracker;
        }
      }
      setCharWidth(opIdx, xWidth, yWidth) {
      }
      setCharWidthAndBounds(opIdx, xWidth, yWidth, llx, lly, urx, ury) {
        const clip = new Path2D();
        clip.rect(llx, lly, urx - llx, ury - lly);
        this.ctx.clip(clip);
        this.dependencyTracker?.recordBBox(opIdx, this.ctx, llx, urx, lly, ury).recordClipBox(opIdx, this.ctx, llx, urx, lly, ury);
        this.endPath(opIdx);
      }
      getColorN_Pattern(opIdx, IR) {
        let pattern;
        if (IR[0] === "TilingPattern") {
          const baseTransform = this.baseTransform || getCurrentTransform(this.ctx);
          const canvasGraphicsFactory = {
            createCanvasGraphics: (ctx, renderingOpIdx) => new _CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {
              optionalContentConfig: this.optionalContentConfig,
              markedContentStack: this.markedContentStack
            }, void 0, void 0, this.dependencyTracker ? new CanvasNestedDependencyTracker(this.dependencyTracker, renderingOpIdx, true) : null)
          };
          pattern = new TilingPattern(IR, this.ctx, canvasGraphicsFactory, baseTransform);
        } else {
          pattern = this._getPattern(opIdx, IR[1], IR[2]);
        }
        return pattern;
      }
      setStrokeColorN(opIdx, ...args) {
        this.dependencyTracker?.recordSimpleData("strokeColor", opIdx);
        this.current.strokeColor = this.getColorN_Pattern(opIdx, args);
        this.current.patternStroke = true;
      }
      setFillColorN(opIdx, ...args) {
        this.dependencyTracker?.recordSimpleData("fillColor", opIdx);
        this.current.fillColor = this.getColorN_Pattern(opIdx, args);
        this.current.patternFill = true;
      }
      setStrokeRGBColor(opIdx, color) {
        this.dependencyTracker?.recordSimpleData("strokeColor", opIdx);
        this.ctx.strokeStyle = this.current.strokeColor = color;
        this.current.patternStroke = false;
      }
      setStrokeTransparent(opIdx) {
        this.dependencyTracker?.recordSimpleData("strokeColor", opIdx);
        this.ctx.strokeStyle = this.current.strokeColor = "transparent";
        this.current.patternStroke = false;
      }
      setFillRGBColor(opIdx, color) {
        this.dependencyTracker?.recordSimpleData("fillColor", opIdx);
        this.ctx.fillStyle = this.current.fillColor = color;
        this.current.patternFill = false;
      }
      setFillTransparent(opIdx) {
        this.dependencyTracker?.recordSimpleData("fillColor", opIdx);
        this.ctx.fillStyle = this.current.fillColor = "transparent";
        this.current.patternFill = false;
      }
      _getPattern(opIdx, objId, matrix = null) {
        let pattern;
        if (this.cachedPatterns.has(objId)) {
          pattern = this.cachedPatterns.get(objId);
        } else {
          pattern = getShadingPattern(this.getObject(opIdx, objId));
          this.cachedPatterns.set(objId, pattern);
        }
        if (matrix) {
          pattern.matrix = matrix;
        }
        return pattern;
      }
      shadingFill(opIdx, objId) {
        if (!this.contentVisible) {
          return;
        }
        const ctx = this.ctx;
        this.save(opIdx);
        const pattern = this._getPattern(opIdx, objId);
        ctx.fillStyle = pattern.getPattern(ctx, this, getCurrentTransformInverse(ctx), PathType.SHADING, opIdx);
        const inv = getCurrentTransformInverse(ctx);
        if (inv) {
          const {
            width,
            height
          } = ctx.canvas;
          const minMax = MIN_MAX_INIT.slice();
          Util.axialAlignedBoundingBox([0, 0, width, height], inv, minMax);
          const [x0, y0, x1, y1] = minMax;
          this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);
        } else {
          this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
        }
        this.dependencyTracker?.resetBBox(opIdx).recordFullPageBBox(opIdx).recordDependencies(opIdx, Dependencies.transform).recordDependencies(opIdx, Dependencies.fill).recordOperation(opIdx);
        this.compose(this.current.getClippedPathBoundingBox());
        this.restore(opIdx);
      }
      beginInlineImage() {
        unreachable("Should not call beginInlineImage");
      }
      beginImageData() {
        unreachable("Should not call beginImageData");
      }
      paintFormXObjectBegin(opIdx, matrix, bbox) {
        if (!this.contentVisible) {
          return;
        }
        this.save(opIdx);
        this.baseTransformStack.push(this.baseTransform);
        if (matrix) {
          this.transform(opIdx, ...matrix);
        }
        this.baseTransform = getCurrentTransform(this.ctx);
        if (bbox) {
          Util.axialAlignedBoundingBox(bbox, this.baseTransform, this.current.minMax);
          const [x0, y0, x1, y1] = bbox;
          const clip = new Path2D();
          clip.rect(x0, y0, x1 - x0, y1 - y0);
          this.ctx.clip(clip);
          this.dependencyTracker?.recordClipBox(opIdx, this.ctx, x0, x1, y0, y1);
          this.endPath(opIdx);
        }
      }
      paintFormXObjectEnd(opIdx) {
        if (!this.contentVisible) {
          return;
        }
        this.restore(opIdx);
        this.baseTransform = this.baseTransformStack.pop();
      }
      beginGroup(opIdx, group) {
        if (!this.contentVisible) {
          return;
        }
        this.save(opIdx);
        if (this.inSMaskMode) {
          this.endSMaskMode();
          this.current.activeSMask = null;
        }
        const currentCtx = this.ctx;
        if (!group.isolated) {
          info("TODO: Support non-isolated groups.");
        }
        if (group.knockout) {
          warn("Knockout groups not supported.");
        }
        const currentTransform = getCurrentTransform(currentCtx);
        if (group.matrix) {
          currentCtx.transform(...group.matrix);
        }
        if (!group.bbox) {
          throw new Error("Bounding box is required.");
        }
        let bounds = MIN_MAX_INIT.slice();
        Util.axialAlignedBoundingBox(group.bbox, getCurrentTransform(currentCtx), bounds);
        const canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];
        bounds = Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];
        const offsetX = Math.floor(bounds[0]);
        const offsetY = Math.floor(bounds[1]);
        const drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);
        const drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);
        this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);
        let cacheId = "groupAt" + this.groupLevel;
        if (group.smask) {
          cacheId += "_smask_" + this.smaskCounter++ % 2;
        }
        const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);
        const groupCtx = scratchCanvas.context;
        groupCtx.translate(-offsetX, -offsetY);
        groupCtx.transform(...currentTransform);
        let clip = new Path2D();
        const [x0, y0, x1, y1] = group.bbox;
        clip.rect(x0, y0, x1 - x0, y1 - y0);
        if (group.matrix) {
          const path = new Path2D();
          path.addPath(clip, new DOMMatrix(group.matrix));
          clip = path;
        }
        groupCtx.clip(clip);
        if (group.smask) {
          this.smaskStack.push({
            canvas: scratchCanvas.canvas,
            context: groupCtx,
            offsetX,
            offsetY,
            subtype: group.smask.subtype,
            backdrop: group.smask.backdrop,
            transferMap: group.smask.transferMap || null,
            startTransformInverse: null
          });
        }
        if (!group.smask || this.dependencyTracker) {
          currentCtx.setTransform(1, 0, 0, 1, 0, 0);
          currentCtx.translate(offsetX, offsetY);
          currentCtx.save();
        }
        copyCtxState(currentCtx, groupCtx);
        this.ctx = groupCtx;
        this.dependencyTracker?.inheritSimpleDataAsFutureForcedDependencies(["fillAlpha", "strokeAlpha", "globalCompositeOperation"]).pushBaseTransform(currentCtx);
        this.setGState(opIdx, [["BM", "source-over"], ["ca", 1], ["CA", 1]]);
        this.groupStack.push(currentCtx);
        this.groupLevel++;
      }
      endGroup(opIdx, group) {
        if (!this.contentVisible) {
          return;
        }
        this.groupLevel--;
        const groupCtx = this.ctx;
        const ctx = this.groupStack.pop();
        this.ctx = ctx;
        this.ctx.imageSmoothingEnabled = false;
        this.dependencyTracker?.popBaseTransform();
        if (group.smask) {
          this.tempSMask = this.smaskStack.pop();
          this.restore(opIdx);
          if (this.dependencyTracker) {
            this.ctx.restore();
          }
        } else {
          this.ctx.restore();
          const currentMtx = getCurrentTransform(this.ctx);
          this.restore(opIdx);
          this.ctx.save();
          this.ctx.setTransform(...currentMtx);
          const dirtyBox = MIN_MAX_INIT.slice();
          Util.axialAlignedBoundingBox([0, 0, groupCtx.canvas.width, groupCtx.canvas.height], currentMtx, dirtyBox);
          this.ctx.drawImage(groupCtx.canvas, 0, 0);
          this.ctx.restore();
          this.compose(dirtyBox);
        }
      }
      beginAnnotation(opIdx, id, rect, transform, matrix, hasOwnCanvas) {
        this.#restoreInitialState();
        resetCtxToDefault(this.ctx);
        this.ctx.save();
        this.save(opIdx);
        if (this.baseTransform) {
          this.ctx.setTransform(...this.baseTransform);
        }
        if (rect) {
          const width = rect[2] - rect[0];
          const height = rect[3] - rect[1];
          if (hasOwnCanvas && this.annotationCanvasMap) {
            transform = transform.slice();
            transform[4] -= rect[0];
            transform[5] -= rect[1];
            rect = rect.slice();
            rect[0] = rect[1] = 0;
            rect[2] = width;
            rect[3] = height;
            Util.singularValueDecompose2dScale(getCurrentTransform(this.ctx), XY);
            const {
              viewportScale
            } = this;
            const canvasWidth = Math.ceil(width * this.outputScaleX * viewportScale);
            const canvasHeight = Math.ceil(height * this.outputScaleY * viewportScale);
            this.annotationCanvas = this.canvasFactory.create(canvasWidth, canvasHeight);
            const {
              canvas,
              context
            } = this.annotationCanvas;
            this.annotationCanvasMap.set(id, canvas);
            this.annotationCanvas.savedCtx = this.ctx;
            this.ctx = context;
            this.ctx.save();
            this.ctx.setTransform(XY[0], 0, 0, -XY[1], 0, height * XY[1]);
            resetCtxToDefault(this.ctx);
          } else {
            resetCtxToDefault(this.ctx);
            this.endPath(opIdx);
            const clip = new Path2D();
            clip.rect(rect[0], rect[1], width, height);
            this.ctx.clip(clip);
          }
        }
        this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);
        this.transform(opIdx, ...transform);
        this.transform(opIdx, ...matrix);
      }
      endAnnotation(opIdx) {
        if (this.annotationCanvas) {
          this.ctx.restore();
          this.#drawFilter();
          this.ctx = this.annotationCanvas.savedCtx;
          delete this.annotationCanvas.savedCtx;
          delete this.annotationCanvas;
        }
      }
      paintImageMaskXObject(opIdx, img) {
        if (!this.contentVisible) {
          return;
        }
        const count = img.count;
        img = this.getObject(opIdx, img.data, img);
        img.count = count;
        const ctx = this.ctx;
        const mask = this._createMaskCanvas(opIdx, img);
        const maskCanvas = mask.canvas;
        ctx.save();
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);
        this.dependencyTracker?.resetBBox(opIdx).recordBBox(opIdx, this.ctx, mask.offsetX, mask.offsetX + maskCanvas.width, mask.offsetY, mask.offsetY + maskCanvas.height).recordOperation(opIdx);
        ctx.restore();
        this.compose();
      }
      paintImageMaskXObjectRepeat(opIdx, img, scaleX, skewX = 0, skewY = 0, scaleY, positions) {
        if (!this.contentVisible) {
          return;
        }
        img = this.getObject(opIdx, img.data, img);
        const ctx = this.ctx;
        ctx.save();
        const currentTransform = getCurrentTransform(ctx);
        ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);
        const mask = this._createMaskCanvas(opIdx, img);
        ctx.setTransform(1, 0, 0, 1, mask.offsetX - currentTransform[4], mask.offsetY - currentTransform[5]);
        this.dependencyTracker?.resetBBox(opIdx);
        for (let i = 0, ii = positions.length; i < ii; i += 2) {
          const trans = Util.transform(currentTransform, [scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]]);
          ctx.drawImage(mask.canvas, trans[4], trans[5]);
          this.dependencyTracker?.recordBBox(opIdx, this.ctx, trans[4], trans[4] + mask.canvas.width, trans[5], trans[5] + mask.canvas.height);
        }
        ctx.restore();
        this.compose();
        this.dependencyTracker?.recordOperation(opIdx);
      }
      paintImageMaskXObjectGroup(opIdx, images) {
        if (!this.contentVisible) {
          return;
        }
        const ctx = this.ctx;
        const fillColor = this.current.fillColor;
        const isPatternFill = this.current.patternFill;
        this.dependencyTracker?.resetBBox(opIdx).recordDependencies(opIdx, Dependencies.transformAndFill);
        for (const image of images) {
          const {
            data: data2,
            width,
            height,
            transform
          } = image;
          const maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
          const maskCtx = maskCanvas.context;
          maskCtx.save();
          const img = this.getObject(opIdx, data2, image);
          putBinaryImageMask(maskCtx, img);
          maskCtx.globalCompositeOperation = "source-in";
          maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, getCurrentTransformInverse(ctx), PathType.FILL, opIdx) : fillColor;
          maskCtx.fillRect(0, 0, width, height);
          maskCtx.restore();
          ctx.save();
          ctx.transform(...transform);
          ctx.scale(1, -1);
          drawImageAtIntegerCoords(ctx, maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);
          this.dependencyTracker?.recordBBox(opIdx, ctx, 0, width, 0, height);
          ctx.restore();
        }
        this.compose();
        this.dependencyTracker?.recordOperation(opIdx);
      }
      paintImageXObject(opIdx, objId) {
        if (!this.contentVisible) {
          return;
        }
        const imgData = this.getObject(opIdx, objId);
        if (!imgData) {
          warn("Dependent image isn't ready yet");
          return;
        }
        this.paintInlineImageXObject(opIdx, imgData);
      }
      paintImageXObjectRepeat(opIdx, objId, scaleX, scaleY, positions) {
        if (!this.contentVisible) {
          return;
        }
        const imgData = this.getObject(opIdx, objId);
        if (!imgData) {
          warn("Dependent image isn't ready yet");
          return;
        }
        const width = imgData.width;
        const height = imgData.height;
        const map2 = [];
        for (let i = 0, ii = positions.length; i < ii; i += 2) {
          map2.push({
            transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],
            x: 0,
            y: 0,
            w: width,
            h: height
          });
        }
        this.paintInlineImageXObjectGroup(opIdx, imgData, map2);
      }
      applyTransferMapsToCanvas(ctx) {
        if (this.current.transferMaps !== "none") {
          ctx.filter = this.current.transferMaps;
          ctx.drawImage(ctx.canvas, 0, 0);
          ctx.filter = "none";
        }
        return ctx.canvas;
      }
      applyTransferMapsToBitmap(imgData) {
        if (this.current.transferMaps === "none") {
          return imgData.bitmap;
        }
        const {
          bitmap,
          width,
          height
        } = imgData;
        const tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", width, height);
        const tmpCtx = tmpCanvas.context;
        tmpCtx.filter = this.current.transferMaps;
        tmpCtx.drawImage(bitmap, 0, 0);
        tmpCtx.filter = "none";
        return tmpCanvas.canvas;
      }
      paintInlineImageXObject(opIdx, imgData) {
        if (!this.contentVisible) {
          return;
        }
        const width = imgData.width;
        const height = imgData.height;
        const ctx = this.ctx;
        this.save(opIdx);
        const {
          filter: filter5
        } = ctx;
        if (filter5 !== "none" && filter5 !== "") {
          ctx.filter = "none";
        }
        ctx.scale(1 / width, -1 / height);
        let imgToPaint;
        if (imgData.bitmap) {
          imgToPaint = this.applyTransferMapsToBitmap(imgData);
        } else if (typeof HTMLElement === "function" && imgData instanceof HTMLElement || !imgData.data) {
          imgToPaint = imgData;
        } else {
          const tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", width, height);
          const tmpCtx = tmpCanvas.context;
          putBinaryImageData(tmpCtx, imgData);
          imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);
        }
        const scaled = this._scaleImage(imgToPaint, getCurrentTransformInverse(ctx));
        ctx.imageSmoothingEnabled = getImageSmoothingEnabled(getCurrentTransform(ctx), imgData.interpolate);
        this.dependencyTracker?.resetBBox(opIdx).recordBBox(opIdx, ctx, 0, width, -height, 0).recordDependencies(opIdx, Dependencies.imageXObject).recordOperation(opIdx);
        drawImageAtIntegerCoords(ctx, scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);
        this.compose();
        this.restore(opIdx);
      }
      paintInlineImageXObjectGroup(opIdx, imgData, map2) {
        if (!this.contentVisible) {
          return;
        }
        const ctx = this.ctx;
        let imgToPaint;
        if (imgData.bitmap) {
          imgToPaint = imgData.bitmap;
        } else {
          const w2 = imgData.width;
          const h2 = imgData.height;
          const tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", w2, h2);
          const tmpCtx = tmpCanvas.context;
          putBinaryImageData(tmpCtx, imgData);
          imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);
        }
        this.dependencyTracker?.resetBBox(opIdx);
        for (const entry of map2) {
          ctx.save();
          ctx.transform(...entry.transform);
          ctx.scale(1, -1);
          drawImageAtIntegerCoords(ctx, imgToPaint, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);
          this.dependencyTracker?.recordBBox(opIdx, ctx, 0, 1, -1, 0);
          ctx.restore();
        }
        this.dependencyTracker?.recordOperation(opIdx);
        this.compose();
      }
      paintSolidColorImageMask(opIdx) {
        if (!this.contentVisible) {
          return;
        }
        this.dependencyTracker?.resetBBox(opIdx).recordBBox(opIdx, this.ctx, 0, 1, 0, 1).recordDependencies(opIdx, Dependencies.fill).recordOperation(opIdx);
        this.ctx.fillRect(0, 0, 1, 1);
        this.compose();
      }
      markPoint(opIdx, tag) {
      }
      markPointProps(opIdx, tag, properties) {
      }
      beginMarkedContent(opIdx, tag) {
        this.dependencyTracker?.beginMarkedContent(opIdx);
        this.markedContentStack.push({
          visible: true
        });
      }
      beginMarkedContentProps(opIdx, tag, properties) {
        this.dependencyTracker?.beginMarkedContent(opIdx);
        if (tag === "OC") {
          this.markedContentStack.push({
            visible: this.optionalContentConfig.isVisible(properties)
          });
        } else {
          this.markedContentStack.push({
            visible: true
          });
        }
        this.contentVisible = this.isContentVisible();
      }
      endMarkedContent(opIdx) {
        this.dependencyTracker?.endMarkedContent(opIdx);
        this.markedContentStack.pop();
        this.contentVisible = this.isContentVisible();
      }
      beginCompat(opIdx) {
      }
      endCompat(opIdx) {
      }
      consumePath(opIdx, path, clipBox) {
        const isEmpty = this.current.isEmptyClip();
        if (this.pendingClip) {
          this.current.updateClipFromPath();
        }
        if (!this.pendingClip) {
          this.compose(clipBox);
        }
        const ctx = this.ctx;
        if (this.pendingClip) {
          if (!isEmpty) {
            if (this.pendingClip === EO_CLIP) {
              ctx.clip(path, "evenodd");
            } else {
              ctx.clip(path);
            }
          }
          this.pendingClip = null;
          this.dependencyTracker?.bboxToClipBoxDropOperation(opIdx).recordFutureForcedDependency("clipPath", opIdx);
        } else {
          this.dependencyTracker?.recordOperation(opIdx);
        }
        this.current.startNewPathAndClipBox(this.current.clipBox);
      }
      getSinglePixelWidth() {
        if (!this._cachedGetSinglePixelWidth) {
          const m2 = getCurrentTransform(this.ctx);
          if (m2[1] === 0 && m2[2] === 0) {
            this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(m2[0]), Math.abs(m2[3]));
          } else {
            const absDet = Math.abs(m2[0] * m2[3] - m2[2] * m2[1]);
            const normX = Math.hypot(m2[0], m2[2]);
            const normY = Math.hypot(m2[1], m2[3]);
            this._cachedGetSinglePixelWidth = Math.max(normX, normY) / absDet;
          }
        }
        return this._cachedGetSinglePixelWidth;
      }
      getScaleForStroking() {
        if (this._cachedScaleForStroking[0] === -1) {
          const {
            lineWidth
          } = this.current;
          const {
            a,
            b: b2,
            c,
            d
          } = this.ctx.getTransform();
          let scaleX, scaleY;
          if (b2 === 0 && c === 0) {
            const normX = Math.abs(a);
            const normY = Math.abs(d);
            if (normX === normY) {
              if (lineWidth === 0) {
                scaleX = scaleY = 1 / normX;
              } else {
                const scaledLineWidth = normX * lineWidth;
                scaleX = scaleY = scaledLineWidth < 1 ? 1 / scaledLineWidth : 1;
              }
            } else if (lineWidth === 0) {
              scaleX = 1 / normX;
              scaleY = 1 / normY;
            } else {
              const scaledXLineWidth = normX * lineWidth;
              const scaledYLineWidth = normY * lineWidth;
              scaleX = scaledXLineWidth < 1 ? 1 / scaledXLineWidth : 1;
              scaleY = scaledYLineWidth < 1 ? 1 / scaledYLineWidth : 1;
            }
          } else {
            const absDet = Math.abs(a * d - b2 * c);
            const normX = Math.hypot(a, b2);
            const normY = Math.hypot(c, d);
            if (lineWidth === 0) {
              scaleX = normY / absDet;
              scaleY = normX / absDet;
            } else {
              const baseArea = lineWidth * absDet;
              scaleX = normY > baseArea ? normY / baseArea : 1;
              scaleY = normX > baseArea ? normX / baseArea : 1;
            }
          }
          this._cachedScaleForStroking[0] = scaleX;
          this._cachedScaleForStroking[1] = scaleY;
        }
        return this._cachedScaleForStroking;
      }
      rescaleAndStroke(path, saveRestore) {
        const {
          ctx,
          current: {
            lineWidth
          }
        } = this;
        const [scaleX, scaleY] = this.getScaleForStroking();
        if (scaleX === scaleY) {
          ctx.lineWidth = (lineWidth || 1) * scaleX;
          ctx.stroke(path);
          return;
        }
        const dashes = ctx.getLineDash();
        if (saveRestore) {
          ctx.save();
        }
        ctx.scale(scaleX, scaleY);
        SCALE_MATRIX.a = 1 / scaleX;
        SCALE_MATRIX.d = 1 / scaleY;
        const newPath = new Path2D();
        newPath.addPath(path, SCALE_MATRIX);
        if (dashes.length > 0) {
          const scale = Math.max(scaleX, scaleY);
          ctx.setLineDash(dashes.map((x2) => x2 / scale));
          ctx.lineDashOffset /= scale;
        }
        ctx.lineWidth = lineWidth || 1;
        ctx.stroke(newPath);
        if (saveRestore) {
          ctx.restore();
        }
      }
      isContentVisible() {
        for (let i = this.markedContentStack.length - 1; i >= 0; i--) {
          if (!this.markedContentStack[i].visible) {
            return false;
          }
        }
        return true;
      }
    };
    for (const op in OPS) {
      if (CanvasGraphics.prototype[op] !== void 0) {
        CanvasGraphics.prototype[OPS[op]] = CanvasGraphics.prototype[op];
      }
    }
    CssFontInfo = class _CssFontInfo {
      #buffer;
      #view;
      #decoder;
      static strings = ["fontFamily", "fontWeight", "italicAngle"];
      static write(info2) {
        const encoder = new TextEncoder();
        const encodedStrings = {};
        let stringsLength = 0;
        for (const prop2 of _CssFontInfo.strings) {
          const encoded = encoder.encode(info2[prop2]);
          encodedStrings[prop2] = encoded;
          stringsLength += 4 + encoded.length;
        }
        const buffer = new ArrayBuffer(stringsLength);
        const data2 = new Uint8Array(buffer);
        const view = new DataView(buffer);
        let offset = 0;
        for (const prop2 of _CssFontInfo.strings) {
          const encoded = encodedStrings[prop2];
          const length = encoded.length;
          view.setUint32(offset, length);
          data2.set(encoded, offset + 4);
          offset += 4 + length;
        }
        assert(offset === buffer.byteLength, "CssFontInfo.write: Buffer overflow");
        return buffer;
      }
      constructor(buffer) {
        this.#buffer = buffer;
        this.#view = new DataView(this.#buffer);
        this.#decoder = new TextDecoder();
      }
      #readString(index2) {
        assert(index2 < _CssFontInfo.strings.length, "Invalid string index");
        let offset = 0;
        for (let i = 0; i < index2; i++) {
          offset += this.#view.getUint32(offset) + 4;
        }
        const length = this.#view.getUint32(offset);
        return this.#decoder.decode(new Uint8Array(this.#buffer, offset + 4, length));
      }
      get fontFamily() {
        return this.#readString(0);
      }
      get fontWeight() {
        return this.#readString(1);
      }
      get italicAngle() {
        return this.#readString(2);
      }
    };
    SystemFontInfo = class _SystemFontInfo {
      #buffer;
      #view;
      #decoder;
      static strings = ["css", "loadedName", "baseFontName", "src"];
      static write(info2) {
        const encoder = new TextEncoder();
        const encodedStrings = {};
        let stringsLength = 0;
        for (const prop2 of _SystemFontInfo.strings) {
          const encoded = encoder.encode(info2[prop2]);
          encodedStrings[prop2] = encoded;
          stringsLength += 4 + encoded.length;
        }
        stringsLength += 4;
        let encodedStyleStyle, encodedStyleWeight, lengthEstimate = 1 + stringsLength;
        if (info2.style) {
          encodedStyleStyle = encoder.encode(info2.style.style);
          encodedStyleWeight = encoder.encode(info2.style.weight);
          lengthEstimate += 4 + encodedStyleStyle.length + 4 + encodedStyleWeight.length;
        }
        const buffer = new ArrayBuffer(lengthEstimate);
        const data2 = new Uint8Array(buffer);
        const view = new DataView(buffer);
        let offset = 0;
        view.setUint8(offset++, info2.guessFallback ? 1 : 0);
        view.setUint32(offset, 0);
        offset += 4;
        stringsLength = 0;
        for (const prop2 of _SystemFontInfo.strings) {
          const encoded = encodedStrings[prop2];
          const length = encoded.length;
          stringsLength += 4 + length;
          view.setUint32(offset, length);
          data2.set(encoded, offset + 4);
          offset += 4 + length;
        }
        view.setUint32(offset - stringsLength - 4, stringsLength);
        if (info2.style) {
          view.setUint32(offset, encodedStyleStyle.length);
          data2.set(encodedStyleStyle, offset + 4);
          offset += 4 + encodedStyleStyle.length;
          view.setUint32(offset, encodedStyleWeight.length);
          data2.set(encodedStyleWeight, offset + 4);
          offset += 4 + encodedStyleWeight.length;
        }
        assert(offset <= buffer.byteLength, "SubstitionInfo.write: Buffer overflow");
        return buffer.transferToFixedLength(offset);
      }
      constructor(buffer) {
        this.#buffer = buffer;
        this.#view = new DataView(this.#buffer);
        this.#decoder = new TextDecoder();
      }
      get guessFallback() {
        return this.#view.getUint8(0) !== 0;
      }
      #readString(index2) {
        assert(index2 < _SystemFontInfo.strings.length, "Invalid string index");
        let offset = 5;
        for (let i = 0; i < index2; i++) {
          offset += this.#view.getUint32(offset) + 4;
        }
        const length = this.#view.getUint32(offset);
        return this.#decoder.decode(new Uint8Array(this.#buffer, offset + 4, length));
      }
      get css() {
        return this.#readString(0);
      }
      get loadedName() {
        return this.#readString(1);
      }
      get baseFontName() {
        return this.#readString(2);
      }
      get src() {
        return this.#readString(3);
      }
      get style() {
        let offset = 1;
        offset += 4 + this.#view.getUint32(offset);
        const styleLength = this.#view.getUint32(offset);
        const style = this.#decoder.decode(new Uint8Array(this.#buffer, offset + 4, styleLength));
        offset += 4 + styleLength;
        const weightLength = this.#view.getUint32(offset);
        const weight = this.#decoder.decode(new Uint8Array(this.#buffer, offset + 4, weightLength));
        return {
          style,
          weight
        };
      }
    };
    FontInfo = class _FontInfo {
      static bools = ["black", "bold", "disableFontFace", "fontExtraProperties", "isInvalidPDFjsFont", "isType3Font", "italic", "missingFile", "remeasure", "vertical"];
      static numbers = ["ascent", "defaultWidth", "descent"];
      static strings = ["fallbackName", "loadedName", "mimetype", "name"];
      static #OFFSET_NUMBERS = Math.ceil(this.bools.length * 2 / 8);
      static #OFFSET_BBOX = this.#OFFSET_NUMBERS + this.numbers.length * 8;
      static #OFFSET_FONT_MATRIX = this.#OFFSET_BBOX + 1 + 2 * 4;
      static #OFFSET_DEFAULT_VMETRICS = this.#OFFSET_FONT_MATRIX + 1 + 8 * 6;
      static #OFFSET_STRINGS = this.#OFFSET_DEFAULT_VMETRICS + 1 + 2 * 3;
      #buffer;
      #decoder;
      #view;
      constructor({
        data: data2,
        extra
      }) {
        this.#buffer = data2;
        this.#decoder = new TextDecoder();
        this.#view = new DataView(this.#buffer);
        if (extra) {
          Object.assign(this, extra);
        }
      }
      #readBoolean(index2) {
        assert(index2 < _FontInfo.bools.length, "Invalid boolean index");
        const byteOffset = Math.floor(index2 / 4);
        const bitOffset = index2 * 2 % 8;
        const value = this.#view.getUint8(byteOffset) >> bitOffset & 3;
        return value === 0 ? void 0 : value === 2;
      }
      get black() {
        return this.#readBoolean(0);
      }
      get bold() {
        return this.#readBoolean(1);
      }
      get disableFontFace() {
        return this.#readBoolean(2);
      }
      get fontExtraProperties() {
        return this.#readBoolean(3);
      }
      get isInvalidPDFjsFont() {
        return this.#readBoolean(4);
      }
      get isType3Font() {
        return this.#readBoolean(5);
      }
      get italic() {
        return this.#readBoolean(6);
      }
      get missingFile() {
        return this.#readBoolean(7);
      }
      get remeasure() {
        return this.#readBoolean(8);
      }
      get vertical() {
        return this.#readBoolean(9);
      }
      #readNumber(index2) {
        assert(index2 < _FontInfo.numbers.length, "Invalid number index");
        return this.#view.getFloat64(_FontInfo.#OFFSET_NUMBERS + index2 * 8);
      }
      get ascent() {
        return this.#readNumber(0);
      }
      get defaultWidth() {
        return this.#readNumber(1);
      }
      get descent() {
        return this.#readNumber(2);
      }
      get bbox() {
        let offset = _FontInfo.#OFFSET_BBOX;
        const numCoords = this.#view.getUint8(offset);
        if (numCoords === 0) {
          return void 0;
        }
        offset += 1;
        const bbox = [];
        for (let i = 0; i < 4; i++) {
          bbox.push(this.#view.getInt16(offset, true));
          offset += 2;
        }
        return bbox;
      }
      get fontMatrix() {
        let offset = _FontInfo.#OFFSET_FONT_MATRIX;
        const numPoints = this.#view.getUint8(offset);
        if (numPoints === 0) {
          return void 0;
        }
        offset += 1;
        const fontMatrix = [];
        for (let i = 0; i < 6; i++) {
          fontMatrix.push(this.#view.getFloat64(offset, true));
          offset += 8;
        }
        return fontMatrix;
      }
      get defaultVMetrics() {
        let offset = _FontInfo.#OFFSET_DEFAULT_VMETRICS;
        const numMetrics = this.#view.getUint8(offset);
        if (numMetrics === 0) {
          return void 0;
        }
        offset += 1;
        const defaultVMetrics = [];
        for (let i = 0; i < 3; i++) {
          defaultVMetrics.push(this.#view.getInt16(offset, true));
          offset += 2;
        }
        return defaultVMetrics;
      }
      #readString(index2) {
        assert(index2 < _FontInfo.strings.length, "Invalid string index");
        let offset = _FontInfo.#OFFSET_STRINGS + 4;
        for (let i = 0; i < index2; i++) {
          offset += this.#view.getUint32(offset) + 4;
        }
        const length = this.#view.getUint32(offset);
        const stringData = new Uint8Array(length);
        stringData.set(new Uint8Array(this.#buffer, offset + 4, length));
        return this.#decoder.decode(stringData);
      }
      get fallbackName() {
        return this.#readString(0);
      }
      get loadedName() {
        return this.#readString(1);
      }
      get mimetype() {
        return this.#readString(2);
      }
      get name() {
        return this.#readString(3);
      }
      get data() {
        let offset = _FontInfo.#OFFSET_STRINGS;
        const stringsLength = this.#view.getUint32(offset);
        offset += 4 + stringsLength;
        const systemFontInfoLength = this.#view.getUint32(offset);
        offset += 4 + systemFontInfoLength;
        const cssFontInfoLength = this.#view.getUint32(offset);
        offset += 4 + cssFontInfoLength;
        const length = this.#view.getUint32(offset);
        if (length === 0) {
          return void 0;
        }
        return new Uint8Array(this.#buffer, offset + 4, length);
      }
      clearData() {
        let offset = _FontInfo.#OFFSET_STRINGS;
        const stringsLength = this.#view.getUint32(offset);
        offset += 4 + stringsLength;
        const systemFontInfoLength = this.#view.getUint32(offset);
        offset += 4 + systemFontInfoLength;
        const cssFontInfoLength = this.#view.getUint32(offset);
        offset += 4 + cssFontInfoLength;
        const length = this.#view.getUint32(offset);
        const data2 = new Uint8Array(this.#buffer, offset + 4, length);
        data2.fill(0);
        this.#view.setUint32(offset, 0);
      }
      get cssFontInfo() {
        let offset = _FontInfo.#OFFSET_STRINGS;
        const stringsLength = this.#view.getUint32(offset);
        offset += 4 + stringsLength;
        const systemFontInfoLength = this.#view.getUint32(offset);
        offset += 4 + systemFontInfoLength;
        const cssFontInfoLength = this.#view.getUint32(offset);
        if (cssFontInfoLength === 0) {
          return null;
        }
        const cssFontInfoData = new Uint8Array(cssFontInfoLength);
        cssFontInfoData.set(new Uint8Array(this.#buffer, offset + 4, cssFontInfoLength));
        return new CssFontInfo(cssFontInfoData.buffer);
      }
      get systemFontInfo() {
        let offset = _FontInfo.#OFFSET_STRINGS;
        const stringsLength = this.#view.getUint32(offset);
        offset += 4 + stringsLength;
        const systemFontInfoLength = this.#view.getUint32(offset);
        if (systemFontInfoLength === 0) {
          return null;
        }
        const systemFontInfoData = new Uint8Array(systemFontInfoLength);
        systemFontInfoData.set(new Uint8Array(this.#buffer, offset + 4, systemFontInfoLength));
        return new SystemFontInfo(systemFontInfoData.buffer);
      }
      static write(font) {
        const systemFontInfoBuffer = font.systemFontInfo ? SystemFontInfo.write(font.systemFontInfo) : null;
        const cssFontInfoBuffer = font.cssFontInfo ? CssFontInfo.write(font.cssFontInfo) : null;
        const encoder = new TextEncoder();
        const encodedStrings = {};
        let stringsLength = 0;
        for (const prop2 of _FontInfo.strings) {
          encodedStrings[prop2] = encoder.encode(font[prop2]);
          stringsLength += 4 + encodedStrings[prop2].length;
        }
        const lengthEstimate = _FontInfo.#OFFSET_STRINGS + 4 + stringsLength + 4 + (systemFontInfoBuffer ? systemFontInfoBuffer.byteLength : 0) + 4 + (cssFontInfoBuffer ? cssFontInfoBuffer.byteLength : 0) + 4 + (font.data ? font.data.length : 0);
        const buffer = new ArrayBuffer(lengthEstimate);
        const data2 = new Uint8Array(buffer);
        const view = new DataView(buffer);
        let offset = 0;
        const numBools = _FontInfo.bools.length;
        let boolByte = 0, boolBit = 0;
        for (let i = 0; i < numBools; i++) {
          const value = font[_FontInfo.bools[i]];
          const bits = value === void 0 ? 0 : value ? 2 : 1;
          boolByte |= bits << boolBit;
          boolBit += 2;
          if (boolBit === 8 || i === numBools - 1) {
            view.setUint8(offset++, boolByte);
            boolByte = 0;
            boolBit = 0;
          }
        }
        assert(offset === _FontInfo.#OFFSET_NUMBERS, "FontInfo.write: Boolean properties offset mismatch");
        for (const prop2 of _FontInfo.numbers) {
          view.setFloat64(offset, font[prop2]);
          offset += 8;
        }
        assert(offset === _FontInfo.#OFFSET_BBOX, "FontInfo.write: Number properties offset mismatch");
        if (font.bbox) {
          view.setUint8(offset++, 4);
          for (const coord of font.bbox) {
            view.setInt16(offset, coord, true);
            offset += 2;
          }
        } else {
          view.setUint8(offset++, 0);
          offset += 2 * 4;
        }
        assert(offset === _FontInfo.#OFFSET_FONT_MATRIX, "FontInfo.write: BBox properties offset mismatch");
        if (font.fontMatrix) {
          view.setUint8(offset++, 6);
          for (const point of font.fontMatrix) {
            view.setFloat64(offset, point, true);
            offset += 8;
          }
        } else {
          view.setUint8(offset++, 0);
          offset += 8 * 6;
        }
        assert(offset === _FontInfo.#OFFSET_DEFAULT_VMETRICS, "FontInfo.write: FontMatrix properties offset mismatch");
        if (font.defaultVMetrics) {
          view.setUint8(offset++, 1);
          for (const metric of font.defaultVMetrics) {
            view.setInt16(offset, metric, true);
            offset += 2;
          }
        } else {
          view.setUint8(offset++, 0);
          offset += 3 * 2;
        }
        assert(offset === _FontInfo.#OFFSET_STRINGS, "FontInfo.write: DefaultVMetrics properties offset mismatch");
        view.setUint32(_FontInfo.#OFFSET_STRINGS, 0);
        offset += 4;
        for (const prop2 of _FontInfo.strings) {
          const encoded = encodedStrings[prop2];
          const length = encoded.length;
          view.setUint32(offset, length);
          data2.set(encoded, offset + 4);
          offset += 4 + length;
        }
        view.setUint32(_FontInfo.#OFFSET_STRINGS, offset - _FontInfo.#OFFSET_STRINGS - 4);
        if (!systemFontInfoBuffer) {
          view.setUint32(offset, 0);
          offset += 4;
        } else {
          const length = systemFontInfoBuffer.byteLength;
          view.setUint32(offset, length);
          assert(offset + 4 + length <= buffer.byteLength, "FontInfo.write: Buffer overflow at systemFontInfo");
          data2.set(new Uint8Array(systemFontInfoBuffer), offset + 4);
          offset += 4 + length;
        }
        if (!cssFontInfoBuffer) {
          view.setUint32(offset, 0);
          offset += 4;
        } else {
          const length = cssFontInfoBuffer.byteLength;
          view.setUint32(offset, length);
          assert(offset + 4 + length <= buffer.byteLength, "FontInfo.write: Buffer overflow at cssFontInfo");
          data2.set(new Uint8Array(cssFontInfoBuffer), offset + 4);
          offset += 4 + length;
        }
        if (font.data === void 0) {
          view.setUint32(offset, 0);
          offset += 4;
        } else {
          view.setUint32(offset, font.data.length);
          data2.set(font.data, offset + 4);
          offset += 4 + font.data.length;
        }
        assert(offset <= buffer.byteLength, "FontInfo.write: Buffer overflow");
        return buffer.transferToFixedLength(offset);
      }
    };
    GlobalWorkerOptions = class {
      static #port = null;
      static #src = "";
      static get workerPort() {
        return this.#port;
      }
      static set workerPort(val2) {
        if (!(typeof Worker !== "undefined" && val2 instanceof Worker) && val2 !== null) {
          throw new Error("Invalid `workerPort` type.");
        }
        this.#port = val2;
      }
      static get workerSrc() {
        return this.#src;
      }
      static set workerSrc(val2) {
        if (typeof val2 !== "string") {
          throw new Error("Invalid `workerSrc` type.");
        }
        this.#src = val2;
      }
    };
    Metadata = class {
      #map;
      #data;
      constructor({
        parsedData,
        rawData
      }) {
        this.#map = parsedData;
        this.#data = rawData;
      }
      getRaw() {
        return this.#data;
      }
      get(name) {
        return this.#map.get(name) ?? null;
      }
      [Symbol.iterator]() {
        return this.#map.entries();
      }
    };
    INTERNAL = Symbol("INTERNAL");
    OptionalContentGroup = class {
      #isDisplay = false;
      #isPrint = false;
      #userSet = false;
      #visible = true;
      constructor(renderingIntent, {
        name,
        intent,
        usage,
        rbGroups
      }) {
        this.#isDisplay = !!(renderingIntent & RenderingIntentFlag.DISPLAY);
        this.#isPrint = !!(renderingIntent & RenderingIntentFlag.PRINT);
        this.name = name;
        this.intent = intent;
        this.usage = usage;
        this.rbGroups = rbGroups;
      }
      get visible() {
        if (this.#userSet) {
          return this.#visible;
        }
        if (!this.#visible) {
          return false;
        }
        const {
          print,
          view
        } = this.usage;
        if (this.#isDisplay) {
          return view?.viewState !== "OFF";
        } else if (this.#isPrint) {
          return print?.printState !== "OFF";
        }
        return true;
      }
      _setVisible(internal, visible, userSet = false) {
        if (internal !== INTERNAL) {
          unreachable("Internal method `_setVisible` called.");
        }
        this.#userSet = userSet;
        this.#visible = visible;
      }
    };
    OptionalContentConfig = class {
      #cachedGetHash = null;
      #groups = /* @__PURE__ */ new Map();
      #initialHash = null;
      #order = null;
      constructor(data2, renderingIntent = RenderingIntentFlag.DISPLAY) {
        this.renderingIntent = renderingIntent;
        this.name = null;
        this.creator = null;
        if (data2 === null) {
          return;
        }
        this.name = data2.name;
        this.creator = data2.creator;
        this.#order = data2.order;
        for (const group of data2.groups) {
          this.#groups.set(group.id, new OptionalContentGroup(renderingIntent, group));
        }
        if (data2.baseState === "OFF") {
          for (const group of this.#groups.values()) {
            group._setVisible(INTERNAL, false);
          }
        }
        for (const on of data2.on) {
          this.#groups.get(on)._setVisible(INTERNAL, true);
        }
        for (const off of data2.off) {
          this.#groups.get(off)._setVisible(INTERNAL, false);
        }
        this.#initialHash = this.getHash();
      }
      #evaluateVisibilityExpression(array) {
        const length = array.length;
        if (length < 2) {
          return true;
        }
        const operator = array[0];
        for (let i = 1; i < length; i++) {
          const element = array[i];
          let state;
          if (Array.isArray(element)) {
            state = this.#evaluateVisibilityExpression(element);
          } else if (this.#groups.has(element)) {
            state = this.#groups.get(element).visible;
          } else {
            warn(`Optional content group not found: ${element}`);
            return true;
          }
          switch (operator) {
            case "And":
              if (!state) {
                return false;
              }
              break;
            case "Or":
              if (state) {
                return true;
              }
              break;
            case "Not":
              return !state;
            default:
              return true;
          }
        }
        return operator === "And";
      }
      isVisible(group) {
        if (this.#groups.size === 0) {
          return true;
        }
        if (!group) {
          info("Optional content group not defined.");
          return true;
        }
        if (group.type === "OCG") {
          if (!this.#groups.has(group.id)) {
            warn(`Optional content group not found: ${group.id}`);
            return true;
          }
          return this.#groups.get(group.id).visible;
        } else if (group.type === "OCMD") {
          if (group.expression) {
            return this.#evaluateVisibilityExpression(group.expression);
          }
          if (!group.policy || group.policy === "AnyOn") {
            for (const id of group.ids) {
              if (!this.#groups.has(id)) {
                warn(`Optional content group not found: ${id}`);
                return true;
              }
              if (this.#groups.get(id).visible) {
                return true;
              }
            }
            return false;
          } else if (group.policy === "AllOn") {
            for (const id of group.ids) {
              if (!this.#groups.has(id)) {
                warn(`Optional content group not found: ${id}`);
                return true;
              }
              if (!this.#groups.get(id).visible) {
                return false;
              }
            }
            return true;
          } else if (group.policy === "AnyOff") {
            for (const id of group.ids) {
              if (!this.#groups.has(id)) {
                warn(`Optional content group not found: ${id}`);
                return true;
              }
              if (!this.#groups.get(id).visible) {
                return true;
              }
            }
            return false;
          } else if (group.policy === "AllOff") {
            for (const id of group.ids) {
              if (!this.#groups.has(id)) {
                warn(`Optional content group not found: ${id}`);
                return true;
              }
              if (this.#groups.get(id).visible) {
                return false;
              }
            }
            return true;
          }
          warn(`Unknown optional content policy ${group.policy}.`);
          return true;
        }
        warn(`Unknown group type ${group.type}.`);
        return true;
      }
      setVisibility(id, visible = true, preserveRB = true) {
        const group = this.#groups.get(id);
        if (!group) {
          warn(`Optional content group not found: ${id}`);
          return;
        }
        if (preserveRB && visible && group.rbGroups.length) {
          for (const rbGroup of group.rbGroups) {
            for (const otherId of rbGroup) {
              if (otherId !== id) {
                this.#groups.get(otherId)?._setVisible(INTERNAL, false, true);
              }
            }
          }
        }
        group._setVisible(INTERNAL, !!visible, true);
        this.#cachedGetHash = null;
      }
      setOCGState({
        state,
        preserveRB
      }) {
        let operator;
        for (const elem of state) {
          switch (elem) {
            case "ON":
            case "OFF":
            case "Toggle":
              operator = elem;
              continue;
          }
          const group = this.#groups.get(elem);
          if (!group) {
            continue;
          }
          switch (operator) {
            case "ON":
              this.setVisibility(elem, true, preserveRB);
              break;
            case "OFF":
              this.setVisibility(elem, false, preserveRB);
              break;
            case "Toggle":
              this.setVisibility(elem, !group.visible, preserveRB);
              break;
          }
        }
        this.#cachedGetHash = null;
      }
      get hasInitialVisibility() {
        return this.#initialHash === null || this.getHash() === this.#initialHash;
      }
      getOrder() {
        if (!this.#groups.size) {
          return null;
        }
        if (this.#order) {
          return this.#order.slice();
        }
        return [...this.#groups.keys()];
      }
      getGroup(id) {
        return this.#groups.get(id) || null;
      }
      getHash() {
        if (this.#cachedGetHash !== null) {
          return this.#cachedGetHash;
        }
        const hash = new MurmurHash3_64();
        for (const [id, group] of this.#groups) {
          hash.update(`${id}:${group.visible}`);
        }
        return this.#cachedGetHash = hash.hexdigest();
      }
      [Symbol.iterator]() {
        return this.#groups.entries();
      }
    };
    PDFDataTransportStream = class {
      constructor(pdfDataRangeTransport, {
        disableRange = false,
        disableStream = false
      }) {
        assert(pdfDataRangeTransport, 'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.');
        const {
          length,
          initialData,
          progressiveDone,
          contentDispositionFilename
        } = pdfDataRangeTransport;
        this._queuedChunks = [];
        this._progressiveDone = progressiveDone;
        this._contentDispositionFilename = contentDispositionFilename;
        if (initialData?.length > 0) {
          const buffer = initialData instanceof Uint8Array && initialData.byteLength === initialData.buffer.byteLength ? initialData.buffer : new Uint8Array(initialData).buffer;
          this._queuedChunks.push(buffer);
        }
        this._pdfDataRangeTransport = pdfDataRangeTransport;
        this._isStreamingSupported = !disableStream;
        this._isRangeSupported = !disableRange;
        this._contentLength = length;
        this._fullRequestReader = null;
        this._rangeReaders = [];
        pdfDataRangeTransport.addRangeListener((begin, chunk) => {
          this._onReceiveData({
            begin,
            chunk
          });
        });
        pdfDataRangeTransport.addProgressListener((loaded, total) => {
          this._onProgress({
            loaded,
            total
          });
        });
        pdfDataRangeTransport.addProgressiveReadListener((chunk) => {
          this._onReceiveData({
            chunk
          });
        });
        pdfDataRangeTransport.addProgressiveDoneListener(() => {
          this._onProgressiveDone();
        });
        pdfDataRangeTransport.transportReady();
      }
      _onReceiveData({
        begin,
        chunk
      }) {
        const buffer = chunk instanceof Uint8Array && chunk.byteLength === chunk.buffer.byteLength ? chunk.buffer : new Uint8Array(chunk).buffer;
        if (begin === void 0) {
          if (this._fullRequestReader) {
            this._fullRequestReader._enqueue(buffer);
          } else {
            this._queuedChunks.push(buffer);
          }
        } else {
          const found = this._rangeReaders.some(function(rangeReader) {
            if (rangeReader._begin !== begin) {
              return false;
            }
            rangeReader._enqueue(buffer);
            return true;
          });
          assert(found, "_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.");
        }
      }
      get _progressiveDataLength() {
        return this._fullRequestReader?._loaded ?? 0;
      }
      _onProgress(evt) {
        if (evt.total === void 0) {
          this._rangeReaders[0]?.onProgress?.({
            loaded: evt.loaded
          });
        } else {
          this._fullRequestReader?.onProgress?.({
            loaded: evt.loaded,
            total: evt.total
          });
        }
      }
      _onProgressiveDone() {
        this._fullRequestReader?.progressiveDone();
        this._progressiveDone = true;
      }
      _removeRangeReader(reader) {
        const i = this._rangeReaders.indexOf(reader);
        if (i >= 0) {
          this._rangeReaders.splice(i, 1);
        }
      }
      getFullReader() {
        assert(!this._fullRequestReader, "PDFDataTransportStream.getFullReader can only be called once.");
        const queuedChunks = this._queuedChunks;
        this._queuedChunks = null;
        return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);
      }
      getRangeReader(begin, end2) {
        if (end2 <= this._progressiveDataLength) {
          return null;
        }
        const reader = new PDFDataTransportStreamRangeReader(this, begin, end2);
        this._pdfDataRangeTransport.requestDataRange(begin, end2);
        this._rangeReaders.push(reader);
        return reader;
      }
      cancelAllRequests(reason) {
        this._fullRequestReader?.cancel(reason);
        for (const reader of this._rangeReaders.slice(0)) {
          reader.cancel(reason);
        }
        this._pdfDataRangeTransport.abort();
      }
    };
    PDFDataTransportStreamReader = class {
      constructor(stream, queuedChunks, progressiveDone = false, contentDispositionFilename = null) {
        this._stream = stream;
        this._done = progressiveDone || false;
        this._filename = isPdfFile(contentDispositionFilename) ? contentDispositionFilename : null;
        this._queuedChunks = queuedChunks || [];
        this._loaded = 0;
        for (const chunk of this._queuedChunks) {
          this._loaded += chunk.byteLength;
        }
        this._requests = [];
        this._headersReady = Promise.resolve();
        stream._fullRequestReader = this;
        this.onProgress = null;
      }
      _enqueue(chunk) {
        if (this._done) {
          return;
        }
        if (this._requests.length > 0) {
          const requestCapability = this._requests.shift();
          requestCapability.resolve({
            value: chunk,
            done: false
          });
        } else {
          this._queuedChunks.push(chunk);
        }
        this._loaded += chunk.byteLength;
      }
      get headersReady() {
        return this._headersReady;
      }
      get filename() {
        return this._filename;
      }
      get isRangeSupported() {
        return this._stream._isRangeSupported;
      }
      get isStreamingSupported() {
        return this._stream._isStreamingSupported;
      }
      get contentLength() {
        return this._stream._contentLength;
      }
      async read() {
        if (this._queuedChunks.length > 0) {
          const chunk = this._queuedChunks.shift();
          return {
            value: chunk,
            done: false
          };
        }
        if (this._done) {
          return {
            value: void 0,
            done: true
          };
        }
        const requestCapability = Promise.withResolvers();
        this._requests.push(requestCapability);
        return requestCapability.promise;
      }
      cancel(reason) {
        this._done = true;
        for (const requestCapability of this._requests) {
          requestCapability.resolve({
            value: void 0,
            done: true
          });
        }
        this._requests.length = 0;
      }
      progressiveDone() {
        if (this._done) {
          return;
        }
        this._done = true;
      }
    };
    PDFDataTransportStreamRangeReader = class {
      constructor(stream, begin, end2) {
        this._stream = stream;
        this._begin = begin;
        this._end = end2;
        this._queuedChunk = null;
        this._requests = [];
        this._done = false;
        this.onProgress = null;
      }
      _enqueue(chunk) {
        if (this._done) {
          return;
        }
        if (this._requests.length === 0) {
          this._queuedChunk = chunk;
        } else {
          const requestsCapability = this._requests.shift();
          requestsCapability.resolve({
            value: chunk,
            done: false
          });
          for (const requestCapability of this._requests) {
            requestCapability.resolve({
              value: void 0,
              done: true
            });
          }
          this._requests.length = 0;
        }
        this._done = true;
        this._stream._removeRangeReader(this);
      }
      get isStreamingSupported() {
        return false;
      }
      async read() {
        if (this._queuedChunk) {
          const chunk = this._queuedChunk;
          this._queuedChunk = null;
          return {
            value: chunk,
            done: false
          };
        }
        if (this._done) {
          return {
            value: void 0,
            done: true
          };
        }
        const requestCapability = Promise.withResolvers();
        this._requests.push(requestCapability);
        return requestCapability.promise;
      }
      cancel(reason) {
        this._done = true;
        for (const requestCapability of this._requests) {
          requestCapability.resolve({
            value: void 0,
            done: true
          });
        }
        this._requests.length = 0;
        this._stream._removeRangeReader(this);
      }
    };
    PDFFetchStream = class {
      _responseOrigin = null;
      constructor(source) {
        this.source = source;
        this.isHttp = /^https?:/i.test(source.url);
        this.headers = createHeaders(this.isHttp, source.httpHeaders);
        this._fullRequestReader = null;
        this._rangeRequestReaders = [];
      }
      get _progressiveDataLength() {
        return this._fullRequestReader?._loaded ?? 0;
      }
      getFullReader() {
        assert(!this._fullRequestReader, "PDFFetchStream.getFullReader can only be called once.");
        this._fullRequestReader = new PDFFetchStreamReader(this);
        return this._fullRequestReader;
      }
      getRangeReader(begin, end2) {
        if (end2 <= this._progressiveDataLength) {
          return null;
        }
        const reader = new PDFFetchStreamRangeReader(this, begin, end2);
        this._rangeRequestReaders.push(reader);
        return reader;
      }
      cancelAllRequests(reason) {
        this._fullRequestReader?.cancel(reason);
        for (const reader of this._rangeRequestReaders.slice(0)) {
          reader.cancel(reason);
        }
      }
    };
    PDFFetchStreamReader = class {
      constructor(stream) {
        this._stream = stream;
        this._reader = null;
        this._loaded = 0;
        this._filename = null;
        const source = stream.source;
        this._withCredentials = source.withCredentials || false;
        this._contentLength = source.length;
        this._headersCapability = Promise.withResolvers();
        this._disableRange = source.disableRange || false;
        this._rangeChunkSize = source.rangeChunkSize;
        if (!this._rangeChunkSize && !this._disableRange) {
          this._disableRange = true;
        }
        this._abortController = new AbortController();
        this._isStreamingSupported = !source.disableStream;
        this._isRangeSupported = !source.disableRange;
        const headers = new Headers(stream.headers);
        const url = source.url;
        fetch(url, createFetchOptions(headers, this._withCredentials, this._abortController)).then((response) => {
          stream._responseOrigin = getResponseOrigin(response.url);
          if (!validateResponseStatus(response.status)) {
            throw createResponseError(response.status, url);
          }
          this._reader = response.body.getReader();
          this._headersCapability.resolve();
          const responseHeaders = response.headers;
          const {
            allowRangeRequests,
            suggestedLength
          } = validateRangeRequestCapabilities({
            responseHeaders,
            isHttp: stream.isHttp,
            rangeChunkSize: this._rangeChunkSize,
            disableRange: this._disableRange
          });
          this._isRangeSupported = allowRangeRequests;
          this._contentLength = suggestedLength || this._contentLength;
          this._filename = extractFilenameFromHeader(responseHeaders);
          if (!this._isStreamingSupported && this._isRangeSupported) {
            this.cancel(new AbortException$1("Streaming is disabled."));
          }
        }).catch(this._headersCapability.reject);
        this.onProgress = null;
      }
      get headersReady() {
        return this._headersCapability.promise;
      }
      get filename() {
        return this._filename;
      }
      get contentLength() {
        return this._contentLength;
      }
      get isRangeSupported() {
        return this._isRangeSupported;
      }
      get isStreamingSupported() {
        return this._isStreamingSupported;
      }
      async read() {
        await this._headersCapability.promise;
        const {
          value,
          done
        } = await this._reader.read();
        if (done) {
          return {
            value,
            done
          };
        }
        this._loaded += value.byteLength;
        this.onProgress?.({
          loaded: this._loaded,
          total: this._contentLength
        });
        return {
          value: getArrayBuffer(value),
          done: false
        };
      }
      cancel(reason) {
        this._reader?.cancel(reason);
        this._abortController.abort();
      }
    };
    PDFFetchStreamRangeReader = class {
      constructor(stream, begin, end2) {
        this._stream = stream;
        this._reader = null;
        this._loaded = 0;
        const source = stream.source;
        this._withCredentials = source.withCredentials || false;
        this._readCapability = Promise.withResolvers();
        this._isStreamingSupported = !source.disableStream;
        this._abortController = new AbortController();
        const headers = new Headers(stream.headers);
        headers.append("Range", `bytes=${begin}-${end2 - 1}`);
        const url = source.url;
        fetch(url, createFetchOptions(headers, this._withCredentials, this._abortController)).then((response) => {
          const responseOrigin = getResponseOrigin(response.url);
          if (responseOrigin !== stream._responseOrigin) {
            throw new Error(`Expected range response-origin "${responseOrigin}" to match "${stream._responseOrigin}".`);
          }
          if (!validateResponseStatus(response.status)) {
            throw createResponseError(response.status, url);
          }
          this._readCapability.resolve();
          this._reader = response.body.getReader();
        }).catch(this._readCapability.reject);
        this.onProgress = null;
      }
      get isStreamingSupported() {
        return this._isStreamingSupported;
      }
      async read() {
        await this._readCapability.promise;
        const {
          value,
          done
        } = await this._reader.read();
        if (done) {
          return {
            value,
            done
          };
        }
        this._loaded += value.byteLength;
        this.onProgress?.({
          loaded: this._loaded
        });
        return {
          value: getArrayBuffer(value),
          done: false
        };
      }
      cancel(reason) {
        this._reader?.cancel(reason);
        this._abortController.abort();
      }
    };
    OK_RESPONSE = 200;
    PARTIAL_CONTENT_RESPONSE = 206;
    NetworkManager = class {
      _responseOrigin = null;
      constructor({
        url,
        httpHeaders,
        withCredentials
      }) {
        this.url = url;
        this.isHttp = /^https?:/i.test(url);
        this.headers = createHeaders(this.isHttp, httpHeaders);
        this.withCredentials = withCredentials || false;
        this.currXhrId = 0;
        this.pendingRequests = /* @__PURE__ */ Object.create(null);
      }
      request(args) {
        const xhr = new XMLHttpRequest();
        const xhrId = this.currXhrId++;
        const pendingRequest = this.pendingRequests[xhrId] = {
          xhr
        };
        xhr.open("GET", this.url);
        xhr.withCredentials = this.withCredentials;
        for (const [key, val2] of this.headers) {
          xhr.setRequestHeader(key, val2);
        }
        if (this.isHttp && "begin" in args && "end" in args) {
          xhr.setRequestHeader("Range", `bytes=${args.begin}-${args.end - 1}`);
          pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;
        } else {
          pendingRequest.expectedStatus = OK_RESPONSE;
        }
        xhr.responseType = "arraybuffer";
        assert(args.onError, "Expected `onError` callback to be provided.");
        xhr.onerror = () => {
          args.onError(xhr.status);
        };
        xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);
        xhr.onprogress = this.onProgress.bind(this, xhrId);
        pendingRequest.onHeadersReceived = args.onHeadersReceived;
        pendingRequest.onDone = args.onDone;
        pendingRequest.onError = args.onError;
        pendingRequest.onProgress = args.onProgress;
        xhr.send(null);
        return xhrId;
      }
      onProgress(xhrId, evt) {
        const pendingRequest = this.pendingRequests[xhrId];
        if (!pendingRequest) {
          return;
        }
        pendingRequest.onProgress?.(evt);
      }
      onStateChange(xhrId, evt) {
        const pendingRequest = this.pendingRequests[xhrId];
        if (!pendingRequest) {
          return;
        }
        const xhr = pendingRequest.xhr;
        if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {
          pendingRequest.onHeadersReceived();
          delete pendingRequest.onHeadersReceived;
        }
        if (xhr.readyState !== 4) {
          return;
        }
        if (!(xhrId in this.pendingRequests)) {
          return;
        }
        delete this.pendingRequests[xhrId];
        if (xhr.status === 0 && this.isHttp) {
          pendingRequest.onError(xhr.status);
          return;
        }
        const xhrStatus = xhr.status || OK_RESPONSE;
        const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;
        if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {
          pendingRequest.onError(xhr.status);
          return;
        }
        const chunk = network_getArrayBuffer(xhr);
        if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {
          const rangeHeader = xhr.getResponseHeader("Content-Range");
          const matches = /bytes (\d+)-(\d+)\/(\d+)/.exec(rangeHeader);
          if (matches) {
            pendingRequest.onDone({
              begin: parseInt(matches[1], 10),
              chunk
            });
          } else {
            warn(`Missing or invalid "Content-Range" header.`);
            pendingRequest.onError(0);
          }
        } else if (chunk) {
          pendingRequest.onDone({
            begin: 0,
            chunk
          });
        } else {
          pendingRequest.onError(xhr.status);
        }
      }
      getRequestXhr(xhrId) {
        return this.pendingRequests[xhrId].xhr;
      }
      isPendingRequest(xhrId) {
        return xhrId in this.pendingRequests;
      }
      abortRequest(xhrId) {
        const xhr = this.pendingRequests[xhrId].xhr;
        delete this.pendingRequests[xhrId];
        xhr.abort();
      }
    };
    PDFNetworkStream = class {
      constructor(source) {
        this._source = source;
        this._manager = new NetworkManager(source);
        this._rangeChunkSize = source.rangeChunkSize;
        this._fullRequestReader = null;
        this._rangeRequestReaders = [];
      }
      _onRangeRequestReaderClosed(reader) {
        const i = this._rangeRequestReaders.indexOf(reader);
        if (i >= 0) {
          this._rangeRequestReaders.splice(i, 1);
        }
      }
      getFullReader() {
        assert(!this._fullRequestReader, "PDFNetworkStream.getFullReader can only be called once.");
        this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);
        return this._fullRequestReader;
      }
      getRangeReader(begin, end2) {
        const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end2);
        reader.onClosed = this._onRangeRequestReaderClosed.bind(this);
        this._rangeRequestReaders.push(reader);
        return reader;
      }
      cancelAllRequests(reason) {
        this._fullRequestReader?.cancel(reason);
        for (const reader of this._rangeRequestReaders.slice(0)) {
          reader.cancel(reason);
        }
      }
    };
    PDFNetworkStreamFullRequestReader = class {
      constructor(manager, source) {
        this._manager = manager;
        this._url = source.url;
        this._fullRequestId = manager.request({
          onHeadersReceived: this._onHeadersReceived.bind(this),
          onDone: this._onDone.bind(this),
          onError: this._onError.bind(this),
          onProgress: this._onProgress.bind(this)
        });
        this._headersCapability = Promise.withResolvers();
        this._disableRange = source.disableRange || false;
        this._contentLength = source.length;
        this._rangeChunkSize = source.rangeChunkSize;
        if (!this._rangeChunkSize && !this._disableRange) {
          this._disableRange = true;
        }
        this._isStreamingSupported = false;
        this._isRangeSupported = false;
        this._cachedChunks = [];
        this._requests = [];
        this._done = false;
        this._storedError = void 0;
        this._filename = null;
        this.onProgress = null;
      }
      _onHeadersReceived() {
        const fullRequestXhrId = this._fullRequestId;
        const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);
        this._manager._responseOrigin = getResponseOrigin(fullRequestXhr.responseURL);
        const rawResponseHeaders = fullRequestXhr.getAllResponseHeaders();
        const responseHeaders = new Headers(rawResponseHeaders ? rawResponseHeaders.trimStart().replace(/[^\S ]+$/, "").split(/[\r\n]+/).map((x2) => {
          const [key, ...val2] = x2.split(": ");
          return [key, val2.join(": ")];
        }) : []);
        const {
          allowRangeRequests,
          suggestedLength
        } = validateRangeRequestCapabilities({
          responseHeaders,
          isHttp: this._manager.isHttp,
          rangeChunkSize: this._rangeChunkSize,
          disableRange: this._disableRange
        });
        if (allowRangeRequests) {
          this._isRangeSupported = true;
        }
        this._contentLength = suggestedLength || this._contentLength;
        this._filename = extractFilenameFromHeader(responseHeaders);
        if (this._isRangeSupported) {
          this._manager.abortRequest(fullRequestXhrId);
        }
        this._headersCapability.resolve();
      }
      _onDone(data2) {
        if (data2) {
          if (this._requests.length > 0) {
            const requestCapability = this._requests.shift();
            requestCapability.resolve({
              value: data2.chunk,
              done: false
            });
          } else {
            this._cachedChunks.push(data2.chunk);
          }
        }
        this._done = true;
        if (this._cachedChunks.length > 0) {
          return;
        }
        for (const requestCapability of this._requests) {
          requestCapability.resolve({
            value: void 0,
            done: true
          });
        }
        this._requests.length = 0;
      }
      _onError(status) {
        this._storedError = createResponseError(status, this._url);
        this._headersCapability.reject(this._storedError);
        for (const requestCapability of this._requests) {
          requestCapability.reject(this._storedError);
        }
        this._requests.length = 0;
        this._cachedChunks.length = 0;
      }
      _onProgress(evt) {
        this.onProgress?.({
          loaded: evt.loaded,
          total: evt.lengthComputable ? evt.total : this._contentLength
        });
      }
      get filename() {
        return this._filename;
      }
      get isRangeSupported() {
        return this._isRangeSupported;
      }
      get isStreamingSupported() {
        return this._isStreamingSupported;
      }
      get contentLength() {
        return this._contentLength;
      }
      get headersReady() {
        return this._headersCapability.promise;
      }
      async read() {
        await this._headersCapability.promise;
        if (this._storedError) {
          throw this._storedError;
        }
        if (this._cachedChunks.length > 0) {
          const chunk = this._cachedChunks.shift();
          return {
            value: chunk,
            done: false
          };
        }
        if (this._done) {
          return {
            value: void 0,
            done: true
          };
        }
        const requestCapability = Promise.withResolvers();
        this._requests.push(requestCapability);
        return requestCapability.promise;
      }
      cancel(reason) {
        this._done = true;
        this._headersCapability.reject(reason);
        for (const requestCapability of this._requests) {
          requestCapability.resolve({
            value: void 0,
            done: true
          });
        }
        this._requests.length = 0;
        if (this._manager.isPendingRequest(this._fullRequestId)) {
          this._manager.abortRequest(this._fullRequestId);
        }
        this._fullRequestReader = null;
      }
    };
    PDFNetworkStreamRangeRequestReader = class {
      constructor(manager, begin, end2) {
        this._manager = manager;
        this._url = manager.url;
        this._requestId = manager.request({
          begin,
          end: end2,
          onHeadersReceived: this._onHeadersReceived.bind(this),
          onDone: this._onDone.bind(this),
          onError: this._onError.bind(this),
          onProgress: this._onProgress.bind(this)
        });
        this._requests = [];
        this._queuedChunk = null;
        this._done = false;
        this._storedError = void 0;
        this.onProgress = null;
        this.onClosed = null;
      }
      _onHeadersReceived() {
        const responseOrigin = getResponseOrigin(this._manager.getRequestXhr(this._requestId)?.responseURL);
        if (responseOrigin !== this._manager._responseOrigin) {
          this._storedError = new Error(`Expected range response-origin "${responseOrigin}" to match "${this._manager._responseOrigin}".`);
          this._onError(0);
        }
      }
      _close() {
        this.onClosed?.(this);
      }
      _onDone(data2) {
        const chunk = data2.chunk;
        if (this._requests.length > 0) {
          const requestCapability = this._requests.shift();
          requestCapability.resolve({
            value: chunk,
            done: false
          });
        } else {
          this._queuedChunk = chunk;
        }
        this._done = true;
        for (const requestCapability of this._requests) {
          requestCapability.resolve({
            value: void 0,
            done: true
          });
        }
        this._requests.length = 0;
        this._close();
      }
      _onError(status) {
        this._storedError ??= createResponseError(status, this._url);
        for (const requestCapability of this._requests) {
          requestCapability.reject(this._storedError);
        }
        this._requests.length = 0;
        this._queuedChunk = null;
      }
      _onProgress(evt) {
        if (!this.isStreamingSupported) {
          this.onProgress?.({
            loaded: evt.loaded
          });
        }
      }
      get isStreamingSupported() {
        return false;
      }
      async read() {
        if (this._storedError) {
          throw this._storedError;
        }
        if (this._queuedChunk !== null) {
          const chunk = this._queuedChunk;
          this._queuedChunk = null;
          return {
            value: chunk,
            done: false
          };
        }
        if (this._done) {
          return {
            value: void 0,
            done: true
          };
        }
        const requestCapability = Promise.withResolvers();
        this._requests.push(requestCapability);
        return requestCapability.promise;
      }
      cancel(reason) {
        this._done = true;
        for (const requestCapability of this._requests) {
          requestCapability.resolve({
            value: void 0,
            done: true
          });
        }
        this._requests.length = 0;
        if (this._manager.isPendingRequest(this._requestId)) {
          this._manager.abortRequest(this._requestId);
        }
        this._close();
      }
    };
    urlRegex = /^[a-z][a-z0-9\-+.]+:/i;
    PDFNodeStream = class {
      constructor(source) {
        this.source = source;
        this.url = parseUrlOrPath(source.url);
        assert(this.url.protocol === "file:", "PDFNodeStream only supports file:// URLs.");
        this._fullRequestReader = null;
        this._rangeRequestReaders = [];
      }
      get _progressiveDataLength() {
        return this._fullRequestReader?._loaded ?? 0;
      }
      getFullReader() {
        assert(!this._fullRequestReader, "PDFNodeStream.getFullReader can only be called once.");
        this._fullRequestReader = new PDFNodeStreamFsFullReader(this);
        return this._fullRequestReader;
      }
      getRangeReader(start, end2) {
        if (end2 <= this._progressiveDataLength) {
          return null;
        }
        const rangeReader = new PDFNodeStreamFsRangeReader(this, start, end2);
        this._rangeRequestReaders.push(rangeReader);
        return rangeReader;
      }
      cancelAllRequests(reason) {
        this._fullRequestReader?.cancel(reason);
        for (const reader of this._rangeRequestReaders.slice(0)) {
          reader.cancel(reason);
        }
      }
    };
    PDFNodeStreamFsFullReader = class {
      constructor(stream) {
        this._url = stream.url;
        this._done = false;
        this._storedError = null;
        this.onProgress = null;
        const source = stream.source;
        this._contentLength = source.length;
        this._loaded = 0;
        this._filename = null;
        this._disableRange = source.disableRange || false;
        this._rangeChunkSize = source.rangeChunkSize;
        if (!this._rangeChunkSize && !this._disableRange) {
          this._disableRange = true;
        }
        this._isStreamingSupported = !source.disableStream;
        this._isRangeSupported = !source.disableRange;
        this._readableStream = null;
        this._readCapability = Promise.withResolvers();
        this._headersCapability = Promise.withResolvers();
        const fs = process.getBuiltinModule("fs");
        fs.promises.lstat(this._url).then((stat) => {
          this._contentLength = stat.size;
          this._setReadableStream(fs.createReadStream(this._url));
          this._headersCapability.resolve();
        }, (error) => {
          if (error.code === "ENOENT") {
            error = createResponseError(0, this._url.href);
          }
          this._storedError = error;
          this._headersCapability.reject(error);
        });
      }
      get headersReady() {
        return this._headersCapability.promise;
      }
      get filename() {
        return this._filename;
      }
      get contentLength() {
        return this._contentLength;
      }
      get isRangeSupported() {
        return this._isRangeSupported;
      }
      get isStreamingSupported() {
        return this._isStreamingSupported;
      }
      async read() {
        await this._readCapability.promise;
        if (this._done) {
          return {
            value: void 0,
            done: true
          };
        }
        if (this._storedError) {
          throw this._storedError;
        }
        const chunk = this._readableStream.read();
        if (chunk === null) {
          this._readCapability = Promise.withResolvers();
          return this.read();
        }
        this._loaded += chunk.length;
        this.onProgress?.({
          loaded: this._loaded,
          total: this._contentLength
        });
        const buffer = new Uint8Array(chunk).buffer;
        return {
          value: buffer,
          done: false
        };
      }
      cancel(reason) {
        if (!this._readableStream) {
          this._error(reason);
          return;
        }
        this._readableStream.destroy(reason);
      }
      _error(reason) {
        this._storedError = reason;
        this._readCapability.resolve();
      }
      _setReadableStream(readableStream) {
        this._readableStream = readableStream;
        readableStream.on("readable", () => {
          this._readCapability.resolve();
        });
        readableStream.on("end", () => {
          readableStream.destroy();
          this._done = true;
          this._readCapability.resolve();
        });
        readableStream.on("error", (reason) => {
          this._error(reason);
        });
        if (!this._isStreamingSupported && this._isRangeSupported) {
          this._error(new AbortException$1("streaming is disabled"));
        }
        if (this._storedError) {
          this._readableStream.destroy(this._storedError);
        }
      }
    };
    PDFNodeStreamFsRangeReader = class {
      constructor(stream, start, end2) {
        this._url = stream.url;
        this._done = false;
        this._storedError = null;
        this.onProgress = null;
        this._loaded = 0;
        this._readableStream = null;
        this._readCapability = Promise.withResolvers();
        const source = stream.source;
        this._isStreamingSupported = !source.disableStream;
        const fs = process.getBuiltinModule("fs");
        this._setReadableStream(fs.createReadStream(this._url, {
          start,
          end: end2 - 1
        }));
      }
      get isStreamingSupported() {
        return this._isStreamingSupported;
      }
      async read() {
        await this._readCapability.promise;
        if (this._done) {
          return {
            value: void 0,
            done: true
          };
        }
        if (this._storedError) {
          throw this._storedError;
        }
        const chunk = this._readableStream.read();
        if (chunk === null) {
          this._readCapability = Promise.withResolvers();
          return this.read();
        }
        this._loaded += chunk.length;
        this.onProgress?.({
          loaded: this._loaded
        });
        const buffer = new Uint8Array(chunk).buffer;
        return {
          value: buffer,
          done: false
        };
      }
      cancel(reason) {
        if (!this._readableStream) {
          this._error(reason);
          return;
        }
        this._readableStream.destroy(reason);
      }
      _error(reason) {
        this._storedError = reason;
        this._readCapability.resolve();
      }
      _setReadableStream(readableStream) {
        this._readableStream = readableStream;
        readableStream.on("readable", () => {
          this._readCapability.resolve();
        });
        readableStream.on("end", () => {
          readableStream.destroy();
          this._done = true;
          this._readCapability.resolve();
        });
        readableStream.on("error", (reason) => {
          this._error(reason);
        });
        if (this._storedError) {
          this._readableStream.destroy(this._storedError);
        }
      }
    };
    INITIAL_DATA = Symbol("INITIAL_DATA");
    PDFObjects = class {
      #objs = /* @__PURE__ */ Object.create(null);
      #ensureObj(objId) {
        return this.#objs[objId] ||= {
          ...Promise.withResolvers(),
          data: INITIAL_DATA
        };
      }
      get(objId, callback = null) {
        if (callback) {
          const obj2 = this.#ensureObj(objId);
          obj2.promise.then(() => callback(obj2.data));
          return null;
        }
        const obj = this.#objs[objId];
        if (!obj || obj.data === INITIAL_DATA) {
          throw new Error(`Requesting object that isn't resolved yet ${objId}.`);
        }
        return obj.data;
      }
      has(objId) {
        const obj = this.#objs[objId];
        return !!obj && obj.data !== INITIAL_DATA;
      }
      delete(objId) {
        const obj = this.#objs[objId];
        if (!obj || obj.data === INITIAL_DATA) {
          return false;
        }
        delete this.#objs[objId];
        return true;
      }
      resolve(objId, data2 = null) {
        const obj = this.#ensureObj(objId);
        obj.data = data2;
        obj.resolve();
      }
      clear() {
        for (const objId in this.#objs) {
          const {
            data: data2
          } = this.#objs[objId];
          data2?.bitmap?.close();
        }
        this.#objs = /* @__PURE__ */ Object.create(null);
      }
      *[Symbol.iterator]() {
        for (const objId in this.#objs) {
          const {
            data: data2
          } = this.#objs[objId];
          if (data2 === INITIAL_DATA) {
            continue;
          }
          yield [objId, data2];
        }
      }
    };
    MAX_TEXT_DIVS_TO_RENDER = 1e5;
    DEFAULT_FONT_SIZE = 30;
    TextLayer = class _TextLayer {
      #capability = Promise.withResolvers();
      #container = null;
      #disableProcessItems = false;
      #fontInspectorEnabled = !!globalThis.FontInspector?.enabled;
      #lang = null;
      #layoutTextParams = null;
      #pageHeight = 0;
      #pageWidth = 0;
      #reader = null;
      #rootContainer = null;
      #rotation = 0;
      #scale = 0;
      #styleCache = /* @__PURE__ */ Object.create(null);
      #textContentItemsStr = [];
      #textContentSource = null;
      #textDivs = [];
      #textDivProperties = /* @__PURE__ */ new WeakMap();
      #transform = null;
      static #ascentCache = /* @__PURE__ */ new Map();
      static #canvasContexts = /* @__PURE__ */ new Map();
      static #canvasCtxFonts = /* @__PURE__ */ new WeakMap();
      static #minFontSize = null;
      static #pendingTextLayers = /* @__PURE__ */ new Set();
      constructor({
        textContentSource,
        container,
        viewport
      }) {
        if (textContentSource instanceof ReadableStream) {
          this.#textContentSource = textContentSource;
        } else if (typeof textContentSource === "object") {
          this.#textContentSource = new ReadableStream({
            start(controller) {
              controller.enqueue(textContentSource);
              controller.close();
            }
          });
        } else {
          throw new Error('No "textContentSource" parameter specified.');
        }
        this.#container = this.#rootContainer = container;
        this.#scale = viewport.scale * OutputScale.pixelRatio;
        this.#rotation = viewport.rotation;
        this.#layoutTextParams = {
          div: null,
          properties: null,
          ctx: null
        };
        const {
          pageWidth,
          pageHeight,
          pageX,
          pageY
        } = viewport.rawDims;
        this.#transform = [1, 0, 0, -1, -pageX, pageY + pageHeight];
        this.#pageWidth = pageWidth;
        this.#pageHeight = pageHeight;
        _TextLayer.#ensureMinFontSizeComputed();
        setLayerDimensions(container, viewport);
        this.#capability.promise.finally(() => {
          _TextLayer.#pendingTextLayers.delete(this);
          this.#layoutTextParams = null;
          this.#styleCache = null;
        }).catch(() => {
        });
      }
      static get fontFamilyMap() {
        const {
          isWindows,
          isFirefox
        } = util_FeatureTest.platform;
        return shadow(this, "fontFamilyMap", /* @__PURE__ */ new Map([["sans-serif", `${isWindows && isFirefox ? "Calibri, " : ""}sans-serif`], ["monospace", `${isWindows && isFirefox ? "Lucida Console, " : ""}monospace`]]));
      }
      render() {
        const pump = () => {
          this.#reader.read().then(({
            value,
            done
          }) => {
            if (done) {
              this.#capability.resolve();
              return;
            }
            this.#lang ??= value.lang;
            Object.assign(this.#styleCache, value.styles);
            this.#processItems(value.items);
            pump();
          }, this.#capability.reject);
        };
        this.#reader = this.#textContentSource.getReader();
        _TextLayer.#pendingTextLayers.add(this);
        pump();
        return this.#capability.promise;
      }
      update({
        viewport,
        onBefore = null
      }) {
        const scale = viewport.scale * OutputScale.pixelRatio;
        const rotation = viewport.rotation;
        if (rotation !== this.#rotation) {
          onBefore?.();
          this.#rotation = rotation;
          setLayerDimensions(this.#rootContainer, {
            rotation
          });
        }
        if (scale !== this.#scale) {
          onBefore?.();
          this.#scale = scale;
          const params = {
            div: null,
            properties: null,
            ctx: _TextLayer.#getCtx(this.#lang)
          };
          for (const div of this.#textDivs) {
            params.properties = this.#textDivProperties.get(div);
            params.div = div;
            this.#layout(params);
          }
        }
      }
      cancel() {
        const abortEx = new AbortException$1("TextLayer task cancelled.");
        this.#reader?.cancel(abortEx).catch(() => {
        });
        this.#reader = null;
        this.#capability.reject(abortEx);
      }
      get textDivs() {
        return this.#textDivs;
      }
      get textContentItemsStr() {
        return this.#textContentItemsStr;
      }
      #processItems(items) {
        if (this.#disableProcessItems) {
          return;
        }
        this.#layoutTextParams.ctx ??= _TextLayer.#getCtx(this.#lang);
        const textDivs = this.#textDivs, textContentItemsStr = this.#textContentItemsStr;
        for (const item of items) {
          if (textDivs.length > MAX_TEXT_DIVS_TO_RENDER) {
            warn("Ignoring additional textDivs for performance reasons.");
            this.#disableProcessItems = true;
            return;
          }
          if (item.str === void 0) {
            if (item.type === "beginMarkedContentProps" || item.type === "beginMarkedContent") {
              const parent2 = this.#container;
              this.#container = document.createElement("span");
              this.#container.classList.add("markedContent");
              if (item.id) {
                this.#container.setAttribute("id", `${item.id}`);
              }
              parent2.append(this.#container);
            } else if (item.type === "endMarkedContent") {
              this.#container = this.#container.parentNode;
            }
            continue;
          }
          textContentItemsStr.push(item.str);
          this.#appendText(item);
        }
      }
      #appendText(geom) {
        const textDiv = document.createElement("span");
        const textDivProperties = {
          angle: 0,
          canvasWidth: 0,
          hasText: geom.str !== "",
          hasEOL: geom.hasEOL,
          fontSize: 0
        };
        this.#textDivs.push(textDiv);
        const tx = Util.transform(this.#transform, geom.transform);
        let angle = Math.atan2(tx[1], tx[0]);
        const style = this.#styleCache[geom.fontName];
        if (style.vertical) {
          angle += Math.PI / 2;
        }
        let fontFamily = this.#fontInspectorEnabled && style.fontSubstitution || style.fontFamily;
        fontFamily = _TextLayer.fontFamilyMap.get(fontFamily) || fontFamily;
        const fontHeight = Math.hypot(tx[2], tx[3]);
        const fontAscent = fontHeight * _TextLayer.#getAscent(fontFamily, style, this.#lang);
        let left, top;
        if (angle === 0) {
          left = tx[4];
          top = tx[5] - fontAscent;
        } else {
          left = tx[4] + fontAscent * Math.sin(angle);
          top = tx[5] - fontAscent * Math.cos(angle);
        }
        const scaleFactorStr = "calc(var(--total-scale-factor) *";
        const divStyle = textDiv.style;
        if (this.#container === this.#rootContainer) {
          divStyle.left = `${(100 * left / this.#pageWidth).toFixed(2)}%`;
          divStyle.top = `${(100 * top / this.#pageHeight).toFixed(2)}%`;
        } else {
          divStyle.left = `${scaleFactorStr}${left.toFixed(2)}px)`;
          divStyle.top = `${scaleFactorStr}${top.toFixed(2)}px)`;
        }
        divStyle.fontSize = `${scaleFactorStr}${(_TextLayer.#minFontSize * fontHeight).toFixed(2)}px)`;
        divStyle.fontFamily = fontFamily;
        textDivProperties.fontSize = fontHeight;
        textDiv.setAttribute("role", "presentation");
        textDiv.textContent = geom.str;
        textDiv.dir = geom.dir;
        if (this.#fontInspectorEnabled) {
          textDiv.dataset.fontName = style.fontSubstitutionLoadedName || geom.fontName;
        }
        if (angle !== 0) {
          textDivProperties.angle = angle * (180 / Math.PI);
        }
        let shouldScaleText = false;
        if (geom.str.length > 1) {
          shouldScaleText = true;
        } else if (geom.str !== " " && geom.transform[0] !== geom.transform[3]) {
          const absScaleX = Math.abs(geom.transform[0]), absScaleY = Math.abs(geom.transform[3]);
          if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {
            shouldScaleText = true;
          }
        }
        if (shouldScaleText) {
          textDivProperties.canvasWidth = style.vertical ? geom.height : geom.width;
        }
        this.#textDivProperties.set(textDiv, textDivProperties);
        this.#layoutTextParams.div = textDiv;
        this.#layoutTextParams.properties = textDivProperties;
        this.#layout(this.#layoutTextParams);
        if (textDivProperties.hasText) {
          this.#container.append(textDiv);
        }
        if (textDivProperties.hasEOL) {
          const br = document.createElement("br");
          br.setAttribute("role", "presentation");
          this.#container.append(br);
        }
      }
      #layout(params) {
        const {
          div,
          properties,
          ctx
        } = params;
        const {
          style
        } = div;
        let transform = "";
        if (_TextLayer.#minFontSize > 1) {
          transform = `scale(${1 / _TextLayer.#minFontSize})`;
        }
        if (properties.canvasWidth !== 0 && properties.hasText) {
          const {
            fontFamily
          } = style;
          const {
            canvasWidth,
            fontSize
          } = properties;
          _TextLayer.#ensureCtxFont(ctx, fontSize * this.#scale, fontFamily);
          const {
            width
          } = ctx.measureText(div.textContent);
          if (width > 0) {
            transform = `scaleX(${canvasWidth * this.#scale / width}) ${transform}`;
          }
        }
        if (properties.angle !== 0) {
          transform = `rotate(${properties.angle}deg) ${transform}`;
        }
        if (transform.length > 0) {
          style.transform = transform;
        }
      }
      static cleanup() {
        if (this.#pendingTextLayers.size > 0) {
          return;
        }
        this.#ascentCache.clear();
        for (const {
          canvas
        } of this.#canvasContexts.values()) {
          canvas.remove();
        }
        this.#canvasContexts.clear();
      }
      static #getCtx(lang = null) {
        let ctx = this.#canvasContexts.get(lang ||= "");
        if (!ctx) {
          const canvas = document.createElement("canvas");
          canvas.className = "hiddenCanvasElement";
          canvas.lang = lang;
          document.body.append(canvas);
          ctx = canvas.getContext("2d", {
            alpha: false,
            willReadFrequently: true
          });
          this.#canvasContexts.set(lang, ctx);
          this.#canvasCtxFonts.set(ctx, {
            size: 0,
            family: ""
          });
        }
        return ctx;
      }
      static #ensureCtxFont(ctx, size, family) {
        const cached = this.#canvasCtxFonts.get(ctx);
        if (size === cached.size && family === cached.family) {
          return;
        }
        ctx.font = `${size}px ${family}`;
        cached.size = size;
        cached.family = family;
      }
      static #ensureMinFontSizeComputed() {
        if (this.#minFontSize !== null) {
          return;
        }
        const div = document.createElement("div");
        div.style.opacity = 0;
        div.style.lineHeight = 1;
        div.style.fontSize = "1px";
        div.style.position = "absolute";
        div.textContent = "X";
        document.body.append(div);
        this.#minFontSize = div.getBoundingClientRect().height;
        div.remove();
      }
      static #getAscent(fontFamily, style, lang) {
        const cachedAscent = this.#ascentCache.get(fontFamily);
        if (cachedAscent) {
          return cachedAscent;
        }
        const ctx = this.#getCtx(lang);
        ctx.canvas.width = ctx.canvas.height = DEFAULT_FONT_SIZE;
        this.#ensureCtxFont(ctx, DEFAULT_FONT_SIZE, fontFamily);
        const metrics = ctx.measureText("");
        const ascent = metrics.fontBoundingBoxAscent;
        const descent = Math.abs(metrics.fontBoundingBoxDescent);
        ctx.canvas.width = ctx.canvas.height = 0;
        let ratio = 0.8;
        if (ascent) {
          ratio = ascent / (ascent + descent);
        } else {
          if (util_FeatureTest.platform.isFirefox) {
            warn("Enable the `dom.textMetrics.fontBoundingBox.enabled` preference in `about:config` to improve TextLayer rendering.");
          }
          if (style.ascent) {
            ratio = style.ascent;
          } else if (style.descent) {
            ratio = 1 + style.descent;
          }
        }
        this.#ascentCache.set(fontFamily, ratio);
        return ratio;
      }
    };
    RENDERING_CANCELLED_TIMEOUT = 100;
    PDFDocumentLoadingTask = class _PDFDocumentLoadingTask {
      static #docId = 0;
      _capability = Promise.withResolvers();
      _transport = null;
      _worker = null;
      docId = `d${_PDFDocumentLoadingTask.#docId++}`;
      destroyed = false;
      onPassword = null;
      onProgress = null;
      get promise() {
        return this._capability.promise;
      }
      async destroy() {
        this.destroyed = true;
        try {
          if (this._worker?.port) {
            this._worker._pendingDestroy = true;
          }
          await this._transport?.destroy();
        } catch (ex) {
          if (this._worker?.port) {
            delete this._worker._pendingDestroy;
          }
          throw ex;
        }
        this._transport = null;
        this._worker?.destroy();
        this._worker = null;
      }
      async getData() {
        return this._transport.getData();
      }
    };
    PDFDataRangeTransport = class {
      #capability = Promise.withResolvers();
      #progressiveDoneListeners = [];
      #progressiveReadListeners = [];
      #progressListeners = [];
      #rangeListeners = [];
      constructor(length, initialData, progressiveDone = false, contentDispositionFilename = null) {
        this.length = length;
        this.initialData = initialData;
        this.progressiveDone = progressiveDone;
        this.contentDispositionFilename = contentDispositionFilename;
      }
      addRangeListener(listener) {
        this.#rangeListeners.push(listener);
      }
      addProgressListener(listener) {
        this.#progressListeners.push(listener);
      }
      addProgressiveReadListener(listener) {
        this.#progressiveReadListeners.push(listener);
      }
      addProgressiveDoneListener(listener) {
        this.#progressiveDoneListeners.push(listener);
      }
      onDataRange(begin, chunk) {
        for (const listener of this.#rangeListeners) {
          listener(begin, chunk);
        }
      }
      onDataProgress(loaded, total) {
        this.#capability.promise.then(() => {
          for (const listener of this.#progressListeners) {
            listener(loaded, total);
          }
        });
      }
      onDataProgressiveRead(chunk) {
        this.#capability.promise.then(() => {
          for (const listener of this.#progressiveReadListeners) {
            listener(chunk);
          }
        });
      }
      onDataProgressiveDone() {
        this.#capability.promise.then(() => {
          for (const listener of this.#progressiveDoneListeners) {
            listener();
          }
        });
      }
      transportReady() {
        this.#capability.resolve();
      }
      requestDataRange(begin, end2) {
        unreachable("Abstract method PDFDataRangeTransport.requestDataRange");
      }
      abort() {
      }
    };
    PDFDocumentProxy = class {
      constructor(pdfInfo, transport) {
        this._pdfInfo = pdfInfo;
        this._transport = transport;
      }
      get annotationStorage() {
        return this._transport.annotationStorage;
      }
      get canvasFactory() {
        return this._transport.canvasFactory;
      }
      get filterFactory() {
        return this._transport.filterFactory;
      }
      get numPages() {
        return this._pdfInfo.numPages;
      }
      get fingerprints() {
        return this._pdfInfo.fingerprints;
      }
      get isPureXfa() {
        return shadow(this, "isPureXfa", !!this._transport._htmlForXfa);
      }
      get allXfaHtml() {
        return this._transport._htmlForXfa;
      }
      getPage(pageNumber) {
        return this._transport.getPage(pageNumber);
      }
      getPageIndex(ref) {
        return this._transport.getPageIndex(ref);
      }
      getDestinations() {
        return this._transport.getDestinations();
      }
      getDestination(id) {
        return this._transport.getDestination(id);
      }
      getPageLabels() {
        return this._transport.getPageLabels();
      }
      getPageLayout() {
        return this._transport.getPageLayout();
      }
      getPageMode() {
        return this._transport.getPageMode();
      }
      getViewerPreferences() {
        return this._transport.getViewerPreferences();
      }
      getOpenAction() {
        return this._transport.getOpenAction();
      }
      getAttachments() {
        return this._transport.getAttachments();
      }
      getAnnotationsByType(types, pageIndexesToSkip) {
        return this._transport.getAnnotationsByType(types, pageIndexesToSkip);
      }
      getJSActions() {
        return this._transport.getDocJSActions();
      }
      getOutline() {
        return this._transport.getOutline();
      }
      getOptionalContentConfig({
        intent = "display"
      } = {}) {
        const {
          renderingIntent
        } = this._transport.getRenderingIntent(intent);
        return this._transport.getOptionalContentConfig(renderingIntent);
      }
      getPermissions() {
        return this._transport.getPermissions();
      }
      getMetadata() {
        return this._transport.getMetadata();
      }
      getMarkInfo() {
        return this._transport.getMarkInfo();
      }
      getData() {
        return this._transport.getData();
      }
      saveDocument() {
        return this._transport.saveDocument();
      }
      getDownloadInfo() {
        return this._transport.downloadInfoCapability.promise;
      }
      cleanup(keepLoadedFonts = false) {
        return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);
      }
      destroy() {
        return this.loadingTask.destroy();
      }
      cachedPageNumber(ref) {
        return this._transport.cachedPageNumber(ref);
      }
      get loadingParams() {
        return this._transport.loadingParams;
      }
      get loadingTask() {
        return this._transport.loadingTask;
      }
      getFieldObjects() {
        return this._transport.getFieldObjects();
      }
      hasJSActions() {
        return this._transport.hasJSActions();
      }
      getCalculationOrderIds() {
        return this._transport.getCalculationOrderIds();
      }
    };
    PDFPageProxy = class {
      #pendingCleanup = false;
      constructor(pageIndex, pageInfo, transport, pdfBug = false) {
        this._pageIndex = pageIndex;
        this._pageInfo = pageInfo;
        this._transport = transport;
        this._stats = pdfBug ? new StatTimer() : null;
        this._pdfBug = pdfBug;
        this.commonObjs = transport.commonObjs;
        this.objs = new PDFObjects();
        this._intentStates = /* @__PURE__ */ new Map();
        this.destroyed = false;
        this.recordedBBoxes = null;
      }
      get pageNumber() {
        return this._pageIndex + 1;
      }
      get rotate() {
        return this._pageInfo.rotate;
      }
      get ref() {
        return this._pageInfo.ref;
      }
      get userUnit() {
        return this._pageInfo.userUnit;
      }
      get view() {
        return this._pageInfo.view;
      }
      getViewport({
        scale,
        rotation = this.rotate,
        offsetX = 0,
        offsetY = 0,
        dontFlip = false
      } = {}) {
        return new PageViewport({
          viewBox: this.view,
          userUnit: this.userUnit,
          scale,
          rotation,
          offsetX,
          offsetY,
          dontFlip
        });
      }
      getAnnotations({
        intent = "display"
      } = {}) {
        const {
          renderingIntent
        } = this._transport.getRenderingIntent(intent);
        return this._transport.getAnnotations(this._pageIndex, renderingIntent);
      }
      getJSActions() {
        return this._transport.getPageJSActions(this._pageIndex);
      }
      get filterFactory() {
        return this._transport.filterFactory;
      }
      get isPureXfa() {
        return shadow(this, "isPureXfa", !!this._transport._htmlForXfa);
      }
      async getXfa() {
        return this._transport._htmlForXfa?.children[this._pageIndex] || null;
      }
      render({
        canvasContext,
        canvas = canvasContext.canvas,
        viewport,
        intent = "display",
        annotationMode = AnnotationMode.ENABLE,
        transform = null,
        background = null,
        optionalContentConfigPromise = null,
        annotationCanvasMap = null,
        pageColors = null,
        printAnnotationStorage = null,
        isEditing = false,
        recordOperations = false,
        operationsFilter = null
      }) {
        this._stats?.time("Overall");
        const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage, isEditing);
        const {
          renderingIntent,
          cacheKey
        } = intentArgs;
        this.#pendingCleanup = false;
        optionalContentConfigPromise ||= this._transport.getOptionalContentConfig(renderingIntent);
        let intentState = this._intentStates.get(cacheKey);
        if (!intentState) {
          intentState = /* @__PURE__ */ Object.create(null);
          this._intentStates.set(cacheKey, intentState);
        }
        if (intentState.streamReaderCancelTimeout) {
          clearTimeout(intentState.streamReaderCancelTimeout);
          intentState.streamReaderCancelTimeout = null;
        }
        const intentPrint = !!(renderingIntent & RenderingIntentFlag.PRINT);
        if (!intentState.displayReadyCapability) {
          intentState.displayReadyCapability = Promise.withResolvers();
          intentState.operatorList = {
            fnArray: [],
            argsArray: [],
            lastChunk: false,
            separateAnnots: null
          };
          this._stats?.time("Page Request");
          this._pumpOperatorList(intentArgs);
        }
        const recordForDebugger = Boolean(this._pdfBug && globalThis.StepperManager?.enabled);
        const shouldRecordOperations = !this.recordedBBoxes && (recordOperations || recordForDebugger);
        const complete = (error) => {
          intentState.renderTasks.delete(internalRenderTask);
          if (shouldRecordOperations) {
            const recordedBBoxes = internalRenderTask.gfx?.dependencyTracker.take();
            if (recordedBBoxes) {
              if (internalRenderTask.stepper) {
                internalRenderTask.stepper.setOperatorBBoxes(recordedBBoxes, internalRenderTask.gfx.dependencyTracker.takeDebugMetadata());
              }
              if (recordOperations) {
                this.recordedBBoxes = recordedBBoxes;
              }
            }
          }
          if (intentPrint) {
            this.#pendingCleanup = true;
          }
          this.#tryCleanup();
          if (error) {
            internalRenderTask.capability.reject(error);
            this._abortOperatorList({
              intentState,
              reason: error instanceof Error ? error : new Error(error)
            });
          } else {
            internalRenderTask.capability.resolve();
          }
          if (this._stats) {
            this._stats.timeEnd("Rendering");
            this._stats.timeEnd("Overall");
            if (globalThis.Stats?.enabled) {
              globalThis.Stats.add(this.pageNumber, this._stats);
            }
          }
        };
        const internalRenderTask = new InternalRenderTask({
          callback: complete,
          params: {
            canvas,
            canvasContext,
            dependencyTracker: shouldRecordOperations ? new CanvasDependencyTracker(canvas, intentState.operatorList.length, recordForDebugger) : null,
            viewport,
            transform,
            background
          },
          objs: this.objs,
          commonObjs: this.commonObjs,
          annotationCanvasMap,
          operatorList: intentState.operatorList,
          pageIndex: this._pageIndex,
          canvasFactory: this._transport.canvasFactory,
          filterFactory: this._transport.filterFactory,
          useRequestAnimationFrame: !intentPrint,
          pdfBug: this._pdfBug,
          pageColors,
          enableHWA: this._transport.enableHWA,
          operationsFilter
        });
        (intentState.renderTasks ||= /* @__PURE__ */ new Set()).add(internalRenderTask);
        const renderTask = internalRenderTask.task;
        Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(([transparency, optionalContentConfig]) => {
          if (this.destroyed) {
            complete();
            return;
          }
          this._stats?.time("Rendering");
          if (!(optionalContentConfig.renderingIntent & renderingIntent)) {
            throw new Error("Must use the same `intent`-argument when calling the `PDFPageProxy.render` and `PDFDocumentProxy.getOptionalContentConfig` methods.");
          }
          internalRenderTask.initializeGraphics({
            transparency,
            optionalContentConfig
          });
          internalRenderTask.operatorListChanged();
        }).catch(complete);
        return renderTask;
      }
      getOperatorList({
        intent = "display",
        annotationMode = AnnotationMode.ENABLE,
        printAnnotationStorage = null,
        isEditing = false
      } = {}) {
        function operatorListChanged() {
          if (intentState.operatorList.lastChunk) {
            intentState.opListReadCapability.resolve(intentState.operatorList);
            intentState.renderTasks.delete(opListTask);
          }
        }
        const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage, isEditing, true);
        let intentState = this._intentStates.get(intentArgs.cacheKey);
        if (!intentState) {
          intentState = /* @__PURE__ */ Object.create(null);
          this._intentStates.set(intentArgs.cacheKey, intentState);
        }
        let opListTask;
        if (!intentState.opListReadCapability) {
          opListTask = /* @__PURE__ */ Object.create(null);
          opListTask.operatorListChanged = operatorListChanged;
          intentState.opListReadCapability = Promise.withResolvers();
          (intentState.renderTasks ||= /* @__PURE__ */ new Set()).add(opListTask);
          intentState.operatorList = {
            fnArray: [],
            argsArray: [],
            lastChunk: false,
            separateAnnots: null
          };
          this._stats?.time("Page Request");
          this._pumpOperatorList(intentArgs);
        }
        return intentState.opListReadCapability.promise;
      }
      streamTextContent({
        includeMarkedContent = false,
        disableNormalization = false
      } = {}) {
        const TEXT_CONTENT_CHUNK_SIZE = 100;
        return this._transport.messageHandler.sendWithStream("GetTextContent", {
          pageIndex: this._pageIndex,
          includeMarkedContent: includeMarkedContent === true,
          disableNormalization: disableNormalization === true
        }, {
          highWaterMark: TEXT_CONTENT_CHUNK_SIZE,
          size(textContent2) {
            return textContent2.items.length;
          }
        });
      }
      getTextContent(params = {}) {
        if (this._transport._htmlForXfa) {
          return this.getXfa().then((xfa) => XfaText.textContent(xfa));
        }
        const readableStream = this.streamTextContent(params);
        return new Promise(function(resolve, reject) {
          function pump() {
            reader.read().then(function({
              value,
              done
            }) {
              if (done) {
                resolve(textContent2);
                return;
              }
              textContent2.lang ??= value.lang;
              Object.assign(textContent2.styles, value.styles);
              textContent2.items.push(...value.items);
              pump();
            }, reject);
          }
          const reader = readableStream.getReader();
          const textContent2 = {
            items: [],
            styles: /* @__PURE__ */ Object.create(null),
            lang: null
          };
          pump();
        });
      }
      getStructTree() {
        return this._transport.getStructTree(this._pageIndex);
      }
      _destroy() {
        this.destroyed = true;
        const waitOn = [];
        for (const intentState of this._intentStates.values()) {
          this._abortOperatorList({
            intentState,
            reason: new Error("Page was destroyed."),
            force: true
          });
          if (intentState.opListReadCapability) {
            continue;
          }
          for (const internalRenderTask of intentState.renderTasks) {
            waitOn.push(internalRenderTask.completed);
            internalRenderTask.cancel();
          }
        }
        this.objs.clear();
        this.#pendingCleanup = false;
        return Promise.all(waitOn);
      }
      cleanup(resetStats = false) {
        this.#pendingCleanup = true;
        const success = this.#tryCleanup();
        if (resetStats && success) {
          this._stats &&= new StatTimer();
        }
        return success;
      }
      #tryCleanup() {
        if (!this.#pendingCleanup || this.destroyed) {
          return false;
        }
        for (const {
          renderTasks,
          operatorList
        } of this._intentStates.values()) {
          if (renderTasks.size > 0 || !operatorList.lastChunk) {
            return false;
          }
        }
        this._intentStates.clear();
        this.objs.clear();
        this.#pendingCleanup = false;
        return true;
      }
      _startRenderPage(transparency, cacheKey) {
        const intentState = this._intentStates.get(cacheKey);
        if (!intentState) {
          return;
        }
        this._stats?.timeEnd("Page Request");
        intentState.displayReadyCapability?.resolve(transparency);
      }
      _renderPageChunk(operatorListChunk, intentState) {
        for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {
          intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);
          intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);
        }
        intentState.operatorList.lastChunk = operatorListChunk.lastChunk;
        intentState.operatorList.separateAnnots = operatorListChunk.separateAnnots;
        for (const internalRenderTask of intentState.renderTasks) {
          internalRenderTask.operatorListChanged();
        }
        if (operatorListChunk.lastChunk) {
          this.#tryCleanup();
        }
      }
      _pumpOperatorList({
        renderingIntent,
        cacheKey,
        annotationStorageSerializable,
        modifiedIds
      }) {
        const {
          map: map2,
          transfer
        } = annotationStorageSerializable;
        const readableStream = this._transport.messageHandler.sendWithStream("GetOperatorList", {
          pageIndex: this._pageIndex,
          intent: renderingIntent,
          cacheKey,
          annotationStorage: map2,
          modifiedIds
        }, transfer);
        const reader = readableStream.getReader();
        const intentState = this._intentStates.get(cacheKey);
        intentState.streamReader = reader;
        const pump = () => {
          reader.read().then(({
            value,
            done
          }) => {
            if (done) {
              intentState.streamReader = null;
              return;
            }
            if (this._transport.destroyed) {
              return;
            }
            this._renderPageChunk(value, intentState);
            pump();
          }, (reason) => {
            intentState.streamReader = null;
            if (this._transport.destroyed) {
              return;
            }
            if (intentState.operatorList) {
              intentState.operatorList.lastChunk = true;
              for (const internalRenderTask of intentState.renderTasks) {
                internalRenderTask.operatorListChanged();
              }
              this.#tryCleanup();
            }
            if (intentState.displayReadyCapability) {
              intentState.displayReadyCapability.reject(reason);
            } else if (intentState.opListReadCapability) {
              intentState.opListReadCapability.reject(reason);
            } else {
              throw reason;
            }
          });
        };
        pump();
      }
      _abortOperatorList({
        intentState,
        reason,
        force = false
      }) {
        if (!intentState.streamReader) {
          return;
        }
        if (intentState.streamReaderCancelTimeout) {
          clearTimeout(intentState.streamReaderCancelTimeout);
          intentState.streamReaderCancelTimeout = null;
        }
        if (!force) {
          if (intentState.renderTasks.size > 0) {
            return;
          }
          if (reason instanceof RenderingCancelledException) {
            let delay = RENDERING_CANCELLED_TIMEOUT;
            if (reason.extraDelay > 0 && reason.extraDelay < 1e3) {
              delay += reason.extraDelay;
            }
            intentState.streamReaderCancelTimeout = setTimeout(() => {
              intentState.streamReaderCancelTimeout = null;
              this._abortOperatorList({
                intentState,
                reason,
                force: true
              });
            }, delay);
            return;
          }
        }
        intentState.streamReader.cancel(new AbortException$1(reason.message)).catch(() => {
        });
        intentState.streamReader = null;
        if (this._transport.destroyed) {
          return;
        }
        for (const [curCacheKey, curIntentState] of this._intentStates) {
          if (curIntentState === intentState) {
            this._intentStates.delete(curCacheKey);
            break;
          }
        }
        this.cleanup();
      }
      get stats() {
        return this._stats;
      }
    };
    _PDFWorker = class _PDFWorker2 {
      constructor({
        name = null,
        port = null,
        verbosity: verbosity2 = getVerbosityLevel()
      } = {}) {
        __privateAdd(this, _PDFWorker_instances);
        __privateAdd(this, _capability, Promise.withResolvers());
        __privateAdd(this, _messageHandler, null);
        __privateAdd(this, _port, null);
        __privateAdd(this, _webWorker, null);
        this.name = name;
        this.destroyed = false;
        this.verbosity = verbosity2;
        if (port) {
          if (__privateGet(_PDFWorker2, _workerPorts).has(port)) {
            throw new Error("Cannot use more than one PDFWorker per port.");
          }
          __privateGet(_PDFWorker2, _workerPorts).set(port, this);
          __privateMethod(this, _PDFWorker_instances, initializeFromPort_fn).call(this, port);
        } else {
          __privateMethod(this, _PDFWorker_instances, initialize_fn).call(this);
        }
      }
      get promise() {
        return __privateGet(this, _capability).promise;
      }
      get port() {
        return __privateGet(this, _port);
      }
      get messageHandler() {
        return __privateGet(this, _messageHandler);
      }
      destroy() {
        this.destroyed = true;
        __privateGet(this, _webWorker)?.terminate();
        __privateSet(this, _webWorker, null);
        __privateGet(_PDFWorker2, _workerPorts).delete(__privateGet(this, _port));
        __privateSet(this, _port, null);
        __privateGet(this, _messageHandler)?.destroy();
        __privateSet(this, _messageHandler, null);
      }
      static create(params) {
        const cachedPort = __privateGet(this, _workerPorts).get(params?.port);
        if (cachedPort) {
          if (cachedPort._pendingDestroy) {
            throw new Error("PDFWorker.create - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");
          }
          return cachedPort;
        }
        return new _PDFWorker2(params);
      }
      static get workerSrc() {
        if (GlobalWorkerOptions.workerSrc) {
          return GlobalWorkerOptions.workerSrc;
        }
        throw new Error('No "GlobalWorkerOptions.workerSrc" specified.');
      }
      static get _setupFakeWorkerGlobal() {
        const loader = async () => {
          if (__privateGet(this, _PDFWorker_static, mainThreadWorkerMessageHandler_get)) {
            return __privateGet(this, _PDFWorker_static, mainThreadWorkerMessageHandler_get);
          }
          const worker = await import(
            /*webpackIgnore: true*/
            /*@vite-ignore*/
            this.workerSrc
          );
          return worker.WorkerMessageHandler;
        };
        return shadow(this, "_setupFakeWorkerGlobal", loader());
      }
    };
    _capability = /* @__PURE__ */ new WeakMap();
    _messageHandler = /* @__PURE__ */ new WeakMap();
    _port = /* @__PURE__ */ new WeakMap();
    _webWorker = /* @__PURE__ */ new WeakMap();
    _fakeWorkerId = /* @__PURE__ */ new WeakMap();
    _isWorkerDisabled = /* @__PURE__ */ new WeakMap();
    _workerPorts = /* @__PURE__ */ new WeakMap();
    _PDFWorker_instances = /* @__PURE__ */ new WeakSet();
    resolve_fn = function() {
      __privateGet(this, _capability).resolve();
      __privateGet(this, _messageHandler).send("configure", {
        verbosity: this.verbosity
      });
    };
    initializeFromPort_fn = function(port) {
      __privateSet(this, _port, port);
      __privateSet(this, _messageHandler, new MessageHandler("main", "worker", port));
      __privateGet(this, _messageHandler).on("ready", () => {
      });
      __privateMethod(this, _PDFWorker_instances, resolve_fn).call(this);
    };
    initialize_fn = function() {
      if (__privateGet(_PDFWorker, _isWorkerDisabled) || __privateGet(_PDFWorker, _PDFWorker_static, mainThreadWorkerMessageHandler_get)) {
        __privateMethod(this, _PDFWorker_instances, setupFakeWorker_fn).call(this);
        return;
      }
      let {
        workerSrc
      } = _PDFWorker;
      try {
        if (!_PDFWorker._isSameOrigin(window.location, workerSrc)) {
          workerSrc = _PDFWorker._createCDNWrapper(new URL(workerSrc, window.location).href);
        }
        const worker = new Worker(workerSrc, {
          type: "module"
        });
        const messageHandler = new MessageHandler("main", "worker", worker);
        const terminateEarly = () => {
          ac.abort();
          messageHandler.destroy();
          worker.terminate();
          if (this.destroyed) {
            __privateGet(this, _capability).reject(new Error("Worker was destroyed"));
          } else {
            __privateMethod(this, _PDFWorker_instances, setupFakeWorker_fn).call(this);
          }
        };
        const ac = new AbortController();
        worker.addEventListener("error", () => {
          if (!__privateGet(this, _webWorker)) {
            terminateEarly();
          }
        }, {
          signal: ac.signal
        });
        messageHandler.on("test", (data2) => {
          ac.abort();
          if (this.destroyed || !data2) {
            terminateEarly();
            return;
          }
          __privateSet(this, _messageHandler, messageHandler);
          __privateSet(this, _port, worker);
          __privateSet(this, _webWorker, worker);
          __privateMethod(this, _PDFWorker_instances, resolve_fn).call(this);
        });
        messageHandler.on("ready", (data2) => {
          ac.abort();
          if (this.destroyed) {
            terminateEarly();
            return;
          }
          try {
            sendTest();
          } catch {
            __privateMethod(this, _PDFWorker_instances, setupFakeWorker_fn).call(this);
          }
        });
        const sendTest = () => {
          const testObj = new Uint8Array();
          messageHandler.send("test", testObj, [testObj.buffer]);
        };
        sendTest();
        return;
      } catch {
        info("The worker has been disabled.");
      }
      __privateMethod(this, _PDFWorker_instances, setupFakeWorker_fn).call(this);
    };
    setupFakeWorker_fn = function() {
      if (!__privateGet(_PDFWorker, _isWorkerDisabled)) {
        warn("Setting up fake worker.");
        __privateSet(_PDFWorker, _isWorkerDisabled, true);
      }
      _PDFWorker._setupFakeWorkerGlobal.then((WorkerMessageHandler) => {
        if (this.destroyed) {
          __privateGet(this, _capability).reject(new Error("Worker was destroyed"));
          return;
        }
        const port = new LoopbackPort();
        __privateSet(this, _port, port);
        const id = `fake${__privateWrapper(_PDFWorker, _fakeWorkerId)._++}`;
        const workerHandler = new MessageHandler(id + "_worker", id, port);
        WorkerMessageHandler.setup(workerHandler, port);
        __privateSet(this, _messageHandler, new MessageHandler(id, id + "_worker", port));
        __privateMethod(this, _PDFWorker_instances, resolve_fn).call(this);
      }).catch((reason) => {
        __privateGet(this, _capability).reject(new Error(`Setting up fake worker failed: "${reason.message}".`));
      });
    };
    _PDFWorker_static = /* @__PURE__ */ new WeakSet();
    mainThreadWorkerMessageHandler_get = function() {
      try {
        return globalThis.pdfjsWorker?.WorkerMessageHandler || null;
      } catch {
        return null;
      }
    };
    __privateAdd(_PDFWorker, _PDFWorker_static);
    __privateAdd(_PDFWorker, _fakeWorkerId, 0);
    __privateAdd(_PDFWorker, _isWorkerDisabled, false);
    __privateAdd(_PDFWorker, _workerPorts, /* @__PURE__ */ new WeakMap());
    (() => {
      if (isNodeJS) {
        __privateSet(_PDFWorker, _isWorkerDisabled, true);
        GlobalWorkerOptions.workerSrc ||= "./pdf.worker.mjs";
      }
      _PDFWorker._isSameOrigin = (baseUrl, otherUrl) => {
        const base = URL.parse(baseUrl);
        if (!base?.origin || base.origin === "null") {
          return false;
        }
        const other = new URL(otherUrl, base);
        return base.origin === other.origin;
      };
      _PDFWorker._createCDNWrapper = (url) => {
        const wrapper = `await import("${url}");`;
        return URL.createObjectURL(new Blob([wrapper], {
          type: "text/javascript"
        }));
      };
      _PDFWorker.fromPort = (params) => {
        deprecated("`PDFWorker.fromPort` - please use `PDFWorker.create` instead.");
        if (!params?.port) {
          throw new Error("PDFWorker.fromPort - invalid method signature.");
        }
        return _PDFWorker.create(params);
      };
    })();
    PDFWorker = _PDFWorker;
    WorkerTransport = class {
      #methodPromises = /* @__PURE__ */ new Map();
      #pageCache = /* @__PURE__ */ new Map();
      #pagePromises = /* @__PURE__ */ new Map();
      #pageRefCache = /* @__PURE__ */ new Map();
      #passwordCapability = null;
      constructor(messageHandler, loadingTask, networkStream, params, factory2, enableHWA) {
        this.messageHandler = messageHandler;
        this.loadingTask = loadingTask;
        this.commonObjs = new PDFObjects();
        this.fontLoader = new FontLoader({
          ownerDocument: params.ownerDocument,
          styleElement: params.styleElement
        });
        this.loadingParams = params.loadingParams;
        this._params = params;
        this.canvasFactory = factory2.canvasFactory;
        this.filterFactory = factory2.filterFactory;
        this.cMapReaderFactory = factory2.cMapReaderFactory;
        this.standardFontDataFactory = factory2.standardFontDataFactory;
        this.wasmFactory = factory2.wasmFactory;
        this.destroyed = false;
        this.destroyCapability = null;
        this._networkStream = networkStream;
        this._fullReader = null;
        this._lastProgress = null;
        this.downloadInfoCapability = Promise.withResolvers();
        this.enableHWA = enableHWA;
        this.setupMessageHandler();
      }
      #cacheSimpleMethod(name, data2 = null) {
        const cachedPromise = this.#methodPromises.get(name);
        if (cachedPromise) {
          return cachedPromise;
        }
        const promise = this.messageHandler.sendWithPromise(name, data2);
        this.#methodPromises.set(name, promise);
        return promise;
      }
      get annotationStorage() {
        return shadow(this, "annotationStorage", new AnnotationStorage());
      }
      getRenderingIntent(intent, annotationMode = AnnotationMode.ENABLE, printAnnotationStorage = null, isEditing = false, isOpList = false) {
        let renderingIntent = RenderingIntentFlag.DISPLAY;
        let annotationStorageSerializable = SerializableEmpty;
        switch (intent) {
          case "any":
            renderingIntent = RenderingIntentFlag.ANY;
            break;
          case "display":
            break;
          case "print":
            renderingIntent = RenderingIntentFlag.PRINT;
            break;
          default:
            warn(`getRenderingIntent - invalid intent: ${intent}`);
        }
        const annotationStorage = renderingIntent & RenderingIntentFlag.PRINT && printAnnotationStorage instanceof PrintAnnotationStorage ? printAnnotationStorage : this.annotationStorage;
        switch (annotationMode) {
          case AnnotationMode.DISABLE:
            renderingIntent += RenderingIntentFlag.ANNOTATIONS_DISABLE;
            break;
          case AnnotationMode.ENABLE:
            break;
          case AnnotationMode.ENABLE_FORMS:
            renderingIntent += RenderingIntentFlag.ANNOTATIONS_FORMS;
            break;
          case AnnotationMode.ENABLE_STORAGE:
            renderingIntent += RenderingIntentFlag.ANNOTATIONS_STORAGE;
            annotationStorageSerializable = annotationStorage.serializable;
            break;
          default:
            warn(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);
        }
        if (isEditing) {
          renderingIntent += RenderingIntentFlag.IS_EDITING;
        }
        if (isOpList) {
          renderingIntent += RenderingIntentFlag.OPLIST;
        }
        const {
          ids: modifiedIds,
          hash: modifiedIdsHash
        } = annotationStorage.modifiedIds;
        const cacheKeyBuf = [renderingIntent, annotationStorageSerializable.hash, modifiedIdsHash];
        return {
          renderingIntent,
          cacheKey: cacheKeyBuf.join("_"),
          annotationStorageSerializable,
          modifiedIds
        };
      }
      destroy() {
        if (this.destroyCapability) {
          return this.destroyCapability.promise;
        }
        this.destroyed = true;
        this.destroyCapability = Promise.withResolvers();
        this.#passwordCapability?.reject(new Error("Worker was destroyed during onPassword callback"));
        const waitOn = [];
        for (const page of this.#pageCache.values()) {
          waitOn.push(page._destroy());
        }
        this.#pageCache.clear();
        this.#pagePromises.clear();
        this.#pageRefCache.clear();
        if (this.hasOwnProperty("annotationStorage")) {
          this.annotationStorage.resetModified();
        }
        const terminated = this.messageHandler.sendWithPromise("Terminate", null);
        waitOn.push(terminated);
        Promise.all(waitOn).then(() => {
          this.commonObjs.clear();
          this.fontLoader.clear();
          this.#methodPromises.clear();
          this.filterFactory.destroy();
          TextLayer.cleanup();
          this._networkStream?.cancelAllRequests(new AbortException$1("Worker was terminated."));
          this.messageHandler?.destroy();
          this.messageHandler = null;
          this.destroyCapability.resolve();
        }, this.destroyCapability.reject);
        return this.destroyCapability.promise;
      }
      setupMessageHandler() {
        const {
          messageHandler,
          loadingTask
        } = this;
        messageHandler.on("GetReader", (data2, sink) => {
          assert(this._networkStream, "GetReader - no `IPDFStream` instance available.");
          this._fullReader = this._networkStream.getFullReader();
          this._fullReader.onProgress = (evt) => {
            this._lastProgress = {
              loaded: evt.loaded,
              total: evt.total
            };
          };
          sink.onPull = () => {
            this._fullReader.read().then(function({
              value,
              done
            }) {
              if (done) {
                sink.close();
                return;
              }
              assert(value instanceof ArrayBuffer, "GetReader - expected an ArrayBuffer.");
              sink.enqueue(new Uint8Array(value), 1, [value]);
            }).catch((reason) => {
              sink.error(reason);
            });
          };
          sink.onCancel = (reason) => {
            this._fullReader.cancel(reason);
            sink.ready.catch((readyReason) => {
              if (this.destroyed) {
                return;
              }
              throw readyReason;
            });
          };
        });
        messageHandler.on("ReaderHeadersReady", async (data2) => {
          await this._fullReader.headersReady;
          const {
            isStreamingSupported,
            isRangeSupported,
            contentLength
          } = this._fullReader;
          if (!isStreamingSupported || !isRangeSupported) {
            if (this._lastProgress) {
              loadingTask.onProgress?.(this._lastProgress);
            }
            this._fullReader.onProgress = (evt) => {
              loadingTask.onProgress?.({
                loaded: evt.loaded,
                total: evt.total
              });
            };
          }
          return {
            isStreamingSupported,
            isRangeSupported,
            contentLength
          };
        });
        messageHandler.on("GetRangeReader", (data2, sink) => {
          assert(this._networkStream, "GetRangeReader - no `IPDFStream` instance available.");
          const rangeReader = this._networkStream.getRangeReader(data2.begin, data2.end);
          if (!rangeReader) {
            sink.close();
            return;
          }
          sink.onPull = () => {
            rangeReader.read().then(function({
              value,
              done
            }) {
              if (done) {
                sink.close();
                return;
              }
              assert(value instanceof ArrayBuffer, "GetRangeReader - expected an ArrayBuffer.");
              sink.enqueue(new Uint8Array(value), 1, [value]);
            }).catch((reason) => {
              sink.error(reason);
            });
          };
          sink.onCancel = (reason) => {
            rangeReader.cancel(reason);
            sink.ready.catch((readyReason) => {
              if (this.destroyed) {
                return;
              }
              throw readyReason;
            });
          };
        });
        messageHandler.on("GetDoc", ({
          pdfInfo
        }) => {
          this._numPages = pdfInfo.numPages;
          this._htmlForXfa = pdfInfo.htmlForXfa;
          delete pdfInfo.htmlForXfa;
          loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));
        });
        messageHandler.on("DocException", (ex) => {
          loadingTask._capability.reject(wrapReason(ex));
        });
        messageHandler.on("PasswordRequest", (ex) => {
          this.#passwordCapability = Promise.withResolvers();
          try {
            if (!loadingTask.onPassword) {
              throw wrapReason(ex);
            }
            const updatePassword = (password) => {
              if (password instanceof Error) {
                this.#passwordCapability.reject(password);
              } else {
                this.#passwordCapability.resolve({
                  password
                });
              }
            };
            loadingTask.onPassword(updatePassword, ex.code);
          } catch (err) {
            this.#passwordCapability.reject(err);
          }
          return this.#passwordCapability.promise;
        });
        messageHandler.on("DataLoaded", (data2) => {
          loadingTask.onProgress?.({
            loaded: data2.length,
            total: data2.length
          });
          this.downloadInfoCapability.resolve(data2);
        });
        messageHandler.on("StartRenderPage", (data2) => {
          if (this.destroyed) {
            return;
          }
          const page = this.#pageCache.get(data2.pageIndex);
          page._startRenderPage(data2.transparency, data2.cacheKey);
        });
        messageHandler.on("commonobj", ([id, type, exportedData]) => {
          if (this.destroyed) {
            return null;
          }
          if (this.commonObjs.has(id)) {
            return null;
          }
          switch (type) {
            case "Font":
              if ("error" in exportedData) {
                const exportedError = exportedData.error;
                warn(`Error during font loading: ${exportedError}`);
                this.commonObjs.resolve(id, exportedError);
                break;
              }
              const fontData = new FontInfo(exportedData);
              const inspectFont = this._params.pdfBug && globalThis.FontInspector?.enabled ? (font2, url) => globalThis.FontInspector.fontAdded(font2, url) : null;
              const font = new FontFaceObject(fontData, inspectFont, exportedData.extra, exportedData.charProcOperatorList);
              this.fontLoader.bind(font).catch(() => messageHandler.sendWithPromise("FontFallback", {
                id
              })).finally(() => {
                if (!font.fontExtraProperties && font.data) {
                  font.clearData();
                }
                this.commonObjs.resolve(id, font);
              });
              break;
            case "CopyLocalImage":
              const {
                imageRef
              } = exportedData;
              assert(imageRef, "The imageRef must be defined.");
              for (const pageProxy of this.#pageCache.values()) {
                for (const [, data2] of pageProxy.objs) {
                  if (data2?.ref !== imageRef) {
                    continue;
                  }
                  if (!data2.dataLen) {
                    return null;
                  }
                  this.commonObjs.resolve(id, structuredClone(data2));
                  return data2.dataLen;
                }
              }
              break;
            case "FontPath":
            case "Image":
            case "Pattern":
              this.commonObjs.resolve(id, exportedData);
              break;
            default:
              throw new Error(`Got unknown common object type ${type}`);
          }
          return null;
        });
        messageHandler.on("obj", ([id, pageIndex, type, imageData]) => {
          if (this.destroyed) {
            return;
          }
          const pageProxy = this.#pageCache.get(pageIndex);
          if (pageProxy.objs.has(id)) {
            return;
          }
          if (pageProxy._intentStates.size === 0) {
            imageData?.bitmap?.close();
            return;
          }
          switch (type) {
            case "Image":
            case "Pattern":
              pageProxy.objs.resolve(id, imageData);
              break;
            default:
              throw new Error(`Got unknown object type ${type}`);
          }
        });
        messageHandler.on("DocProgress", (data2) => {
          if (this.destroyed) {
            return;
          }
          loadingTask.onProgress?.({
            loaded: data2.loaded,
            total: data2.total
          });
        });
        messageHandler.on("FetchBinaryData", async (data2) => {
          if (this.destroyed) {
            throw new Error("Worker was destroyed.");
          }
          const factory2 = this[data2.type];
          if (!factory2) {
            throw new Error(`${data2.type} not initialized, see the \`useWorkerFetch\` parameter.`);
          }
          return factory2.fetch(data2);
        });
      }
      getData() {
        return this.messageHandler.sendWithPromise("GetData", null);
      }
      saveDocument() {
        if (this.annotationStorage.size <= 0) {
          warn("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");
        }
        const {
          map: map2,
          transfer
        } = this.annotationStorage.serializable;
        return this.messageHandler.sendWithPromise("SaveDocument", {
          isPureXfa: !!this._htmlForXfa,
          numPages: this._numPages,
          annotationStorage: map2,
          filename: this._fullReader?.filename ?? null
        }, transfer).finally(() => {
          this.annotationStorage.resetModified();
        });
      }
      getPage(pageNumber) {
        if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {
          return Promise.reject(new Error("Invalid page request."));
        }
        const pageIndex = pageNumber - 1, cachedPromise = this.#pagePromises.get(pageIndex);
        if (cachedPromise) {
          return cachedPromise;
        }
        const promise = this.messageHandler.sendWithPromise("GetPage", {
          pageIndex
        }).then((pageInfo) => {
          if (this.destroyed) {
            throw new Error("Transport destroyed");
          }
          if (pageInfo.refStr) {
            this.#pageRefCache.set(pageInfo.refStr, pageNumber);
          }
          const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.pdfBug);
          this.#pageCache.set(pageIndex, page);
          return page;
        });
        this.#pagePromises.set(pageIndex, promise);
        return promise;
      }
      getPageIndex(ref) {
        if (!isRefProxy(ref)) {
          return Promise.reject(new Error("Invalid pageIndex request."));
        }
        return this.messageHandler.sendWithPromise("GetPageIndex", {
          num: ref.num,
          gen: ref.gen
        });
      }
      getAnnotations(pageIndex, intent) {
        return this.messageHandler.sendWithPromise("GetAnnotations", {
          pageIndex,
          intent
        });
      }
      getFieldObjects() {
        return this.#cacheSimpleMethod("GetFieldObjects");
      }
      hasJSActions() {
        return this.#cacheSimpleMethod("HasJSActions");
      }
      getCalculationOrderIds() {
        return this.messageHandler.sendWithPromise("GetCalculationOrderIds", null);
      }
      getDestinations() {
        return this.messageHandler.sendWithPromise("GetDestinations", null);
      }
      getDestination(id) {
        if (typeof id !== "string") {
          return Promise.reject(new Error("Invalid destination request."));
        }
        return this.messageHandler.sendWithPromise("GetDestination", {
          id
        });
      }
      getPageLabels() {
        return this.messageHandler.sendWithPromise("GetPageLabels", null);
      }
      getPageLayout() {
        return this.messageHandler.sendWithPromise("GetPageLayout", null);
      }
      getPageMode() {
        return this.messageHandler.sendWithPromise("GetPageMode", null);
      }
      getViewerPreferences() {
        return this.messageHandler.sendWithPromise("GetViewerPreferences", null);
      }
      getOpenAction() {
        return this.messageHandler.sendWithPromise("GetOpenAction", null);
      }
      getAttachments() {
        return this.messageHandler.sendWithPromise("GetAttachments", null);
      }
      getAnnotationsByType(types, pageIndexesToSkip) {
        return this.messageHandler.sendWithPromise("GetAnnotationsByType", {
          types,
          pageIndexesToSkip
        });
      }
      getDocJSActions() {
        return this.#cacheSimpleMethod("GetDocJSActions");
      }
      getPageJSActions(pageIndex) {
        return this.messageHandler.sendWithPromise("GetPageJSActions", {
          pageIndex
        });
      }
      getStructTree(pageIndex) {
        return this.messageHandler.sendWithPromise("GetStructTree", {
          pageIndex
        });
      }
      getOutline() {
        return this.messageHandler.sendWithPromise("GetOutline", null);
      }
      getOptionalContentConfig(renderingIntent) {
        return this.#cacheSimpleMethod("GetOptionalContentConfig").then((data2) => new OptionalContentConfig(data2, renderingIntent));
      }
      getPermissions() {
        return this.messageHandler.sendWithPromise("GetPermissions", null);
      }
      getMetadata() {
        const name = "GetMetadata", cachedPromise = this.#methodPromises.get(name);
        if (cachedPromise) {
          return cachedPromise;
        }
        const promise = this.messageHandler.sendWithPromise(name, null).then((results) => ({
          info: results[0],
          metadata: results[1] ? new Metadata(results[1]) : null,
          contentDispositionFilename: this._fullReader?.filename ?? null,
          contentLength: this._fullReader?.contentLength ?? null
        }));
        this.#methodPromises.set(name, promise);
        return promise;
      }
      getMarkInfo() {
        return this.messageHandler.sendWithPromise("GetMarkInfo", null);
      }
      async startCleanup(keepLoadedFonts = false) {
        if (this.destroyed) {
          return;
        }
        await this.messageHandler.sendWithPromise("Cleanup", null);
        for (const page of this.#pageCache.values()) {
          const cleanupSuccessful = page.cleanup();
          if (!cleanupSuccessful) {
            throw new Error(`startCleanup: Page ${page.pageNumber} is currently rendering.`);
          }
        }
        this.commonObjs.clear();
        if (!keepLoadedFonts) {
          this.fontLoader.clear();
        }
        this.#methodPromises.clear();
        this.filterFactory.destroy(true);
        TextLayer.cleanup();
      }
      cachedPageNumber(ref) {
        if (!isRefProxy(ref)) {
          return null;
        }
        const refStr = ref.gen === 0 ? `${ref.num}R` : `${ref.num}R${ref.gen}`;
        return this.#pageRefCache.get(refStr) ?? null;
      }
    };
    RenderTask = class {
      #internalRenderTask = null;
      onContinue = null;
      onError = null;
      constructor(internalRenderTask) {
        this.#internalRenderTask = internalRenderTask;
      }
      get promise() {
        return this.#internalRenderTask.capability.promise;
      }
      cancel(extraDelay = 0) {
        this.#internalRenderTask.cancel(null, extraDelay);
      }
      get separateAnnots() {
        const {
          separateAnnots
        } = this.#internalRenderTask.operatorList;
        if (!separateAnnots) {
          return false;
        }
        const {
          annotationCanvasMap
        } = this.#internalRenderTask;
        return separateAnnots.form || separateAnnots.canvas && annotationCanvasMap?.size > 0;
      }
    };
    InternalRenderTask = class _InternalRenderTask {
      #rAF = null;
      static #canvasInUse = /* @__PURE__ */ new WeakSet();
      constructor({
        callback,
        params,
        objs,
        commonObjs,
        annotationCanvasMap,
        operatorList,
        pageIndex,
        canvasFactory,
        filterFactory,
        useRequestAnimationFrame = false,
        pdfBug = false,
        pageColors = null,
        enableHWA = false,
        operationsFilter = null
      }) {
        this.callback = callback;
        this.params = params;
        this.objs = objs;
        this.commonObjs = commonObjs;
        this.annotationCanvasMap = annotationCanvasMap;
        this.operatorListIdx = null;
        this.operatorList = operatorList;
        this._pageIndex = pageIndex;
        this.canvasFactory = canvasFactory;
        this.filterFactory = filterFactory;
        this._pdfBug = pdfBug;
        this.pageColors = pageColors;
        this.running = false;
        this.graphicsReadyCallback = null;
        this.graphicsReady = false;
        this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== "undefined";
        this.cancelled = false;
        this.capability = Promise.withResolvers();
        this.task = new RenderTask(this);
        this._cancelBound = this.cancel.bind(this);
        this._continueBound = this._continue.bind(this);
        this._scheduleNextBound = this._scheduleNext.bind(this);
        this._nextBound = this._next.bind(this);
        this._canvas = params.canvas;
        this._canvasContext = params.canvas ? null : params.canvasContext;
        this._enableHWA = enableHWA;
        this._dependencyTracker = params.dependencyTracker;
        this._operationsFilter = operationsFilter;
      }
      get completed() {
        return this.capability.promise.catch(function() {
        });
      }
      initializeGraphics({
        transparency = false,
        optionalContentConfig
      }) {
        if (this.cancelled) {
          return;
        }
        if (this._canvas) {
          if (_InternalRenderTask.#canvasInUse.has(this._canvas)) {
            throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");
          }
          _InternalRenderTask.#canvasInUse.add(this._canvas);
        }
        if (this._pdfBug && globalThis.StepperManager?.enabled) {
          this.stepper = globalThis.StepperManager.create(this._pageIndex);
          this.stepper.init(this.operatorList);
          this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();
        }
        const {
          viewport,
          transform,
          background,
          dependencyTracker
        } = this.params;
        const canvasContext = this._canvasContext || this._canvas.getContext("2d", {
          alpha: false,
          willReadFrequently: !this._enableHWA
        });
        this.gfx = new CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {
          optionalContentConfig
        }, this.annotationCanvasMap, this.pageColors, dependencyTracker);
        this.gfx.beginDrawing({
          transform,
          viewport,
          transparency,
          background
        });
        this.operatorListIdx = 0;
        this.graphicsReady = true;
        this.graphicsReadyCallback?.();
      }
      cancel(error = null, extraDelay = 0) {
        this.running = false;
        this.cancelled = true;
        this.gfx?.endDrawing();
        if (this.#rAF) {
          window.cancelAnimationFrame(this.#rAF);
          this.#rAF = null;
        }
        _InternalRenderTask.#canvasInUse.delete(this._canvas);
        error ||= new RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, extraDelay);
        this.callback(error);
        this.task.onError?.(error);
      }
      operatorListChanged() {
        if (!this.graphicsReady) {
          this.graphicsReadyCallback ||= this._continueBound;
          return;
        }
        this.gfx.dependencyTracker?.growOperationsCount(this.operatorList.fnArray.length);
        this.stepper?.updateOperatorList(this.operatorList);
        if (this.running) {
          return;
        }
        this._continue();
      }
      _continue() {
        this.running = true;
        if (this.cancelled) {
          return;
        }
        if (this.task.onContinue) {
          this.task.onContinue(this._scheduleNextBound);
        } else {
          this._scheduleNext();
        }
      }
      _scheduleNext() {
        if (this._useRequestAnimationFrame) {
          this.#rAF = window.requestAnimationFrame(() => {
            this.#rAF = null;
            this._nextBound().catch(this._cancelBound);
          });
        } else {
          Promise.resolve().then(this._nextBound).catch(this._cancelBound);
        }
      }
      async _next() {
        if (this.cancelled) {
          return;
        }
        this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper, this._operationsFilter);
        if (this.operatorListIdx === this.operatorList.argsArray.length) {
          this.running = false;
          if (this.operatorList.lastChunk) {
            this.gfx.endDrawing();
            _InternalRenderTask.#canvasInUse.delete(this._canvas);
            this.callback();
          }
        }
      }
    };
    version = "5.4.296";
    build = "f56dc8601";
    ColorPicker = class _ColorPicker {
      #button = null;
      #buttonSwatch = null;
      #defaultColor;
      #dropdown = null;
      #dropdownWasFromKeyboard = false;
      #isMainColorPicker = false;
      #editor = null;
      #eventBus;
      #openDropdownAC = null;
      #uiManager = null;
      static #l10nColor = null;
      static get _keyboardManager() {
        return shadow(this, "_keyboardManager", new KeyboardManager([[["Escape", "mac+Escape"], _ColorPicker.prototype._hideDropdownFromKeyboard], [[" ", "mac+ "], _ColorPicker.prototype._colorSelectFromKeyboard], [["ArrowDown", "ArrowRight", "mac+ArrowDown", "mac+ArrowRight"], _ColorPicker.prototype._moveToNext], [["ArrowUp", "ArrowLeft", "mac+ArrowUp", "mac+ArrowLeft"], _ColorPicker.prototype._moveToPrevious], [["Home", "mac+Home"], _ColorPicker.prototype._moveToBeginning], [["End", "mac+End"], _ColorPicker.prototype._moveToEnd]]));
      }
      constructor({
        editor = null,
        uiManager = null
      }) {
        if (editor) {
          this.#isMainColorPicker = false;
          this.#editor = editor;
        } else {
          this.#isMainColorPicker = true;
        }
        this.#uiManager = editor?._uiManager || uiManager;
        this.#eventBus = this.#uiManager._eventBus;
        this.#defaultColor = editor?.color?.toUpperCase() || this.#uiManager?.highlightColors.values().next().value || "#FFFF98";
        _ColorPicker.#l10nColor ||= Object.freeze({
          blue: "pdfjs-editor-colorpicker-blue",
          green: "pdfjs-editor-colorpicker-green",
          pink: "pdfjs-editor-colorpicker-pink",
          red: "pdfjs-editor-colorpicker-red",
          yellow: "pdfjs-editor-colorpicker-yellow"
        });
      }
      renderButton() {
        const button = this.#button = document.createElement("button");
        button.className = "colorPicker";
        button.tabIndex = "0";
        button.setAttribute("data-l10n-id", "pdfjs-editor-colorpicker-button");
        button.ariaHasPopup = "true";
        if (this.#editor) {
          button.ariaControls = `${this.#editor.id}_colorpicker_dropdown`;
        }
        const signal = this.#uiManager._signal;
        button.addEventListener("click", this.#openDropdown.bind(this), {
          signal
        });
        button.addEventListener("keydown", this.#keyDown.bind(this), {
          signal
        });
        const swatch = this.#buttonSwatch = document.createElement("span");
        swatch.className = "swatch";
        swatch.ariaHidden = "true";
        swatch.style.backgroundColor = this.#defaultColor;
        button.append(swatch);
        return button;
      }
      renderMainDropdown() {
        const dropdown = this.#dropdown = this.#getDropdownRoot();
        dropdown.ariaOrientation = "horizontal";
        dropdown.ariaLabelledBy = "highlightColorPickerLabel";
        return dropdown;
      }
      #getDropdownRoot() {
        const div = document.createElement("div");
        const signal = this.#uiManager._signal;
        div.addEventListener("contextmenu", noContextMenu, {
          signal
        });
        div.className = "dropdown";
        div.role = "listbox";
        div.ariaMultiSelectable = "false";
        div.ariaOrientation = "vertical";
        div.setAttribute("data-l10n-id", "pdfjs-editor-colorpicker-dropdown");
        if (this.#editor) {
          div.id = `${this.#editor.id}_colorpicker_dropdown`;
        }
        for (const [name, color] of this.#uiManager.highlightColors) {
          const button = document.createElement("button");
          button.tabIndex = "0";
          button.role = "option";
          button.setAttribute("data-color", color);
          button.title = name;
          button.setAttribute("data-l10n-id", _ColorPicker.#l10nColor[name]);
          const swatch = document.createElement("span");
          button.append(swatch);
          swatch.className = "swatch";
          swatch.style.backgroundColor = color;
          button.ariaSelected = color === this.#defaultColor;
          button.addEventListener("click", this.#colorSelect.bind(this, color), {
            signal
          });
          div.append(button);
        }
        div.addEventListener("keydown", this.#keyDown.bind(this), {
          signal
        });
        return div;
      }
      #colorSelect(color, event) {
        event.stopPropagation();
        this.#eventBus.dispatch("switchannotationeditorparams", {
          source: this,
          type: AnnotationEditorParamsType.HIGHLIGHT_COLOR,
          value: color
        });
        this.updateColor(color);
      }
      _colorSelectFromKeyboard(event) {
        if (event.target === this.#button) {
          this.#openDropdown(event);
          return;
        }
        const color = event.target.getAttribute("data-color");
        if (!color) {
          return;
        }
        this.#colorSelect(color, event);
      }
      _moveToNext(event) {
        if (!this.#isDropdownVisible) {
          this.#openDropdown(event);
          return;
        }
        if (event.target === this.#button) {
          this.#dropdown.firstChild?.focus();
          return;
        }
        event.target.nextSibling?.focus();
      }
      _moveToPrevious(event) {
        if (event.target === this.#dropdown?.firstChild || event.target === this.#button) {
          if (this.#isDropdownVisible) {
            this._hideDropdownFromKeyboard();
          }
          return;
        }
        if (!this.#isDropdownVisible) {
          this.#openDropdown(event);
        }
        event.target.previousSibling?.focus();
      }
      _moveToBeginning(event) {
        if (!this.#isDropdownVisible) {
          this.#openDropdown(event);
          return;
        }
        this.#dropdown.firstChild?.focus();
      }
      _moveToEnd(event) {
        if (!this.#isDropdownVisible) {
          this.#openDropdown(event);
          return;
        }
        this.#dropdown.lastChild?.focus();
      }
      #keyDown(event) {
        _ColorPicker._keyboardManager.exec(this, event);
      }
      #openDropdown(event) {
        if (this.#isDropdownVisible) {
          this.hideDropdown();
          return;
        }
        this.#dropdownWasFromKeyboard = event.detail === 0;
        if (!this.#openDropdownAC) {
          this.#openDropdownAC = new AbortController();
          window.addEventListener("pointerdown", this.#pointerDown.bind(this), {
            signal: this.#uiManager.combinedSignal(this.#openDropdownAC)
          });
        }
        this.#button.ariaExpanded = "true";
        if (this.#dropdown) {
          this.#dropdown.classList.remove("hidden");
          return;
        }
        const root2 = this.#dropdown = this.#getDropdownRoot();
        this.#button.append(root2);
      }
      #pointerDown(event) {
        if (this.#dropdown?.contains(event.target)) {
          return;
        }
        this.hideDropdown();
      }
      hideDropdown() {
        this.#dropdown?.classList.add("hidden");
        this.#button.ariaExpanded = "false";
        this.#openDropdownAC?.abort();
        this.#openDropdownAC = null;
      }
      get #isDropdownVisible() {
        return this.#dropdown && !this.#dropdown.classList.contains("hidden");
      }
      _hideDropdownFromKeyboard() {
        if (this.#isMainColorPicker) {
          return;
        }
        if (!this.#isDropdownVisible) {
          this.#editor?.unselect();
          return;
        }
        this.hideDropdown();
        this.#button.focus({
          preventScroll: true,
          focusVisible: this.#dropdownWasFromKeyboard
        });
      }
      updateColor(color) {
        if (this.#buttonSwatch) {
          this.#buttonSwatch.style.backgroundColor = color;
        }
        if (!this.#dropdown) {
          return;
        }
        const i = this.#uiManager.highlightColors.values();
        for (const child of this.#dropdown.children) {
          child.ariaSelected = i.next().value === color.toUpperCase();
        }
      }
      destroy() {
        this.#button?.remove();
        this.#button = null;
        this.#buttonSwatch = null;
        this.#dropdown?.remove();
        this.#dropdown = null;
      }
    };
    BasicColorPicker = class _BasicColorPicker {
      #input = null;
      #editor = null;
      #uiManager = null;
      static #l10nColor = null;
      constructor(editor) {
        this.#editor = editor;
        this.#uiManager = editor._uiManager;
        _BasicColorPicker.#l10nColor ||= Object.freeze({
          freetext: "pdfjs-editor-color-picker-free-text-input",
          ink: "pdfjs-editor-color-picker-ink-input"
        });
      }
      renderButton() {
        if (this.#input) {
          return this.#input;
        }
        const {
          editorType,
          colorType,
          colorValue
        } = this.#editor;
        const input = this.#input = document.createElement("input");
        input.type = "color";
        input.value = colorValue || "#000000";
        input.className = "basicColorPicker";
        input.tabIndex = 0;
        input.setAttribute("data-l10n-id", _BasicColorPicker.#l10nColor[editorType]);
        input.addEventListener("input", () => {
          this.#uiManager.updateParams(colorType, input.value);
        }, {
          signal: this.#uiManager._signal
        });
        return input;
      }
      update(value) {
        if (!this.#input) {
          return;
        }
        this.#input.value = value;
      }
      destroy() {
        this.#input?.remove();
        this.#input = null;
      }
      hideDropdown() {
      }
    };
    __webpack_require__(116);
    __webpack_require__(531);
    ColorConverters = class {
      static CMYK_G([c, y2, m2, k2]) {
        return ["G", 1 - Math.min(1, 0.3 * c + 0.59 * m2 + 0.11 * y2 + k2)];
      }
      static G_CMYK([g]) {
        return ["CMYK", 0, 0, 0, 1 - g];
      }
      static G_RGB([g]) {
        return ["RGB", g, g, g];
      }
      static G_rgb([g]) {
        g = scaleAndClamp(g);
        return [g, g, g];
      }
      static G_HTML([g]) {
        const G2 = makeColorComp(g);
        return `#${G2}${G2}${G2}`;
      }
      static RGB_G([r, g, b2]) {
        return ["G", 0.3 * r + 0.59 * g + 0.11 * b2];
      }
      static RGB_rgb(color) {
        return color.map(scaleAndClamp);
      }
      static RGB_HTML(color) {
        return `#${color.map(makeColorComp).join("")}`;
      }
      static T_HTML() {
        return "#00000000";
      }
      static T_rgb() {
        return [null];
      }
      static CMYK_RGB([c, y2, m2, k2]) {
        return ["RGB", 1 - Math.min(1, c + k2), 1 - Math.min(1, m2 + k2), 1 - Math.min(1, y2 + k2)];
      }
      static CMYK_rgb([c, y2, m2, k2]) {
        return [scaleAndClamp(1 - Math.min(1, c + k2)), scaleAndClamp(1 - Math.min(1, m2 + k2)), scaleAndClamp(1 - Math.min(1, y2 + k2))];
      }
      static CMYK_HTML(components) {
        const rgb = this.CMYK_RGB(components).slice(1);
        return this.RGB_HTML(rgb);
      }
      static RGB_CMYK([r, g, b2]) {
        const c = 1 - r;
        const m2 = 1 - g;
        const y2 = 1 - b2;
        const k2 = Math.min(c, m2, y2);
        return ["CMYK", c, m2, y2, k2];
      }
    };
    BaseSVGFactory = class {
      create(width, height, skipDimensions = false) {
        if (width <= 0 || height <= 0) {
          throw new Error("Invalid SVG dimensions");
        }
        const svg = this._createSVG("svg:svg");
        svg.setAttribute("version", "1.1");
        if (!skipDimensions) {
          svg.setAttribute("width", `${width}px`);
          svg.setAttribute("height", `${height}px`);
        }
        svg.setAttribute("preserveAspectRatio", "none");
        svg.setAttribute("viewBox", `0 0 ${width} ${height}`);
        return svg;
      }
      createElement(type) {
        if (typeof type !== "string") {
          throw new Error("Invalid SVG element type");
        }
        return this._createSVG(type);
      }
      _createSVG(type) {
        unreachable("Abstract method `_createSVG` called.");
      }
    };
    DOMSVGFactory = class extends BaseSVGFactory {
      _createSVG(type) {
        return document.createElementNS(SVG_NS, type);
      }
    };
    annotation_layer_DEFAULT_FONT_SIZE = 9;
    GetElementsByNameSet = /* @__PURE__ */ new WeakSet();
    TIMEZONE_OFFSET = (/* @__PURE__ */ new Date()).getTimezoneOffset() * 60 * 1e3;
    AnnotationElementFactory = class {
      static create(parameters) {
        const subtype = parameters.data.annotationType;
        switch (subtype) {
          case AnnotationType.LINK:
            return new LinkAnnotationElement(parameters);
          case AnnotationType.TEXT:
            return new TextAnnotationElement(parameters);
          case AnnotationType.WIDGET:
            const fieldType = parameters.data.fieldType;
            switch (fieldType) {
              case "Tx":
                return new TextWidgetAnnotationElement(parameters);
              case "Btn":
                if (parameters.data.radioButton) {
                  return new RadioButtonWidgetAnnotationElement(parameters);
                } else if (parameters.data.checkBox) {
                  return new CheckboxWidgetAnnotationElement(parameters);
                }
                return new PushButtonWidgetAnnotationElement(parameters);
              case "Ch":
                return new ChoiceWidgetAnnotationElement(parameters);
              case "Sig":
                return new SignatureWidgetAnnotationElement(parameters);
            }
            return new WidgetAnnotationElement(parameters);
          case AnnotationType.POPUP:
            return new PopupAnnotationElement(parameters);
          case AnnotationType.FREETEXT:
            return new FreeTextAnnotationElement(parameters);
          case AnnotationType.LINE:
            return new LineAnnotationElement(parameters);
          case AnnotationType.SQUARE:
            return new SquareAnnotationElement(parameters);
          case AnnotationType.CIRCLE:
            return new CircleAnnotationElement(parameters);
          case AnnotationType.POLYLINE:
            return new PolylineAnnotationElement(parameters);
          case AnnotationType.CARET:
            return new CaretAnnotationElement(parameters);
          case AnnotationType.INK:
            return new InkAnnotationElement(parameters);
          case AnnotationType.POLYGON:
            return new PolygonAnnotationElement(parameters);
          case AnnotationType.HIGHLIGHT:
            return new HighlightAnnotationElement(parameters);
          case AnnotationType.UNDERLINE:
            return new UnderlineAnnotationElement(parameters);
          case AnnotationType.SQUIGGLY:
            return new SquigglyAnnotationElement(parameters);
          case AnnotationType.STRIKEOUT:
            return new StrikeOutAnnotationElement(parameters);
          case AnnotationType.STAMP:
            return new StampAnnotationElement(parameters);
          case AnnotationType.FILEATTACHMENT:
            return new FileAttachmentAnnotationElement(parameters);
          default:
            return new AnnotationElement(parameters);
        }
      }
    };
    AnnotationElement = class _AnnotationElement {
      #updates = null;
      #hasBorder = false;
      #popupElement = null;
      constructor(parameters, {
        isRenderable = false,
        ignoreBorder = false,
        createQuadrilaterals = false
      } = {}) {
        this.isRenderable = isRenderable;
        this.data = parameters.data;
        this.layer = parameters.layer;
        this.linkService = parameters.linkService;
        this.downloadManager = parameters.downloadManager;
        this.imageResourcesPath = parameters.imageResourcesPath;
        this.renderForms = parameters.renderForms;
        this.svgFactory = parameters.svgFactory;
        this.annotationStorage = parameters.annotationStorage;
        this.enableComment = parameters.enableComment;
        this.enableScripting = parameters.enableScripting;
        this.hasJSActions = parameters.hasJSActions;
        this._fieldObjects = parameters.fieldObjects;
        this.parent = parameters.parent;
        if (isRenderable) {
          this.container = this._createContainer(ignoreBorder);
        }
        if (createQuadrilaterals) {
          this._createQuadrilaterals();
        }
      }
      static _hasPopupData({
        contentsObj,
        richText
      }) {
        return !!(contentsObj?.str || richText?.str);
      }
      get _isEditable() {
        return this.data.isEditable;
      }
      get hasPopupData() {
        return _AnnotationElement._hasPopupData(this.data) || this.enableComment && !!this.commentText;
      }
      get commentData() {
        const {
          data: data2
        } = this;
        const editor = this.annotationStorage?.getEditor(data2.id);
        if (editor) {
          return editor.getData();
        }
        return data2;
      }
      get hasCommentButton() {
        return this.enableComment && this.hasPopupElement;
      }
      get commentButtonPosition() {
        const editor = this.annotationStorage?.getEditor(this.data.id);
        if (editor) {
          return editor.commentButtonPositionInPage;
        }
        const {
          quadPoints,
          inkLists,
          rect
        } = this.data;
        let maxX = -Infinity;
        let maxY = -Infinity;
        if (quadPoints?.length >= 8) {
          for (let i = 0; i < quadPoints.length; i += 8) {
            if (quadPoints[i + 1] > maxY) {
              maxY = quadPoints[i + 1];
              maxX = quadPoints[i + 2];
            } else if (quadPoints[i + 1] === maxY) {
              maxX = Math.max(maxX, quadPoints[i + 2]);
            }
          }
          return [maxX, maxY];
        }
        if (inkLists?.length >= 1) {
          for (const inkList of inkLists) {
            for (let i = 0, ii = inkList.length; i < ii; i += 2) {
              if (inkList[i + 1] > maxY) {
                maxY = inkList[i + 1];
                maxX = inkList[i];
              } else if (inkList[i + 1] === maxY) {
                maxX = Math.max(maxX, inkList[i]);
              }
            }
          }
          if (maxX !== Infinity) {
            return [maxX, maxY];
          }
        }
        if (rect) {
          return [rect[2], rect[3]];
        }
        return null;
      }
      _normalizePoint(point) {
        const {
          page: {
            view
          },
          viewport: {
            rawDims: {
              pageWidth,
              pageHeight,
              pageX,
              pageY
            }
          }
        } = this.parent;
        point[1] = view[3] - point[1] + view[1];
        point[0] = 100 * (point[0] - pageX) / pageWidth;
        point[1] = 100 * (point[1] - pageY) / pageHeight;
        return point;
      }
      get commentText() {
        const {
          data: data2
        } = this;
        return this.annotationStorage.getRawValue(`${AnnotationEditorPrefix}${data2.id}`)?.popup?.contents || data2.contentsObj?.str || "";
      }
      set commentText(text3) {
        const {
          data: data2
        } = this;
        const popup = {
          deleted: !text3,
          contents: text3 || ""
        };
        if (!this.annotationStorage.updateEditor(data2.id, {
          popup
        })) {
          this.annotationStorage.setValue(`${AnnotationEditorPrefix}${data2.id}`, {
            id: data2.id,
            annotationType: data2.annotationType,
            pageIndex: this.parent.page._pageIndex,
            popup,
            popupRef: data2.popupRef,
            modificationDate: /* @__PURE__ */ new Date()
          });
        }
        if (!text3) {
          this.removePopup();
        }
      }
      removePopup() {
        (this.#popupElement?.popup || this.popup)?.remove();
        this.#popupElement = this.popup = null;
      }
      updateEdited(params) {
        if (!this.container) {
          return;
        }
        if (params.rect) {
          this.#updates ||= {
            rect: this.data.rect.slice(0)
          };
        }
        const {
          rect,
          popup: newPopup
        } = params;
        if (rect) {
          this.#setRectEdited(rect);
        }
        let popup = this.#popupElement?.popup || this.popup;
        if (!popup && newPopup?.text) {
          this._createPopup(newPopup);
          popup = this.#popupElement.popup;
        }
        if (!popup) {
          return;
        }
        popup.updateEdited(params);
        if (newPopup?.deleted) {
          popup.remove();
          this.#popupElement = null;
          this.popup = null;
        }
      }
      resetEdited() {
        if (!this.#updates) {
          return;
        }
        this.#setRectEdited(this.#updates.rect);
        this.#popupElement?.popup.resetEdited();
        this.#updates = null;
      }
      #setRectEdited(rect) {
        const {
          container: {
            style
          },
          data: {
            rect: currentRect,
            rotation
          },
          parent: {
            viewport: {
              rawDims: {
                pageWidth,
                pageHeight,
                pageX,
                pageY
              }
            }
          }
        } = this;
        currentRect?.splice(0, 4, ...rect);
        style.left = `${100 * (rect[0] - pageX) / pageWidth}%`;
        style.top = `${100 * (pageHeight - rect[3] + pageY) / pageHeight}%`;
        if (rotation === 0) {
          style.width = `${100 * (rect[2] - rect[0]) / pageWidth}%`;
          style.height = `${100 * (rect[3] - rect[1]) / pageHeight}%`;
        } else {
          this.setRotation(rotation);
        }
      }
      _createContainer(ignoreBorder) {
        const {
          data: data2,
          parent: {
            page,
            viewport
          }
        } = this;
        const container = document.createElement("section");
        container.setAttribute("data-annotation-id", data2.id);
        if (!(this instanceof WidgetAnnotationElement) && !(this instanceof LinkAnnotationElement)) {
          container.tabIndex = 0;
        }
        const {
          style
        } = container;
        style.zIndex = this.parent.zIndex;
        this.parent.zIndex += 2;
        if (data2.alternativeText) {
          container.title = data2.alternativeText;
        }
        if (data2.noRotate) {
          container.classList.add("norotate");
        }
        if (!data2.rect || this instanceof PopupAnnotationElement) {
          const {
            rotation: rotation2
          } = data2;
          if (!data2.hasOwnCanvas && rotation2 !== 0) {
            this.setRotation(rotation2, container);
          }
          return container;
        }
        const {
          width,
          height
        } = this;
        if (!ignoreBorder && data2.borderStyle.width > 0) {
          style.borderWidth = `${data2.borderStyle.width}px`;
          const horizontalRadius = data2.borderStyle.horizontalCornerRadius;
          const verticalRadius = data2.borderStyle.verticalCornerRadius;
          if (horizontalRadius > 0 || verticalRadius > 0) {
            const radius = `calc(${horizontalRadius}px * var(--total-scale-factor)) / calc(${verticalRadius}px * var(--total-scale-factor))`;
            style.borderRadius = radius;
          } else if (this instanceof RadioButtonWidgetAnnotationElement) {
            const radius = `calc(${width}px * var(--total-scale-factor)) / calc(${height}px * var(--total-scale-factor))`;
            style.borderRadius = radius;
          }
          switch (data2.borderStyle.style) {
            case AnnotationBorderStyleType.SOLID:
              style.borderStyle = "solid";
              break;
            case AnnotationBorderStyleType.DASHED:
              style.borderStyle = "dashed";
              break;
            case AnnotationBorderStyleType.BEVELED:
              warn("Unimplemented border style: beveled");
              break;
            case AnnotationBorderStyleType.INSET:
              warn("Unimplemented border style: inset");
              break;
            case AnnotationBorderStyleType.UNDERLINE:
              style.borderBottomStyle = "solid";
              break;
          }
          const borderColor = data2.borderColor || null;
          if (borderColor) {
            this.#hasBorder = true;
            style.borderColor = Util.makeHexColor(borderColor[0] | 0, borderColor[1] | 0, borderColor[2] | 0);
          } else {
            style.borderWidth = 0;
          }
        }
        const rect = Util.normalizeRect([data2.rect[0], page.view[3] - data2.rect[1] + page.view[1], data2.rect[2], page.view[3] - data2.rect[3] + page.view[1]]);
        const {
          pageWidth,
          pageHeight,
          pageX,
          pageY
        } = viewport.rawDims;
        style.left = `${100 * (rect[0] - pageX) / pageWidth}%`;
        style.top = `${100 * (rect[1] - pageY) / pageHeight}%`;
        const {
          rotation
        } = data2;
        if (data2.hasOwnCanvas || rotation === 0) {
          style.width = `${100 * width / pageWidth}%`;
          style.height = `${100 * height / pageHeight}%`;
        } else {
          this.setRotation(rotation, container);
        }
        return container;
      }
      setRotation(angle, container = this.container) {
        if (!this.data.rect) {
          return;
        }
        const {
          pageWidth,
          pageHeight
        } = this.parent.viewport.rawDims;
        let {
          width,
          height
        } = this;
        if (angle % 180 !== 0) {
          [width, height] = [height, width];
        }
        container.style.width = `${100 * width / pageWidth}%`;
        container.style.height = `${100 * height / pageHeight}%`;
        container.setAttribute("data-main-rotation", (360 - angle) % 360);
      }
      get _commonActions() {
        const setColor = (jsName, styleName, event) => {
          const color = event.detail[jsName];
          const colorType = color[0];
          const colorArray = color.slice(1);
          event.target.style[styleName] = ColorConverters[`${colorType}_HTML`](colorArray);
          this.annotationStorage.setValue(this.data.id, {
            [styleName]: ColorConverters[`${colorType}_rgb`](colorArray)
          });
        };
        return shadow(this, "_commonActions", {
          display: (event) => {
            const {
              display
            } = event.detail;
            const hidden = display % 2 === 1;
            this.container.style.visibility = hidden ? "hidden" : "visible";
            this.annotationStorage.setValue(this.data.id, {
              noView: hidden,
              noPrint: display === 1 || display === 2
            });
          },
          print: (event) => {
            this.annotationStorage.setValue(this.data.id, {
              noPrint: !event.detail.print
            });
          },
          hidden: (event) => {
            const {
              hidden
            } = event.detail;
            this.container.style.visibility = hidden ? "hidden" : "visible";
            this.annotationStorage.setValue(this.data.id, {
              noPrint: hidden,
              noView: hidden
            });
          },
          focus: (event) => {
            setTimeout(() => event.target.focus({
              preventScroll: false
            }), 0);
          },
          userName: (event) => {
            event.target.title = event.detail.userName;
          },
          readonly: (event) => {
            event.target.disabled = event.detail.readonly;
          },
          required: (event) => {
            this._setRequired(event.target, event.detail.required);
          },
          bgColor: (event) => {
            setColor("bgColor", "backgroundColor", event);
          },
          fillColor: (event) => {
            setColor("fillColor", "backgroundColor", event);
          },
          fgColor: (event) => {
            setColor("fgColor", "color", event);
          },
          textColor: (event) => {
            setColor("textColor", "color", event);
          },
          borderColor: (event) => {
            setColor("borderColor", "borderColor", event);
          },
          strokeColor: (event) => {
            setColor("strokeColor", "borderColor", event);
          },
          rotation: (event) => {
            const angle = event.detail.rotation;
            this.setRotation(angle);
            this.annotationStorage.setValue(this.data.id, {
              rotation: angle
            });
          }
        });
      }
      _dispatchEventFromSandbox(actions, jsEvent) {
        const commonActions = this._commonActions;
        for (const name of Object.keys(jsEvent.detail)) {
          const action = actions[name] || commonActions[name];
          action?.(jsEvent);
        }
      }
      _setDefaultPropertiesFromJS(element) {
        if (!this.enableScripting) {
          return;
        }
        const storedData = this.annotationStorage.getRawValue(this.data.id);
        if (!storedData) {
          return;
        }
        const commonActions = this._commonActions;
        for (const [actionName, detail] of Object.entries(storedData)) {
          const action = commonActions[actionName];
          if (action) {
            const eventProxy = {
              detail: {
                [actionName]: detail
              },
              target: element
            };
            action(eventProxy);
            delete storedData[actionName];
          }
        }
      }
      _createQuadrilaterals() {
        if (!this.container) {
          return;
        }
        const {
          quadPoints
        } = this.data;
        if (!quadPoints) {
          return;
        }
        const [rectBlX, rectBlY, rectTrX, rectTrY] = this.data.rect.map((x2) => Math.fround(x2));
        if (quadPoints.length === 8) {
          const [trX, trY, blX, blY] = quadPoints.subarray(2, 6);
          if (rectTrX === trX && rectTrY === trY && rectBlX === blX && rectBlY === blY) {
            return;
          }
        }
        const {
          style
        } = this.container;
        let svgBuffer;
        if (this.#hasBorder) {
          const {
            borderColor,
            borderWidth
          } = style;
          style.borderWidth = 0;
          svgBuffer = ["url('data:image/svg+xml;utf8,", `<svg xmlns="http://www.w3.org/2000/svg"`, ` preserveAspectRatio="none" viewBox="0 0 1 1">`, `<g fill="transparent" stroke="${borderColor}" stroke-width="${borderWidth}">`];
          this.container.classList.add("hasBorder");
        }
        const width = rectTrX - rectBlX;
        const height = rectTrY - rectBlY;
        const {
          svgFactory
        } = this;
        const svg = svgFactory.createElement("svg");
        svg.classList.add("quadrilateralsContainer");
        svg.setAttribute("width", 0);
        svg.setAttribute("height", 0);
        svg.role = "none";
        const defs = svgFactory.createElement("defs");
        svg.append(defs);
        const clipPath = svgFactory.createElement("clipPath");
        const id = `clippath_${this.data.id}`;
        clipPath.setAttribute("id", id);
        clipPath.setAttribute("clipPathUnits", "objectBoundingBox");
        defs.append(clipPath);
        for (let i = 2, ii = quadPoints.length; i < ii; i += 8) {
          const trX = quadPoints[i];
          const trY = quadPoints[i + 1];
          const blX = quadPoints[i + 2];
          const blY = quadPoints[i + 3];
          const rect = svgFactory.createElement("rect");
          const x2 = (blX - rectBlX) / width;
          const y2 = (rectTrY - trY) / height;
          const rectWidth = (trX - blX) / width;
          const rectHeight = (trY - blY) / height;
          rect.setAttribute("x", x2);
          rect.setAttribute("y", y2);
          rect.setAttribute("width", rectWidth);
          rect.setAttribute("height", rectHeight);
          clipPath.append(rect);
          svgBuffer?.push(`<rect vector-effect="non-scaling-stroke" x="${x2}" y="${y2}" width="${rectWidth}" height="${rectHeight}"/>`);
        }
        if (this.#hasBorder) {
          svgBuffer.push(`</g></svg>')`);
          style.backgroundImage = svgBuffer.join("");
        }
        this.container.append(svg);
        this.container.style.clipPath = `url(#${id})`;
      }
      _createPopup(popupData = null) {
        const {
          data: data2
        } = this;
        let contentsObj, modificationDate;
        if (popupData) {
          contentsObj = {
            str: popupData.text
          };
          modificationDate = popupData.date;
        } else {
          contentsObj = data2.contentsObj;
          modificationDate = data2.modificationDate;
        }
        const popup = this.#popupElement = new PopupAnnotationElement({
          data: {
            color: data2.color,
            titleObj: data2.titleObj,
            modificationDate,
            contentsObj,
            richText: data2.richText,
            parentRect: data2.rect,
            borderStyle: 0,
            id: `popup_${data2.id}`,
            rotation: data2.rotation,
            noRotate: true
          },
          linkService: this.linkService,
          parent: this.parent,
          elements: [this]
        });
        if (!this.parent._commentManager) {
          this.parent.div.append(popup.render());
        }
      }
      get hasPopupElement() {
        return !!(this.#popupElement || this.popup || this.data.popupRef);
      }
      get extraPopupElement() {
        return this.#popupElement;
      }
      render() {
        unreachable("Abstract method `AnnotationElement.render` called");
      }
      _getElementsByName(name, skipId = null) {
        const fields = [];
        if (this._fieldObjects) {
          const fieldObj = this._fieldObjects[name];
          if (fieldObj) {
            for (const {
              page,
              id,
              exportValues
            } of fieldObj) {
              if (page === -1) {
                continue;
              }
              if (id === skipId) {
                continue;
              }
              const exportValue = typeof exportValues === "string" ? exportValues : null;
              const domElement = document.querySelector(`[data-element-id="${id}"]`);
              if (domElement && !GetElementsByNameSet.has(domElement)) {
                warn(`_getElementsByName - element not allowed: ${id}`);
                continue;
              }
              fields.push({
                id,
                exportValue,
                domElement
              });
            }
          }
          return fields;
        }
        for (const domElement of document.getElementsByName(name)) {
          const {
            exportValue
          } = domElement;
          const id = domElement.getAttribute("data-element-id");
          if (id === skipId) {
            continue;
          }
          if (!GetElementsByNameSet.has(domElement)) {
            continue;
          }
          fields.push({
            id,
            exportValue,
            domElement
          });
        }
        return fields;
      }
      show() {
        if (this.container) {
          this.container.hidden = false;
        }
        this.popup?.maybeShow();
      }
      hide() {
        if (this.container) {
          this.container.hidden = true;
        }
        this.popup?.forceHide();
      }
      getElementsToTriggerPopup() {
        return this.container;
      }
      addHighlightArea() {
        const triggers = this.getElementsToTriggerPopup();
        if (Array.isArray(triggers)) {
          for (const element of triggers) {
            element.classList.add("highlightArea");
          }
        } else {
          triggers.classList.add("highlightArea");
        }
      }
      _editOnDoubleClick() {
        if (!this._isEditable) {
          return;
        }
        const {
          annotationEditorType: mode,
          data: {
            id: editId
          }
        } = this;
        this.container.addEventListener("dblclick", () => {
          this.linkService.eventBus?.dispatch("switchannotationeditormode", {
            source: this,
            mode,
            editId,
            mustEnterInEditMode: true
          });
        });
      }
      get width() {
        return this.data.rect[2] - this.data.rect[0];
      }
      get height() {
        return this.data.rect[3] - this.data.rect[1];
      }
    };
    EditorAnnotationElement = class extends AnnotationElement {
      constructor(parameters) {
        super(parameters, {
          isRenderable: true,
          ignoreBorder: true
        });
        this.editor = parameters.editor;
      }
      render() {
        this.container.className = "editorAnnotation";
        return this.container;
      }
      createOrUpdatePopup() {
        const {
          editor
        } = this;
        if (!editor.hasComment) {
          return;
        }
        this._createPopup(editor.comment);
        this.extraPopupElement.popup.renderCommentButton();
      }
      get hasCommentButton() {
        return this.enableComment && this.editor.hasComment;
      }
      get commentButtonPosition() {
        return this.editor.commentButtonPositionInPage;
      }
      get commentText() {
        return this.editor.comment.text;
      }
      set commentText(text3) {
        this.editor.comment = text3;
        if (!text3) {
          this.removePopup();
        }
      }
      get commentData() {
        return this.editor.getData();
      }
      remove() {
        this.container.remove();
        this.container = null;
        this.removePopup();
      }
    };
    LinkAnnotationElement = class extends AnnotationElement {
      constructor(parameters, options = null) {
        super(parameters, {
          isRenderable: true,
          ignoreBorder: !!options?.ignoreBorder,
          createQuadrilaterals: true
        });
        this.isTooltipOnly = parameters.data.isTooltipOnly;
      }
      render() {
        const {
          data: data2,
          linkService
        } = this;
        const link = document.createElement("a");
        link.setAttribute("data-element-id", data2.id);
        let isBound = false;
        if (data2.url) {
          linkService.addLinkAttributes(link, data2.url, data2.newWindow);
          isBound = true;
        } else if (data2.action) {
          this._bindNamedAction(link, data2.action, data2.overlaidText);
          isBound = true;
        } else if (data2.attachment) {
          this.#bindAttachment(link, data2.attachment, data2.overlaidText, data2.attachmentDest);
          isBound = true;
        } else if (data2.setOCGState) {
          this.#bindSetOCGState(link, data2.setOCGState, data2.overlaidText);
          isBound = true;
        } else if (data2.dest) {
          this._bindLink(link, data2.dest, data2.overlaidText);
          isBound = true;
        } else {
          if (data2.actions && (data2.actions.Action || data2.actions["Mouse Up"] || data2.actions["Mouse Down"]) && this.enableScripting && this.hasJSActions) {
            this._bindJSAction(link, data2);
            isBound = true;
          }
          if (data2.resetForm) {
            this._bindResetFormAction(link, data2.resetForm);
            isBound = true;
          } else if (this.isTooltipOnly && !isBound) {
            this._bindLink(link, "");
            isBound = true;
          }
        }
        this.container.classList.add("linkAnnotation");
        if (isBound) {
          this.container.append(link);
        }
        return this.container;
      }
      #setInternalLink() {
        this.container.setAttribute("data-internal-link", "");
      }
      _bindLink(link, destination, overlaidText = "") {
        link.href = this.linkService.getDestinationHash(destination);
        link.onclick = () => {
          if (destination) {
            this.linkService.goToDestination(destination);
          }
          return false;
        };
        if (destination || destination === "") {
          this.#setInternalLink();
        }
        if (overlaidText) {
          link.title = overlaidText;
        }
      }
      _bindNamedAction(link, action, overlaidText = "") {
        link.href = this.linkService.getAnchorUrl("");
        link.onclick = () => {
          this.linkService.executeNamedAction(action);
          return false;
        };
        if (overlaidText) {
          link.title = overlaidText;
        }
        this.#setInternalLink();
      }
      #bindAttachment(link, attachment, overlaidText = "", dest = null) {
        link.href = this.linkService.getAnchorUrl("");
        if (attachment.description) {
          link.title = attachment.description;
        } else if (overlaidText) {
          link.title = overlaidText;
        }
        link.onclick = () => {
          this.downloadManager?.openOrDownloadData(attachment.content, attachment.filename, dest);
          return false;
        };
        this.#setInternalLink();
      }
      #bindSetOCGState(link, action, overlaidText = "") {
        link.href = this.linkService.getAnchorUrl("");
        link.onclick = () => {
          this.linkService.executeSetOCGState(action);
          return false;
        };
        if (overlaidText) {
          link.title = overlaidText;
        }
        this.#setInternalLink();
      }
      _bindJSAction(link, data2) {
        link.href = this.linkService.getAnchorUrl("");
        const map2 = /* @__PURE__ */ new Map([["Action", "onclick"], ["Mouse Up", "onmouseup"], ["Mouse Down", "onmousedown"]]);
        for (const name of Object.keys(data2.actions)) {
          const jsName = map2.get(name);
          if (!jsName) {
            continue;
          }
          link[jsName] = () => {
            this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
              source: this,
              detail: {
                id: data2.id,
                name
              }
            });
            return false;
          };
        }
        if (data2.overlaidText) {
          link.title = data2.overlaidText;
        }
        if (!link.onclick) {
          link.onclick = () => false;
        }
        this.#setInternalLink();
      }
      _bindResetFormAction(link, resetForm) {
        const otherClickAction = link.onclick;
        if (!otherClickAction) {
          link.href = this.linkService.getAnchorUrl("");
        }
        this.#setInternalLink();
        if (!this._fieldObjects) {
          warn(`_bindResetFormAction - "resetForm" action not supported, ensure that the \`fieldObjects\` parameter is provided.`);
          if (!otherClickAction) {
            link.onclick = () => false;
          }
          return;
        }
        link.onclick = () => {
          otherClickAction?.();
          const {
            fields: resetFormFields,
            refs: resetFormRefs,
            include
          } = resetForm;
          const allFields = [];
          if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {
            const fieldIds = new Set(resetFormRefs);
            for (const fieldName of resetFormFields) {
              const fields = this._fieldObjects[fieldName] || [];
              for (const {
                id
              } of fields) {
                fieldIds.add(id);
              }
            }
            for (const fields of Object.values(this._fieldObjects)) {
              for (const field of fields) {
                if (fieldIds.has(field.id) === include) {
                  allFields.push(field);
                }
              }
            }
          } else {
            for (const fields of Object.values(this._fieldObjects)) {
              allFields.push(...fields);
            }
          }
          const storage = this.annotationStorage;
          const allIds = [];
          for (const field of allFields) {
            const {
              id
            } = field;
            allIds.push(id);
            switch (field.type) {
              case "text": {
                const value = field.defaultValue || "";
                storage.setValue(id, {
                  value
                });
                break;
              }
              case "checkbox":
              case "radiobutton": {
                const value = field.defaultValue === field.exportValues;
                storage.setValue(id, {
                  value
                });
                break;
              }
              case "combobox":
              case "listbox": {
                const value = field.defaultValue || "";
                storage.setValue(id, {
                  value
                });
                break;
              }
              default:
                continue;
            }
            const domElement = document.querySelector(`[data-element-id="${id}"]`);
            if (!domElement) {
              continue;
            } else if (!GetElementsByNameSet.has(domElement)) {
              warn(`_bindResetFormAction - element not allowed: ${id}`);
              continue;
            }
            domElement.dispatchEvent(new Event("resetform"));
          }
          if (this.enableScripting) {
            this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
              source: this,
              detail: {
                id: "app",
                ids: allIds,
                name: "ResetForm"
              }
            });
          }
          return false;
        };
      }
    };
    TextAnnotationElement = class extends AnnotationElement {
      constructor(parameters) {
        super(parameters, {
          isRenderable: true
        });
      }
      render() {
        this.container.classList.add("textAnnotation");
        const image = document.createElement("img");
        image.src = this.imageResourcesPath + "annotation-" + this.data.name.toLowerCase() + ".svg";
        image.setAttribute("data-l10n-id", "pdfjs-text-annotation-type");
        image.setAttribute("data-l10n-args", JSON.stringify({
          type: this.data.name
        }));
        if (!this.data.popupRef && this.hasPopupData) {
          this._createPopup();
        }
        this.container.append(image);
        return this.container;
      }
    };
    WidgetAnnotationElement = class extends AnnotationElement {
      render() {
        return this.container;
      }
      showElementAndHideCanvas(element) {
        if (this.data.hasOwnCanvas) {
          if (element.previousSibling?.nodeName === "CANVAS") {
            element.previousSibling.hidden = true;
          }
          element.hidden = false;
        }
      }
      _getKeyModifier(event) {
        return util_FeatureTest.platform.isMac ? event.metaKey : event.ctrlKey;
      }
      _setEventListener(element, elementData, baseName, eventName, valueGetter) {
        if (baseName.includes("mouse")) {
          element.addEventListener(baseName, (event) => {
            this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
              source: this,
              detail: {
                id: this.data.id,
                name: eventName,
                value: valueGetter(event),
                shift: event.shiftKey,
                modifier: this._getKeyModifier(event)
              }
            });
          });
        } else {
          element.addEventListener(baseName, (event) => {
            if (baseName === "blur") {
              if (!elementData.focused || !event.relatedTarget) {
                return;
              }
              elementData.focused = false;
            } else if (baseName === "focus") {
              if (elementData.focused) {
                return;
              }
              elementData.focused = true;
            }
            if (!valueGetter) {
              return;
            }
            this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
              source: this,
              detail: {
                id: this.data.id,
                name: eventName,
                value: valueGetter(event)
              }
            });
          });
        }
      }
      _setEventListeners(element, elementData, names, getter) {
        for (const [baseName, eventName] of names) {
          if (eventName === "Action" || this.data.actions?.[eventName]) {
            if (eventName === "Focus" || eventName === "Blur") {
              elementData ||= {
                focused: false
              };
            }
            this._setEventListener(element, elementData, baseName, eventName, getter);
            if (eventName === "Focus" && !this.data.actions?.Blur) {
              this._setEventListener(element, elementData, "blur", "Blur", null);
            } else if (eventName === "Blur" && !this.data.actions?.Focus) {
              this._setEventListener(element, elementData, "focus", "Focus", null);
            }
          }
        }
      }
      _setBackgroundColor(element) {
        const color = this.data.backgroundColor || null;
        element.style.backgroundColor = color === null ? "transparent" : Util.makeHexColor(color[0], color[1], color[2]);
      }
      _setTextStyle(element) {
        const TEXT_ALIGNMENT = ["left", "center", "right"];
        const {
          fontColor
        } = this.data.defaultAppearanceData;
        const fontSize = this.data.defaultAppearanceData.fontSize || annotation_layer_DEFAULT_FONT_SIZE;
        const style = element.style;
        let computedFontSize;
        const BORDER_SIZE = 2;
        const roundToOneDecimal = (x2) => Math.round(10 * x2) / 10;
        if (this.data.multiLine) {
          const height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);
          const numberOfLines = Math.round(height / (LINE_FACTOR * fontSize)) || 1;
          const lineHeight = height / numberOfLines;
          computedFontSize = Math.min(fontSize, roundToOneDecimal(lineHeight / LINE_FACTOR));
        } else {
          const height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);
          computedFontSize = Math.min(fontSize, roundToOneDecimal(height / LINE_FACTOR));
        }
        style.fontSize = `calc(${computedFontSize}px * var(--total-scale-factor))`;
        style.color = Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);
        if (this.data.textAlignment !== null) {
          style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];
        }
      }
      _setRequired(element, isRequired) {
        if (isRequired) {
          element.setAttribute("required", true);
        } else {
          element.removeAttribute("required");
        }
        element.setAttribute("aria-required", isRequired);
      }
    };
    TextWidgetAnnotationElement = class extends WidgetAnnotationElement {
      constructor(parameters) {
        const isRenderable = parameters.renderForms || parameters.data.hasOwnCanvas || !parameters.data.hasAppearance && !!parameters.data.fieldValue;
        super(parameters, {
          isRenderable
        });
      }
      setPropertyOnSiblings(base, key, value, keyInStorage) {
        const storage = this.annotationStorage;
        for (const element of this._getElementsByName(base.name, base.id)) {
          if (element.domElement) {
            element.domElement[key] = value;
          }
          storage.setValue(element.id, {
            [keyInStorage]: value
          });
        }
      }
      render() {
        const storage = this.annotationStorage;
        const id = this.data.id;
        this.container.classList.add("textWidgetAnnotation");
        let element = null;
        if (this.renderForms) {
          const storedData = storage.getValue(id, {
            value: this.data.fieldValue
          });
          let textContent2 = storedData.value || "";
          const maxLen = storage.getValue(id, {
            charLimit: this.data.maxLen
          }).charLimit;
          if (maxLen && textContent2.length > maxLen) {
            textContent2 = textContent2.slice(0, maxLen);
          }
          let fieldFormattedValues = storedData.formattedValue || this.data.textContent?.join("\n") || null;
          if (fieldFormattedValues && this.data.comb) {
            fieldFormattedValues = fieldFormattedValues.replaceAll(/\s+/g, "");
          }
          const elementData = {
            userValue: textContent2,
            formattedValue: fieldFormattedValues,
            lastCommittedValue: null,
            commitKey: 1,
            focused: false
          };
          if (this.data.multiLine) {
            element = document.createElement("textarea");
            element.textContent = fieldFormattedValues ?? textContent2;
            if (this.data.doNotScroll) {
              element.style.overflowY = "hidden";
            }
          } else {
            element = document.createElement("input");
            element.type = this.data.password ? "password" : "text";
            element.setAttribute("value", fieldFormattedValues ?? textContent2);
            if (this.data.doNotScroll) {
              element.style.overflowX = "hidden";
            }
          }
          if (this.data.hasOwnCanvas) {
            element.hidden = true;
          }
          GetElementsByNameSet.add(element);
          element.setAttribute("data-element-id", id);
          element.disabled = this.data.readOnly;
          element.name = this.data.fieldName;
          element.tabIndex = 0;
          const {
            datetimeFormat,
            datetimeType,
            timeStep
          } = this.data;
          const hasDateOrTime = !!datetimeType && this.enableScripting;
          if (datetimeFormat) {
            element.title = datetimeFormat;
          }
          this._setRequired(element, this.data.required);
          if (maxLen) {
            element.maxLength = maxLen;
          }
          element.addEventListener("input", (event) => {
            storage.setValue(id, {
              value: event.target.value
            });
            this.setPropertyOnSiblings(element, "value", event.target.value, "value");
            elementData.formattedValue = null;
          });
          element.addEventListener("resetform", (event) => {
            const defaultValue = this.data.defaultFieldValue ?? "";
            element.value = elementData.userValue = defaultValue;
            elementData.formattedValue = null;
          });
          let blurListener = (event) => {
            const {
              formattedValue
            } = elementData;
            if (formattedValue !== null && formattedValue !== void 0) {
              event.target.value = formattedValue;
            }
            event.target.scrollLeft = 0;
          };
          if (this.enableScripting && this.hasJSActions) {
            element.addEventListener("focus", (event) => {
              if (elementData.focused) {
                return;
              }
              const {
                target
              } = event;
              if (hasDateOrTime) {
                target.type = datetimeType;
                if (timeStep) {
                  target.step = timeStep;
                }
              }
              if (elementData.userValue) {
                const value = elementData.userValue;
                if (hasDateOrTime) {
                  if (datetimeType === "time") {
                    const date = new Date(value);
                    const parts = [date.getHours(), date.getMinutes(), date.getSeconds()];
                    target.value = parts.map((v2) => v2.toString().padStart(2, "0")).join(":");
                  } else {
                    target.value = new Date(value - TIMEZONE_OFFSET).toISOString().split(datetimeType === "date" ? "T" : ".", 1)[0];
                  }
                } else {
                  target.value = value;
                }
              }
              elementData.lastCommittedValue = target.value;
              elementData.commitKey = 1;
              if (!this.data.actions?.Focus) {
                elementData.focused = true;
              }
            });
            element.addEventListener("updatefromsandbox", (jsEvent) => {
              this.showElementAndHideCanvas(jsEvent.target);
              const actions = {
                value(event) {
                  elementData.userValue = event.detail.value ?? "";
                  if (!hasDateOrTime) {
                    storage.setValue(id, {
                      value: elementData.userValue.toString()
                    });
                  }
                  event.target.value = elementData.userValue;
                },
                formattedValue(event) {
                  const {
                    formattedValue
                  } = event.detail;
                  elementData.formattedValue = formattedValue;
                  if (formattedValue !== null && formattedValue !== void 0 && event.target !== document.activeElement) {
                    event.target.value = formattedValue;
                  }
                  const data2 = {
                    formattedValue
                  };
                  if (hasDateOrTime) {
                    data2.value = formattedValue;
                  }
                  storage.setValue(id, data2);
                },
                selRange(event) {
                  event.target.setSelectionRange(...event.detail.selRange);
                },
                charLimit: (event) => {
                  const {
                    charLimit
                  } = event.detail;
                  const {
                    target
                  } = event;
                  if (charLimit === 0) {
                    target.removeAttribute("maxLength");
                    return;
                  }
                  target.setAttribute("maxLength", charLimit);
                  let value = elementData.userValue;
                  if (!value || value.length <= charLimit) {
                    return;
                  }
                  value = value.slice(0, charLimit);
                  target.value = elementData.userValue = value;
                  storage.setValue(id, {
                    value
                  });
                  this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                    source: this,
                    detail: {
                      id,
                      name: "Keystroke",
                      value,
                      willCommit: true,
                      commitKey: 1,
                      selStart: target.selectionStart,
                      selEnd: target.selectionEnd
                    }
                  });
                }
              };
              this._dispatchEventFromSandbox(actions, jsEvent);
            });
            element.addEventListener("keydown", (event) => {
              elementData.commitKey = 1;
              let commitKey = -1;
              if (event.key === "Escape") {
                commitKey = 0;
              } else if (event.key === "Enter" && !this.data.multiLine) {
                commitKey = 2;
              } else if (event.key === "Tab") {
                elementData.commitKey = 3;
              }
              if (commitKey === -1) {
                return;
              }
              const {
                value
              } = event.target;
              if (elementData.lastCommittedValue === value) {
                return;
              }
              elementData.lastCommittedValue = value;
              elementData.userValue = value;
              this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                source: this,
                detail: {
                  id,
                  name: "Keystroke",
                  value,
                  willCommit: true,
                  commitKey,
                  selStart: event.target.selectionStart,
                  selEnd: event.target.selectionEnd
                }
              });
            });
            const _blurListener = blurListener;
            blurListener = null;
            element.addEventListener("blur", (event) => {
              if (!elementData.focused || !event.relatedTarget) {
                return;
              }
              if (!this.data.actions?.Blur) {
                elementData.focused = false;
              }
              const {
                target
              } = event;
              let {
                value
              } = target;
              if (hasDateOrTime) {
                if (value && datetimeType === "time") {
                  const parts = value.split(":").map((v2) => parseInt(v2, 10));
                  value = new Date(2e3, 0, 1, parts[0], parts[1], parts[2] || 0).valueOf();
                  target.step = "";
                } else {
                  if (!value.includes("T")) {
                    value = `${value}T00:00`;
                  }
                  value = new Date(value).valueOf();
                }
                target.type = "text";
              }
              elementData.userValue = value;
              if (elementData.lastCommittedValue !== value) {
                this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                  source: this,
                  detail: {
                    id,
                    name: "Keystroke",
                    value,
                    willCommit: true,
                    commitKey: elementData.commitKey,
                    selStart: event.target.selectionStart,
                    selEnd: event.target.selectionEnd
                  }
                });
              }
              _blurListener(event);
            });
            if (this.data.actions?.Keystroke) {
              element.addEventListener("beforeinput", (event) => {
                elementData.lastCommittedValue = null;
                const {
                  data: data2,
                  target
                } = event;
                const {
                  value,
                  selectionStart,
                  selectionEnd
                } = target;
                let selStart = selectionStart, selEnd = selectionEnd;
                switch (event.inputType) {
                  case "deleteWordBackward": {
                    const match = value.substring(0, selectionStart).match(/\w*[^\w]*$/);
                    if (match) {
                      selStart -= match[0].length;
                    }
                    break;
                  }
                  case "deleteWordForward": {
                    const match = value.substring(selectionStart).match(/^[^\w]*\w*/);
                    if (match) {
                      selEnd += match[0].length;
                    }
                    break;
                  }
                  case "deleteContentBackward":
                    if (selectionStart === selectionEnd) {
                      selStart -= 1;
                    }
                    break;
                  case "deleteContentForward":
                    if (selectionStart === selectionEnd) {
                      selEnd += 1;
                    }
                    break;
                }
                event.preventDefault();
                this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                  source: this,
                  detail: {
                    id,
                    name: "Keystroke",
                    value,
                    change: data2 || "",
                    willCommit: false,
                    selStart,
                    selEnd
                  }
                });
              });
            }
            this._setEventListeners(element, elementData, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (event) => event.target.value);
          }
          if (blurListener) {
            element.addEventListener("blur", blurListener);
          }
          if (this.data.comb) {
            const fieldWidth = this.data.rect[2] - this.data.rect[0];
            const combWidth = fieldWidth / maxLen;
            element.classList.add("comb");
            element.style.letterSpacing = `calc(${combWidth}px * var(--total-scale-factor) - 1ch)`;
          }
        } else {
          element = document.createElement("div");
          element.textContent = this.data.fieldValue;
          element.style.verticalAlign = "middle";
          element.style.display = "table-cell";
          if (this.data.hasOwnCanvas) {
            element.hidden = true;
          }
        }
        this._setTextStyle(element);
        this._setBackgroundColor(element);
        this._setDefaultPropertiesFromJS(element);
        this.container.append(element);
        return this.container;
      }
    };
    SignatureWidgetAnnotationElement = class extends WidgetAnnotationElement {
      constructor(parameters) {
        super(parameters, {
          isRenderable: !!parameters.data.hasOwnCanvas
        });
      }
    };
    CheckboxWidgetAnnotationElement = class extends WidgetAnnotationElement {
      constructor(parameters) {
        super(parameters, {
          isRenderable: parameters.renderForms
        });
      }
      render() {
        const storage = this.annotationStorage;
        const data2 = this.data;
        const id = data2.id;
        let value = storage.getValue(id, {
          value: data2.exportValue === data2.fieldValue
        }).value;
        if (typeof value === "string") {
          value = value !== "Off";
          storage.setValue(id, {
            value
          });
        }
        this.container.classList.add("buttonWidgetAnnotation", "checkBox");
        const element = document.createElement("input");
        GetElementsByNameSet.add(element);
        element.setAttribute("data-element-id", id);
        element.disabled = data2.readOnly;
        this._setRequired(element, this.data.required);
        element.type = "checkbox";
        element.name = data2.fieldName;
        if (value) {
          element.setAttribute("checked", true);
        }
        element.setAttribute("exportValue", data2.exportValue);
        element.tabIndex = 0;
        element.addEventListener("change", (event) => {
          const {
            name,
            checked
          } = event.target;
          for (const checkbox of this._getElementsByName(name, id)) {
            const curChecked = checked && checkbox.exportValue === data2.exportValue;
            if (checkbox.domElement) {
              checkbox.domElement.checked = curChecked;
            }
            storage.setValue(checkbox.id, {
              value: curChecked
            });
          }
          storage.setValue(id, {
            value: checked
          });
        });
        element.addEventListener("resetform", (event) => {
          const defaultValue = data2.defaultFieldValue || "Off";
          event.target.checked = defaultValue === data2.exportValue;
        });
        if (this.enableScripting && this.hasJSActions) {
          element.addEventListener("updatefromsandbox", (jsEvent) => {
            const actions = {
              value(event) {
                event.target.checked = event.detail.value !== "Off";
                storage.setValue(id, {
                  value: event.target.checked
                });
              }
            };
            this._dispatchEventFromSandbox(actions, jsEvent);
          });
          this._setEventListeners(element, null, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (event) => event.target.checked);
        }
        this._setBackgroundColor(element);
        this._setDefaultPropertiesFromJS(element);
        this.container.append(element);
        return this.container;
      }
    };
    RadioButtonWidgetAnnotationElement = class extends WidgetAnnotationElement {
      constructor(parameters) {
        super(parameters, {
          isRenderable: parameters.renderForms
        });
      }
      render() {
        this.container.classList.add("buttonWidgetAnnotation", "radioButton");
        const storage = this.annotationStorage;
        const data2 = this.data;
        const id = data2.id;
        let value = storage.getValue(id, {
          value: data2.fieldValue === data2.buttonValue
        }).value;
        if (typeof value === "string") {
          value = value !== data2.buttonValue;
          storage.setValue(id, {
            value
          });
        }
        if (value) {
          for (const radio of this._getElementsByName(data2.fieldName, id)) {
            storage.setValue(radio.id, {
              value: false
            });
          }
        }
        const element = document.createElement("input");
        GetElementsByNameSet.add(element);
        element.setAttribute("data-element-id", id);
        element.disabled = data2.readOnly;
        this._setRequired(element, this.data.required);
        element.type = "radio";
        element.name = data2.fieldName;
        if (value) {
          element.setAttribute("checked", true);
        }
        element.tabIndex = 0;
        element.addEventListener("change", (event) => {
          const {
            name,
            checked
          } = event.target;
          for (const radio of this._getElementsByName(name, id)) {
            storage.setValue(radio.id, {
              value: false
            });
          }
          storage.setValue(id, {
            value: checked
          });
        });
        element.addEventListener("resetform", (event) => {
          const defaultValue = data2.defaultFieldValue;
          event.target.checked = defaultValue !== null && defaultValue !== void 0 && defaultValue === data2.buttonValue;
        });
        if (this.enableScripting && this.hasJSActions) {
          const pdfButtonValue = data2.buttonValue;
          element.addEventListener("updatefromsandbox", (jsEvent) => {
            const actions = {
              value: (event) => {
                const checked = pdfButtonValue === event.detail.value;
                for (const radio of this._getElementsByName(event.target.name)) {
                  const curChecked = checked && radio.id === id;
                  if (radio.domElement) {
                    radio.domElement.checked = curChecked;
                  }
                  storage.setValue(radio.id, {
                    value: curChecked
                  });
                }
              }
            };
            this._dispatchEventFromSandbox(actions, jsEvent);
          });
          this._setEventListeners(element, null, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (event) => event.target.checked);
        }
        this._setBackgroundColor(element);
        this._setDefaultPropertiesFromJS(element);
        this.container.append(element);
        return this.container;
      }
    };
    PushButtonWidgetAnnotationElement = class extends LinkAnnotationElement {
      constructor(parameters) {
        super(parameters, {
          ignoreBorder: parameters.data.hasAppearance
        });
      }
      render() {
        const container = super.render();
        container.classList.add("buttonWidgetAnnotation", "pushButton");
        const linkElement = container.lastChild;
        if (this.enableScripting && this.hasJSActions && linkElement) {
          this._setDefaultPropertiesFromJS(linkElement);
          linkElement.addEventListener("updatefromsandbox", (jsEvent) => {
            this._dispatchEventFromSandbox({}, jsEvent);
          });
        }
        return container;
      }
    };
    ChoiceWidgetAnnotationElement = class extends WidgetAnnotationElement {
      constructor(parameters) {
        super(parameters, {
          isRenderable: parameters.renderForms
        });
      }
      render() {
        this.container.classList.add("choiceWidgetAnnotation");
        const storage = this.annotationStorage;
        const id = this.data.id;
        const storedData = storage.getValue(id, {
          value: this.data.fieldValue
        });
        const selectElement = document.createElement("select");
        GetElementsByNameSet.add(selectElement);
        selectElement.setAttribute("data-element-id", id);
        selectElement.disabled = this.data.readOnly;
        this._setRequired(selectElement, this.data.required);
        selectElement.name = this.data.fieldName;
        selectElement.tabIndex = 0;
        let addAnEmptyEntry = this.data.combo && this.data.options.length > 0;
        if (!this.data.combo) {
          selectElement.size = this.data.options.length;
          if (this.data.multiSelect) {
            selectElement.multiple = true;
          }
        }
        selectElement.addEventListener("resetform", (event) => {
          const defaultValue = this.data.defaultFieldValue;
          for (const option of selectElement.options) {
            option.selected = option.value === defaultValue;
          }
        });
        for (const option of this.data.options) {
          const optionElement = document.createElement("option");
          optionElement.textContent = option.displayValue;
          optionElement.value = option.exportValue;
          if (storedData.value.includes(option.exportValue)) {
            optionElement.setAttribute("selected", true);
            addAnEmptyEntry = false;
          }
          selectElement.append(optionElement);
        }
        let removeEmptyEntry = null;
        if (addAnEmptyEntry) {
          const noneOptionElement = document.createElement("option");
          noneOptionElement.value = " ";
          noneOptionElement.setAttribute("hidden", true);
          noneOptionElement.setAttribute("selected", true);
          selectElement.prepend(noneOptionElement);
          removeEmptyEntry = () => {
            noneOptionElement.remove();
            selectElement.removeEventListener("input", removeEmptyEntry);
            removeEmptyEntry = null;
          };
          selectElement.addEventListener("input", removeEmptyEntry);
        }
        const getValue = (isExport) => {
          const name = isExport ? "value" : "textContent";
          const {
            options,
            multiple
          } = selectElement;
          if (!multiple) {
            return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];
          }
          return Array.prototype.filter.call(options, (option) => option.selected).map((option) => option[name]);
        };
        let selectedValues = getValue(false);
        const getItems = (event) => {
          const options = event.target.options;
          return Array.prototype.map.call(options, (option) => ({
            displayValue: option.textContent,
            exportValue: option.value
          }));
        };
        if (this.enableScripting && this.hasJSActions) {
          selectElement.addEventListener("updatefromsandbox", (jsEvent) => {
            const actions = {
              value(event) {
                removeEmptyEntry?.();
                const value = event.detail.value;
                const values = new Set(Array.isArray(value) ? value : [value]);
                for (const option of selectElement.options) {
                  option.selected = values.has(option.value);
                }
                storage.setValue(id, {
                  value: getValue(true)
                });
                selectedValues = getValue(false);
              },
              multipleSelection(event) {
                selectElement.multiple = true;
              },
              remove(event) {
                const options = selectElement.options;
                const index2 = event.detail.remove;
                options[index2].selected = false;
                selectElement.remove(index2);
                if (options.length > 0) {
                  const i = Array.prototype.findIndex.call(options, (option) => option.selected);
                  if (i === -1) {
                    options[0].selected = true;
                  }
                }
                storage.setValue(id, {
                  value: getValue(true),
                  items: getItems(event)
                });
                selectedValues = getValue(false);
              },
              clear(event) {
                while (selectElement.length !== 0) {
                  selectElement.remove(0);
                }
                storage.setValue(id, {
                  value: null,
                  items: []
                });
                selectedValues = getValue(false);
              },
              insert(event) {
                const {
                  index: index2,
                  displayValue,
                  exportValue
                } = event.detail.insert;
                const selectChild = selectElement.children[index2];
                const optionElement = document.createElement("option");
                optionElement.textContent = displayValue;
                optionElement.value = exportValue;
                if (selectChild) {
                  selectChild.before(optionElement);
                } else {
                  selectElement.append(optionElement);
                }
                storage.setValue(id, {
                  value: getValue(true),
                  items: getItems(event)
                });
                selectedValues = getValue(false);
              },
              items(event) {
                const {
                  items
                } = event.detail;
                while (selectElement.length !== 0) {
                  selectElement.remove(0);
                }
                for (const item of items) {
                  const {
                    displayValue,
                    exportValue
                  } = item;
                  const optionElement = document.createElement("option");
                  optionElement.textContent = displayValue;
                  optionElement.value = exportValue;
                  selectElement.append(optionElement);
                }
                if (selectElement.options.length > 0) {
                  selectElement.options[0].selected = true;
                }
                storage.setValue(id, {
                  value: getValue(true),
                  items: getItems(event)
                });
                selectedValues = getValue(false);
              },
              indices(event) {
                const indices = new Set(event.detail.indices);
                for (const option of event.target.options) {
                  option.selected = indices.has(option.index);
                }
                storage.setValue(id, {
                  value: getValue(true)
                });
                selectedValues = getValue(false);
              },
              editable(event) {
                event.target.disabled = !event.detail.editable;
              }
            };
            this._dispatchEventFromSandbox(actions, jsEvent);
          });
          selectElement.addEventListener("input", (event) => {
            const exportValue = getValue(true);
            const change = getValue(false);
            storage.setValue(id, {
              value: exportValue
            });
            event.preventDefault();
            this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
              source: this,
              detail: {
                id,
                name: "Keystroke",
                value: selectedValues,
                change,
                changeEx: exportValue,
                willCommit: false,
                commitKey: 1,
                keyDown: false
              }
            });
          });
          this._setEventListeners(selectElement, null, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"], ["input", "Action"], ["input", "Validate"]], (event) => event.target.value);
        } else {
          selectElement.addEventListener("input", function(event) {
            storage.setValue(id, {
              value: getValue(true)
            });
          });
        }
        if (this.data.combo) {
          this._setTextStyle(selectElement);
        }
        this._setBackgroundColor(selectElement);
        this._setDefaultPropertiesFromJS(selectElement);
        this.container.append(selectElement);
        return this.container;
      }
    };
    PopupAnnotationElement = class extends AnnotationElement {
      constructor(parameters) {
        const {
          data: data2,
          elements,
          parent: parent2
        } = parameters;
        const hasCommentManager = !!parent2._commentManager;
        super(parameters, {
          isRenderable: !hasCommentManager && AnnotationElement._hasPopupData(data2)
        });
        this.elements = elements;
        if (hasCommentManager && AnnotationElement._hasPopupData(data2)) {
          const popup = this.popup = this.#createPopup();
          for (const element of elements) {
            element.popup = popup;
          }
        } else {
          this.popup = null;
        }
      }
      #createPopup() {
        return new PopupElement({
          container: this.container,
          color: this.data.color,
          titleObj: this.data.titleObj,
          modificationDate: this.data.modificationDate || this.data.creationDate,
          contentsObj: this.data.contentsObj,
          richText: this.data.richText,
          rect: this.data.rect,
          parentRect: this.data.parentRect || null,
          parent: this.parent,
          elements: this.elements,
          open: this.data.open,
          commentManager: this.parent._commentManager
        });
      }
      render() {
        const {
          container
        } = this;
        container.classList.add("popupAnnotation");
        container.role = "comment";
        const popup = this.popup = this.#createPopup();
        const elementIds = [];
        for (const element of this.elements) {
          element.popup = popup;
          element.container.ariaHasPopup = "dialog";
          elementIds.push(element.data.id);
          element.addHighlightArea();
        }
        this.container.setAttribute("aria-controls", elementIds.map((id) => `${AnnotationPrefix}${id}`).join(","));
        return this.container;
      }
    };
    PopupElement = class {
      #commentManager = null;
      #boundKeyDown = this.#keyDown.bind(this);
      #boundHide = this.#hide.bind(this);
      #boundShow = this.#show.bind(this);
      #boundToggle = this.#toggle.bind(this);
      #color = null;
      #container = null;
      #contentsObj = null;
      #dateObj = null;
      #elements = null;
      #parent = null;
      #parentRect = null;
      #pinned = false;
      #popup = null;
      #popupAbortController = null;
      #position = null;
      #commentButton = null;
      #commentButtonPosition = null;
      #popupPosition = null;
      #rect = null;
      #richText = null;
      #titleObj = null;
      #updates = null;
      #wasVisible = false;
      #firstElement = null;
      #commentText = null;
      constructor({
        container,
        color,
        elements,
        titleObj,
        modificationDate,
        contentsObj,
        richText,
        parent: parent2,
        rect,
        parentRect,
        open,
        commentManager = null
      }) {
        this.#container = container;
        this.#titleObj = titleObj;
        this.#contentsObj = contentsObj;
        this.#richText = richText;
        this.#parent = parent2;
        this.#color = color;
        this.#rect = rect;
        this.#parentRect = parentRect;
        this.#elements = elements;
        this.#commentManager = commentManager;
        this.#firstElement = elements[0];
        this.#dateObj = PDFDateString.toDateObject(modificationDate);
        this.trigger = elements.flatMap((e) => e.getElementsToTriggerPopup());
        if (commentManager) {
          this.renderCommentButton();
        } else {
          this.#addEventListeners();
          this.#container.hidden = true;
          if (open) {
            this.#toggle();
          }
        }
      }
      #addEventListeners() {
        if (this.#popupAbortController) {
          return;
        }
        this.#popupAbortController = new AbortController();
        const {
          signal
        } = this.#popupAbortController;
        for (const element of this.trigger) {
          element.addEventListener("click", this.#boundToggle, {
            signal
          });
          element.addEventListener("pointerenter", this.#boundShow, {
            signal
          });
          element.addEventListener("pointerleave", this.#boundHide, {
            signal
          });
          element.classList.add("popupTriggerArea");
        }
        for (const element of this.#elements) {
          element.container?.addEventListener("keydown", this.#boundKeyDown, {
            signal
          });
        }
      }
      #setCommentButtonPosition() {
        const element = this.#elements.find((e) => e.hasCommentButton);
        if (!element) {
          return;
        }
        this.#commentButtonPosition = element._normalizePoint(element.commentButtonPosition);
      }
      renderCommentButton() {
        if (this.#commentButton) {
          return;
        }
        if (!this.#commentButtonPosition) {
          this.#setCommentButtonPosition();
        }
        if (!this.#commentButtonPosition) {
          return;
        }
        const {
          signal
        } = this.#popupAbortController = new AbortController();
        const hasOwnButton = !!this.#firstElement.extraPopupElement;
        const togglePopup = () => {
          this.#commentManager.toggleCommentPopup(this, true, void 0, !hasOwnButton);
        };
        const showPopup = () => {
          this.#commentManager.toggleCommentPopup(this, false, true, !hasOwnButton);
        };
        const hidePopup = () => {
          this.#commentManager.toggleCommentPopup(this, false, false);
        };
        if (!hasOwnButton) {
          const button = this.#commentButton = document.createElement("button");
          button.className = "annotationCommentButton";
          const parentContainer = this.#firstElement.container;
          button.style.zIndex = parentContainer.style.zIndex + 1;
          button.tabIndex = 0;
          button.ariaHasPopup = "dialog";
          button.ariaControls = "commentPopup";
          button.setAttribute("data-l10n-id", "pdfjs-show-comment-button");
          this.#updateColor();
          this.#updateCommentButtonPosition();
          button.addEventListener("keydown", this.#boundKeyDown, {
            signal
          });
          button.addEventListener("click", togglePopup, {
            signal
          });
          button.addEventListener("pointerenter", showPopup, {
            signal
          });
          button.addEventListener("pointerleave", hidePopup, {
            signal
          });
          parentContainer.after(button);
        } else {
          this.#commentButton = this.#firstElement.container;
          for (const element of this.trigger) {
            element.ariaHasPopup = "dialog";
            element.ariaControls = "commentPopup";
            element.addEventListener("keydown", this.#boundKeyDown, {
              signal
            });
            element.addEventListener("click", togglePopup, {
              signal
            });
            element.addEventListener("pointerenter", showPopup, {
              signal
            });
            element.addEventListener("pointerleave", hidePopup, {
              signal
            });
            element.classList.add("popupTriggerArea");
          }
        }
      }
      #updateCommentButtonPosition() {
        if (this.#firstElement.extraPopupElement && !this.#firstElement.editor) {
          return;
        }
        this.renderCommentButton();
        const [x2, y2] = this.#commentButtonPosition;
        const {
          style
        } = this.#commentButton;
        style.left = `calc(${x2}%)`;
        style.top = `calc(${y2}% - var(--comment-button-dim))`;
      }
      #updateColor() {
        if (this.#firstElement.extraPopupElement) {
          return;
        }
        this.renderCommentButton();
        this.#commentButton.style.backgroundColor = this.commentButtonColor || "";
      }
      get commentButtonColor() {
        const {
          color,
          opacity
        } = this.#firstElement.commentData;
        if (!color) {
          return null;
        }
        return this.#parent._commentManager.makeCommentColor(color, opacity);
      }
      focusCommentButton() {
        setTimeout(() => {
          this.#commentButton?.focus();
        }, 0);
      }
      getData() {
        const {
          richText,
          color,
          opacity,
          creationDate,
          modificationDate
        } = this.#firstElement.commentData;
        return {
          contentsObj: {
            str: this.comment
          },
          richText,
          color,
          opacity,
          creationDate,
          modificationDate
        };
      }
      get elementBeforePopup() {
        return this.#commentButton;
      }
      get comment() {
        this.#commentText ||= this.#firstElement.commentText;
        return this.#commentText;
      }
      set comment(text3) {
        if (text3 === this.comment) {
          return;
        }
        this.#firstElement.commentText = this.#commentText = text3;
      }
      get parentBoundingClientRect() {
        return this.#firstElement.layer.getBoundingClientRect();
      }
      setCommentButtonStates({
        selected,
        hasPopup
      }) {
        if (!this.#commentButton) {
          return;
        }
        this.#commentButton.classList.toggle("selected", selected);
        this.#commentButton.ariaExpanded = hasPopup;
      }
      setSelectedCommentButton(selected) {
        this.#commentButton.classList.toggle("selected", selected);
      }
      get commentPopupPosition() {
        if (this.#popupPosition) {
          return this.#popupPosition;
        }
        const {
          x: x2,
          y: y2,
          height
        } = this.#commentButton.getBoundingClientRect();
        const {
          x: parentX,
          y: parentY,
          width: parentWidth,
          height: parentHeight
        } = this.#firstElement.layer.getBoundingClientRect();
        return [(x2 - parentX) / parentWidth, (y2 + height - parentY) / parentHeight];
      }
      set commentPopupPosition(pos) {
        this.#popupPosition = pos;
      }
      hasDefaultPopupPosition() {
        return this.#popupPosition === null;
      }
      get commentButtonPosition() {
        return this.#commentButtonPosition;
      }
      get commentButtonWidth() {
        return this.#commentButton.getBoundingClientRect().width / this.parentBoundingClientRect.width;
      }
      editComment(options) {
        const [posX, posY] = this.#popupPosition || this.commentButtonPosition.map((x2) => x2 / 100);
        const parentDimensions = this.parentBoundingClientRect;
        const {
          x: parentX,
          y: parentY,
          width: parentWidth,
          height: parentHeight
        } = parentDimensions;
        this.#commentManager.showDialog(null, this, parentX + posX * parentWidth, parentY + posY * parentHeight, {
          ...options,
          parentDimensions
        });
      }
      render() {
        if (this.#popup) {
          return;
        }
        const popup = this.#popup = document.createElement("div");
        popup.className = "popup";
        if (this.#color) {
          const baseColor = popup.style.outlineColor = Util.makeHexColor(...this.#color);
          popup.style.backgroundColor = `color-mix(in srgb, ${baseColor} 30%, white)`;
        }
        const header = document.createElement("span");
        header.className = "header";
        if (this.#titleObj?.str) {
          const title = document.createElement("span");
          title.className = "title";
          header.append(title);
          ({
            dir: title.dir,
            str: title.textContent
          } = this.#titleObj);
        }
        popup.append(header);
        if (this.#dateObj) {
          const modificationDate = document.createElement("time");
          modificationDate.className = "popupDate";
          modificationDate.setAttribute("data-l10n-id", "pdfjs-annotation-date-time-string");
          modificationDate.setAttribute("data-l10n-args", JSON.stringify({
            dateObj: this.#dateObj.valueOf()
          }));
          modificationDate.dateTime = this.#dateObj.toISOString();
          header.append(modificationDate);
        }
        renderRichText({
          html: this.#html || this.#contentsObj.str,
          dir: this.#contentsObj?.dir,
          className: "popupContent"
        }, popup);
        this.#container.append(popup);
      }
      get #html() {
        const richText = this.#richText;
        const contentsObj = this.#contentsObj;
        if (richText?.str && (!contentsObj?.str || contentsObj.str === richText.str)) {
          return this.#richText.html || null;
        }
        return null;
      }
      get #fontSize() {
        return this.#html?.attributes?.style?.fontSize || 0;
      }
      get #fontColor() {
        return this.#html?.attributes?.style?.color || null;
      }
      #makePopupContent(text3) {
        const popupLines = [];
        const popupContent = {
          str: text3,
          html: {
            name: "div",
            attributes: {
              dir: "auto"
            },
            children: [{
              name: "p",
              children: popupLines
            }]
          }
        };
        const lineAttributes = {
          style: {
            color: this.#fontColor,
            fontSize: this.#fontSize ? `calc(${this.#fontSize}px * var(--total-scale-factor))` : ""
          }
        };
        for (const line of text3.split("\n")) {
          popupLines.push({
            name: "span",
            value: line,
            attributes: lineAttributes
          });
        }
        return popupContent;
      }
      #keyDown(event) {
        if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey) {
          return;
        }
        if (event.key === "Enter" || event.key === "Escape" && this.#pinned) {
          this.#toggle();
        }
      }
      updateEdited({
        rect,
        popup,
        deleted
      }) {
        if (this.#commentManager) {
          if (deleted) {
            this.remove();
            this.#commentText = null;
          } else if (popup) {
            if (popup.deleted) {
              this.remove();
            } else {
              this.#updateColor();
              this.#commentText = popup.text;
            }
          }
          if (rect) {
            this.#commentButtonPosition = null;
            this.#setCommentButtonPosition();
            this.#updateCommentButtonPosition();
          }
          return;
        }
        if (deleted || popup?.deleted) {
          this.remove();
          return;
        }
        this.#addEventListeners();
        this.#updates ||= {
          contentsObj: this.#contentsObj,
          richText: this.#richText
        };
        if (rect) {
          this.#position = null;
        }
        if (popup && popup.text) {
          this.#richText = this.#makePopupContent(popup.text);
          this.#dateObj = PDFDateString.toDateObject(popup.date);
          this.#contentsObj = null;
        }
        this.#popup?.remove();
        this.#popup = null;
      }
      resetEdited() {
        if (!this.#updates) {
          return;
        }
        ({
          contentsObj: this.#contentsObj,
          richText: this.#richText
        } = this.#updates);
        this.#updates = null;
        this.#popup?.remove();
        this.#popup = null;
        this.#position = null;
      }
      remove() {
        this.#popupAbortController?.abort();
        this.#popupAbortController = null;
        this.#popup?.remove();
        this.#popup = null;
        this.#wasVisible = false;
        this.#pinned = false;
        this.#commentButton?.remove();
        this.#commentButton = null;
        if (this.trigger) {
          for (const element of this.trigger) {
            element.classList.remove("popupTriggerArea");
          }
        }
      }
      #setPosition() {
        if (this.#position !== null) {
          return;
        }
        const {
          page: {
            view
          },
          viewport: {
            rawDims: {
              pageWidth,
              pageHeight,
              pageX,
              pageY
            }
          }
        } = this.#parent;
        let useParentRect = !!this.#parentRect;
        let rect = useParentRect ? this.#parentRect : this.#rect;
        for (const element of this.#elements) {
          if (!rect || Util.intersect(element.data.rect, rect) !== null) {
            rect = element.data.rect;
            useParentRect = true;
            break;
          }
        }
        const normalizedRect = Util.normalizeRect([rect[0], view[3] - rect[1] + view[1], rect[2], view[3] - rect[3] + view[1]]);
        const HORIZONTAL_SPACE_AFTER_ANNOTATION = 5;
        const parentWidth = useParentRect ? rect[2] - rect[0] + HORIZONTAL_SPACE_AFTER_ANNOTATION : 0;
        const popupLeft = normalizedRect[0] + parentWidth;
        const popupTop = normalizedRect[1];
        this.#position = [100 * (popupLeft - pageX) / pageWidth, 100 * (popupTop - pageY) / pageHeight];
        const {
          style
        } = this.#container;
        style.left = `${this.#position[0]}%`;
        style.top = `${this.#position[1]}%`;
      }
      #toggle() {
        if (this.#commentManager) {
          this.#commentManager.toggleCommentPopup(this, false);
          return;
        }
        this.#pinned = !this.#pinned;
        if (this.#pinned) {
          this.#show();
          this.#container.addEventListener("click", this.#boundToggle);
          this.#container.addEventListener("keydown", this.#boundKeyDown);
        } else {
          this.#hide();
          this.#container.removeEventListener("click", this.#boundToggle);
          this.#container.removeEventListener("keydown", this.#boundKeyDown);
        }
      }
      #show() {
        if (!this.#popup) {
          this.render();
        }
        if (!this.isVisible) {
          this.#setPosition();
          this.#container.hidden = false;
          this.#container.style.zIndex = parseInt(this.#container.style.zIndex) + 1e3;
        } else if (this.#pinned) {
          this.#container.classList.add("focused");
        }
      }
      #hide() {
        this.#container.classList.remove("focused");
        if (this.#pinned || !this.isVisible) {
          return;
        }
        this.#container.hidden = true;
        this.#container.style.zIndex = parseInt(this.#container.style.zIndex) - 1e3;
      }
      forceHide() {
        this.#wasVisible = this.isVisible;
        if (!this.#wasVisible) {
          return;
        }
        this.#container.hidden = true;
      }
      maybeShow() {
        if (this.#commentManager) {
          return;
        }
        this.#addEventListeners();
        if (!this.#wasVisible) {
          return;
        }
        if (!this.#popup) {
          this.#show();
        }
        this.#wasVisible = false;
        this.#container.hidden = false;
      }
      get isVisible() {
        if (this.#commentManager) {
          return false;
        }
        return this.#container.hidden === false;
      }
    };
    FreeTextAnnotationElement = class extends AnnotationElement {
      constructor(parameters) {
        super(parameters, {
          isRenderable: true,
          ignoreBorder: true
        });
        this.textContent = parameters.data.textContent;
        this.textPosition = parameters.data.textPosition;
        this.annotationEditorType = AnnotationEditorType.FREETEXT;
      }
      render() {
        this.container.classList.add("freeTextAnnotation");
        if (this.textContent) {
          const content = document.createElement("div");
          content.classList.add("annotationTextContent");
          content.setAttribute("role", "comment");
          for (const line of this.textContent) {
            const lineSpan = document.createElement("span");
            lineSpan.textContent = line;
            content.append(lineSpan);
          }
          this.container.append(content);
        }
        if (!this.data.popupRef && this.hasPopupData) {
          this._createPopup();
        }
        this._editOnDoubleClick();
        return this.container;
      }
    };
    LineAnnotationElement = class extends AnnotationElement {
      #line = null;
      constructor(parameters) {
        super(parameters, {
          isRenderable: true,
          ignoreBorder: true
        });
      }
      render() {
        this.container.classList.add("lineAnnotation");
        const {
          data: data2,
          width,
          height
        } = this;
        const svg = this.svgFactory.create(width, height, true);
        const line = this.#line = this.svgFactory.createElement("svg:line");
        line.setAttribute("x1", data2.rect[2] - data2.lineCoordinates[0]);
        line.setAttribute("y1", data2.rect[3] - data2.lineCoordinates[1]);
        line.setAttribute("x2", data2.rect[2] - data2.lineCoordinates[2]);
        line.setAttribute("y2", data2.rect[3] - data2.lineCoordinates[3]);
        line.setAttribute("stroke-width", data2.borderStyle.width || 1);
        line.setAttribute("stroke", "transparent");
        line.setAttribute("fill", "transparent");
        svg.append(line);
        this.container.append(svg);
        if (!data2.popupRef && this.hasPopupData) {
          this._createPopup();
        }
        return this.container;
      }
      getElementsToTriggerPopup() {
        return this.#line;
      }
      addHighlightArea() {
        this.container.classList.add("highlightArea");
      }
    };
    SquareAnnotationElement = class extends AnnotationElement {
      #square = null;
      constructor(parameters) {
        super(parameters, {
          isRenderable: true,
          ignoreBorder: true
        });
      }
      render() {
        this.container.classList.add("squareAnnotation");
        const {
          data: data2,
          width,
          height
        } = this;
        const svg = this.svgFactory.create(width, height, true);
        const borderWidth = data2.borderStyle.width;
        const square = this.#square = this.svgFactory.createElement("svg:rect");
        square.setAttribute("x", borderWidth / 2);
        square.setAttribute("y", borderWidth / 2);
        square.setAttribute("width", width - borderWidth);
        square.setAttribute("height", height - borderWidth);
        square.setAttribute("stroke-width", borderWidth || 1);
        square.setAttribute("stroke", "transparent");
        square.setAttribute("fill", "transparent");
        svg.append(square);
        this.container.append(svg);
        if (!data2.popupRef && this.hasPopupData) {
          this._createPopup();
        }
        return this.container;
      }
      getElementsToTriggerPopup() {
        return this.#square;
      }
      addHighlightArea() {
        this.container.classList.add("highlightArea");
      }
    };
    CircleAnnotationElement = class extends AnnotationElement {
      #circle = null;
      constructor(parameters) {
        super(parameters, {
          isRenderable: true,
          ignoreBorder: true
        });
      }
      render() {
        this.container.classList.add("circleAnnotation");
        const {
          data: data2,
          width,
          height
        } = this;
        const svg = this.svgFactory.create(width, height, true);
        const borderWidth = data2.borderStyle.width;
        const circle = this.#circle = this.svgFactory.createElement("svg:ellipse");
        circle.setAttribute("cx", width / 2);
        circle.setAttribute("cy", height / 2);
        circle.setAttribute("rx", width / 2 - borderWidth / 2);
        circle.setAttribute("ry", height / 2 - borderWidth / 2);
        circle.setAttribute("stroke-width", borderWidth || 1);
        circle.setAttribute("stroke", "transparent");
        circle.setAttribute("fill", "transparent");
        svg.append(circle);
        this.container.append(svg);
        if (!data2.popupRef && this.hasPopupData) {
          this._createPopup();
        }
        return this.container;
      }
      getElementsToTriggerPopup() {
        return this.#circle;
      }
      addHighlightArea() {
        this.container.classList.add("highlightArea");
      }
    };
    PolylineAnnotationElement = class extends AnnotationElement {
      #polyline = null;
      constructor(parameters) {
        super(parameters, {
          isRenderable: true,
          ignoreBorder: true
        });
        this.containerClassName = "polylineAnnotation";
        this.svgElementName = "svg:polyline";
      }
      render() {
        this.container.classList.add(this.containerClassName);
        const {
          data: {
            rect,
            vertices,
            borderStyle,
            popupRef
          },
          width,
          height
        } = this;
        if (!vertices) {
          return this.container;
        }
        const svg = this.svgFactory.create(width, height, true);
        let points = [];
        for (let i = 0, ii = vertices.length; i < ii; i += 2) {
          const x2 = vertices[i] - rect[0];
          const y2 = rect[3] - vertices[i + 1];
          points.push(`${x2},${y2}`);
        }
        points = points.join(" ");
        const polyline = this.#polyline = this.svgFactory.createElement(this.svgElementName);
        polyline.setAttribute("points", points);
        polyline.setAttribute("stroke-width", borderStyle.width || 1);
        polyline.setAttribute("stroke", "transparent");
        polyline.setAttribute("fill", "transparent");
        svg.append(polyline);
        this.container.append(svg);
        if (!popupRef && this.hasPopupData) {
          this._createPopup();
        }
        return this.container;
      }
      getElementsToTriggerPopup() {
        return this.#polyline;
      }
      addHighlightArea() {
        this.container.classList.add("highlightArea");
      }
    };
    PolygonAnnotationElement = class extends PolylineAnnotationElement {
      constructor(parameters) {
        super(parameters);
        this.containerClassName = "polygonAnnotation";
        this.svgElementName = "svg:polygon";
      }
    };
    CaretAnnotationElement = class extends AnnotationElement {
      constructor(parameters) {
        super(parameters, {
          isRenderable: true,
          ignoreBorder: true
        });
      }
      render() {
        this.container.classList.add("caretAnnotation");
        if (!this.data.popupRef && this.hasPopupData) {
          this._createPopup();
        }
        return this.container;
      }
    };
    InkAnnotationElement = class extends AnnotationElement {
      #polylinesGroupElement = null;
      #polylines = [];
      constructor(parameters) {
        super(parameters, {
          isRenderable: true,
          ignoreBorder: true
        });
        this.containerClassName = "inkAnnotation";
        this.svgElementName = "svg:polyline";
        this.annotationEditorType = this.data.it === "InkHighlight" ? AnnotationEditorType.HIGHLIGHT : AnnotationEditorType.INK;
      }
      #getTransform(rotation, rect) {
        switch (rotation) {
          case 90:
            return {
              transform: `rotate(90) translate(${-rect[0]},${rect[1]}) scale(1,-1)`,
              width: rect[3] - rect[1],
              height: rect[2] - rect[0]
            };
          case 180:
            return {
              transform: `rotate(180) translate(${-rect[2]},${rect[1]}) scale(1,-1)`,
              width: rect[2] - rect[0],
              height: rect[3] - rect[1]
            };
          case 270:
            return {
              transform: `rotate(270) translate(${-rect[2]},${rect[3]}) scale(1,-1)`,
              width: rect[3] - rect[1],
              height: rect[2] - rect[0]
            };
          default:
            return {
              transform: `translate(${-rect[0]},${rect[3]}) scale(1,-1)`,
              width: rect[2] - rect[0],
              height: rect[3] - rect[1]
            };
        }
      }
      render() {
        this.container.classList.add(this.containerClassName);
        const {
          data: {
            rect,
            rotation,
            inkLists,
            borderStyle,
            popupRef
          }
        } = this;
        const {
          transform,
          width,
          height
        } = this.#getTransform(rotation, rect);
        const svg = this.svgFactory.create(width, height, true);
        const g = this.#polylinesGroupElement = this.svgFactory.createElement("svg:g");
        svg.append(g);
        g.setAttribute("stroke-width", borderStyle.width || 1);
        g.setAttribute("stroke-linecap", "round");
        g.setAttribute("stroke-linejoin", "round");
        g.setAttribute("stroke-miterlimit", 10);
        g.setAttribute("stroke", "transparent");
        g.setAttribute("fill", "transparent");
        g.setAttribute("transform", transform);
        for (let i = 0, ii = inkLists.length; i < ii; i++) {
          const polyline = this.svgFactory.createElement(this.svgElementName);
          this.#polylines.push(polyline);
          polyline.setAttribute("points", inkLists[i].join(","));
          g.append(polyline);
        }
        if (!popupRef && this.hasPopupData) {
          this._createPopup();
        }
        this.container.append(svg);
        this._editOnDoubleClick();
        return this.container;
      }
      updateEdited(params) {
        super.updateEdited(params);
        const {
          thickness,
          points,
          rect
        } = params;
        const g = this.#polylinesGroupElement;
        if (thickness >= 0) {
          g.setAttribute("stroke-width", thickness || 1);
        }
        if (points) {
          for (let i = 0, ii = this.#polylines.length; i < ii; i++) {
            this.#polylines[i].setAttribute("points", points[i].join(","));
          }
        }
        if (rect) {
          const {
            transform,
            width,
            height
          } = this.#getTransform(this.data.rotation, rect);
          const root2 = g.parentElement;
          root2.setAttribute("viewBox", `0 0 ${width} ${height}`);
          g.setAttribute("transform", transform);
        }
      }
      getElementsToTriggerPopup() {
        return this.#polylines;
      }
      addHighlightArea() {
        this.container.classList.add("highlightArea");
      }
    };
    HighlightAnnotationElement = class extends AnnotationElement {
      constructor(parameters) {
        super(parameters, {
          isRenderable: true,
          ignoreBorder: true,
          createQuadrilaterals: true
        });
        this.annotationEditorType = AnnotationEditorType.HIGHLIGHT;
      }
      render() {
        const {
          data: {
            overlaidText,
            popupRef
          }
        } = this;
        if (!popupRef && this.hasPopupData) {
          this._createPopup();
        }
        this.container.classList.add("highlightAnnotation");
        this._editOnDoubleClick();
        if (overlaidText) {
          const mark = document.createElement("mark");
          mark.classList.add("overlaidText");
          mark.textContent = overlaidText;
          this.container.append(mark);
        }
        return this.container;
      }
    };
    UnderlineAnnotationElement = class extends AnnotationElement {
      constructor(parameters) {
        super(parameters, {
          isRenderable: true,
          ignoreBorder: true,
          createQuadrilaterals: true
        });
      }
      render() {
        const {
          data: {
            overlaidText,
            popupRef
          }
        } = this;
        if (!popupRef && this.hasPopupData) {
          this._createPopup();
        }
        this.container.classList.add("underlineAnnotation");
        if (overlaidText) {
          const underline = document.createElement("u");
          underline.classList.add("overlaidText");
          underline.textContent = overlaidText;
          this.container.append(underline);
        }
        return this.container;
      }
    };
    SquigglyAnnotationElement = class extends AnnotationElement {
      constructor(parameters) {
        super(parameters, {
          isRenderable: true,
          ignoreBorder: true,
          createQuadrilaterals: true
        });
      }
      render() {
        const {
          data: {
            overlaidText,
            popupRef
          }
        } = this;
        if (!popupRef && this.hasPopupData) {
          this._createPopup();
        }
        this.container.classList.add("squigglyAnnotation");
        if (overlaidText) {
          const underline = document.createElement("u");
          underline.classList.add("overlaidText");
          underline.textContent = overlaidText;
          this.container.append(underline);
        }
        return this.container;
      }
    };
    StrikeOutAnnotationElement = class extends AnnotationElement {
      constructor(parameters) {
        super(parameters, {
          isRenderable: true,
          ignoreBorder: true,
          createQuadrilaterals: true
        });
      }
      render() {
        const {
          data: {
            overlaidText,
            popupRef
          }
        } = this;
        if (!popupRef && this.hasPopupData) {
          this._createPopup();
        }
        this.container.classList.add("strikeoutAnnotation");
        if (overlaidText) {
          const strikeout = document.createElement("s");
          strikeout.classList.add("overlaidText");
          strikeout.textContent = overlaidText;
          this.container.append(strikeout);
        }
        return this.container;
      }
    };
    StampAnnotationElement = class extends AnnotationElement {
      constructor(parameters) {
        super(parameters, {
          isRenderable: true,
          ignoreBorder: true
        });
        this.annotationEditorType = AnnotationEditorType.STAMP;
      }
      render() {
        this.container.classList.add("stampAnnotation");
        this.container.setAttribute("role", "img");
        if (!this.data.popupRef && this.hasPopupData) {
          this._createPopup();
        }
        this._editOnDoubleClick();
        return this.container;
      }
    };
    FileAttachmentAnnotationElement = class extends AnnotationElement {
      #trigger = null;
      constructor(parameters) {
        super(parameters, {
          isRenderable: true
        });
        const {
          file
        } = this.data;
        this.filename = file.filename;
        this.content = file.content;
        this.linkService.eventBus?.dispatch("fileattachmentannotation", {
          source: this,
          ...file
        });
      }
      render() {
        this.container.classList.add("fileAttachmentAnnotation");
        const {
          container,
          data: data2
        } = this;
        let trigger;
        if (data2.hasAppearance || data2.fillAlpha === 0) {
          trigger = document.createElement("div");
        } else {
          trigger = document.createElement("img");
          trigger.src = `${this.imageResourcesPath}annotation-${/paperclip/i.test(data2.name) ? "paperclip" : "pushpin"}.svg`;
          if (data2.fillAlpha && data2.fillAlpha < 1) {
            trigger.style = `filter: opacity(${Math.round(data2.fillAlpha * 100)}%);`;
          }
        }
        trigger.addEventListener("dblclick", this.#download.bind(this));
        this.#trigger = trigger;
        const {
          isMac
        } = util_FeatureTest.platform;
        container.addEventListener("keydown", (evt) => {
          if (evt.key === "Enter" && (isMac ? evt.metaKey : evt.ctrlKey)) {
            this.#download();
          }
        });
        if (!data2.popupRef && this.hasPopupData) {
          this._createPopup();
        } else {
          trigger.classList.add("popupTriggerArea");
        }
        container.append(trigger);
        return container;
      }
      getElementsToTriggerPopup() {
        return this.#trigger;
      }
      addHighlightArea() {
        this.container.classList.add("highlightArea");
      }
      #download() {
        this.downloadManager?.openOrDownloadData(this.content, this.filename);
      }
    };
    AnnotationLayer = class _AnnotationLayer {
      #accessibilityManager = null;
      #annotationCanvasMap = null;
      #annotationStorage = null;
      #editableAnnotations = /* @__PURE__ */ new Map();
      #structTreeLayer = null;
      #linkService = null;
      constructor({
        div,
        accessibilityManager,
        annotationCanvasMap,
        annotationEditorUIManager,
        page,
        viewport,
        structTreeLayer,
        commentManager,
        linkService,
        annotationStorage
      }) {
        this.div = div;
        this.#accessibilityManager = accessibilityManager;
        this.#annotationCanvasMap = annotationCanvasMap;
        this.#structTreeLayer = structTreeLayer || null;
        this.#linkService = linkService || null;
        this.#annotationStorage = annotationStorage || new AnnotationStorage();
        this.page = page;
        this.viewport = viewport;
        this.zIndex = 0;
        this._annotationEditorUIManager = annotationEditorUIManager;
        this._commentManager = commentManager || null;
      }
      hasEditableAnnotations() {
        return this.#editableAnnotations.size > 0;
      }
      async #appendElement(element, id, popupElements) {
        const contentElement = element.firstChild || element;
        const annotationId = contentElement.id = `${AnnotationPrefix}${id}`;
        const ariaAttributes = await this.#structTreeLayer?.getAriaAttributes(annotationId);
        if (ariaAttributes) {
          for (const [key, value] of ariaAttributes) {
            contentElement.setAttribute(key, value);
          }
        }
        if (popupElements) {
          popupElements.at(-1).container.after(element);
        } else {
          this.div.append(element);
          this.#accessibilityManager?.moveElementInDOM(this.div, element, contentElement, false);
        }
      }
      async render(params) {
        const {
          annotations
        } = params;
        const layer = this.div;
        setLayerDimensions(layer, this.viewport);
        const popupToElements = /* @__PURE__ */ new Map();
        const elementParams = {
          data: null,
          layer,
          linkService: this.#linkService,
          downloadManager: params.downloadManager,
          imageResourcesPath: params.imageResourcesPath || "",
          renderForms: params.renderForms !== false,
          svgFactory: new DOMSVGFactory(),
          annotationStorage: this.#annotationStorage,
          enableComment: params.enableComment === true,
          enableScripting: params.enableScripting === true,
          hasJSActions: params.hasJSActions,
          fieldObjects: params.fieldObjects,
          parent: this,
          elements: null
        };
        for (const data2 of annotations) {
          if (data2.noHTML) {
            continue;
          }
          const isPopupAnnotation = data2.annotationType === AnnotationType.POPUP;
          if (!isPopupAnnotation) {
            if (data2.rect[2] === data2.rect[0] || data2.rect[3] === data2.rect[1]) {
              continue;
            }
          } else {
            const elements = popupToElements.get(data2.id);
            if (!elements) {
              continue;
            }
            elementParams.elements = elements;
          }
          elementParams.data = data2;
          const element = AnnotationElementFactory.create(elementParams);
          if (!element.isRenderable) {
            continue;
          }
          if (!isPopupAnnotation && data2.popupRef) {
            const elements = popupToElements.get(data2.popupRef);
            if (!elements) {
              popupToElements.set(data2.popupRef, [element]);
            } else {
              elements.push(element);
            }
          }
          const rendered = element.render();
          if (data2.hidden) {
            rendered.style.visibility = "hidden";
          }
          await this.#appendElement(rendered, data2.id, elementParams.elements);
          element.extraPopupElement?.popup?.renderCommentButton();
          if (element._isEditable) {
            this.#editableAnnotations.set(element.data.id, element);
            this._annotationEditorUIManager?.renderAnnotationElement(element);
          }
        }
        this.#setAnnotationCanvasMap();
      }
      async addLinkAnnotations(annotations) {
        const elementParams = {
          data: null,
          layer: this.div,
          linkService: this.#linkService,
          svgFactory: new DOMSVGFactory(),
          parent: this
        };
        for (const data2 of annotations) {
          data2.borderStyle ||= _AnnotationLayer._defaultBorderStyle;
          elementParams.data = data2;
          const element = AnnotationElementFactory.create(elementParams);
          if (!element.isRenderable) {
            continue;
          }
          const rendered = element.render();
          await this.#appendElement(rendered, data2.id, null);
        }
      }
      update({
        viewport
      }) {
        const layer = this.div;
        this.viewport = viewport;
        setLayerDimensions(layer, {
          rotation: viewport.rotation
        });
        this.#setAnnotationCanvasMap();
        layer.hidden = false;
      }
      #setAnnotationCanvasMap() {
        if (!this.#annotationCanvasMap) {
          return;
        }
        const layer = this.div;
        for (const [id, canvas] of this.#annotationCanvasMap) {
          const element = layer.querySelector(`[data-annotation-id="${id}"]`);
          if (!element) {
            continue;
          }
          canvas.className = "annotationContent";
          const {
            firstChild
          } = element;
          if (!firstChild) {
            element.append(canvas);
          } else if (firstChild.nodeName === "CANVAS") {
            firstChild.replaceWith(canvas);
          } else if (!firstChild.classList.contains("annotationContent")) {
            firstChild.before(canvas);
          } else {
            firstChild.after(canvas);
          }
          const editableAnnotation = this.#editableAnnotations.get(id);
          if (!editableAnnotation) {
            continue;
          }
          if (editableAnnotation._hasNoCanvas) {
            this._annotationEditorUIManager?.setMissingCanvas(id, element.id, canvas);
            editableAnnotation._hasNoCanvas = false;
          } else {
            editableAnnotation.canvas = canvas;
          }
        }
        this.#annotationCanvasMap.clear();
      }
      getEditableAnnotations() {
        return Array.from(this.#editableAnnotations.values());
      }
      getEditableAnnotation(id) {
        return this.#editableAnnotations.get(id);
      }
      addFakeAnnotation(editor) {
        const {
          div
        } = this;
        const {
          id,
          rotation
        } = editor;
        const element = new EditorAnnotationElement({
          data: {
            id,
            rect: editor.getPDFRect(),
            rotation
          },
          editor,
          layer: div,
          parent: this,
          enableComment: !!this._commentManager,
          linkService: this.#linkService,
          annotationStorage: this.#annotationStorage
        });
        const htmlElement = element.render();
        div.append(htmlElement);
        this.#accessibilityManager?.moveElementInDOM(div, htmlElement, htmlElement, false);
        element.createOrUpdatePopup();
        return element;
      }
      static get _defaultBorderStyle() {
        return shadow(this, "_defaultBorderStyle", Object.freeze({
          width: 1,
          rawWidth: 1,
          style: AnnotationBorderStyleType.SOLID,
          dashArray: [3],
          horizontalCornerRadius: 0,
          verticalCornerRadius: 0
        }));
      }
    };
    EOL_PATTERN = /\r\n?|\n/g;
    FreeTextEditor = class _FreeTextEditor extends AnnotationEditor {
      #content = "";
      #editorDivId = `${this.id}-editor`;
      #editModeAC = null;
      #fontSize;
      _colorPicker = null;
      static _freeTextDefaultContent = "";
      static _internalPadding = 0;
      static _defaultColor = null;
      static _defaultFontSize = 10;
      static get _keyboardManager() {
        const proto = _FreeTextEditor.prototype;
        const arrowChecker = (self2) => self2.isEmpty();
        const small = AnnotationEditorUIManager.TRANSLATE_SMALL;
        const big = AnnotationEditorUIManager.TRANSLATE_BIG;
        return shadow(this, "_keyboardManager", new KeyboardManager([[["ctrl+s", "mac+meta+s", "ctrl+p", "mac+meta+p"], proto.commitOrRemove, {
          bubbles: true
        }], [["ctrl+Enter", "mac+meta+Enter", "Escape", "mac+Escape"], proto.commitOrRemove], [["ArrowLeft", "mac+ArrowLeft"], proto._translateEmpty, {
          args: [-small, 0],
          checker: arrowChecker
        }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], proto._translateEmpty, {
          args: [-big, 0],
          checker: arrowChecker
        }], [["ArrowRight", "mac+ArrowRight"], proto._translateEmpty, {
          args: [small, 0],
          checker: arrowChecker
        }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], proto._translateEmpty, {
          args: [big, 0],
          checker: arrowChecker
        }], [["ArrowUp", "mac+ArrowUp"], proto._translateEmpty, {
          args: [0, -small],
          checker: arrowChecker
        }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], proto._translateEmpty, {
          args: [0, -big],
          checker: arrowChecker
        }], [["ArrowDown", "mac+ArrowDown"], proto._translateEmpty, {
          args: [0, small],
          checker: arrowChecker
        }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], proto._translateEmpty, {
          args: [0, big],
          checker: arrowChecker
        }]]));
      }
      static _type = "freetext";
      static _editorType = AnnotationEditorType.FREETEXT;
      constructor(params) {
        super({
          ...params,
          name: "freeTextEditor"
        });
        this.color = params.color || _FreeTextEditor._defaultColor || AnnotationEditor._defaultLineColor;
        this.#fontSize = params.fontSize || _FreeTextEditor._defaultFontSize;
        if (!this.annotationElementId) {
          this._uiManager.a11yAlert("pdfjs-editor-freetext-added-alert");
        }
      }
      static initialize(l10n, uiManager) {
        AnnotationEditor.initialize(l10n, uiManager);
        const style = getComputedStyle(document.documentElement);
        this._internalPadding = parseFloat(style.getPropertyValue("--freetext-padding"));
      }
      static updateDefaultParams(type, value) {
        switch (type) {
          case AnnotationEditorParamsType.FREETEXT_SIZE:
            _FreeTextEditor._defaultFontSize = value;
            break;
          case AnnotationEditorParamsType.FREETEXT_COLOR:
            _FreeTextEditor._defaultColor = value;
            break;
        }
      }
      updateParams(type, value) {
        switch (type) {
          case AnnotationEditorParamsType.FREETEXT_SIZE:
            this.#updateFontSize(value);
            break;
          case AnnotationEditorParamsType.FREETEXT_COLOR:
            this.#updateColor(value);
            break;
        }
      }
      static get defaultPropertiesToUpdate() {
        return [[AnnotationEditorParamsType.FREETEXT_SIZE, _FreeTextEditor._defaultFontSize], [AnnotationEditorParamsType.FREETEXT_COLOR, _FreeTextEditor._defaultColor || AnnotationEditor._defaultLineColor]];
      }
      get propertiesToUpdate() {
        return [[AnnotationEditorParamsType.FREETEXT_SIZE, this.#fontSize], [AnnotationEditorParamsType.FREETEXT_COLOR, this.color]];
      }
      get toolbarButtons() {
        this._colorPicker ||= new BasicColorPicker(this);
        return [["colorPicker", this._colorPicker]];
      }
      get colorType() {
        return AnnotationEditorParamsType.FREETEXT_COLOR;
      }
      #updateFontSize(fontSize) {
        const setFontsize = (size) => {
          this.editorDiv.style.fontSize = `calc(${size}px * var(--total-scale-factor))`;
          this.translate(0, -(size - this.#fontSize) * this.parentScale);
          this.#fontSize = size;
          this.#setEditorDimensions();
        };
        const savedFontsize = this.#fontSize;
        this.addCommands({
          cmd: setFontsize.bind(this, fontSize),
          undo: setFontsize.bind(this, savedFontsize),
          post: this._uiManager.updateUI.bind(this._uiManager, this),
          mustExec: true,
          type: AnnotationEditorParamsType.FREETEXT_SIZE,
          overwriteIfSameType: true,
          keepUndo: true
        });
      }
      onUpdatedColor() {
        this.editorDiv.style.color = this.color;
        this._colorPicker?.update(this.color);
        super.onUpdatedColor();
      }
      #updateColor(color) {
        const setColor = (col) => {
          this.color = col;
          this.onUpdatedColor();
        };
        const savedColor = this.color;
        this.addCommands({
          cmd: setColor.bind(this, color),
          undo: setColor.bind(this, savedColor),
          post: this._uiManager.updateUI.bind(this._uiManager, this),
          mustExec: true,
          type: AnnotationEditorParamsType.FREETEXT_COLOR,
          overwriteIfSameType: true,
          keepUndo: true
        });
      }
      _translateEmpty(x2, y2) {
        this._uiManager.translateSelectedEditors(x2, y2, true);
      }
      getInitialTranslation() {
        const scale = this.parentScale;
        return [-_FreeTextEditor._internalPadding * scale, -(_FreeTextEditor._internalPadding + this.#fontSize) * scale];
      }
      rebuild() {
        if (!this.parent) {
          return;
        }
        super.rebuild();
        if (this.div === null) {
          return;
        }
        if (!this.isAttachedToDOM) {
          this.parent.add(this);
        }
      }
      enableEditMode() {
        if (!super.enableEditMode()) {
          return false;
        }
        this.overlayDiv.classList.remove("enabled");
        this.editorDiv.contentEditable = true;
        this._isDraggable = false;
        this.div.removeAttribute("aria-activedescendant");
        this.#editModeAC = new AbortController();
        const signal = this._uiManager.combinedSignal(this.#editModeAC);
        this.editorDiv.addEventListener("keydown", this.editorDivKeydown.bind(this), {
          signal
        });
        this.editorDiv.addEventListener("focus", this.editorDivFocus.bind(this), {
          signal
        });
        this.editorDiv.addEventListener("blur", this.editorDivBlur.bind(this), {
          signal
        });
        this.editorDiv.addEventListener("input", this.editorDivInput.bind(this), {
          signal
        });
        this.editorDiv.addEventListener("paste", this.editorDivPaste.bind(this), {
          signal
        });
        return true;
      }
      disableEditMode() {
        if (!super.disableEditMode()) {
          return false;
        }
        this.overlayDiv.classList.add("enabled");
        this.editorDiv.contentEditable = false;
        this.div.setAttribute("aria-activedescendant", this.#editorDivId);
        this._isDraggable = true;
        this.#editModeAC?.abort();
        this.#editModeAC = null;
        this.div.focus({
          preventScroll: true
        });
        this.isEditing = false;
        this.parent.div.classList.add("freetextEditing");
        return true;
      }
      focusin(event) {
        if (!this._focusEventsAllowed) {
          return;
        }
        super.focusin(event);
        if (event.target !== this.editorDiv) {
          this.editorDiv.focus();
        }
      }
      onceAdded(focus) {
        if (this.width) {
          return;
        }
        this.enableEditMode();
        if (focus) {
          this.editorDiv.focus();
        }
        if (this._initialOptions?.isCentered) {
          this.center();
        }
        this._initialOptions = null;
      }
      isEmpty() {
        return !this.editorDiv || this.editorDiv.innerText.trim() === "";
      }
      remove() {
        this.isEditing = false;
        if (this.parent) {
          this.parent.setEditingState(true);
          this.parent.div.classList.add("freetextEditing");
        }
        super.remove();
      }
      #extractText() {
        const buffer = [];
        this.editorDiv.normalize();
        let prevChild = null;
        for (const child of this.editorDiv.childNodes) {
          if (prevChild?.nodeType === Node.TEXT_NODE && child.nodeName === "BR") {
            continue;
          }
          buffer.push(_FreeTextEditor.#getNodeContent(child));
          prevChild = child;
        }
        return buffer.join("\n");
      }
      #setEditorDimensions() {
        const [parentWidth, parentHeight] = this.parentDimensions;
        let rect;
        if (this.isAttachedToDOM) {
          rect = this.div.getBoundingClientRect();
        } else {
          const {
            currentLayer,
            div
          } = this;
          const savedDisplay = div.style.display;
          const savedVisibility = div.classList.contains("hidden");
          div.classList.remove("hidden");
          div.style.display = "hidden";
          currentLayer.div.append(this.div);
          rect = div.getBoundingClientRect();
          div.remove();
          div.style.display = savedDisplay;
          div.classList.toggle("hidden", savedVisibility);
        }
        if (this.rotation % 180 === this.parentRotation % 180) {
          this.width = rect.width / parentWidth;
          this.height = rect.height / parentHeight;
        } else {
          this.width = rect.height / parentWidth;
          this.height = rect.width / parentHeight;
        }
        this.fixAndSetPosition();
      }
      commit() {
        if (!this.isInEditMode()) {
          return;
        }
        super.commit();
        this.disableEditMode();
        const savedText = this.#content;
        const newText = this.#content = this.#extractText().trimEnd();
        if (savedText === newText) {
          return;
        }
        const setText = (text3) => {
          this.#content = text3;
          if (!text3) {
            this.remove();
            return;
          }
          this.#setContent();
          this._uiManager.rebuild(this);
          this.#setEditorDimensions();
        };
        this.addCommands({
          cmd: () => {
            setText(newText);
          },
          undo: () => {
            setText(savedText);
          },
          mustExec: false
        });
        this.#setEditorDimensions();
      }
      shouldGetKeyboardEvents() {
        return this.isInEditMode();
      }
      enterInEditMode() {
        this.enableEditMode();
        this.editorDiv.focus();
      }
      keydown(event) {
        if (event.target === this.div && event.key === "Enter") {
          this.enterInEditMode();
          event.preventDefault();
        }
      }
      editorDivKeydown(event) {
        _FreeTextEditor._keyboardManager.exec(this, event);
      }
      editorDivFocus(event) {
        this.isEditing = true;
      }
      editorDivBlur(event) {
        this.isEditing = false;
      }
      editorDivInput(event) {
        this.parent.div.classList.toggle("freetextEditing", this.isEmpty());
      }
      disableEditing() {
        this.editorDiv.setAttribute("role", "comment");
        this.editorDiv.removeAttribute("aria-multiline");
      }
      enableEditing() {
        this.editorDiv.setAttribute("role", "textbox");
        this.editorDiv.setAttribute("aria-multiline", true);
      }
      get canChangeContent() {
        return true;
      }
      render() {
        if (this.div) {
          return this.div;
        }
        let baseX, baseY;
        if (this._isCopy || this.annotationElementId) {
          baseX = this.x;
          baseY = this.y;
        }
        super.render();
        this.editorDiv = document.createElement("div");
        this.editorDiv.className = "internal";
        this.editorDiv.setAttribute("id", this.#editorDivId);
        this.editorDiv.setAttribute("data-l10n-id", "pdfjs-free-text2");
        this.editorDiv.setAttribute("data-l10n-attrs", "default-content");
        this.enableEditing();
        this.editorDiv.contentEditable = true;
        const {
          style
        } = this.editorDiv;
        style.fontSize = `calc(${this.#fontSize}px * var(--total-scale-factor))`;
        style.color = this.color;
        this.div.append(this.editorDiv);
        this.overlayDiv = document.createElement("div");
        this.overlayDiv.classList.add("overlay", "enabled");
        this.div.append(this.overlayDiv);
        if (this._isCopy || this.annotationElementId) {
          const [parentWidth, parentHeight] = this.parentDimensions;
          if (this.annotationElementId) {
            const {
              position
            } = this._initialData;
            let [tx, ty] = this.getInitialTranslation();
            [tx, ty] = this.pageTranslationToScreen(tx, ty);
            const [pageWidth, pageHeight] = this.pageDimensions;
            const [pageX, pageY] = this.pageTranslation;
            let posX, posY;
            switch (this.rotation) {
              case 0:
                posX = baseX + (position[0] - pageX) / pageWidth;
                posY = baseY + this.height - (position[1] - pageY) / pageHeight;
                break;
              case 90:
                posX = baseX + (position[0] - pageX) / pageWidth;
                posY = baseY - (position[1] - pageY) / pageHeight;
                [tx, ty] = [ty, -tx];
                break;
              case 180:
                posX = baseX - this.width + (position[0] - pageX) / pageWidth;
                posY = baseY - (position[1] - pageY) / pageHeight;
                [tx, ty] = [-tx, -ty];
                break;
              case 270:
                posX = baseX + (position[0] - pageX - this.height * pageHeight) / pageWidth;
                posY = baseY + (position[1] - pageY - this.width * pageWidth) / pageHeight;
                [tx, ty] = [-ty, tx];
                break;
            }
            this.setAt(posX * parentWidth, posY * parentHeight, tx, ty);
          } else {
            this._moveAfterPaste(baseX, baseY);
          }
          this.#setContent();
          this._isDraggable = true;
          this.editorDiv.contentEditable = false;
        } else {
          this._isDraggable = false;
          this.editorDiv.contentEditable = true;
        }
        return this.div;
      }
      static #getNodeContent(node) {
        return (node.nodeType === Node.TEXT_NODE ? node.nodeValue : node.innerText).replaceAll(EOL_PATTERN, "");
      }
      editorDivPaste(event) {
        const clipboardData = event.clipboardData || window.clipboardData;
        const {
          types
        } = clipboardData;
        if (types.length === 1 && types[0] === "text/plain") {
          return;
        }
        event.preventDefault();
        const paste = _FreeTextEditor.#deserializeContent(clipboardData.getData("text") || "").replaceAll(EOL_PATTERN, "\n");
        if (!paste) {
          return;
        }
        const selection = window.getSelection();
        if (!selection.rangeCount) {
          return;
        }
        this.editorDiv.normalize();
        selection.deleteFromDocument();
        const range = selection.getRangeAt(0);
        if (!paste.includes("\n")) {
          range.insertNode(document.createTextNode(paste));
          this.editorDiv.normalize();
          selection.collapseToStart();
          return;
        }
        const {
          startContainer,
          startOffset
        } = range;
        const bufferBefore = [];
        const bufferAfter = [];
        if (startContainer.nodeType === Node.TEXT_NODE) {
          const parent2 = startContainer.parentElement;
          bufferAfter.push(startContainer.nodeValue.slice(startOffset).replaceAll(EOL_PATTERN, ""));
          if (parent2 !== this.editorDiv) {
            let buffer = bufferBefore;
            for (const child of this.editorDiv.childNodes) {
              if (child === parent2) {
                buffer = bufferAfter;
                continue;
              }
              buffer.push(_FreeTextEditor.#getNodeContent(child));
            }
          }
          bufferBefore.push(startContainer.nodeValue.slice(0, startOffset).replaceAll(EOL_PATTERN, ""));
        } else if (startContainer === this.editorDiv) {
          let buffer = bufferBefore;
          let i = 0;
          for (const child of this.editorDiv.childNodes) {
            if (i++ === startOffset) {
              buffer = bufferAfter;
            }
            buffer.push(_FreeTextEditor.#getNodeContent(child));
          }
        }
        this.#content = `${bufferBefore.join("\n")}${paste}${bufferAfter.join("\n")}`;
        this.#setContent();
        const newRange = new Range();
        let beforeLength = Math.sumPrecise(bufferBefore.map((line) => line.length));
        for (const {
          firstChild
        } of this.editorDiv.childNodes) {
          if (firstChild.nodeType === Node.TEXT_NODE) {
            const length = firstChild.nodeValue.length;
            if (beforeLength <= length) {
              newRange.setStart(firstChild, beforeLength);
              newRange.setEnd(firstChild, beforeLength);
              break;
            }
            beforeLength -= length;
          }
        }
        selection.removeAllRanges();
        selection.addRange(newRange);
      }
      #setContent() {
        this.editorDiv.replaceChildren();
        if (!this.#content) {
          return;
        }
        for (const line of this.#content.split("\n")) {
          const div = document.createElement("div");
          div.append(line ? document.createTextNode(line) : document.createElement("br"));
          this.editorDiv.append(div);
        }
      }
      #serializeContent() {
        return this.#content.replaceAll("\xA0", " ");
      }
      static #deserializeContent(content) {
        return content.replaceAll(" ", "\xA0");
      }
      get contentDiv() {
        return this.editorDiv;
      }
      getPDFRect() {
        const padding = _FreeTextEditor._internalPadding * this.parentScale;
        return this.getRect(padding, padding);
      }
      static async deserialize(data2, parent2, uiManager) {
        let initialData = null;
        if (data2 instanceof FreeTextAnnotationElement) {
          const {
            data: {
              defaultAppearanceData: {
                fontSize,
                fontColor
              },
              rect,
              rotation,
              id,
              popupRef,
              richText,
              contentsObj,
              creationDate,
              modificationDate
            },
            textContent: textContent2,
            textPosition,
            parent: {
              page: {
                pageNumber
              }
            }
          } = data2;
          if (!textContent2 || textContent2.length === 0) {
            return null;
          }
          initialData = data2 = {
            annotationType: AnnotationEditorType.FREETEXT,
            color: Array.from(fontColor),
            fontSize,
            value: textContent2.join("\n"),
            position: textPosition,
            pageIndex: pageNumber - 1,
            rect: rect.slice(0),
            rotation,
            annotationElementId: id,
            id,
            deleted: false,
            popupRef,
            comment: contentsObj?.str || null,
            richText,
            creationDate,
            modificationDate
          };
        }
        const editor = await super.deserialize(data2, parent2, uiManager);
        editor.#fontSize = data2.fontSize;
        editor.color = Util.makeHexColor(...data2.color);
        editor.#content = _FreeTextEditor.#deserializeContent(data2.value);
        editor._initialData = initialData;
        if (data2.comment) {
          editor.setCommentData(data2);
        }
        return editor;
      }
      serialize(isForCopying = false) {
        if (this.isEmpty()) {
          return null;
        }
        if (this.deleted) {
          return this.serializeDeleted();
        }
        const color = AnnotationEditor._colorManager.convert(this.isAttachedToDOM ? getComputedStyle(this.editorDiv).color : this.color);
        const serialized = Object.assign(super.serialize(isForCopying), {
          color,
          fontSize: this.#fontSize,
          value: this.#serializeContent()
        });
        this.addComment(serialized);
        if (isForCopying) {
          serialized.isCopy = true;
          return serialized;
        }
        if (this.annotationElementId && !this.#hasElementChanged(serialized)) {
          return null;
        }
        serialized.id = this.annotationElementId;
        return serialized;
      }
      #hasElementChanged(serialized) {
        const {
          value,
          fontSize,
          color,
          pageIndex
        } = this._initialData;
        return this.hasEditedComment || this._hasBeenMoved || serialized.value !== value || serialized.fontSize !== fontSize || serialized.color.some((c, i) => c !== color[i]) || serialized.pageIndex !== pageIndex;
      }
      renderAnnotationElement(annotation) {
        const content = super.renderAnnotationElement(annotation);
        if (!content) {
          return null;
        }
        const {
          style
        } = content;
        style.fontSize = `calc(${this.#fontSize}px * var(--total-scale-factor))`;
        style.color = this.color;
        content.replaceChildren();
        for (const line of this.#content.split("\n")) {
          const div = document.createElement("div");
          div.append(line ? document.createTextNode(line) : document.createElement("br"));
          content.append(div);
        }
        annotation.updateEdited({
          rect: this.getPDFRect(),
          popup: this._uiManager.hasCommentManager() || this.hasEditedComment ? this.comment : {
            text: this.#content
          }
        });
        return content;
      }
      resetAnnotationElement(annotation) {
        super.resetAnnotationElement(annotation);
        annotation.resetEdited();
      }
    };
    Outline = class {
      static PRECISION = 1e-4;
      toSVGPath() {
        unreachable("Abstract method `toSVGPath` must be implemented.");
      }
      get box() {
        unreachable("Abstract getter `box` must be implemented.");
      }
      serialize(_bbox, _rotation) {
        unreachable("Abstract method `serialize` must be implemented.");
      }
      static _rescale(src, tx, ty, sx, sy, dest) {
        dest ||= new Float32Array(src.length);
        for (let i = 0, ii = src.length; i < ii; i += 2) {
          dest[i] = tx + src[i] * sx;
          dest[i + 1] = ty + src[i + 1] * sy;
        }
        return dest;
      }
      static _rescaleAndSwap(src, tx, ty, sx, sy, dest) {
        dest ||= new Float32Array(src.length);
        for (let i = 0, ii = src.length; i < ii; i += 2) {
          dest[i] = tx + src[i + 1] * sx;
          dest[i + 1] = ty + src[i] * sy;
        }
        return dest;
      }
      static _translate(src, tx, ty, dest) {
        dest ||= new Float32Array(src.length);
        for (let i = 0, ii = src.length; i < ii; i += 2) {
          dest[i] = tx + src[i];
          dest[i + 1] = ty + src[i + 1];
        }
        return dest;
      }
      static svgRound(x2) {
        return Math.round(x2 * 1e4);
      }
      static _normalizePoint(x2, y2, parentWidth, parentHeight, rotation) {
        switch (rotation) {
          case 90:
            return [1 - y2 / parentWidth, x2 / parentHeight];
          case 180:
            return [1 - x2 / parentWidth, 1 - y2 / parentHeight];
          case 270:
            return [y2 / parentWidth, 1 - x2 / parentHeight];
          default:
            return [x2 / parentWidth, y2 / parentHeight];
        }
      }
      static _normalizePagePoint(x2, y2, rotation) {
        switch (rotation) {
          case 90:
            return [1 - y2, x2];
          case 180:
            return [1 - x2, 1 - y2];
          case 270:
            return [y2, 1 - x2];
          default:
            return [x2, y2];
        }
      }
      static createBezierPoints(x1, y1, x2, y2, x3, y3) {
        return [(x1 + 5 * x2) / 6, (y1 + 5 * y2) / 6, (5 * x2 + x3) / 6, (5 * y2 + y3) / 6, (x2 + x3) / 2, (y2 + y3) / 2];
      }
    };
    FreeDrawOutliner = class _FreeDrawOutliner {
      #box;
      #bottom = [];
      #innerMargin;
      #isLTR;
      #top = [];
      #last = new Float32Array(18);
      #lastX;
      #lastY;
      #min;
      #min_dist;
      #scaleFactor;
      #thickness;
      #points = [];
      static #MIN_DIST = 8;
      static #MIN_DIFF = 2;
      static #MIN = _FreeDrawOutliner.#MIN_DIST + _FreeDrawOutliner.#MIN_DIFF;
      constructor({
        x: x2,
        y: y2
      }, box, scaleFactor, thickness, isLTR, innerMargin = 0) {
        this.#box = box;
        this.#thickness = thickness * scaleFactor;
        this.#isLTR = isLTR;
        this.#last.set([NaN, NaN, NaN, NaN, x2, y2], 6);
        this.#innerMargin = innerMargin;
        this.#min_dist = _FreeDrawOutliner.#MIN_DIST * scaleFactor;
        this.#min = _FreeDrawOutliner.#MIN * scaleFactor;
        this.#scaleFactor = scaleFactor;
        this.#points.push(x2, y2);
      }
      isEmpty() {
        return isNaN(this.#last[8]);
      }
      #getLastCoords() {
        const lastTop = this.#last.subarray(4, 6);
        const lastBottom = this.#last.subarray(16, 18);
        const [x2, y2, width, height] = this.#box;
        return [(this.#lastX + (lastTop[0] - lastBottom[0]) / 2 - x2) / width, (this.#lastY + (lastTop[1] - lastBottom[1]) / 2 - y2) / height, (this.#lastX + (lastBottom[0] - lastTop[0]) / 2 - x2) / width, (this.#lastY + (lastBottom[1] - lastTop[1]) / 2 - y2) / height];
      }
      add({
        x: x2,
        y: y2
      }) {
        this.#lastX = x2;
        this.#lastY = y2;
        const [layerX, layerY, layerWidth, layerHeight] = this.#box;
        let [x1, y1, x22, y22] = this.#last.subarray(8, 12);
        const diffX = x2 - x22;
        const diffY = y2 - y22;
        const d = Math.hypot(diffX, diffY);
        if (d < this.#min) {
          return false;
        }
        const diffD = d - this.#min_dist;
        const K2 = diffD / d;
        const shiftX = K2 * diffX;
        const shiftY = K2 * diffY;
        let x0 = x1;
        let y0 = y1;
        x1 = x22;
        y1 = y22;
        x22 += shiftX;
        y22 += shiftY;
        this.#points?.push(x2, y2);
        const nX = -shiftY / diffD;
        const nY = shiftX / diffD;
        const thX = nX * this.#thickness;
        const thY = nY * this.#thickness;
        this.#last.set(this.#last.subarray(2, 8), 0);
        this.#last.set([x22 + thX, y22 + thY], 4);
        this.#last.set(this.#last.subarray(14, 18), 12);
        this.#last.set([x22 - thX, y22 - thY], 16);
        if (isNaN(this.#last[6])) {
          if (this.#top.length === 0) {
            this.#last.set([x1 + thX, y1 + thY], 2);
            this.#top.push(NaN, NaN, NaN, NaN, (x1 + thX - layerX) / layerWidth, (y1 + thY - layerY) / layerHeight);
            this.#last.set([x1 - thX, y1 - thY], 14);
            this.#bottom.push(NaN, NaN, NaN, NaN, (x1 - thX - layerX) / layerWidth, (y1 - thY - layerY) / layerHeight);
          }
          this.#last.set([x0, y0, x1, y1, x22, y22], 6);
          return !this.isEmpty();
        }
        this.#last.set([x0, y0, x1, y1, x22, y22], 6);
        const angle = Math.abs(Math.atan2(y0 - y1, x0 - x1) - Math.atan2(shiftY, shiftX));
        if (angle < Math.PI / 2) {
          [x1, y1, x22, y22] = this.#last.subarray(2, 6);
          this.#top.push(NaN, NaN, NaN, NaN, ((x1 + x22) / 2 - layerX) / layerWidth, ((y1 + y22) / 2 - layerY) / layerHeight);
          [x1, y1, x0, y0] = this.#last.subarray(14, 18);
          this.#bottom.push(NaN, NaN, NaN, NaN, ((x0 + x1) / 2 - layerX) / layerWidth, ((y0 + y1) / 2 - layerY) / layerHeight);
          return true;
        }
        [x0, y0, x1, y1, x22, y22] = this.#last.subarray(0, 6);
        this.#top.push(((x0 + 5 * x1) / 6 - layerX) / layerWidth, ((y0 + 5 * y1) / 6 - layerY) / layerHeight, ((5 * x1 + x22) / 6 - layerX) / layerWidth, ((5 * y1 + y22) / 6 - layerY) / layerHeight, ((x1 + x22) / 2 - layerX) / layerWidth, ((y1 + y22) / 2 - layerY) / layerHeight);
        [x22, y22, x1, y1, x0, y0] = this.#last.subarray(12, 18);
        this.#bottom.push(((x0 + 5 * x1) / 6 - layerX) / layerWidth, ((y0 + 5 * y1) / 6 - layerY) / layerHeight, ((5 * x1 + x22) / 6 - layerX) / layerWidth, ((5 * y1 + y22) / 6 - layerY) / layerHeight, ((x1 + x22) / 2 - layerX) / layerWidth, ((y1 + y22) / 2 - layerY) / layerHeight);
        return true;
      }
      toSVGPath() {
        if (this.isEmpty()) {
          return "";
        }
        const top = this.#top;
        const bottom = this.#bottom;
        if (isNaN(this.#last[6]) && !this.isEmpty()) {
          return this.#toSVGPathTwoPoints();
        }
        const buffer = [];
        buffer.push(`M${top[4]} ${top[5]}`);
        for (let i = 6; i < top.length; i += 6) {
          if (isNaN(top[i])) {
            buffer.push(`L${top[i + 4]} ${top[i + 5]}`);
          } else {
            buffer.push(`C${top[i]} ${top[i + 1]} ${top[i + 2]} ${top[i + 3]} ${top[i + 4]} ${top[i + 5]}`);
          }
        }
        this.#toSVGPathEnd(buffer);
        for (let i = bottom.length - 6; i >= 6; i -= 6) {
          if (isNaN(bottom[i])) {
            buffer.push(`L${bottom[i + 4]} ${bottom[i + 5]}`);
          } else {
            buffer.push(`C${bottom[i]} ${bottom[i + 1]} ${bottom[i + 2]} ${bottom[i + 3]} ${bottom[i + 4]} ${bottom[i + 5]}`);
          }
        }
        this.#toSVGPathStart(buffer);
        return buffer.join(" ");
      }
      #toSVGPathTwoPoints() {
        const [x2, y2, width, height] = this.#box;
        const [lastTopX, lastTopY, lastBottomX, lastBottomY] = this.#getLastCoords();
        return `M${(this.#last[2] - x2) / width} ${(this.#last[3] - y2) / height} L${(this.#last[4] - x2) / width} ${(this.#last[5] - y2) / height} L${lastTopX} ${lastTopY} L${lastBottomX} ${lastBottomY} L${(this.#last[16] - x2) / width} ${(this.#last[17] - y2) / height} L${(this.#last[14] - x2) / width} ${(this.#last[15] - y2) / height} Z`;
      }
      #toSVGPathStart(buffer) {
        const bottom = this.#bottom;
        buffer.push(`L${bottom[4]} ${bottom[5]} Z`);
      }
      #toSVGPathEnd(buffer) {
        const [x2, y2, width, height] = this.#box;
        const lastTop = this.#last.subarray(4, 6);
        const lastBottom = this.#last.subarray(16, 18);
        const [lastTopX, lastTopY, lastBottomX, lastBottomY] = this.#getLastCoords();
        buffer.push(`L${(lastTop[0] - x2) / width} ${(lastTop[1] - y2) / height} L${lastTopX} ${lastTopY} L${lastBottomX} ${lastBottomY} L${(lastBottom[0] - x2) / width} ${(lastBottom[1] - y2) / height}`);
      }
      newFreeDrawOutline(outline, points, box, scaleFactor, innerMargin, isLTR) {
        return new FreeDrawOutline(outline, points, box, scaleFactor, innerMargin, isLTR);
      }
      getOutlines() {
        const top = this.#top;
        const bottom = this.#bottom;
        const last2 = this.#last;
        const [layerX, layerY, layerWidth, layerHeight] = this.#box;
        const points = new Float32Array((this.#points?.length ?? 0) + 2);
        for (let i = 0, ii = points.length - 2; i < ii; i += 2) {
          points[i] = (this.#points[i] - layerX) / layerWidth;
          points[i + 1] = (this.#points[i + 1] - layerY) / layerHeight;
        }
        points[points.length - 2] = (this.#lastX - layerX) / layerWidth;
        points[points.length - 1] = (this.#lastY - layerY) / layerHeight;
        if (isNaN(last2[6]) && !this.isEmpty()) {
          return this.#getOutlineTwoPoints(points);
        }
        const outline = new Float32Array(this.#top.length + 24 + this.#bottom.length);
        let N2 = top.length;
        for (let i = 0; i < N2; i += 2) {
          if (isNaN(top[i])) {
            outline[i] = outline[i + 1] = NaN;
            continue;
          }
          outline[i] = top[i];
          outline[i + 1] = top[i + 1];
        }
        N2 = this.#getOutlineEnd(outline, N2);
        for (let i = bottom.length - 6; i >= 6; i -= 6) {
          for (let j2 = 0; j2 < 6; j2 += 2) {
            if (isNaN(bottom[i + j2])) {
              outline[N2] = outline[N2 + 1] = NaN;
              N2 += 2;
              continue;
            }
            outline[N2] = bottom[i + j2];
            outline[N2 + 1] = bottom[i + j2 + 1];
            N2 += 2;
          }
        }
        this.#getOutlineStart(outline, N2);
        return this.newFreeDrawOutline(outline, points, this.#box, this.#scaleFactor, this.#innerMargin, this.#isLTR);
      }
      #getOutlineTwoPoints(points) {
        const last2 = this.#last;
        const [layerX, layerY, layerWidth, layerHeight] = this.#box;
        const [lastTopX, lastTopY, lastBottomX, lastBottomY] = this.#getLastCoords();
        const outline = new Float32Array(36);
        outline.set([NaN, NaN, NaN, NaN, (last2[2] - layerX) / layerWidth, (last2[3] - layerY) / layerHeight, NaN, NaN, NaN, NaN, (last2[4] - layerX) / layerWidth, (last2[5] - layerY) / layerHeight, NaN, NaN, NaN, NaN, lastTopX, lastTopY, NaN, NaN, NaN, NaN, lastBottomX, lastBottomY, NaN, NaN, NaN, NaN, (last2[16] - layerX) / layerWidth, (last2[17] - layerY) / layerHeight, NaN, NaN, NaN, NaN, (last2[14] - layerX) / layerWidth, (last2[15] - layerY) / layerHeight], 0);
        return this.newFreeDrawOutline(outline, points, this.#box, this.#scaleFactor, this.#innerMargin, this.#isLTR);
      }
      #getOutlineStart(outline, pos) {
        const bottom = this.#bottom;
        outline.set([NaN, NaN, NaN, NaN, bottom[4], bottom[5]], pos);
        return pos += 6;
      }
      #getOutlineEnd(outline, pos) {
        const lastTop = this.#last.subarray(4, 6);
        const lastBottom = this.#last.subarray(16, 18);
        const [layerX, layerY, layerWidth, layerHeight] = this.#box;
        const [lastTopX, lastTopY, lastBottomX, lastBottomY] = this.#getLastCoords();
        outline.set([NaN, NaN, NaN, NaN, (lastTop[0] - layerX) / layerWidth, (lastTop[1] - layerY) / layerHeight, NaN, NaN, NaN, NaN, lastTopX, lastTopY, NaN, NaN, NaN, NaN, lastBottomX, lastBottomY, NaN, NaN, NaN, NaN, (lastBottom[0] - layerX) / layerWidth, (lastBottom[1] - layerY) / layerHeight], pos);
        return pos += 24;
      }
    };
    FreeDrawOutline = class extends Outline {
      #box;
      #bbox = new Float32Array(4);
      #innerMargin;
      #isLTR;
      #points;
      #scaleFactor;
      #outline;
      constructor(outline, points, box, scaleFactor, innerMargin, isLTR) {
        super();
        this.#outline = outline;
        this.#points = points;
        this.#box = box;
        this.#scaleFactor = scaleFactor;
        this.#innerMargin = innerMargin;
        this.#isLTR = isLTR;
        this.firstPoint = [NaN, NaN];
        this.lastPoint = [NaN, NaN];
        this.#computeMinMax(isLTR);
        const [x2, y2, width, height] = this.#bbox;
        for (let i = 0, ii = outline.length; i < ii; i += 2) {
          outline[i] = (outline[i] - x2) / width;
          outline[i + 1] = (outline[i + 1] - y2) / height;
        }
        for (let i = 0, ii = points.length; i < ii; i += 2) {
          points[i] = (points[i] - x2) / width;
          points[i + 1] = (points[i + 1] - y2) / height;
        }
      }
      toSVGPath() {
        const buffer = [`M${this.#outline[4]} ${this.#outline[5]}`];
        for (let i = 6, ii = this.#outline.length; i < ii; i += 6) {
          if (isNaN(this.#outline[i])) {
            buffer.push(`L${this.#outline[i + 4]} ${this.#outline[i + 5]}`);
            continue;
          }
          buffer.push(`C${this.#outline[i]} ${this.#outline[i + 1]} ${this.#outline[i + 2]} ${this.#outline[i + 3]} ${this.#outline[i + 4]} ${this.#outline[i + 5]}`);
        }
        buffer.push("Z");
        return buffer.join(" ");
      }
      serialize([blX, blY, trX, trY], rotation) {
        const width = trX - blX;
        const height = trY - blY;
        let outline;
        let points;
        switch (rotation) {
          case 0:
            outline = Outline._rescale(this.#outline, blX, trY, width, -height);
            points = Outline._rescale(this.#points, blX, trY, width, -height);
            break;
          case 90:
            outline = Outline._rescaleAndSwap(this.#outline, blX, blY, width, height);
            points = Outline._rescaleAndSwap(this.#points, blX, blY, width, height);
            break;
          case 180:
            outline = Outline._rescale(this.#outline, trX, blY, -width, height);
            points = Outline._rescale(this.#points, trX, blY, -width, height);
            break;
          case 270:
            outline = Outline._rescaleAndSwap(this.#outline, trX, trY, -width, -height);
            points = Outline._rescaleAndSwap(this.#points, trX, trY, -width, -height);
            break;
        }
        return {
          outline: Array.from(outline),
          points: [Array.from(points)]
        };
      }
      #computeMinMax(isLTR) {
        const outline = this.#outline;
        let lastX = outline[4];
        let lastY = outline[5];
        const minMax = [lastX, lastY, lastX, lastY];
        let firstPointX = lastX;
        let firstPointY = lastY;
        let lastPointX = lastX;
        let lastPointY = lastY;
        const ltrCallback = isLTR ? Math.max : Math.min;
        const bezierBbox = new Float32Array(4);
        for (let i = 6, ii = outline.length; i < ii; i += 6) {
          const x2 = outline[i + 4], y2 = outline[i + 5];
          if (isNaN(outline[i])) {
            Util.pointBoundingBox(x2, y2, minMax);
            if (firstPointY > y2) {
              firstPointX = x2;
              firstPointY = y2;
            } else if (firstPointY === y2) {
              firstPointX = ltrCallback(firstPointX, x2);
            }
            if (lastPointY < y2) {
              lastPointX = x2;
              lastPointY = y2;
            } else if (lastPointY === y2) {
              lastPointX = ltrCallback(lastPointX, x2);
            }
          } else {
            bezierBbox[0] = bezierBbox[1] = Infinity;
            bezierBbox[2] = bezierBbox[3] = -Infinity;
            Util.bezierBoundingBox(lastX, lastY, ...outline.slice(i, i + 6), bezierBbox);
            Util.rectBoundingBox(bezierBbox[0], bezierBbox[1], bezierBbox[2], bezierBbox[3], minMax);
            if (firstPointY > bezierBbox[1]) {
              firstPointX = bezierBbox[0];
              firstPointY = bezierBbox[1];
            } else if (firstPointY === bezierBbox[1]) {
              firstPointX = ltrCallback(firstPointX, bezierBbox[0]);
            }
            if (lastPointY < bezierBbox[3]) {
              lastPointX = bezierBbox[2];
              lastPointY = bezierBbox[3];
            } else if (lastPointY === bezierBbox[3]) {
              lastPointX = ltrCallback(lastPointX, bezierBbox[2]);
            }
          }
          lastX = x2;
          lastY = y2;
        }
        const bbox = this.#bbox;
        bbox[0] = minMax[0] - this.#innerMargin;
        bbox[1] = minMax[1] - this.#innerMargin;
        bbox[2] = minMax[2] - minMax[0] + 2 * this.#innerMargin;
        bbox[3] = minMax[3] - minMax[1] + 2 * this.#innerMargin;
        this.firstPoint = [firstPointX, firstPointY];
        this.lastPoint = [lastPointX, lastPointY];
      }
      get box() {
        return this.#bbox;
      }
      newOutliner(point, box, scaleFactor, thickness, isLTR, innerMargin = 0) {
        return new FreeDrawOutliner(point, box, scaleFactor, thickness, isLTR, innerMargin);
      }
      getNewOutline(thickness, innerMargin) {
        const [x2, y2, width, height] = this.#bbox;
        const [layerX, layerY, layerWidth, layerHeight] = this.#box;
        const sx = width * layerWidth;
        const sy = height * layerHeight;
        const tx = x2 * layerWidth + layerX;
        const ty = y2 * layerHeight + layerY;
        const outliner = this.newOutliner({
          x: this.#points[0] * sx + tx,
          y: this.#points[1] * sy + ty
        }, this.#box, this.#scaleFactor, thickness, this.#isLTR, innerMargin ?? this.#innerMargin);
        for (let i = 2; i < this.#points.length; i += 2) {
          outliner.add({
            x: this.#points[i] * sx + tx,
            y: this.#points[i + 1] * sy + ty
          });
        }
        return outliner.getOutlines();
      }
    };
    HighlightOutliner = class {
      #box;
      #firstPoint;
      #lastPoint;
      #verticalEdges = [];
      #intervals = [];
      constructor(boxes, borderWidth = 0, innerMargin = 0, isLTR = true) {
        const minMax = [Infinity, Infinity, -Infinity, -Infinity];
        const EPSILON = 10 ** -4;
        for (const {
          x: x2,
          y: y2,
          width,
          height
        } of boxes) {
          const x1 = Math.floor((x2 - borderWidth) / EPSILON) * EPSILON;
          const x22 = Math.ceil((x2 + width + borderWidth) / EPSILON) * EPSILON;
          const y1 = Math.floor((y2 - borderWidth) / EPSILON) * EPSILON;
          const y22 = Math.ceil((y2 + height + borderWidth) / EPSILON) * EPSILON;
          const left = [x1, y1, y22, true];
          const right = [x22, y1, y22, false];
          this.#verticalEdges.push(left, right);
          Util.rectBoundingBox(x1, y1, x22, y22, minMax);
        }
        const bboxWidth = minMax[2] - minMax[0] + 2 * innerMargin;
        const bboxHeight = minMax[3] - minMax[1] + 2 * innerMargin;
        const shiftedMinX = minMax[0] - innerMargin;
        const shiftedMinY = minMax[1] - innerMargin;
        let firstPointX = isLTR ? -Infinity : Infinity;
        let firstPointY = Infinity;
        const lastEdge = this.#verticalEdges.at(isLTR ? -1 : -2);
        const lastPoint = [lastEdge[0], lastEdge[2]];
        for (const edge of this.#verticalEdges) {
          const [x2, y1, y2, left] = edge;
          if (!left && isLTR) {
            if (y1 < firstPointY) {
              firstPointY = y1;
              firstPointX = x2;
            } else if (y1 === firstPointY) {
              firstPointX = Math.max(firstPointX, x2);
            }
          } else if (left && !isLTR) {
            if (y1 < firstPointY) {
              firstPointY = y1;
              firstPointX = x2;
            } else if (y1 === firstPointY) {
              firstPointX = Math.min(firstPointX, x2);
            }
          }
          edge[0] = (x2 - shiftedMinX) / bboxWidth;
          edge[1] = (y1 - shiftedMinY) / bboxHeight;
          edge[2] = (y2 - shiftedMinY) / bboxHeight;
        }
        this.#box = new Float32Array([shiftedMinX, shiftedMinY, bboxWidth, bboxHeight]);
        this.#firstPoint = [firstPointX, firstPointY];
        this.#lastPoint = lastPoint;
      }
      getOutlines() {
        this.#verticalEdges.sort((a, b2) => a[0] - b2[0] || a[1] - b2[1] || a[2] - b2[2]);
        const outlineVerticalEdges = [];
        for (const edge of this.#verticalEdges) {
          if (edge[3]) {
            outlineVerticalEdges.push(...this.#breakEdge(edge));
            this.#insert(edge);
          } else {
            this.#remove(edge);
            outlineVerticalEdges.push(...this.#breakEdge(edge));
          }
        }
        return this.#getOutlines(outlineVerticalEdges);
      }
      #getOutlines(outlineVerticalEdges) {
        const edges = [];
        const allEdges = /* @__PURE__ */ new Set();
        for (const edge of outlineVerticalEdges) {
          const [x2, y1, y2] = edge;
          edges.push([x2, y1, edge], [x2, y2, edge]);
        }
        edges.sort((a, b2) => a[1] - b2[1] || a[0] - b2[0]);
        for (let i = 0, ii = edges.length; i < ii; i += 2) {
          const edge1 = edges[i][2];
          const edge2 = edges[i + 1][2];
          edge1.push(edge2);
          edge2.push(edge1);
          allEdges.add(edge1);
          allEdges.add(edge2);
        }
        const outlines = [];
        let outline;
        while (allEdges.size > 0) {
          const edge = allEdges.values().next().value;
          let [x2, y1, y2, edge1, edge2] = edge;
          allEdges.delete(edge);
          let lastPointX = x2;
          let lastPointY = y1;
          outline = [x2, y2];
          outlines.push(outline);
          while (true) {
            let e;
            if (allEdges.has(edge1)) {
              e = edge1;
            } else if (allEdges.has(edge2)) {
              e = edge2;
            } else {
              break;
            }
            allEdges.delete(e);
            [x2, y1, y2, edge1, edge2] = e;
            if (lastPointX !== x2) {
              outline.push(lastPointX, lastPointY, x2, lastPointY === y1 ? y1 : y2);
              lastPointX = x2;
            }
            lastPointY = lastPointY === y1 ? y2 : y1;
          }
          outline.push(lastPointX, lastPointY);
        }
        return new HighlightOutline(outlines, this.#box, this.#firstPoint, this.#lastPoint);
      }
      #binarySearch(y2) {
        const array = this.#intervals;
        let start = 0;
        let end2 = array.length - 1;
        while (start <= end2) {
          const middle = start + end2 >> 1;
          const y1 = array[middle][0];
          if (y1 === y2) {
            return middle;
          }
          if (y1 < y2) {
            start = middle + 1;
          } else {
            end2 = middle - 1;
          }
        }
        return end2 + 1;
      }
      #insert([, y1, y2]) {
        const index2 = this.#binarySearch(y1);
        this.#intervals.splice(index2, 0, [y1, y2]);
      }
      #remove([, y1, y2]) {
        const index2 = this.#binarySearch(y1);
        for (let i = index2; i < this.#intervals.length; i++) {
          const [start, end2] = this.#intervals[i];
          if (start !== y1) {
            break;
          }
          if (start === y1 && end2 === y2) {
            this.#intervals.splice(i, 1);
            return;
          }
        }
        for (let i = index2 - 1; i >= 0; i--) {
          const [start, end2] = this.#intervals[i];
          if (start !== y1) {
            break;
          }
          if (start === y1 && end2 === y2) {
            this.#intervals.splice(i, 1);
            return;
          }
        }
      }
      #breakEdge(edge) {
        const [x2, y1, y2] = edge;
        const results = [[x2, y1, y2]];
        const index2 = this.#binarySearch(y2);
        for (let i = 0; i < index2; i++) {
          const [start, end2] = this.#intervals[i];
          for (let j2 = 0, jj = results.length; j2 < jj; j2++) {
            const [, y3, y4] = results[j2];
            if (end2 <= y3 || y4 <= start) {
              continue;
            }
            if (y3 >= start) {
              if (y4 > end2) {
                results[j2][1] = end2;
              } else {
                if (jj === 1) {
                  return [];
                }
                results.splice(j2, 1);
                j2--;
                jj--;
              }
              continue;
            }
            results[j2][2] = start;
            if (y4 > end2) {
              results.push([x2, end2, y4]);
            }
          }
        }
        return results;
      }
    };
    HighlightOutline = class extends Outline {
      #box;
      #outlines;
      constructor(outlines, box, firstPoint, lastPoint) {
        super();
        this.#outlines = outlines;
        this.#box = box;
        this.firstPoint = firstPoint;
        this.lastPoint = lastPoint;
      }
      toSVGPath() {
        const buffer = [];
        for (const polygon of this.#outlines) {
          let [prevX, prevY] = polygon;
          buffer.push(`M${prevX} ${prevY}`);
          for (let i = 2; i < polygon.length; i += 2) {
            const x2 = polygon[i];
            const y2 = polygon[i + 1];
            if (x2 === prevX) {
              buffer.push(`V${y2}`);
              prevY = y2;
            } else if (y2 === prevY) {
              buffer.push(`H${x2}`);
              prevX = x2;
            }
          }
          buffer.push("Z");
        }
        return buffer.join(" ");
      }
      serialize([blX, blY, trX, trY], _rotation) {
        const outlines = [];
        const width = trX - blX;
        const height = trY - blY;
        for (const outline of this.#outlines) {
          const points = new Array(outline.length);
          for (let i = 0; i < outline.length; i += 2) {
            points[i] = blX + outline[i] * width;
            points[i + 1] = trY - outline[i + 1] * height;
          }
          outlines.push(points);
        }
        return outlines;
      }
      get box() {
        return this.#box;
      }
      get classNamesForOutlining() {
        return ["highlightOutline"];
      }
    };
    FreeHighlightOutliner = class extends FreeDrawOutliner {
      newFreeDrawOutline(outline, points, box, scaleFactor, innerMargin, isLTR) {
        return new FreeHighlightOutline(outline, points, box, scaleFactor, innerMargin, isLTR);
      }
    };
    FreeHighlightOutline = class extends FreeDrawOutline {
      newOutliner(point, box, scaleFactor, thickness, isLTR, innerMargin = 0) {
        return new FreeHighlightOutliner(point, box, scaleFactor, thickness, isLTR, innerMargin);
      }
    };
    HighlightEditor = class _HighlightEditor extends AnnotationEditor {
      #anchorNode = null;
      #anchorOffset = 0;
      #boxes;
      #clipPathId = null;
      #colorPicker = null;
      #focusOutlines = null;
      #focusNode = null;
      #focusOffset = 0;
      #highlightDiv = null;
      #highlightOutlines = null;
      #id = null;
      #isFreeHighlight = false;
      #firstPoint = null;
      #lastPoint = null;
      #outlineId = null;
      #text = "";
      #thickness;
      #methodOfCreation = "";
      static _defaultColor = null;
      static _defaultOpacity = 1;
      static _defaultThickness = 12;
      static _type = "highlight";
      static _editorType = AnnotationEditorType.HIGHLIGHT;
      static _freeHighlightId = -1;
      static _freeHighlight = null;
      static _freeHighlightClipId = "";
      static get _keyboardManager() {
        const proto = _HighlightEditor.prototype;
        return shadow(this, "_keyboardManager", new KeyboardManager([[["ArrowLeft", "mac+ArrowLeft"], proto._moveCaret, {
          args: [0]
        }], [["ArrowRight", "mac+ArrowRight"], proto._moveCaret, {
          args: [1]
        }], [["ArrowUp", "mac+ArrowUp"], proto._moveCaret, {
          args: [2]
        }], [["ArrowDown", "mac+ArrowDown"], proto._moveCaret, {
          args: [3]
        }]]));
      }
      constructor(params) {
        super({
          ...params,
          name: "highlightEditor"
        });
        this.color = params.color || _HighlightEditor._defaultColor;
        this.#thickness = params.thickness || _HighlightEditor._defaultThickness;
        this.opacity = params.opacity || _HighlightEditor._defaultOpacity;
        this.#boxes = params.boxes || null;
        this.#methodOfCreation = params.methodOfCreation || "";
        this.#text = params.text || "";
        this._isDraggable = false;
        this.defaultL10nId = "pdfjs-editor-highlight-editor";
        if (params.highlightId > -1) {
          this.#isFreeHighlight = true;
          this.#createFreeOutlines(params);
          this.#addToDrawLayer();
        } else if (this.#boxes) {
          this.#anchorNode = params.anchorNode;
          this.#anchorOffset = params.anchorOffset;
          this.#focusNode = params.focusNode;
          this.#focusOffset = params.focusOffset;
          this.#createOutlines();
          this.#addToDrawLayer();
          this.rotate(this.rotation);
        }
        if (!this.annotationElementId) {
          this._uiManager.a11yAlert("pdfjs-editor-highlight-added-alert");
        }
      }
      get telemetryInitialData() {
        return {
          action: "added",
          type: this.#isFreeHighlight ? "free_highlight" : "highlight",
          color: this._uiManager.getNonHCMColorName(this.color),
          thickness: this.#thickness,
          methodOfCreation: this.#methodOfCreation
        };
      }
      get telemetryFinalData() {
        return {
          type: "highlight",
          color: this._uiManager.getNonHCMColorName(this.color)
        };
      }
      static computeTelemetryFinalData(data2) {
        return {
          numberOfColors: data2.get("color").size
        };
      }
      #createOutlines() {
        const outliner = new HighlightOutliner(this.#boxes, 1e-3);
        this.#highlightOutlines = outliner.getOutlines();
        [this.x, this.y, this.width, this.height] = this.#highlightOutlines.box;
        const outlinerForOutline = new HighlightOutliner(this.#boxes, 25e-4, 1e-3, this._uiManager.direction === "ltr");
        this.#focusOutlines = outlinerForOutline.getOutlines();
        const {
          firstPoint
        } = this.#highlightOutlines;
        this.#firstPoint = [(firstPoint[0] - this.x) / this.width, (firstPoint[1] - this.y) / this.height];
        const {
          lastPoint
        } = this.#focusOutlines;
        this.#lastPoint = [(lastPoint[0] - this.x) / this.width, (lastPoint[1] - this.y) / this.height];
      }
      #createFreeOutlines({
        highlightOutlines,
        highlightId,
        clipPathId
      }) {
        this.#highlightOutlines = highlightOutlines;
        const extraThickness = 1.5;
        this.#focusOutlines = highlightOutlines.getNewOutline(this.#thickness / 2 + extraThickness, 25e-4);
        if (highlightId >= 0) {
          this.#id = highlightId;
          this.#clipPathId = clipPathId;
          this.parent.drawLayer.finalizeDraw(highlightId, {
            bbox: highlightOutlines.box,
            path: {
              d: highlightOutlines.toSVGPath()
            }
          });
          this.#outlineId = this.parent.drawLayer.drawOutline({
            rootClass: {
              highlightOutline: true,
              free: true
            },
            bbox: this.#focusOutlines.box,
            path: {
              d: this.#focusOutlines.toSVGPath()
            }
          }, true);
        } else if (this.parent) {
          const angle = this.parent.viewport.rotation;
          this.parent.drawLayer.updateProperties(this.#id, {
            bbox: _HighlightEditor.#rotateBbox(this.#highlightOutlines.box, (angle - this.rotation + 360) % 360),
            path: {
              d: highlightOutlines.toSVGPath()
            }
          });
          this.parent.drawLayer.updateProperties(this.#outlineId, {
            bbox: _HighlightEditor.#rotateBbox(this.#focusOutlines.box, angle),
            path: {
              d: this.#focusOutlines.toSVGPath()
            }
          });
        }
        const [x2, y2, width, height] = highlightOutlines.box;
        switch (this.rotation) {
          case 0:
            this.x = x2;
            this.y = y2;
            this.width = width;
            this.height = height;
            break;
          case 90: {
            const [pageWidth, pageHeight] = this.parentDimensions;
            this.x = y2;
            this.y = 1 - x2;
            this.width = width * pageHeight / pageWidth;
            this.height = height * pageWidth / pageHeight;
            break;
          }
          case 180:
            this.x = 1 - x2;
            this.y = 1 - y2;
            this.width = width;
            this.height = height;
            break;
          case 270: {
            const [pageWidth, pageHeight] = this.parentDimensions;
            this.x = 1 - y2;
            this.y = x2;
            this.width = width * pageHeight / pageWidth;
            this.height = height * pageWidth / pageHeight;
            break;
          }
        }
        const {
          firstPoint
        } = highlightOutlines;
        this.#firstPoint = [(firstPoint[0] - x2) / width, (firstPoint[1] - y2) / height];
        const {
          lastPoint
        } = this.#focusOutlines;
        this.#lastPoint = [(lastPoint[0] - x2) / width, (lastPoint[1] - y2) / height];
      }
      static initialize(l10n, uiManager) {
        AnnotationEditor.initialize(l10n, uiManager);
        _HighlightEditor._defaultColor ||= uiManager.highlightColors?.values().next().value || "#fff066";
      }
      static updateDefaultParams(type, value) {
        switch (type) {
          case AnnotationEditorParamsType.HIGHLIGHT_COLOR:
            _HighlightEditor._defaultColor = value;
            break;
          case AnnotationEditorParamsType.HIGHLIGHT_THICKNESS:
            _HighlightEditor._defaultThickness = value;
            break;
        }
      }
      translateInPage(x2, y2) {
      }
      get toolbarPosition() {
        return this.#lastPoint;
      }
      get commentButtonPosition() {
        return this.#firstPoint;
      }
      updateParams(type, value) {
        switch (type) {
          case AnnotationEditorParamsType.HIGHLIGHT_COLOR:
            this.#updateColor(value);
            break;
          case AnnotationEditorParamsType.HIGHLIGHT_THICKNESS:
            this.#updateThickness(value);
            break;
        }
      }
      static get defaultPropertiesToUpdate() {
        return [[AnnotationEditorParamsType.HIGHLIGHT_COLOR, _HighlightEditor._defaultColor], [AnnotationEditorParamsType.HIGHLIGHT_THICKNESS, _HighlightEditor._defaultThickness]];
      }
      get propertiesToUpdate() {
        return [[AnnotationEditorParamsType.HIGHLIGHT_COLOR, this.color || _HighlightEditor._defaultColor], [AnnotationEditorParamsType.HIGHLIGHT_THICKNESS, this.#thickness || _HighlightEditor._defaultThickness], [AnnotationEditorParamsType.HIGHLIGHT_FREE, this.#isFreeHighlight]];
      }
      onUpdatedColor() {
        this.parent?.drawLayer.updateProperties(this.#id, {
          root: {
            fill: this.color,
            "fill-opacity": this.opacity
          }
        });
        this.#colorPicker?.updateColor(this.color);
        super.onUpdatedColor();
      }
      #updateColor(color) {
        const setColorAndOpacity = (col, opa) => {
          this.color = col;
          this.opacity = opa;
          this.onUpdatedColor();
        };
        const savedColor = this.color;
        const savedOpacity = this.opacity;
        this.addCommands({
          cmd: setColorAndOpacity.bind(this, color, _HighlightEditor._defaultOpacity),
          undo: setColorAndOpacity.bind(this, savedColor, savedOpacity),
          post: this._uiManager.updateUI.bind(this._uiManager, this),
          mustExec: true,
          type: AnnotationEditorParamsType.HIGHLIGHT_COLOR,
          overwriteIfSameType: true,
          keepUndo: true
        });
        this._reportTelemetry({
          action: "color_changed",
          color: this._uiManager.getNonHCMColorName(color)
        }, true);
      }
      #updateThickness(thickness) {
        const savedThickness = this.#thickness;
        const setThickness = (th) => {
          this.#thickness = th;
          this.#changeThickness(th);
        };
        this.addCommands({
          cmd: setThickness.bind(this, thickness),
          undo: setThickness.bind(this, savedThickness),
          post: this._uiManager.updateUI.bind(this._uiManager, this),
          mustExec: true,
          type: AnnotationEditorParamsType.INK_THICKNESS,
          overwriteIfSameType: true,
          keepUndo: true
        });
        this._reportTelemetry({
          action: "thickness_changed",
          thickness
        }, true);
      }
      get toolbarButtons() {
        if (this._uiManager.highlightColors) {
          const colorPicker = this.#colorPicker = new ColorPicker({
            editor: this
          });
          return [["colorPicker", colorPicker]];
        }
        return super.toolbarButtons;
      }
      disableEditing() {
        super.disableEditing();
        this.div.classList.toggle("disabled", true);
      }
      enableEditing() {
        super.enableEditing();
        this.div.classList.toggle("disabled", false);
      }
      fixAndSetPosition() {
        return super.fixAndSetPosition(this.#getRotation());
      }
      getBaseTranslation() {
        return [0, 0];
      }
      getRect(tx, ty) {
        return super.getRect(tx, ty, this.#getRotation());
      }
      onceAdded(focus) {
        if (!this.annotationElementId) {
          this.parent.addUndoableEditor(this);
        }
        if (focus) {
          this.div.focus();
        }
      }
      remove() {
        this.#cleanDrawLayer();
        this._reportTelemetry({
          action: "deleted"
        });
        super.remove();
      }
      rebuild() {
        if (!this.parent) {
          return;
        }
        super.rebuild();
        if (this.div === null) {
          return;
        }
        this.#addToDrawLayer();
        if (!this.isAttachedToDOM) {
          this.parent.add(this);
        }
      }
      setParent(parent2) {
        let mustBeSelected = false;
        if (this.parent && !parent2) {
          this.#cleanDrawLayer();
        } else if (parent2) {
          this.#addToDrawLayer(parent2);
          mustBeSelected = !this.parent && this.div?.classList.contains("selectedEditor");
        }
        super.setParent(parent2);
        this.show(this._isVisible);
        if (mustBeSelected) {
          this.select();
        }
      }
      #changeThickness(thickness) {
        if (!this.#isFreeHighlight) {
          return;
        }
        this.#createFreeOutlines({
          highlightOutlines: this.#highlightOutlines.getNewOutline(thickness / 2)
        });
        this.fixAndSetPosition();
        this.setDims(this.width, this.height);
      }
      #cleanDrawLayer() {
        if (this.#id === null || !this.parent) {
          return;
        }
        this.parent.drawLayer.remove(this.#id);
        this.#id = null;
        this.parent.drawLayer.remove(this.#outlineId);
        this.#outlineId = null;
      }
      #addToDrawLayer(parent2 = this.parent) {
        if (this.#id !== null) {
          return;
        }
        ({
          id: this.#id,
          clipPathId: this.#clipPathId
        } = parent2.drawLayer.draw({
          bbox: this.#highlightOutlines.box,
          root: {
            viewBox: "0 0 1 1",
            fill: this.color,
            "fill-opacity": this.opacity
          },
          rootClass: {
            highlight: true,
            free: this.#isFreeHighlight
          },
          path: {
            d: this.#highlightOutlines.toSVGPath()
          }
        }, false, true));
        this.#outlineId = parent2.drawLayer.drawOutline({
          rootClass: {
            highlightOutline: true,
            free: this.#isFreeHighlight
          },
          bbox: this.#focusOutlines.box,
          path: {
            d: this.#focusOutlines.toSVGPath()
          }
        }, this.#isFreeHighlight);
        if (this.#highlightDiv) {
          this.#highlightDiv.style.clipPath = this.#clipPathId;
        }
      }
      static #rotateBbox([x2, y2, width, height], angle) {
        switch (angle) {
          case 90:
            return [1 - y2 - height, x2, height, width];
          case 180:
            return [1 - x2 - width, 1 - y2 - height, width, height];
          case 270:
            return [y2, 1 - x2 - width, height, width];
        }
        return [x2, y2, width, height];
      }
      rotate(angle) {
        const {
          drawLayer
        } = this.parent;
        let box;
        if (this.#isFreeHighlight) {
          angle = (angle - this.rotation + 360) % 360;
          box = _HighlightEditor.#rotateBbox(this.#highlightOutlines.box, angle);
        } else {
          box = _HighlightEditor.#rotateBbox([this.x, this.y, this.width, this.height], angle);
        }
        drawLayer.updateProperties(this.#id, {
          bbox: box,
          root: {
            "data-main-rotation": angle
          }
        });
        drawLayer.updateProperties(this.#outlineId, {
          bbox: _HighlightEditor.#rotateBbox(this.#focusOutlines.box, angle),
          root: {
            "data-main-rotation": angle
          }
        });
      }
      render() {
        if (this.div) {
          return this.div;
        }
        const div = super.render();
        if (this.#text) {
          div.setAttribute("aria-label", this.#text);
          div.setAttribute("role", "mark");
        }
        if (this.#isFreeHighlight) {
          div.classList.add("free");
        } else {
          this.div.addEventListener("keydown", this.#keydown.bind(this), {
            signal: this._uiManager._signal
          });
        }
        const highlightDiv = this.#highlightDiv = document.createElement("div");
        div.append(highlightDiv);
        highlightDiv.setAttribute("aria-hidden", "true");
        highlightDiv.className = "internal";
        highlightDiv.style.clipPath = this.#clipPathId;
        this.setDims(this.width, this.height);
        bindEvents(this, this.#highlightDiv, ["pointerover", "pointerleave"]);
        this.enableEditing();
        return div;
      }
      pointerover() {
        if (!this.isSelected) {
          this.parent?.drawLayer.updateProperties(this.#outlineId, {
            rootClass: {
              hovered: true
            }
          });
        }
      }
      pointerleave() {
        if (!this.isSelected) {
          this.parent?.drawLayer.updateProperties(this.#outlineId, {
            rootClass: {
              hovered: false
            }
          });
        }
      }
      #keydown(event) {
        _HighlightEditor._keyboardManager.exec(this, event);
      }
      _moveCaret(direction) {
        this.parent.unselect(this);
        switch (direction) {
          case 0:
          case 2:
            this.#setCaret(true);
            break;
          case 1:
          case 3:
            this.#setCaret(false);
            break;
        }
      }
      #setCaret(start) {
        if (!this.#anchorNode) {
          return;
        }
        const selection = window.getSelection();
        if (start) {
          selection.setPosition(this.#anchorNode, this.#anchorOffset);
        } else {
          selection.setPosition(this.#focusNode, this.#focusOffset);
        }
      }
      select() {
        super.select();
        if (!this.#outlineId) {
          return;
        }
        this.parent?.drawLayer.updateProperties(this.#outlineId, {
          rootClass: {
            hovered: false,
            selected: true
          }
        });
      }
      unselect() {
        super.unselect();
        if (!this.#outlineId) {
          return;
        }
        this.parent?.drawLayer.updateProperties(this.#outlineId, {
          rootClass: {
            selected: false
          }
        });
        if (!this.#isFreeHighlight) {
          this.#setCaret(false);
        }
      }
      get _mustFixPosition() {
        return !this.#isFreeHighlight;
      }
      show(visible = this._isVisible) {
        super.show(visible);
        if (this.parent) {
          this.parent.drawLayer.updateProperties(this.#id, {
            rootClass: {
              hidden: !visible
            }
          });
          this.parent.drawLayer.updateProperties(this.#outlineId, {
            rootClass: {
              hidden: !visible
            }
          });
        }
      }
      #getRotation() {
        return this.#isFreeHighlight ? this.rotation : 0;
      }
      #serializeBoxes() {
        if (this.#isFreeHighlight) {
          return null;
        }
        const [pageWidth, pageHeight] = this.pageDimensions;
        const [pageX, pageY] = this.pageTranslation;
        const boxes = this.#boxes;
        const quadPoints = new Float32Array(boxes.length * 8);
        let i = 0;
        for (const {
          x: x2,
          y: y2,
          width,
          height
        } of boxes) {
          const sx = x2 * pageWidth + pageX;
          const sy = (1 - y2) * pageHeight + pageY;
          quadPoints[i] = quadPoints[i + 4] = sx;
          quadPoints[i + 1] = quadPoints[i + 3] = sy;
          quadPoints[i + 2] = quadPoints[i + 6] = sx + width * pageWidth;
          quadPoints[i + 5] = quadPoints[i + 7] = sy - height * pageHeight;
          i += 8;
        }
        return quadPoints;
      }
      #serializeOutlines(rect) {
        return this.#highlightOutlines.serialize(rect, this.#getRotation());
      }
      static startHighlighting(parent2, isLTR, {
        target: textLayer,
        x: x2,
        y: y2
      }) {
        const {
          x: layerX,
          y: layerY,
          width: parentWidth,
          height: parentHeight
        } = textLayer.getBoundingClientRect();
        const ac = new AbortController();
        const signal = parent2.combinedSignal(ac);
        const pointerUpCallback = (e) => {
          ac.abort();
          this.#endHighlight(parent2, e);
        };
        window.addEventListener("blur", pointerUpCallback, {
          signal
        });
        window.addEventListener("pointerup", pointerUpCallback, {
          signal
        });
        window.addEventListener("pointerdown", stopEvent, {
          capture: true,
          passive: false,
          signal
        });
        window.addEventListener("contextmenu", noContextMenu, {
          signal
        });
        textLayer.addEventListener("pointermove", this.#highlightMove.bind(this, parent2), {
          signal
        });
        this._freeHighlight = new FreeHighlightOutliner({
          x: x2,
          y: y2
        }, [layerX, layerY, parentWidth, parentHeight], parent2.scale, this._defaultThickness / 2, isLTR, 1e-3);
        ({
          id: this._freeHighlightId,
          clipPathId: this._freeHighlightClipId
        } = parent2.drawLayer.draw({
          bbox: [0, 0, 1, 1],
          root: {
            viewBox: "0 0 1 1",
            fill: this._defaultColor,
            "fill-opacity": this._defaultOpacity
          },
          rootClass: {
            highlight: true,
            free: true
          },
          path: {
            d: this._freeHighlight.toSVGPath()
          }
        }, true, true));
      }
      static #highlightMove(parent2, event) {
        if (this._freeHighlight.add(event)) {
          parent2.drawLayer.updateProperties(this._freeHighlightId, {
            path: {
              d: this._freeHighlight.toSVGPath()
            }
          });
        }
      }
      static #endHighlight(parent2, event) {
        if (!this._freeHighlight.isEmpty()) {
          parent2.createAndAddNewEditor(event, false, {
            highlightId: this._freeHighlightId,
            highlightOutlines: this._freeHighlight.getOutlines(),
            clipPathId: this._freeHighlightClipId,
            methodOfCreation: "main_toolbar"
          });
        } else {
          parent2.drawLayer.remove(this._freeHighlightId);
        }
        this._freeHighlightId = -1;
        this._freeHighlight = null;
        this._freeHighlightClipId = "";
      }
      static async deserialize(data2, parent2, uiManager) {
        let initialData = null;
        if (data2 instanceof HighlightAnnotationElement) {
          const {
            data: {
              quadPoints: quadPoints2,
              rect,
              rotation,
              id,
              color: color2,
              opacity: opacity2,
              popupRef,
              richText,
              contentsObj,
              creationDate,
              modificationDate
            },
            parent: {
              page: {
                pageNumber
              }
            }
          } = data2;
          initialData = data2 = {
            annotationType: AnnotationEditorType.HIGHLIGHT,
            color: Array.from(color2),
            opacity: opacity2,
            quadPoints: quadPoints2,
            boxes: null,
            pageIndex: pageNumber - 1,
            rect: rect.slice(0),
            rotation,
            annotationElementId: id,
            id,
            deleted: false,
            popupRef,
            richText,
            comment: contentsObj?.str || null,
            creationDate,
            modificationDate
          };
        } else if (data2 instanceof InkAnnotationElement) {
          const {
            data: {
              inkLists: inkLists2,
              rect,
              rotation,
              id,
              color: color2,
              borderStyle: {
                rawWidth: thickness
              },
              popupRef,
              richText,
              contentsObj,
              creationDate,
              modificationDate
            },
            parent: {
              page: {
                pageNumber
              }
            }
          } = data2;
          initialData = data2 = {
            annotationType: AnnotationEditorType.HIGHLIGHT,
            color: Array.from(color2),
            thickness,
            inkLists: inkLists2,
            boxes: null,
            pageIndex: pageNumber - 1,
            rect: rect.slice(0),
            rotation,
            annotationElementId: id,
            id,
            deleted: false,
            popupRef,
            richText,
            comment: contentsObj?.str || null,
            creationDate,
            modificationDate
          };
        }
        const {
          color,
          quadPoints,
          inkLists,
          opacity
        } = data2;
        const editor = await super.deserialize(data2, parent2, uiManager);
        editor.color = Util.makeHexColor(...color);
        editor.opacity = opacity || 1;
        if (inkLists) {
          editor.#thickness = data2.thickness;
        }
        editor._initialData = initialData;
        if (data2.comment) {
          editor.setCommentData(data2);
        }
        const [pageWidth, pageHeight] = editor.pageDimensions;
        const [pageX, pageY] = editor.pageTranslation;
        if (quadPoints) {
          const boxes = editor.#boxes = [];
          for (let i = 0; i < quadPoints.length; i += 8) {
            boxes.push({
              x: (quadPoints[i] - pageX) / pageWidth,
              y: 1 - (quadPoints[i + 1] - pageY) / pageHeight,
              width: (quadPoints[i + 2] - quadPoints[i]) / pageWidth,
              height: (quadPoints[i + 1] - quadPoints[i + 5]) / pageHeight
            });
          }
          editor.#createOutlines();
          editor.#addToDrawLayer();
          editor.rotate(editor.rotation);
        } else if (inkLists) {
          editor.#isFreeHighlight = true;
          const points = inkLists[0];
          const point = {
            x: points[0] - pageX,
            y: pageHeight - (points[1] - pageY)
          };
          const outliner = new FreeHighlightOutliner(point, [0, 0, pageWidth, pageHeight], 1, editor.#thickness / 2, true, 1e-3);
          for (let i = 0, ii = points.length; i < ii; i += 2) {
            point.x = points[i] - pageX;
            point.y = pageHeight - (points[i + 1] - pageY);
            outliner.add(point);
          }
          const {
            id,
            clipPathId
          } = parent2.drawLayer.draw({
            bbox: [0, 0, 1, 1],
            root: {
              viewBox: "0 0 1 1",
              fill: editor.color,
              "fill-opacity": editor._defaultOpacity
            },
            rootClass: {
              highlight: true,
              free: true
            },
            path: {
              d: outliner.toSVGPath()
            }
          }, true, true);
          editor.#createFreeOutlines({
            highlightOutlines: outliner.getOutlines(),
            highlightId: id,
            clipPathId
          });
          editor.#addToDrawLayer();
          editor.rotate(editor.parentRotation);
        }
        return editor;
      }
      serialize(isForCopying = false) {
        if (this.isEmpty() || isForCopying) {
          return null;
        }
        if (this.deleted) {
          return this.serializeDeleted();
        }
        const color = AnnotationEditor._colorManager.convert(this._uiManager.getNonHCMColor(this.color));
        const serialized = super.serialize(isForCopying);
        Object.assign(serialized, {
          color,
          opacity: this.opacity,
          thickness: this.#thickness,
          quadPoints: this.#serializeBoxes(),
          outlines: this.#serializeOutlines(serialized.rect)
        });
        this.addComment(serialized);
        if (this.annotationElementId && !this.#hasElementChanged(serialized)) {
          return null;
        }
        serialized.id = this.annotationElementId;
        return serialized;
      }
      #hasElementChanged(serialized) {
        const {
          color
        } = this._initialData;
        return this.hasEditedComment || serialized.color.some((c, i) => c !== color[i]);
      }
      renderAnnotationElement(annotation) {
        if (this.deleted) {
          annotation.hide();
          return null;
        }
        annotation.updateEdited({
          rect: this.getPDFRect(),
          popup: this.comment
        });
        return null;
      }
      static canCreateNewEmptyEditor() {
        return false;
      }
    };
    DrawingOptions = class {
      #svgProperties = /* @__PURE__ */ Object.create(null);
      updateProperty(name, value) {
        this[name] = value;
        this.updateSVGProperty(name, value);
      }
      updateProperties(properties) {
        if (!properties) {
          return;
        }
        for (const [name, value] of Object.entries(properties)) {
          if (!name.startsWith("_")) {
            this.updateProperty(name, value);
          }
        }
      }
      updateSVGProperty(name, value) {
        this.#svgProperties[name] = value;
      }
      toSVGProperties() {
        const root2 = this.#svgProperties;
        this.#svgProperties = /* @__PURE__ */ Object.create(null);
        return {
          root: root2
        };
      }
      reset() {
        this.#svgProperties = /* @__PURE__ */ Object.create(null);
      }
      updateAll(options = this) {
        this.updateProperties(options);
      }
      clone() {
        unreachable("Not implemented");
      }
    };
    DrawingEditor = class _DrawingEditor extends AnnotationEditor {
      #drawOutlines = null;
      #mustBeCommitted;
      _colorPicker = null;
      _drawId = null;
      static _currentDrawId = -1;
      static _currentParent = null;
      static #currentDraw = null;
      static #currentDrawingAC = null;
      static #currentDrawingOptions = null;
      static #currentPointerId = NaN;
      static #currentPointerType = null;
      static #currentPointerIds = null;
      static #currentMoveTimestamp = NaN;
      static _INNER_MARGIN = 3;
      constructor(params) {
        super(params);
        this.#mustBeCommitted = params.mustBeCommitted || false;
        this._addOutlines(params);
      }
      onUpdatedColor() {
        this._colorPicker?.update(this.color);
        super.onUpdatedColor();
      }
      _addOutlines(params) {
        if (params.drawOutlines) {
          this.#createDrawOutlines(params);
          this.#addToDrawLayer();
        }
      }
      #createDrawOutlines({
        drawOutlines,
        drawId,
        drawingOptions
      }) {
        this.#drawOutlines = drawOutlines;
        this._drawingOptions ||= drawingOptions;
        if (!this.annotationElementId) {
          this._uiManager.a11yAlert(`pdfjs-editor-${this.editorType}-added-alert`);
        }
        if (drawId >= 0) {
          this._drawId = drawId;
          this.parent.drawLayer.finalizeDraw(drawId, drawOutlines.defaultProperties);
        } else {
          this._drawId = this.#createDrawing(drawOutlines, this.parent);
        }
        this.#updateBbox(drawOutlines.box);
      }
      #createDrawing(drawOutlines, parent2) {
        const {
          id
        } = parent2.drawLayer.draw(_DrawingEditor._mergeSVGProperties(this._drawingOptions.toSVGProperties(), drawOutlines.defaultSVGProperties), false, false);
        return id;
      }
      static _mergeSVGProperties(p1, p2) {
        const p1Keys = new Set(Object.keys(p1));
        for (const [key, value] of Object.entries(p2)) {
          if (p1Keys.has(key)) {
            Object.assign(p1[key], value);
          } else {
            p1[key] = value;
          }
        }
        return p1;
      }
      static getDefaultDrawingOptions(_options) {
        unreachable("Not implemented");
      }
      static get typesMap() {
        unreachable("Not implemented");
      }
      static get isDrawer() {
        return true;
      }
      static get supportMultipleDrawings() {
        return false;
      }
      static updateDefaultParams(type, value) {
        const propertyName = this.typesMap.get(type);
        if (propertyName) {
          this._defaultDrawingOptions.updateProperty(propertyName, value);
        }
        if (this._currentParent) {
          _DrawingEditor.#currentDraw.updateProperty(propertyName, value);
          this._currentParent.drawLayer.updateProperties(this._currentDrawId, this._defaultDrawingOptions.toSVGProperties());
        }
      }
      updateParams(type, value) {
        const propertyName = this.constructor.typesMap.get(type);
        if (propertyName) {
          this._updateProperty(type, propertyName, value);
        }
      }
      static get defaultPropertiesToUpdate() {
        const properties = [];
        const options = this._defaultDrawingOptions;
        for (const [type, name] of this.typesMap) {
          properties.push([type, options[name]]);
        }
        return properties;
      }
      get propertiesToUpdate() {
        const properties = [];
        const {
          _drawingOptions
        } = this;
        for (const [type, name] of this.constructor.typesMap) {
          properties.push([type, _drawingOptions[name]]);
        }
        return properties;
      }
      _updateProperty(type, name, value) {
        const options = this._drawingOptions;
        const savedValue = options[name];
        const setter = (val2) => {
          options.updateProperty(name, val2);
          const bbox = this.#drawOutlines.updateProperty(name, val2);
          if (bbox) {
            this.#updateBbox(bbox);
          }
          this.parent?.drawLayer.updateProperties(this._drawId, options.toSVGProperties());
          if (type === this.colorType) {
            this.onUpdatedColor();
          }
        };
        this.addCommands({
          cmd: setter.bind(this, value),
          undo: setter.bind(this, savedValue),
          post: this._uiManager.updateUI.bind(this._uiManager, this),
          mustExec: true,
          type,
          overwriteIfSameType: true,
          keepUndo: true
        });
      }
      _onResizing() {
        this.parent?.drawLayer.updateProperties(this._drawId, _DrawingEditor._mergeSVGProperties(this.#drawOutlines.getPathResizingSVGProperties(this.#convertToDrawSpace()), {
          bbox: this.#rotateBox()
        }));
      }
      _onResized() {
        this.parent?.drawLayer.updateProperties(this._drawId, _DrawingEditor._mergeSVGProperties(this.#drawOutlines.getPathResizedSVGProperties(this.#convertToDrawSpace()), {
          bbox: this.#rotateBox()
        }));
      }
      _onTranslating(_x, _y) {
        this.parent?.drawLayer.updateProperties(this._drawId, {
          bbox: this.#rotateBox()
        });
      }
      _onTranslated() {
        this.parent?.drawLayer.updateProperties(this._drawId, _DrawingEditor._mergeSVGProperties(this.#drawOutlines.getPathTranslatedSVGProperties(this.#convertToDrawSpace(), this.parentDimensions), {
          bbox: this.#rotateBox()
        }));
      }
      _onStartDragging() {
        this.parent?.drawLayer.updateProperties(this._drawId, {
          rootClass: {
            moving: true
          }
        });
      }
      _onStopDragging() {
        this.parent?.drawLayer.updateProperties(this._drawId, {
          rootClass: {
            moving: false
          }
        });
      }
      commit() {
        super.commit();
        this.disableEditMode();
        this.disableEditing();
      }
      disableEditing() {
        super.disableEditing();
        this.div.classList.toggle("disabled", true);
      }
      enableEditing() {
        super.enableEditing();
        this.div.classList.toggle("disabled", false);
      }
      getBaseTranslation() {
        return [0, 0];
      }
      get isResizable() {
        return true;
      }
      onceAdded(focus) {
        if (!this.annotationElementId) {
          this.parent.addUndoableEditor(this);
        }
        this._isDraggable = true;
        if (this.#mustBeCommitted) {
          this.#mustBeCommitted = false;
          this.commit();
          this.parent.setSelected(this);
          if (focus && this.isOnScreen) {
            this.div.focus();
          }
        }
      }
      remove() {
        this.#cleanDrawLayer();
        super.remove();
      }
      rebuild() {
        if (!this.parent) {
          return;
        }
        super.rebuild();
        if (this.div === null) {
          return;
        }
        this.#addToDrawLayer();
        this.#updateBbox(this.#drawOutlines.box);
        if (!this.isAttachedToDOM) {
          this.parent.add(this);
        }
      }
      setParent(parent2) {
        let mustBeSelected = false;
        if (this.parent && !parent2) {
          this._uiManager.removeShouldRescale(this);
          this.#cleanDrawLayer();
        } else if (parent2) {
          this._uiManager.addShouldRescale(this);
          this.#addToDrawLayer(parent2);
          mustBeSelected = !this.parent && this.div?.classList.contains("selectedEditor");
        }
        super.setParent(parent2);
        if (mustBeSelected) {
          this.select();
        }
      }
      #cleanDrawLayer() {
        if (this._drawId === null || !this.parent) {
          return;
        }
        this.parent.drawLayer.remove(this._drawId);
        this._drawId = null;
        this._drawingOptions.reset();
      }
      #addToDrawLayer(parent2 = this.parent) {
        if (this._drawId !== null && this.parent === parent2) {
          return;
        }
        if (this._drawId !== null) {
          this.parent.drawLayer.updateParent(this._drawId, parent2.drawLayer);
          return;
        }
        this._drawingOptions.updateAll();
        this._drawId = this.#createDrawing(this.#drawOutlines, parent2);
      }
      #convertToParentSpace([x2, y2, width, height]) {
        const {
          parentDimensions: [pW, pH],
          rotation
        } = this;
        switch (rotation) {
          case 90:
            return [y2, 1 - x2, width * (pH / pW), height * (pW / pH)];
          case 180:
            return [1 - x2, 1 - y2, width, height];
          case 270:
            return [1 - y2, x2, width * (pH / pW), height * (pW / pH)];
          default:
            return [x2, y2, width, height];
        }
      }
      #convertToDrawSpace() {
        const {
          x: x2,
          y: y2,
          width,
          height,
          parentDimensions: [pW, pH],
          rotation
        } = this;
        switch (rotation) {
          case 90:
            return [1 - y2, x2, width * (pW / pH), height * (pH / pW)];
          case 180:
            return [1 - x2, 1 - y2, width, height];
          case 270:
            return [y2, 1 - x2, width * (pW / pH), height * (pH / pW)];
          default:
            return [x2, y2, width, height];
        }
      }
      #updateBbox(bbox) {
        [this.x, this.y, this.width, this.height] = this.#convertToParentSpace(bbox);
        if (this.div) {
          this.fixAndSetPosition();
          this.setDims();
        }
        this._onResized();
      }
      #rotateBox() {
        const {
          x: x2,
          y: y2,
          width,
          height,
          rotation,
          parentRotation,
          parentDimensions: [pW, pH]
        } = this;
        switch ((rotation * 4 + parentRotation) / 90) {
          case 1:
            return [1 - y2 - height, x2, height, width];
          case 2:
            return [1 - x2 - width, 1 - y2 - height, width, height];
          case 3:
            return [y2, 1 - x2 - width, height, width];
          case 4:
            return [x2, y2 - width * (pW / pH), height * (pH / pW), width * (pW / pH)];
          case 5:
            return [1 - y2, x2, width * (pW / pH), height * (pH / pW)];
          case 6:
            return [1 - x2 - height * (pH / pW), 1 - y2, height * (pH / pW), width * (pW / pH)];
          case 7:
            return [y2 - width * (pW / pH), 1 - x2 - height * (pH / pW), width * (pW / pH), height * (pH / pW)];
          case 8:
            return [x2 - width, y2 - height, width, height];
          case 9:
            return [1 - y2, x2 - width, height, width];
          case 10:
            return [1 - x2, 1 - y2, width, height];
          case 11:
            return [y2 - height, 1 - x2, height, width];
          case 12:
            return [x2 - height * (pH / pW), y2, height * (pH / pW), width * (pW / pH)];
          case 13:
            return [1 - y2 - width * (pW / pH), x2 - height * (pH / pW), width * (pW / pH), height * (pH / pW)];
          case 14:
            return [1 - x2, 1 - y2 - width * (pW / pH), height * (pH / pW), width * (pW / pH)];
          case 15:
            return [y2, 1 - x2, width * (pW / pH), height * (pH / pW)];
          default:
            return [x2, y2, width, height];
        }
      }
      rotate() {
        if (!this.parent) {
          return;
        }
        this.parent.drawLayer.updateProperties(this._drawId, _DrawingEditor._mergeSVGProperties({
          bbox: this.#rotateBox()
        }, this.#drawOutlines.updateRotation((this.parentRotation - this.rotation + 360) % 360)));
      }
      onScaleChanging() {
        if (!this.parent) {
          return;
        }
        this.#updateBbox(this.#drawOutlines.updateParentDimensions(this.parentDimensions, this.parent.scale));
      }
      static onScaleChangingWhenDrawing() {
      }
      render() {
        if (this.div) {
          return this.div;
        }
        let baseX, baseY;
        if (this._isCopy) {
          baseX = this.x;
          baseY = this.y;
        }
        const div = super.render();
        div.classList.add("draw");
        const drawDiv = document.createElement("div");
        div.append(drawDiv);
        drawDiv.setAttribute("aria-hidden", "true");
        drawDiv.className = "internal";
        this.setDims();
        this._uiManager.addShouldRescale(this);
        this.disableEditing();
        if (this._isCopy) {
          this._moveAfterPaste(baseX, baseY);
        }
        return div;
      }
      static createDrawerInstance(_x, _y, _parentWidth, _parentHeight, _rotation) {
        unreachable("Not implemented");
      }
      static startDrawing(parent2, uiManager, _isLTR, event) {
        const {
          target,
          offsetX: x2,
          offsetY: y2,
          pointerId,
          pointerType
        } = event;
        if (_DrawingEditor.#currentPointerType && _DrawingEditor.#currentPointerType !== pointerType) {
          return;
        }
        const {
          viewport: {
            rotation
          }
        } = parent2;
        const {
          width: parentWidth,
          height: parentHeight
        } = target.getBoundingClientRect();
        const ac = _DrawingEditor.#currentDrawingAC = new AbortController();
        const signal = parent2.combinedSignal(ac);
        _DrawingEditor.#currentPointerId ||= pointerId;
        _DrawingEditor.#currentPointerType ??= pointerType;
        window.addEventListener("pointerup", (e) => {
          if (_DrawingEditor.#currentPointerId === e.pointerId) {
            this._endDraw(e);
          } else {
            _DrawingEditor.#currentPointerIds?.delete(e.pointerId);
          }
        }, {
          signal
        });
        window.addEventListener("pointercancel", (e) => {
          if (_DrawingEditor.#currentPointerId === e.pointerId) {
            this._currentParent.endDrawingSession();
          } else {
            _DrawingEditor.#currentPointerIds?.delete(e.pointerId);
          }
        }, {
          signal
        });
        window.addEventListener("pointerdown", (e) => {
          if (_DrawingEditor.#currentPointerType !== e.pointerType) {
            return;
          }
          (_DrawingEditor.#currentPointerIds ||= /* @__PURE__ */ new Set()).add(e.pointerId);
          if (_DrawingEditor.#currentDraw.isCancellable()) {
            _DrawingEditor.#currentDraw.removeLastElement();
            if (_DrawingEditor.#currentDraw.isEmpty()) {
              this._currentParent.endDrawingSession(true);
            } else {
              this._endDraw(null);
            }
          }
        }, {
          capture: true,
          passive: false,
          signal
        });
        window.addEventListener("contextmenu", noContextMenu, {
          signal
        });
        target.addEventListener("pointermove", this._drawMove.bind(this), {
          signal
        });
        target.addEventListener("touchmove", (e) => {
          if (e.timeStamp === _DrawingEditor.#currentMoveTimestamp) {
            stopEvent(e);
          }
        }, {
          signal
        });
        parent2.toggleDrawing();
        uiManager._editorUndoBar?.hide();
        if (_DrawingEditor.#currentDraw) {
          parent2.drawLayer.updateProperties(this._currentDrawId, _DrawingEditor.#currentDraw.startNew(x2, y2, parentWidth, parentHeight, rotation));
          return;
        }
        uiManager.updateUIForDefaultProperties(this);
        _DrawingEditor.#currentDraw = this.createDrawerInstance(x2, y2, parentWidth, parentHeight, rotation);
        _DrawingEditor.#currentDrawingOptions = this.getDefaultDrawingOptions();
        this._currentParent = parent2;
        ({
          id: this._currentDrawId
        } = parent2.drawLayer.draw(this._mergeSVGProperties(_DrawingEditor.#currentDrawingOptions.toSVGProperties(), _DrawingEditor.#currentDraw.defaultSVGProperties), true, false));
      }
      static _drawMove(event) {
        _DrawingEditor.#currentMoveTimestamp = -1;
        if (!_DrawingEditor.#currentDraw) {
          return;
        }
        const {
          offsetX,
          offsetY,
          pointerId
        } = event;
        if (_DrawingEditor.#currentPointerId !== pointerId) {
          return;
        }
        if (_DrawingEditor.#currentPointerIds?.size >= 1) {
          this._endDraw(event);
          return;
        }
        this._currentParent.drawLayer.updateProperties(this._currentDrawId, _DrawingEditor.#currentDraw.add(offsetX, offsetY));
        _DrawingEditor.#currentMoveTimestamp = event.timeStamp;
        stopEvent(event);
      }
      static _cleanup(all3) {
        if (all3) {
          this._currentDrawId = -1;
          this._currentParent = null;
          _DrawingEditor.#currentDraw = null;
          _DrawingEditor.#currentDrawingOptions = null;
          _DrawingEditor.#currentPointerType = null;
          _DrawingEditor.#currentMoveTimestamp = NaN;
        }
        if (_DrawingEditor.#currentDrawingAC) {
          _DrawingEditor.#currentDrawingAC.abort();
          _DrawingEditor.#currentDrawingAC = null;
          _DrawingEditor.#currentPointerId = NaN;
          _DrawingEditor.#currentPointerIds = null;
        }
      }
      static _endDraw(event) {
        const parent2 = this._currentParent;
        if (!parent2) {
          return;
        }
        parent2.toggleDrawing(true);
        this._cleanup(false);
        if (event?.target === parent2.div) {
          parent2.drawLayer.updateProperties(this._currentDrawId, _DrawingEditor.#currentDraw.end(event.offsetX, event.offsetY));
        }
        if (this.supportMultipleDrawings) {
          const draw = _DrawingEditor.#currentDraw;
          const drawId = this._currentDrawId;
          const lastElement = draw.getLastElement();
          parent2.addCommands({
            cmd: () => {
              parent2.drawLayer.updateProperties(drawId, draw.setLastElement(lastElement));
            },
            undo: () => {
              parent2.drawLayer.updateProperties(drawId, draw.removeLastElement());
            },
            mustExec: false,
            type: AnnotationEditorParamsType.DRAW_STEP
          });
          return;
        }
        this.endDrawing(false);
      }
      static endDrawing(isAborted) {
        const parent2 = this._currentParent;
        if (!parent2) {
          return null;
        }
        parent2.toggleDrawing(true);
        parent2.cleanUndoStack(AnnotationEditorParamsType.DRAW_STEP);
        if (!_DrawingEditor.#currentDraw.isEmpty()) {
          const {
            pageDimensions: [pageWidth, pageHeight],
            scale
          } = parent2;
          const editor = parent2.createAndAddNewEditor({
            offsetX: 0,
            offsetY: 0
          }, false, {
            drawId: this._currentDrawId,
            drawOutlines: _DrawingEditor.#currentDraw.getOutlines(pageWidth * scale, pageHeight * scale, scale, this._INNER_MARGIN),
            drawingOptions: _DrawingEditor.#currentDrawingOptions,
            mustBeCommitted: !isAborted
          });
          this._cleanup(true);
          return editor;
        }
        parent2.drawLayer.remove(this._currentDrawId);
        this._cleanup(true);
        return null;
      }
      createDrawingOptions(_data) {
      }
      static deserializeDraw(_pageX, _pageY, _pageWidth, _pageHeight, _innerWidth, _data) {
        unreachable("Not implemented");
      }
      static async deserialize(data2, parent2, uiManager) {
        const {
          rawDims: {
            pageWidth,
            pageHeight,
            pageX,
            pageY
          }
        } = parent2.viewport;
        const drawOutlines = this.deserializeDraw(pageX, pageY, pageWidth, pageHeight, this._INNER_MARGIN, data2);
        const editor = await super.deserialize(data2, parent2, uiManager);
        editor.createDrawingOptions(data2);
        editor.#createDrawOutlines({
          drawOutlines
        });
        editor.#addToDrawLayer();
        editor.onScaleChanging();
        editor.rotate();
        return editor;
      }
      serializeDraw(isForCopying) {
        const [pageX, pageY] = this.pageTranslation;
        const [pageWidth, pageHeight] = this.pageDimensions;
        return this.#drawOutlines.serialize([pageX, pageY, pageWidth, pageHeight], isForCopying);
      }
      renderAnnotationElement(annotation) {
        annotation.updateEdited({
          rect: this.getPDFRect()
        });
        return null;
      }
      static canCreateNewEmptyEditor() {
        return false;
      }
    };
    InkDrawOutliner = class {
      #last = new Float64Array(6);
      #line;
      #lines;
      #rotation;
      #thickness;
      #points;
      #lastSVGPath = "";
      #lastIndex = 0;
      #outlines = new InkDrawOutline();
      #parentWidth;
      #parentHeight;
      constructor(x2, y2, parentWidth, parentHeight, rotation, thickness) {
        this.#parentWidth = parentWidth;
        this.#parentHeight = parentHeight;
        this.#rotation = rotation;
        this.#thickness = thickness;
        [x2, y2] = this.#normalizePoint(x2, y2);
        const line = this.#line = [NaN, NaN, NaN, NaN, x2, y2];
        this.#points = [x2, y2];
        this.#lines = [{
          line,
          points: this.#points
        }];
        this.#last.set(line, 0);
      }
      updateProperty(name, value) {
        if (name === "stroke-width") {
          this.#thickness = value;
        }
      }
      #normalizePoint(x2, y2) {
        return Outline._normalizePoint(x2, y2, this.#parentWidth, this.#parentHeight, this.#rotation);
      }
      isEmpty() {
        return !this.#lines || this.#lines.length === 0;
      }
      isCancellable() {
        return this.#points.length <= 10;
      }
      add(x2, y2) {
        [x2, y2] = this.#normalizePoint(x2, y2);
        const [x1, y1, x22, y22] = this.#last.subarray(2, 6);
        const diffX = x2 - x22;
        const diffY = y2 - y22;
        const d = Math.hypot(this.#parentWidth * diffX, this.#parentHeight * diffY);
        if (d <= 2) {
          return null;
        }
        this.#points.push(x2, y2);
        if (isNaN(x1)) {
          this.#last.set([x22, y22, x2, y2], 2);
          this.#line.push(NaN, NaN, NaN, NaN, x2, y2);
          return {
            path: {
              d: this.toSVGPath()
            }
          };
        }
        if (isNaN(this.#last[0])) {
          this.#line.splice(6, 6);
        }
        this.#last.set([x1, y1, x22, y22, x2, y2], 0);
        this.#line.push(...Outline.createBezierPoints(x1, y1, x22, y22, x2, y2));
        return {
          path: {
            d: this.toSVGPath()
          }
        };
      }
      end(x2, y2) {
        const change = this.add(x2, y2);
        if (change) {
          return change;
        }
        if (this.#points.length === 2) {
          return {
            path: {
              d: this.toSVGPath()
            }
          };
        }
        return null;
      }
      startNew(x2, y2, parentWidth, parentHeight, rotation) {
        this.#parentWidth = parentWidth;
        this.#parentHeight = parentHeight;
        this.#rotation = rotation;
        [x2, y2] = this.#normalizePoint(x2, y2);
        const line = this.#line = [NaN, NaN, NaN, NaN, x2, y2];
        this.#points = [x2, y2];
        const last2 = this.#lines.at(-1);
        if (last2) {
          last2.line = new Float32Array(last2.line);
          last2.points = new Float32Array(last2.points);
        }
        this.#lines.push({
          line,
          points: this.#points
        });
        this.#last.set(line, 0);
        this.#lastIndex = 0;
        this.toSVGPath();
        return null;
      }
      getLastElement() {
        return this.#lines.at(-1);
      }
      setLastElement(element) {
        if (!this.#lines) {
          return this.#outlines.setLastElement(element);
        }
        this.#lines.push(element);
        this.#line = element.line;
        this.#points = element.points;
        this.#lastIndex = 0;
        return {
          path: {
            d: this.toSVGPath()
          }
        };
      }
      removeLastElement() {
        if (!this.#lines) {
          return this.#outlines.removeLastElement();
        }
        this.#lines.pop();
        this.#lastSVGPath = "";
        for (let i = 0, ii = this.#lines.length; i < ii; i++) {
          const {
            line,
            points
          } = this.#lines[i];
          this.#line = line;
          this.#points = points;
          this.#lastIndex = 0;
          this.toSVGPath();
        }
        return {
          path: {
            d: this.#lastSVGPath
          }
        };
      }
      toSVGPath() {
        const firstX = Outline.svgRound(this.#line[4]);
        const firstY = Outline.svgRound(this.#line[5]);
        if (this.#points.length === 2) {
          this.#lastSVGPath = `${this.#lastSVGPath} M ${firstX} ${firstY} Z`;
          return this.#lastSVGPath;
        }
        if (this.#points.length <= 6) {
          const i = this.#lastSVGPath.lastIndexOf("M");
          this.#lastSVGPath = `${this.#lastSVGPath.slice(0, i)} M ${firstX} ${firstY}`;
          this.#lastIndex = 6;
        }
        if (this.#points.length === 4) {
          const secondX = Outline.svgRound(this.#line[10]);
          const secondY = Outline.svgRound(this.#line[11]);
          this.#lastSVGPath = `${this.#lastSVGPath} L ${secondX} ${secondY}`;
          this.#lastIndex = 12;
          return this.#lastSVGPath;
        }
        const buffer = [];
        if (this.#lastIndex === 0) {
          buffer.push(`M ${firstX} ${firstY}`);
          this.#lastIndex = 6;
        }
        for (let i = this.#lastIndex, ii = this.#line.length; i < ii; i += 6) {
          const [c1x, c1y, c2x, c2y, x2, y2] = this.#line.slice(i, i + 6).map(Outline.svgRound);
          buffer.push(`C${c1x} ${c1y} ${c2x} ${c2y} ${x2} ${y2}`);
        }
        this.#lastSVGPath += buffer.join(" ");
        this.#lastIndex = this.#line.length;
        return this.#lastSVGPath;
      }
      getOutlines(parentWidth, parentHeight, scale, innerMargin) {
        const last2 = this.#lines.at(-1);
        last2.line = new Float32Array(last2.line);
        last2.points = new Float32Array(last2.points);
        this.#outlines.build(this.#lines, parentWidth, parentHeight, scale, this.#rotation, this.#thickness, innerMargin);
        this.#last = null;
        this.#line = null;
        this.#lines = null;
        this.#lastSVGPath = null;
        return this.#outlines;
      }
      get defaultSVGProperties() {
        return {
          root: {
            viewBox: "0 0 10000 10000"
          },
          rootClass: {
            draw: true
          },
          bbox: [0, 0, 1, 1]
        };
      }
    };
    InkDrawOutline = class extends Outline {
      #bbox;
      #currentRotation = 0;
      #innerMargin;
      #lines;
      #parentWidth;
      #parentHeight;
      #parentScale;
      #rotation;
      #thickness;
      build(lines, parentWidth, parentHeight, parentScale, rotation, thickness, innerMargin) {
        this.#parentWidth = parentWidth;
        this.#parentHeight = parentHeight;
        this.#parentScale = parentScale;
        this.#rotation = rotation;
        this.#thickness = thickness;
        this.#innerMargin = innerMargin ?? 0;
        this.#lines = lines;
        this.#computeBbox();
      }
      get thickness() {
        return this.#thickness;
      }
      setLastElement(element) {
        this.#lines.push(element);
        return {
          path: {
            d: this.toSVGPath()
          }
        };
      }
      removeLastElement() {
        this.#lines.pop();
        return {
          path: {
            d: this.toSVGPath()
          }
        };
      }
      toSVGPath() {
        const buffer = [];
        for (const {
          line
        } of this.#lines) {
          buffer.push(`M${Outline.svgRound(line[4])} ${Outline.svgRound(line[5])}`);
          if (line.length === 6) {
            buffer.push("Z");
            continue;
          }
          if (line.length === 12 && isNaN(line[6])) {
            buffer.push(`L${Outline.svgRound(line[10])} ${Outline.svgRound(line[11])}`);
            continue;
          }
          for (let i = 6, ii = line.length; i < ii; i += 6) {
            const [c1x, c1y, c2x, c2y, x2, y2] = line.subarray(i, i + 6).map(Outline.svgRound);
            buffer.push(`C${c1x} ${c1y} ${c2x} ${c2y} ${x2} ${y2}`);
          }
        }
        return buffer.join("");
      }
      serialize([pageX, pageY, pageWidth, pageHeight], isForCopying) {
        const serializedLines = [];
        const serializedPoints = [];
        const [x2, y2, width, height] = this.#getBBoxWithNoMargin();
        let tx, ty, sx, sy, x1, y1, x22, y22, rescaleFn;
        switch (this.#rotation) {
          case 0:
            rescaleFn = Outline._rescale;
            tx = pageX;
            ty = pageY + pageHeight;
            sx = pageWidth;
            sy = -pageHeight;
            x1 = pageX + x2 * pageWidth;
            y1 = pageY + (1 - y2 - height) * pageHeight;
            x22 = pageX + (x2 + width) * pageWidth;
            y22 = pageY + (1 - y2) * pageHeight;
            break;
          case 90:
            rescaleFn = Outline._rescaleAndSwap;
            tx = pageX;
            ty = pageY;
            sx = pageWidth;
            sy = pageHeight;
            x1 = pageX + y2 * pageWidth;
            y1 = pageY + x2 * pageHeight;
            x22 = pageX + (y2 + height) * pageWidth;
            y22 = pageY + (x2 + width) * pageHeight;
            break;
          case 180:
            rescaleFn = Outline._rescale;
            tx = pageX + pageWidth;
            ty = pageY;
            sx = -pageWidth;
            sy = pageHeight;
            x1 = pageX + (1 - x2 - width) * pageWidth;
            y1 = pageY + y2 * pageHeight;
            x22 = pageX + (1 - x2) * pageWidth;
            y22 = pageY + (y2 + height) * pageHeight;
            break;
          case 270:
            rescaleFn = Outline._rescaleAndSwap;
            tx = pageX + pageWidth;
            ty = pageY + pageHeight;
            sx = -pageWidth;
            sy = -pageHeight;
            x1 = pageX + (1 - y2 - height) * pageWidth;
            y1 = pageY + (1 - x2 - width) * pageHeight;
            x22 = pageX + (1 - y2) * pageWidth;
            y22 = pageY + (1 - x2) * pageHeight;
            break;
        }
        for (const {
          line,
          points
        } of this.#lines) {
          serializedLines.push(rescaleFn(line, tx, ty, sx, sy, isForCopying ? new Array(line.length) : null));
          serializedPoints.push(rescaleFn(points, tx, ty, sx, sy, isForCopying ? new Array(points.length) : null));
        }
        return {
          lines: serializedLines,
          points: serializedPoints,
          rect: [x1, y1, x22, y22]
        };
      }
      static deserialize(pageX, pageY, pageWidth, pageHeight, innerMargin, {
        paths: {
          lines,
          points
        },
        rotation,
        thickness
      }) {
        const newLines = [];
        let tx, ty, sx, sy, rescaleFn;
        switch (rotation) {
          case 0:
            rescaleFn = Outline._rescale;
            tx = -pageX / pageWidth;
            ty = pageY / pageHeight + 1;
            sx = 1 / pageWidth;
            sy = -1 / pageHeight;
            break;
          case 90:
            rescaleFn = Outline._rescaleAndSwap;
            tx = -pageY / pageHeight;
            ty = -pageX / pageWidth;
            sx = 1 / pageHeight;
            sy = 1 / pageWidth;
            break;
          case 180:
            rescaleFn = Outline._rescale;
            tx = pageX / pageWidth + 1;
            ty = -pageY / pageHeight;
            sx = -1 / pageWidth;
            sy = 1 / pageHeight;
            break;
          case 270:
            rescaleFn = Outline._rescaleAndSwap;
            tx = pageY / pageHeight + 1;
            ty = pageX / pageWidth + 1;
            sx = -1 / pageHeight;
            sy = -1 / pageWidth;
            break;
        }
        if (!lines) {
          lines = [];
          for (const point of points) {
            const len = point.length;
            if (len === 2) {
              lines.push(new Float32Array([NaN, NaN, NaN, NaN, point[0], point[1]]));
              continue;
            }
            if (len === 4) {
              lines.push(new Float32Array([NaN, NaN, NaN, NaN, point[0], point[1], NaN, NaN, NaN, NaN, point[2], point[3]]));
              continue;
            }
            const line = new Float32Array(3 * (len - 2));
            lines.push(line);
            let [x1, y1, x2, y2] = point.subarray(0, 4);
            line.set([NaN, NaN, NaN, NaN, x1, y1], 0);
            for (let i = 4; i < len; i += 2) {
              const x3 = point[i];
              const y3 = point[i + 1];
              line.set(Outline.createBezierPoints(x1, y1, x2, y2, x3, y3), (i - 2) * 3);
              [x1, y1, x2, y2] = [x2, y2, x3, y3];
            }
          }
        }
        for (let i = 0, ii = lines.length; i < ii; i++) {
          newLines.push({
            line: rescaleFn(lines[i].map((x2) => x2 ?? NaN), tx, ty, sx, sy),
            points: rescaleFn(points[i].map((x2) => x2 ?? NaN), tx, ty, sx, sy)
          });
        }
        const outlines = new this.prototype.constructor();
        outlines.build(newLines, pageWidth, pageHeight, 1, rotation, thickness, innerMargin);
        return outlines;
      }
      #getMarginComponents(thickness = this.#thickness) {
        const margin = this.#innerMargin + thickness / 2 * this.#parentScale;
        return this.#rotation % 180 === 0 ? [margin / this.#parentWidth, margin / this.#parentHeight] : [margin / this.#parentHeight, margin / this.#parentWidth];
      }
      #getBBoxWithNoMargin() {
        const [x2, y2, width, height] = this.#bbox;
        const [marginX, marginY] = this.#getMarginComponents(0);
        return [x2 + marginX, y2 + marginY, width - 2 * marginX, height - 2 * marginY];
      }
      #computeBbox() {
        const bbox = this.#bbox = new Float32Array([Infinity, Infinity, -Infinity, -Infinity]);
        for (const {
          line
        } of this.#lines) {
          if (line.length <= 12) {
            for (let i = 4, ii = line.length; i < ii; i += 6) {
              Util.pointBoundingBox(line[i], line[i + 1], bbox);
            }
            continue;
          }
          let lastX = line[4], lastY = line[5];
          for (let i = 6, ii = line.length; i < ii; i += 6) {
            const [c1x, c1y, c2x, c2y, x2, y2] = line.subarray(i, i + 6);
            Util.bezierBoundingBox(lastX, lastY, c1x, c1y, c2x, c2y, x2, y2, bbox);
            lastX = x2;
            lastY = y2;
          }
        }
        const [marginX, marginY] = this.#getMarginComponents();
        bbox[0] = MathClamp(bbox[0] - marginX, 0, 1);
        bbox[1] = MathClamp(bbox[1] - marginY, 0, 1);
        bbox[2] = MathClamp(bbox[2] + marginX, 0, 1);
        bbox[3] = MathClamp(bbox[3] + marginY, 0, 1);
        bbox[2] -= bbox[0];
        bbox[3] -= bbox[1];
      }
      get box() {
        return this.#bbox;
      }
      updateProperty(name, value) {
        if (name === "stroke-width") {
          return this.#updateThickness(value);
        }
        return null;
      }
      #updateThickness(thickness) {
        const [oldMarginX, oldMarginY] = this.#getMarginComponents();
        this.#thickness = thickness;
        const [newMarginX, newMarginY] = this.#getMarginComponents();
        const [diffMarginX, diffMarginY] = [newMarginX - oldMarginX, newMarginY - oldMarginY];
        const bbox = this.#bbox;
        bbox[0] -= diffMarginX;
        bbox[1] -= diffMarginY;
        bbox[2] += 2 * diffMarginX;
        bbox[3] += 2 * diffMarginY;
        return bbox;
      }
      updateParentDimensions([width, height], scale) {
        const [oldMarginX, oldMarginY] = this.#getMarginComponents();
        this.#parentWidth = width;
        this.#parentHeight = height;
        this.#parentScale = scale;
        const [newMarginX, newMarginY] = this.#getMarginComponents();
        const diffMarginX = newMarginX - oldMarginX;
        const diffMarginY = newMarginY - oldMarginY;
        const bbox = this.#bbox;
        bbox[0] -= diffMarginX;
        bbox[1] -= diffMarginY;
        bbox[2] += 2 * diffMarginX;
        bbox[3] += 2 * diffMarginY;
        return bbox;
      }
      updateRotation(rotation) {
        this.#currentRotation = rotation;
        return {
          path: {
            transform: this.rotationTransform
          }
        };
      }
      get viewBox() {
        return this.#bbox.map(Outline.svgRound).join(" ");
      }
      get defaultProperties() {
        const [x2, y2] = this.#bbox;
        return {
          root: {
            viewBox: this.viewBox
          },
          path: {
            "transform-origin": `${Outline.svgRound(x2)} ${Outline.svgRound(y2)}`
          }
        };
      }
      get rotationTransform() {
        const [, , width, height] = this.#bbox;
        let a = 0, b2 = 0, c = 0, d = 0, e = 0, f = 0;
        switch (this.#currentRotation) {
          case 90:
            b2 = height / width;
            c = -width / height;
            e = width;
            break;
          case 180:
            a = -1;
            d = -1;
            e = width;
            f = height;
            break;
          case 270:
            b2 = -height / width;
            c = width / height;
            f = height;
            break;
          default:
            return "";
        }
        return `matrix(${a} ${b2} ${c} ${d} ${Outline.svgRound(e)} ${Outline.svgRound(f)})`;
      }
      getPathResizingSVGProperties([newX, newY, newWidth, newHeight]) {
        const [marginX, marginY] = this.#getMarginComponents();
        const [x2, y2, width, height] = this.#bbox;
        if (Math.abs(width - marginX) <= Outline.PRECISION || Math.abs(height - marginY) <= Outline.PRECISION) {
          const tx = newX + newWidth / 2 - (x2 + width / 2);
          const ty = newY + newHeight / 2 - (y2 + height / 2);
          return {
            path: {
              "transform-origin": `${Outline.svgRound(newX)} ${Outline.svgRound(newY)}`,
              transform: `${this.rotationTransform} translate(${tx} ${ty})`
            }
          };
        }
        const s1x = (newWidth - 2 * marginX) / (width - 2 * marginX);
        const s1y = (newHeight - 2 * marginY) / (height - 2 * marginY);
        const s2x = width / newWidth;
        const s2y = height / newHeight;
        return {
          path: {
            "transform-origin": `${Outline.svgRound(x2)} ${Outline.svgRound(y2)}`,
            transform: `${this.rotationTransform} scale(${s2x} ${s2y}) translate(${Outline.svgRound(marginX)} ${Outline.svgRound(marginY)}) scale(${s1x} ${s1y}) translate(${Outline.svgRound(-marginX)} ${Outline.svgRound(-marginY)})`
          }
        };
      }
      getPathResizedSVGProperties([newX, newY, newWidth, newHeight]) {
        const [marginX, marginY] = this.#getMarginComponents();
        const bbox = this.#bbox;
        const [x2, y2, width, height] = bbox;
        bbox[0] = newX;
        bbox[1] = newY;
        bbox[2] = newWidth;
        bbox[3] = newHeight;
        if (Math.abs(width - marginX) <= Outline.PRECISION || Math.abs(height - marginY) <= Outline.PRECISION) {
          const tx2 = newX + newWidth / 2 - (x2 + width / 2);
          const ty2 = newY + newHeight / 2 - (y2 + height / 2);
          for (const {
            line,
            points
          } of this.#lines) {
            Outline._translate(line, tx2, ty2, line);
            Outline._translate(points, tx2, ty2, points);
          }
          return {
            root: {
              viewBox: this.viewBox
            },
            path: {
              "transform-origin": `${Outline.svgRound(newX)} ${Outline.svgRound(newY)}`,
              transform: this.rotationTransform || null,
              d: this.toSVGPath()
            }
          };
        }
        const s1x = (newWidth - 2 * marginX) / (width - 2 * marginX);
        const s1y = (newHeight - 2 * marginY) / (height - 2 * marginY);
        const tx = -s1x * (x2 + marginX) + newX + marginX;
        const ty = -s1y * (y2 + marginY) + newY + marginY;
        if (s1x !== 1 || s1y !== 1 || tx !== 0 || ty !== 0) {
          for (const {
            line,
            points
          } of this.#lines) {
            Outline._rescale(line, tx, ty, s1x, s1y, line);
            Outline._rescale(points, tx, ty, s1x, s1y, points);
          }
        }
        return {
          root: {
            viewBox: this.viewBox
          },
          path: {
            "transform-origin": `${Outline.svgRound(newX)} ${Outline.svgRound(newY)}`,
            transform: this.rotationTransform || null,
            d: this.toSVGPath()
          }
        };
      }
      getPathTranslatedSVGProperties([newX, newY], parentDimensions) {
        const [newParentWidth, newParentHeight] = parentDimensions;
        const bbox = this.#bbox;
        const tx = newX - bbox[0];
        const ty = newY - bbox[1];
        if (this.#parentWidth === newParentWidth && this.#parentHeight === newParentHeight) {
          for (const {
            line,
            points
          } of this.#lines) {
            Outline._translate(line, tx, ty, line);
            Outline._translate(points, tx, ty, points);
          }
        } else {
          const sx = this.#parentWidth / newParentWidth;
          const sy = this.#parentHeight / newParentHeight;
          this.#parentWidth = newParentWidth;
          this.#parentHeight = newParentHeight;
          for (const {
            line,
            points
          } of this.#lines) {
            Outline._rescale(line, tx, ty, sx, sy, line);
            Outline._rescale(points, tx, ty, sx, sy, points);
          }
          bbox[2] *= sx;
          bbox[3] *= sy;
        }
        bbox[0] = newX;
        bbox[1] = newY;
        return {
          root: {
            viewBox: this.viewBox
          },
          path: {
            d: this.toSVGPath(),
            "transform-origin": `${Outline.svgRound(newX)} ${Outline.svgRound(newY)}`
          }
        };
      }
      get defaultSVGProperties() {
        const bbox = this.#bbox;
        return {
          root: {
            viewBox: this.viewBox
          },
          rootClass: {
            draw: true
          },
          path: {
            d: this.toSVGPath(),
            "transform-origin": `${Outline.svgRound(bbox[0])} ${Outline.svgRound(bbox[1])}`,
            transform: this.rotationTransform || null
          },
          bbox
        };
      }
    };
    InkDrawingOptions = class _InkDrawingOptions extends DrawingOptions {
      constructor(viewerParameters) {
        super();
        this._viewParameters = viewerParameters;
        super.updateProperties({
          fill: "none",
          stroke: AnnotationEditor._defaultLineColor,
          "stroke-opacity": 1,
          "stroke-width": 1,
          "stroke-linecap": "round",
          "stroke-linejoin": "round",
          "stroke-miterlimit": 10
        });
      }
      updateSVGProperty(name, value) {
        if (name === "stroke-width") {
          value ??= this["stroke-width"];
          value *= this._viewParameters.realScale;
        }
        super.updateSVGProperty(name, value);
      }
      clone() {
        const clone2 = new _InkDrawingOptions(this._viewParameters);
        clone2.updateAll(this);
        return clone2;
      }
    };
    InkEditor = class _InkEditor extends DrawingEditor {
      static _type = "ink";
      static _editorType = AnnotationEditorType.INK;
      static _defaultDrawingOptions = null;
      constructor(params) {
        super({
          ...params,
          name: "inkEditor"
        });
        this._willKeepAspectRatio = true;
        this.defaultL10nId = "pdfjs-editor-ink-editor";
      }
      static initialize(l10n, uiManager) {
        AnnotationEditor.initialize(l10n, uiManager);
        this._defaultDrawingOptions = new InkDrawingOptions(uiManager.viewParameters);
      }
      static getDefaultDrawingOptions(options) {
        const clone2 = this._defaultDrawingOptions.clone();
        clone2.updateProperties(options);
        return clone2;
      }
      static get supportMultipleDrawings() {
        return true;
      }
      static get typesMap() {
        return shadow(this, "typesMap", /* @__PURE__ */ new Map([[AnnotationEditorParamsType.INK_THICKNESS, "stroke-width"], [AnnotationEditorParamsType.INK_COLOR, "stroke"], [AnnotationEditorParamsType.INK_OPACITY, "stroke-opacity"]]));
      }
      static createDrawerInstance(x2, y2, parentWidth, parentHeight, rotation) {
        return new InkDrawOutliner(x2, y2, parentWidth, parentHeight, rotation, this._defaultDrawingOptions["stroke-width"]);
      }
      static deserializeDraw(pageX, pageY, pageWidth, pageHeight, innerMargin, data2) {
        return InkDrawOutline.deserialize(pageX, pageY, pageWidth, pageHeight, innerMargin, data2);
      }
      static async deserialize(data2, parent2, uiManager) {
        let initialData = null;
        if (data2 instanceof InkAnnotationElement) {
          const {
            data: {
              inkLists,
              rect,
              rotation,
              id,
              color,
              opacity,
              borderStyle: {
                rawWidth: thickness
              },
              popupRef,
              richText,
              contentsObj,
              creationDate,
              modificationDate
            },
            parent: {
              page: {
                pageNumber
              }
            }
          } = data2;
          initialData = data2 = {
            annotationType: AnnotationEditorType.INK,
            color: Array.from(color),
            thickness,
            opacity,
            paths: {
              points: inkLists
            },
            boxes: null,
            pageIndex: pageNumber - 1,
            rect: rect.slice(0),
            rotation,
            annotationElementId: id,
            id,
            deleted: false,
            popupRef,
            richText,
            comment: contentsObj?.str || null,
            creationDate,
            modificationDate
          };
        }
        const editor = await super.deserialize(data2, parent2, uiManager);
        editor._initialData = initialData;
        if (data2.comment) {
          editor.setCommentData(data2);
        }
        return editor;
      }
      get toolbarButtons() {
        this._colorPicker ||= new BasicColorPicker(this);
        return [["colorPicker", this._colorPicker]];
      }
      get colorType() {
        return AnnotationEditorParamsType.INK_COLOR;
      }
      get color() {
        return this._drawingOptions.stroke;
      }
      get opacity() {
        return this._drawingOptions["stroke-opacity"];
      }
      onScaleChanging() {
        if (!this.parent) {
          return;
        }
        super.onScaleChanging();
        const {
          _drawId,
          _drawingOptions,
          parent: parent2
        } = this;
        _drawingOptions.updateSVGProperty("stroke-width");
        parent2.drawLayer.updateProperties(_drawId, _drawingOptions.toSVGProperties());
      }
      static onScaleChangingWhenDrawing() {
        const parent2 = this._currentParent;
        if (!parent2) {
          return;
        }
        super.onScaleChangingWhenDrawing();
        this._defaultDrawingOptions.updateSVGProperty("stroke-width");
        parent2.drawLayer.updateProperties(this._currentDrawId, this._defaultDrawingOptions.toSVGProperties());
      }
      createDrawingOptions({
        color,
        thickness,
        opacity
      }) {
        this._drawingOptions = _InkEditor.getDefaultDrawingOptions({
          stroke: Util.makeHexColor(...color),
          "stroke-width": thickness,
          "stroke-opacity": opacity
        });
      }
      serialize(isForCopying = false) {
        if (this.isEmpty()) {
          return null;
        }
        if (this.deleted) {
          return this.serializeDeleted();
        }
        const {
          lines,
          points
        } = this.serializeDraw(isForCopying);
        const {
          _drawingOptions: {
            stroke,
            "stroke-opacity": opacity,
            "stroke-width": thickness
          }
        } = this;
        const serialized = Object.assign(super.serialize(isForCopying), {
          color: AnnotationEditor._colorManager.convert(stroke),
          opacity,
          thickness,
          paths: {
            lines,
            points
          }
        });
        this.addComment(serialized);
        if (isForCopying) {
          serialized.isCopy = true;
          return serialized;
        }
        if (this.annotationElementId && !this.#hasElementChanged(serialized)) {
          return null;
        }
        serialized.id = this.annotationElementId;
        return serialized;
      }
      #hasElementChanged(serialized) {
        const {
          color,
          thickness,
          opacity,
          pageIndex
        } = this._initialData;
        return this.hasEditedComment || this._hasBeenMoved || this._hasBeenResized || serialized.color.some((c, i) => c !== color[i]) || serialized.thickness !== thickness || serialized.opacity !== opacity || serialized.pageIndex !== pageIndex;
      }
      renderAnnotationElement(annotation) {
        if (this.deleted) {
          annotation.hide();
          return null;
        }
        const {
          points,
          rect
        } = this.serializeDraw(false);
        annotation.updateEdited({
          rect,
          thickness: this._drawingOptions["stroke-width"],
          points,
          popup: this.comment
        });
        return null;
      }
    };
    ContourDrawOutline = class extends InkDrawOutline {
      toSVGPath() {
        let path = super.toSVGPath();
        if (!path.endsWith("Z")) {
          path += "Z";
        }
        return path;
      }
    };
    BASE_HEADER_LENGTH = 8;
    POINTS_PROPERTIES_NUMBER = 3;
    SignatureExtractor = class {
      static #PARAMETERS = {
        maxDim: 512,
        sigmaSFactor: 0.02,
        sigmaR: 25,
        kernelSize: 16
      };
      static #neighborIndexToId(i0, j0, i, j2) {
        i -= i0;
        j2 -= j0;
        if (i === 0) {
          return j2 > 0 ? 0 : 4;
        }
        if (i === 1) {
          return j2 + 6;
        }
        return 2 - j2;
      }
      static #neighborIdToIndex = new Int32Array([0, 1, -1, 1, -1, 0, -1, -1, 0, -1, 1, -1, 1, 0, 1, 1]);
      static #clockwiseNonZero(buf, width, i0, j0, i, j2, offset) {
        const id = this.#neighborIndexToId(i0, j0, i, j2);
        for (let k2 = 0; k2 < 8; k2++) {
          const kk = (-k2 + id - offset + 16) % 8;
          const shiftI = this.#neighborIdToIndex[2 * kk];
          const shiftJ = this.#neighborIdToIndex[2 * kk + 1];
          if (buf[(i0 + shiftI) * width + (j0 + shiftJ)] !== 0) {
            return kk;
          }
        }
        return -1;
      }
      static #counterClockwiseNonZero(buf, width, i0, j0, i, j2, offset) {
        const id = this.#neighborIndexToId(i0, j0, i, j2);
        for (let k2 = 0; k2 < 8; k2++) {
          const kk = (k2 + id + offset + 16) % 8;
          const shiftI = this.#neighborIdToIndex[2 * kk];
          const shiftJ = this.#neighborIdToIndex[2 * kk + 1];
          if (buf[(i0 + shiftI) * width + (j0 + shiftJ)] !== 0) {
            return kk;
          }
        }
        return -1;
      }
      static #findContours(buf, width, height, threshold) {
        const N2 = buf.length;
        const types = new Int32Array(N2);
        for (let i = 0; i < N2; i++) {
          types[i] = buf[i] <= threshold ? 1 : 0;
        }
        for (let i = 1; i < height - 1; i++) {
          types[i * width] = types[i * width + width - 1] = 0;
        }
        for (let i = 0; i < width; i++) {
          types[i] = types[width * height - 1 - i] = 0;
        }
        let nbd = 1;
        let lnbd;
        const contours = [];
        for (let i = 1; i < height - 1; i++) {
          lnbd = 1;
          for (let j2 = 1; j2 < width - 1; j2++) {
            const ij = i * width + j2;
            const pix = types[ij];
            if (pix === 0) {
              continue;
            }
            let i2 = i;
            let j22 = j2;
            if (pix === 1 && types[ij - 1] === 0) {
              nbd += 1;
              j22 -= 1;
            } else if (pix >= 1 && types[ij + 1] === 0) {
              nbd += 1;
              j22 += 1;
              if (pix > 1) {
                lnbd = pix;
              }
            } else {
              if (pix !== 1) {
                lnbd = Math.abs(pix);
              }
              continue;
            }
            const points = [j2, i];
            const isHole = j22 === j2 + 1;
            const contour = {
              isHole,
              points,
              id: nbd,
              parent: 0
            };
            contours.push(contour);
            let contour0;
            for (const c of contours) {
              if (c.id === lnbd) {
                contour0 = c;
                break;
              }
            }
            if (!contour0) {
              contour.parent = isHole ? lnbd : 0;
            } else if (contour0.isHole) {
              contour.parent = isHole ? contour0.parent : lnbd;
            } else {
              contour.parent = isHole ? lnbd : contour0.parent;
            }
            const k2 = this.#clockwiseNonZero(types, width, i, j2, i2, j22, 0);
            if (k2 === -1) {
              types[ij] = -nbd;
              if (types[ij] !== 1) {
                lnbd = Math.abs(types[ij]);
              }
              continue;
            }
            let shiftI = this.#neighborIdToIndex[2 * k2];
            let shiftJ = this.#neighborIdToIndex[2 * k2 + 1];
            const i1 = i + shiftI;
            const j1 = j2 + shiftJ;
            i2 = i1;
            j22 = j1;
            let i3 = i;
            let j3 = j2;
            while (true) {
              const kk = this.#counterClockwiseNonZero(types, width, i3, j3, i2, j22, 1);
              shiftI = this.#neighborIdToIndex[2 * kk];
              shiftJ = this.#neighborIdToIndex[2 * kk + 1];
              const i4 = i3 + shiftI;
              const j4 = j3 + shiftJ;
              points.push(j4, i4);
              const ij3 = i3 * width + j3;
              if (types[ij3 + 1] === 0) {
                types[ij3] = -nbd;
              } else if (types[ij3] === 1) {
                types[ij3] = nbd;
              }
              if (i4 === i && j4 === j2 && i3 === i1 && j3 === j1) {
                if (types[ij] !== 1) {
                  lnbd = Math.abs(types[ij]);
                }
                break;
              } else {
                i2 = i3;
                j22 = j3;
                i3 = i4;
                j3 = j4;
              }
            }
          }
        }
        return contours;
      }
      static #douglasPeuckerHelper(points, start, end2, output) {
        if (end2 - start <= 4) {
          for (let i = start; i < end2 - 2; i += 2) {
            output.push(points[i], points[i + 1]);
          }
          return;
        }
        const ax = points[start];
        const ay = points[start + 1];
        const abx = points[end2 - 4] - ax;
        const aby = points[end2 - 3] - ay;
        const dist = Math.hypot(abx, aby);
        const nabx = abx / dist;
        const naby = aby / dist;
        const aa = nabx * ay - naby * ax;
        const m2 = aby / abx;
        const invS = 1 / dist;
        const phi = Math.atan(m2);
        const cosPhi = Math.cos(phi);
        const sinPhi = Math.sin(phi);
        const tmax = invS * (Math.abs(cosPhi) + Math.abs(sinPhi));
        const poly = invS * (1 - tmax + tmax ** 2);
        const partialPhi = Math.max(Math.atan(Math.abs(sinPhi + cosPhi) * poly), Math.atan(Math.abs(sinPhi - cosPhi) * poly));
        let dmax = 0;
        let index2 = start;
        for (let i = start + 2; i < end2 - 2; i += 2) {
          const d = Math.abs(aa - nabx * points[i + 1] + naby * points[i]);
          if (d > dmax) {
            index2 = i;
            dmax = d;
          }
        }
        if (dmax > (dist * partialPhi) ** 2) {
          this.#douglasPeuckerHelper(points, start, index2 + 2, output);
          this.#douglasPeuckerHelper(points, index2, end2, output);
        } else {
          output.push(ax, ay);
        }
      }
      static #douglasPeucker(points) {
        const output = [];
        const len = points.length;
        this.#douglasPeuckerHelper(points, 0, len, output);
        output.push(points[len - 2], points[len - 1]);
        return output.length <= 4 ? null : output;
      }
      static #bilateralFilter(buf, width, height, sigmaS, sigmaR, kernelSize) {
        const kernel = new Float32Array(kernelSize ** 2);
        const sigmaS2 = -2 * sigmaS ** 2;
        const halfSize = kernelSize >> 1;
        for (let i = 0; i < kernelSize; i++) {
          const x2 = (i - halfSize) ** 2;
          for (let j2 = 0; j2 < kernelSize; j2++) {
            kernel[i * kernelSize + j2] = Math.exp((x2 + (j2 - halfSize) ** 2) / sigmaS2);
          }
        }
        const rangeValues = new Float32Array(256);
        const sigmaR2 = -2 * sigmaR ** 2;
        for (let i = 0; i < 256; i++) {
          rangeValues[i] = Math.exp(i ** 2 / sigmaR2);
        }
        const N2 = buf.length;
        const out = new Uint8Array(N2);
        const histogram = new Uint32Array(256);
        for (let i = 0; i < height; i++) {
          for (let j2 = 0; j2 < width; j2++) {
            const ij = i * width + j2;
            const center = buf[ij];
            let sum = 0;
            let norm = 0;
            for (let k2 = 0; k2 < kernelSize; k2++) {
              const y2 = i + k2 - halfSize;
              if (y2 < 0 || y2 >= height) {
                continue;
              }
              for (let l = 0; l < kernelSize; l++) {
                const x2 = j2 + l - halfSize;
                if (x2 < 0 || x2 >= width) {
                  continue;
                }
                const neighbour = buf[y2 * width + x2];
                const w2 = kernel[k2 * kernelSize + l] * rangeValues[Math.abs(neighbour - center)];
                sum += neighbour * w2;
                norm += w2;
              }
            }
            const pix = out[ij] = Math.round(sum / norm);
            histogram[pix]++;
          }
        }
        return [out, histogram];
      }
      static #getHistogram(buf) {
        const histogram = new Uint32Array(256);
        for (const g of buf) {
          histogram[g]++;
        }
        return histogram;
      }
      static #toUint8(buf) {
        const N2 = buf.length;
        const out = new Uint8ClampedArray(N2 >> 2);
        let max = -Infinity;
        let min = Infinity;
        for (let i = 0, ii = out.length; i < ii; i++) {
          const pix = out[i] = buf[i << 2];
          max = Math.max(max, pix);
          min = Math.min(min, pix);
        }
        const ratio = 255 / (max - min);
        for (let i = 0, ii = out.length; i < ii; i++) {
          out[i] = (out[i] - min) * ratio;
        }
        return out;
      }
      static #guessThreshold(histogram) {
        let i;
        let M2 = -Infinity;
        let L2 = -Infinity;
        const min = histogram.findIndex((v2) => v2 !== 0);
        let pos = min;
        let spos = min;
        for (i = min; i < 256; i++) {
          const v2 = histogram[i];
          if (v2 > M2) {
            if (i - pos > L2) {
              L2 = i - pos;
              spos = i - 1;
            }
            M2 = v2;
            pos = i;
          }
        }
        for (i = spos - 1; i >= 0; i--) {
          if (histogram[i] > histogram[i + 1]) {
            break;
          }
        }
        return i;
      }
      static #getGrayPixels(bitmap) {
        const originalBitmap = bitmap;
        const {
          width,
          height
        } = bitmap;
        const {
          maxDim
        } = this.#PARAMETERS;
        let newWidth = width;
        let newHeight = height;
        if (width > maxDim || height > maxDim) {
          let prevWidth = width;
          let prevHeight = height;
          let steps = Math.log2(Math.max(width, height) / maxDim);
          const isteps = Math.floor(steps);
          steps = steps === isteps ? isteps - 1 : isteps;
          for (let i = 0; i < steps; i++) {
            newWidth = Math.ceil(prevWidth / 2);
            newHeight = Math.ceil(prevHeight / 2);
            const offscreen2 = new OffscreenCanvas(newWidth, newHeight);
            const ctx2 = offscreen2.getContext("2d");
            ctx2.drawImage(bitmap, 0, 0, prevWidth, prevHeight, 0, 0, newWidth, newHeight);
            prevWidth = newWidth;
            prevHeight = newHeight;
            if (bitmap !== originalBitmap) {
              bitmap.close();
            }
            bitmap = offscreen2.transferToImageBitmap();
          }
          const ratio = Math.min(maxDim / newWidth, maxDim / newHeight);
          newWidth = Math.round(newWidth * ratio);
          newHeight = Math.round(newHeight * ratio);
        }
        const offscreen = new OffscreenCanvas(newWidth, newHeight);
        const ctx = offscreen.getContext("2d", {
          willReadFrequently: true
        });
        ctx.fillStyle = "white";
        ctx.fillRect(0, 0, newWidth, newHeight);
        ctx.filter = "grayscale(1)";
        ctx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, newWidth, newHeight);
        const grayImage = ctx.getImageData(0, 0, newWidth, newHeight).data;
        const uint8Buf = this.#toUint8(grayImage);
        return [uint8Buf, newWidth, newHeight];
      }
      static extractContoursFromText(text3, {
        fontFamily,
        fontStyle,
        fontWeight
      }, pageWidth, pageHeight, rotation, innerMargin) {
        let canvas = new OffscreenCanvas(1, 1);
        let ctx = canvas.getContext("2d", {
          alpha: false
        });
        const fontSize = 200;
        const font = ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;
        const {
          actualBoundingBoxLeft,
          actualBoundingBoxRight,
          actualBoundingBoxAscent,
          actualBoundingBoxDescent,
          fontBoundingBoxAscent,
          fontBoundingBoxDescent,
          width
        } = ctx.measureText(text3);
        const SCALE = 1.5;
        const canvasWidth = Math.ceil(Math.max(Math.abs(actualBoundingBoxLeft) + Math.abs(actualBoundingBoxRight) || 0, width) * SCALE);
        const canvasHeight = Math.ceil(Math.max(Math.abs(actualBoundingBoxAscent) + Math.abs(actualBoundingBoxDescent) || fontSize, Math.abs(fontBoundingBoxAscent) + Math.abs(fontBoundingBoxDescent) || fontSize) * SCALE);
        canvas = new OffscreenCanvas(canvasWidth, canvasHeight);
        ctx = canvas.getContext("2d", {
          alpha: true,
          willReadFrequently: true
        });
        ctx.font = font;
        ctx.filter = "grayscale(1)";
        ctx.fillStyle = "white";
        ctx.fillRect(0, 0, canvasWidth, canvasHeight);
        ctx.fillStyle = "black";
        ctx.fillText(text3, canvasWidth * (SCALE - 1) / 2, canvasHeight * (3 - SCALE) / 2);
        const uint8Buf = this.#toUint8(ctx.getImageData(0, 0, canvasWidth, canvasHeight).data);
        const histogram = this.#getHistogram(uint8Buf);
        const threshold = this.#guessThreshold(histogram);
        const contourList = this.#findContours(uint8Buf, canvasWidth, canvasHeight, threshold);
        return this.processDrawnLines({
          lines: {
            curves: contourList,
            width: canvasWidth,
            height: canvasHeight
          },
          pageWidth,
          pageHeight,
          rotation,
          innerMargin,
          mustSmooth: true,
          areContours: true
        });
      }
      static process(bitmap, pageWidth, pageHeight, rotation, innerMargin) {
        const [uint8Buf, width, height] = this.#getGrayPixels(bitmap);
        const [buffer, histogram] = this.#bilateralFilter(uint8Buf, width, height, Math.hypot(width, height) * this.#PARAMETERS.sigmaSFactor, this.#PARAMETERS.sigmaR, this.#PARAMETERS.kernelSize);
        const threshold = this.#guessThreshold(histogram);
        const contourList = this.#findContours(buffer, width, height, threshold);
        return this.processDrawnLines({
          lines: {
            curves: contourList,
            width,
            height
          },
          pageWidth,
          pageHeight,
          rotation,
          innerMargin,
          mustSmooth: true,
          areContours: true
        });
      }
      static processDrawnLines({
        lines,
        pageWidth,
        pageHeight,
        rotation,
        innerMargin,
        mustSmooth,
        areContours
      }) {
        if (rotation % 180 !== 0) {
          [pageWidth, pageHeight] = [pageHeight, pageWidth];
        }
        const {
          curves,
          width,
          height
        } = lines;
        const thickness = lines.thickness ?? 0;
        const linesAndPoints = [];
        const ratio = Math.min(pageWidth / width, pageHeight / height);
        const xScale = ratio / pageWidth;
        const yScale = ratio / pageHeight;
        const newCurves = [];
        for (const {
          points
        } of curves) {
          const reducedPoints = mustSmooth ? this.#douglasPeucker(points) : points;
          if (!reducedPoints) {
            continue;
          }
          newCurves.push(reducedPoints);
          const len = reducedPoints.length;
          const newPoints = new Float32Array(len);
          const line = new Float32Array(3 * (len === 2 ? 2 : len - 2));
          linesAndPoints.push({
            line,
            points: newPoints
          });
          if (len === 2) {
            newPoints[0] = reducedPoints[0] * xScale;
            newPoints[1] = reducedPoints[1] * yScale;
            line.set([NaN, NaN, NaN, NaN, newPoints[0], newPoints[1]], 0);
            continue;
          }
          let [x1, y1, x2, y2] = reducedPoints;
          x1 *= xScale;
          y1 *= yScale;
          x2 *= xScale;
          y2 *= yScale;
          newPoints.set([x1, y1, x2, y2], 0);
          line.set([NaN, NaN, NaN, NaN, x1, y1], 0);
          for (let i = 4; i < len; i += 2) {
            const x3 = newPoints[i] = reducedPoints[i] * xScale;
            const y3 = newPoints[i + 1] = reducedPoints[i + 1] * yScale;
            line.set(Outline.createBezierPoints(x1, y1, x2, y2, x3, y3), (i - 2) * 3);
            [x1, y1, x2, y2] = [x2, y2, x3, y3];
          }
        }
        if (linesAndPoints.length === 0) {
          return null;
        }
        const outline = areContours ? new ContourDrawOutline() : new InkDrawOutline();
        outline.build(linesAndPoints, pageWidth, pageHeight, 1, rotation, areContours ? 0 : thickness, innerMargin);
        return {
          outline,
          newCurves,
          areContours,
          thickness,
          width,
          height
        };
      }
      static async compressSignature({
        outlines,
        areContours,
        thickness,
        width,
        height
      }) {
        let minDiff = Infinity;
        let maxDiff = -Infinity;
        let outlinesLength = 0;
        for (const points of outlines) {
          outlinesLength += points.length;
          for (let i = 2, ii = points.length; i < ii; i++) {
            const dx = points[i] - points[i - 2];
            minDiff = Math.min(minDiff, dx);
            maxDiff = Math.max(maxDiff, dx);
          }
        }
        let bufferType;
        if (minDiff >= -128 && maxDiff <= 127) {
          bufferType = Int8Array;
        } else if (minDiff >= -32768 && maxDiff <= 32767) {
          bufferType = Int16Array;
        } else {
          bufferType = Int32Array;
        }
        const len = outlines.length;
        const headerLength = BASE_HEADER_LENGTH + POINTS_PROPERTIES_NUMBER * len;
        const header = new Uint32Array(headerLength);
        let offset = 0;
        header[offset++] = headerLength * Uint32Array.BYTES_PER_ELEMENT + (outlinesLength - 2 * len) * bufferType.BYTES_PER_ELEMENT;
        header[offset++] = 0;
        header[offset++] = width;
        header[offset++] = height;
        header[offset++] = areContours ? 0 : 1;
        header[offset++] = Math.max(0, Math.floor(thickness ?? 0));
        header[offset++] = len;
        header[offset++] = bufferType.BYTES_PER_ELEMENT;
        for (const points of outlines) {
          header[offset++] = points.length - 2;
          header[offset++] = points[0];
          header[offset++] = points[1];
        }
        const cs = new CompressionStream("deflate-raw");
        const writer = cs.writable.getWriter();
        await writer.ready;
        writer.write(header);
        const BufferCtor = bufferType.prototype.constructor;
        for (const points of outlines) {
          const diffs = new BufferCtor(points.length - 2);
          for (let i = 2, ii = points.length; i < ii; i++) {
            diffs[i - 2] = points[i] - points[i - 2];
          }
          writer.write(diffs);
        }
        writer.close();
        const buf = await new Response(cs.readable).arrayBuffer();
        const bytes = new Uint8Array(buf);
        return toBase64Util(bytes);
      }
      static async decompressSignature(signatureData) {
        try {
          const bytes = fromBase64Util(signatureData);
          const {
            readable,
            writable
          } = new DecompressionStream("deflate-raw");
          const writer = writable.getWriter();
          await writer.ready;
          writer.write(bytes).then(async () => {
            await writer.ready;
            await writer.close();
          }).catch(() => {
          });
          let data2 = null;
          let offset = 0;
          for await (const chunk of readable) {
            data2 ||= new Uint8Array(new Uint32Array(chunk.buffer, 0, 4)[0]);
            data2.set(chunk, offset);
            offset += chunk.length;
          }
          const header = new Uint32Array(data2.buffer, 0, data2.length >> 2);
          const version2 = header[1];
          if (version2 !== 0) {
            throw new Error(`Invalid version: ${version2}`);
          }
          const width = header[2];
          const height = header[3];
          const areContours = header[4] === 0;
          const thickness = header[5];
          const numberOfDrawings = header[6];
          const bufferType = header[7];
          const outlines = [];
          const diffsOffset = (BASE_HEADER_LENGTH + POINTS_PROPERTIES_NUMBER * numberOfDrawings) * Uint32Array.BYTES_PER_ELEMENT;
          let diffs;
          switch (bufferType) {
            case Int8Array.BYTES_PER_ELEMENT:
              diffs = new Int8Array(data2.buffer, diffsOffset);
              break;
            case Int16Array.BYTES_PER_ELEMENT:
              diffs = new Int16Array(data2.buffer, diffsOffset);
              break;
            case Int32Array.BYTES_PER_ELEMENT:
              diffs = new Int32Array(data2.buffer, diffsOffset);
              break;
          }
          offset = 0;
          for (let i = 0; i < numberOfDrawings; i++) {
            const len = header[POINTS_PROPERTIES_NUMBER * i + BASE_HEADER_LENGTH];
            const points = new Float32Array(len + 2);
            outlines.push(points);
            for (let j2 = 0; j2 < POINTS_PROPERTIES_NUMBER - 1; j2++) {
              points[j2] = header[POINTS_PROPERTIES_NUMBER * i + BASE_HEADER_LENGTH + j2 + 1];
            }
            for (let j2 = 0; j2 < len; j2++) {
              points[j2 + 2] = points[j2] + diffs[offset++];
            }
          }
          return {
            areContours,
            thickness,
            outlines,
            width,
            height
          };
        } catch (e) {
          warn(`decompressSignature: ${e}`);
          return null;
        }
      }
    };
    SignatureOptions = class _SignatureOptions extends DrawingOptions {
      constructor() {
        super();
        super.updateProperties({
          fill: AnnotationEditor._defaultLineColor,
          "stroke-width": 0
        });
      }
      clone() {
        const clone2 = new _SignatureOptions();
        clone2.updateAll(this);
        return clone2;
      }
    };
    DrawnSignatureOptions = class _DrawnSignatureOptions extends InkDrawingOptions {
      constructor(viewerParameters) {
        super(viewerParameters);
        super.updateProperties({
          stroke: AnnotationEditor._defaultLineColor,
          "stroke-width": 1
        });
      }
      clone() {
        const clone2 = new _DrawnSignatureOptions(this._viewParameters);
        clone2.updateAll(this);
        return clone2;
      }
    };
    SignatureEditor = class _SignatureEditor extends DrawingEditor {
      #isExtracted = false;
      #description = null;
      #signatureData = null;
      #signatureUUID = null;
      static _type = "signature";
      static _editorType = AnnotationEditorType.SIGNATURE;
      static _defaultDrawingOptions = null;
      constructor(params) {
        super({
          ...params,
          mustBeCommitted: true,
          name: "signatureEditor"
        });
        this._willKeepAspectRatio = true;
        this.#signatureData = params.signatureData || null;
        this.#description = null;
        this.defaultL10nId = "pdfjs-editor-signature-editor1";
      }
      static initialize(l10n, uiManager) {
        AnnotationEditor.initialize(l10n, uiManager);
        this._defaultDrawingOptions = new SignatureOptions();
        this._defaultDrawnSignatureOptions = new DrawnSignatureOptions(uiManager.viewParameters);
      }
      static getDefaultDrawingOptions(options) {
        const clone2 = this._defaultDrawingOptions.clone();
        clone2.updateProperties(options);
        return clone2;
      }
      static get supportMultipleDrawings() {
        return false;
      }
      static get typesMap() {
        return shadow(this, "typesMap", /* @__PURE__ */ new Map());
      }
      static get isDrawer() {
        return false;
      }
      get telemetryFinalData() {
        return {
          type: "signature",
          hasDescription: !!this.#description
        };
      }
      static computeTelemetryFinalData(data2) {
        const hasDescriptionStats = data2.get("hasDescription");
        return {
          hasAltText: hasDescriptionStats.get(true) ?? 0,
          hasNoAltText: hasDescriptionStats.get(false) ?? 0
        };
      }
      get isResizable() {
        return true;
      }
      onScaleChanging() {
        if (this._drawId === null) {
          return;
        }
        super.onScaleChanging();
      }
      render() {
        if (this.div) {
          return this.div;
        }
        let baseX, baseY;
        const {
          _isCopy
        } = this;
        if (_isCopy) {
          this._isCopy = false;
          baseX = this.x;
          baseY = this.y;
        }
        super.render();
        if (this._drawId === null) {
          if (this.#signatureData) {
            const {
              lines,
              mustSmooth,
              areContours,
              description,
              uuid,
              heightInPage
            } = this.#signatureData;
            const {
              rawDims: {
                pageWidth,
                pageHeight
              },
              rotation
            } = this.parent.viewport;
            const outline = SignatureExtractor.processDrawnLines({
              lines,
              pageWidth,
              pageHeight,
              rotation,
              innerMargin: _SignatureEditor._INNER_MARGIN,
              mustSmooth,
              areContours
            });
            this.addSignature(outline, heightInPage, description, uuid);
          } else {
            this.div.setAttribute("data-l10n-args", JSON.stringify({
              description: ""
            }));
            this.div.hidden = true;
            this._uiManager.getSignature(this);
          }
        } else {
          this.div.setAttribute("data-l10n-args", JSON.stringify({
            description: this.#description || ""
          }));
        }
        if (_isCopy) {
          this._isCopy = true;
          this._moveAfterPaste(baseX, baseY);
        }
        return this.div;
      }
      setUuid(uuid) {
        this.#signatureUUID = uuid;
        this.addEditToolbar();
      }
      getUuid() {
        return this.#signatureUUID;
      }
      get description() {
        return this.#description;
      }
      set description(description) {
        this.#description = description;
        if (!this.div) {
          return;
        }
        this.div.setAttribute("data-l10n-args", JSON.stringify({
          description
        }));
        super.addEditToolbar().then((toolbar) => {
          toolbar?.updateEditSignatureButton(description);
        });
      }
      getSignaturePreview() {
        const {
          newCurves,
          areContours,
          thickness,
          width,
          height
        } = this.#signatureData;
        const maxDim = Math.max(width, height);
        const outlineData = SignatureExtractor.processDrawnLines({
          lines: {
            curves: newCurves.map((points) => ({
              points
            })),
            thickness,
            width,
            height
          },
          pageWidth: maxDim,
          pageHeight: maxDim,
          rotation: 0,
          innerMargin: 0,
          mustSmooth: false,
          areContours
        });
        return {
          areContours,
          outline: outlineData.outline
        };
      }
      get toolbarButtons() {
        if (this._uiManager.signatureManager) {
          return [["editSignature", this._uiManager.signatureManager]];
        }
        return super.toolbarButtons;
      }
      addSignature(data2, heightInPage, description, uuid) {
        const {
          x: savedX,
          y: savedY
        } = this;
        const {
          outline
        } = this.#signatureData = data2;
        this.#isExtracted = outline instanceof ContourDrawOutline;
        this.description = description;
        let drawingOptions;
        if (this.#isExtracted) {
          drawingOptions = _SignatureEditor.getDefaultDrawingOptions();
        } else {
          drawingOptions = _SignatureEditor._defaultDrawnSignatureOptions.clone();
          drawingOptions.updateProperties({
            "stroke-width": outline.thickness
          });
        }
        this._addOutlines({
          drawOutlines: outline,
          drawingOptions
        });
        const [, pageHeight] = this.pageDimensions;
        let newHeight = heightInPage / pageHeight;
        newHeight = newHeight >= 1 ? 0.5 : newHeight;
        this.width *= newHeight / this.height;
        if (this.width >= 1) {
          newHeight *= 0.9 / this.width;
          this.width = 0.9;
        }
        this.height = newHeight;
        this.setDims();
        this.x = savedX;
        this.y = savedY;
        this.center();
        this._onResized();
        this.onScaleChanging();
        this.rotate();
        this._uiManager.addToAnnotationStorage(this);
        this.setUuid(uuid);
        this._reportTelemetry({
          action: "pdfjs.signature.inserted",
          data: {
            hasBeenSaved: !!uuid,
            hasDescription: !!description
          }
        });
        this.div.hidden = false;
      }
      getFromImage(bitmap) {
        const {
          rawDims: {
            pageWidth,
            pageHeight
          },
          rotation
        } = this.parent.viewport;
        return SignatureExtractor.process(bitmap, pageWidth, pageHeight, rotation, _SignatureEditor._INNER_MARGIN);
      }
      getFromText(text3, fontInfo) {
        const {
          rawDims: {
            pageWidth,
            pageHeight
          },
          rotation
        } = this.parent.viewport;
        return SignatureExtractor.extractContoursFromText(text3, fontInfo, pageWidth, pageHeight, rotation, _SignatureEditor._INNER_MARGIN);
      }
      getDrawnSignature(curves) {
        const {
          rawDims: {
            pageWidth,
            pageHeight
          },
          rotation
        } = this.parent.viewport;
        return SignatureExtractor.processDrawnLines({
          lines: curves,
          pageWidth,
          pageHeight,
          rotation,
          innerMargin: _SignatureEditor._INNER_MARGIN,
          mustSmooth: false,
          areContours: false
        });
      }
      createDrawingOptions({
        areContours,
        thickness
      }) {
        if (areContours) {
          this._drawingOptions = _SignatureEditor.getDefaultDrawingOptions();
        } else {
          this._drawingOptions = _SignatureEditor._defaultDrawnSignatureOptions.clone();
          this._drawingOptions.updateProperties({
            "stroke-width": thickness
          });
        }
      }
      serialize(isForCopying = false) {
        if (this.isEmpty()) {
          return null;
        }
        const {
          lines,
          points
        } = this.serializeDraw(isForCopying);
        const {
          _drawingOptions: {
            "stroke-width": thickness
          }
        } = this;
        const serialized = Object.assign(super.serialize(isForCopying), {
          isSignature: true,
          areContours: this.#isExtracted,
          color: [0, 0, 0],
          thickness: this.#isExtracted ? 0 : thickness
        });
        this.addComment(serialized);
        if (isForCopying) {
          serialized.paths = {
            lines,
            points
          };
          serialized.uuid = this.#signatureUUID;
          serialized.isCopy = true;
        } else {
          serialized.lines = lines;
        }
        if (this.#description) {
          serialized.accessibilityData = {
            type: "Figure",
            alt: this.#description
          };
        }
        return serialized;
      }
      static deserializeDraw(pageX, pageY, pageWidth, pageHeight, innerMargin, data2) {
        if (data2.areContours) {
          return ContourDrawOutline.deserialize(pageX, pageY, pageWidth, pageHeight, innerMargin, data2);
        }
        return InkDrawOutline.deserialize(pageX, pageY, pageWidth, pageHeight, innerMargin, data2);
      }
      static async deserialize(data2, parent2, uiManager) {
        const editor = await super.deserialize(data2, parent2, uiManager);
        editor.#isExtracted = data2.areContours;
        editor.description = data2.accessibilityData?.alt || "";
        editor.#signatureUUID = data2.uuid;
        return editor;
      }
    };
    StampEditor = class extends AnnotationEditor {
      #bitmap = null;
      #bitmapId = null;
      #bitmapPromise = null;
      #bitmapUrl = null;
      #bitmapFile = null;
      #bitmapFileName = "";
      #canvas = null;
      #missingCanvas = false;
      #resizeTimeoutId = null;
      #isSvg = false;
      #hasBeenAddedInUndoStack = false;
      static _type = "stamp";
      static _editorType = AnnotationEditorType.STAMP;
      constructor(params) {
        super({
          ...params,
          name: "stampEditor"
        });
        this.#bitmapUrl = params.bitmapUrl;
        this.#bitmapFile = params.bitmapFile;
        this.defaultL10nId = "pdfjs-editor-stamp-editor";
      }
      static initialize(l10n, uiManager) {
        AnnotationEditor.initialize(l10n, uiManager);
      }
      static isHandlingMimeForPasting(mime) {
        return SupportedImageMimeTypes.includes(mime);
      }
      static paste(item, parent2) {
        parent2.pasteEditor({
          mode: AnnotationEditorType.STAMP
        }, {
          bitmapFile: item.getAsFile()
        });
      }
      altTextFinish() {
        if (this._uiManager.useNewAltTextFlow) {
          this.div.hidden = false;
        }
        super.altTextFinish();
      }
      get telemetryFinalData() {
        return {
          type: "stamp",
          hasAltText: !!this.altTextData?.altText
        };
      }
      static computeTelemetryFinalData(data2) {
        const hasAltTextStats = data2.get("hasAltText");
        return {
          hasAltText: hasAltTextStats.get(true) ?? 0,
          hasNoAltText: hasAltTextStats.get(false) ?? 0
        };
      }
      #getBitmapFetched(data2, fromId = false) {
        if (!data2) {
          this.remove();
          return;
        }
        this.#bitmap = data2.bitmap;
        if (!fromId) {
          this.#bitmapId = data2.id;
          this.#isSvg = data2.isSvg;
        }
        if (data2.file) {
          this.#bitmapFileName = data2.file.name;
        }
        this.#createCanvas();
      }
      #getBitmapDone() {
        this.#bitmapPromise = null;
        this._uiManager.enableWaiting(false);
        if (!this.#canvas) {
          return;
        }
        if (this._uiManager.useNewAltTextWhenAddingImage && this._uiManager.useNewAltTextFlow && this.#bitmap) {
          this.addEditToolbar().then(() => {
            this._editToolbar.hide();
            this._uiManager.editAltText(this, true);
          });
          return;
        }
        if (!this._uiManager.useNewAltTextWhenAddingImage && this._uiManager.useNewAltTextFlow && this.#bitmap) {
          this._reportTelemetry({
            action: "pdfjs.image.image_added",
            data: {
              alt_text_modal: false,
              alt_text_type: "empty"
            }
          });
          try {
            this.mlGuessAltText();
          } catch {
          }
        }
        this.div.focus();
      }
      async mlGuessAltText(imageData = null, updateAltTextData = true) {
        if (this.hasAltTextData()) {
          return null;
        }
        const {
          mlManager
        } = this._uiManager;
        if (!mlManager) {
          throw new Error("No ML.");
        }
        if (!await mlManager.isEnabledFor("altText")) {
          throw new Error("ML isn't enabled for alt text.");
        }
        const {
          data: data2,
          width,
          height
        } = imageData || this.copyCanvas(null, null, true).imageData;
        const response = await mlManager.guess({
          name: "altText",
          request: {
            data: data2,
            width,
            height,
            channels: data2.length / (width * height)
          }
        });
        if (!response) {
          throw new Error("No response from the AI service.");
        }
        if (response.error) {
          throw new Error("Error from the AI service.");
        }
        if (response.cancel) {
          return null;
        }
        if (!response.output) {
          throw new Error("No valid response from the AI service.");
        }
        const altText = response.output;
        await this.setGuessedAltText(altText);
        if (updateAltTextData && !this.hasAltTextData()) {
          this.altTextData = {
            alt: altText,
            decorative: false
          };
        }
        return altText;
      }
      #getBitmap() {
        if (this.#bitmapId) {
          this._uiManager.enableWaiting(true);
          this._uiManager.imageManager.getFromId(this.#bitmapId).then((data2) => this.#getBitmapFetched(data2, true)).finally(() => this.#getBitmapDone());
          return;
        }
        if (this.#bitmapUrl) {
          const url = this.#bitmapUrl;
          this.#bitmapUrl = null;
          this._uiManager.enableWaiting(true);
          this.#bitmapPromise = this._uiManager.imageManager.getFromUrl(url).then((data2) => this.#getBitmapFetched(data2)).finally(() => this.#getBitmapDone());
          return;
        }
        if (this.#bitmapFile) {
          const file = this.#bitmapFile;
          this.#bitmapFile = null;
          this._uiManager.enableWaiting(true);
          this.#bitmapPromise = this._uiManager.imageManager.getFromFile(file).then((data2) => this.#getBitmapFetched(data2)).finally(() => this.#getBitmapDone());
          return;
        }
        const input = document.createElement("input");
        input.type = "file";
        input.accept = SupportedImageMimeTypes.join(",");
        const signal = this._uiManager._signal;
        this.#bitmapPromise = new Promise((resolve) => {
          input.addEventListener("change", async () => {
            if (!input.files || input.files.length === 0) {
              this.remove();
            } else {
              this._uiManager.enableWaiting(true);
              const data2 = await this._uiManager.imageManager.getFromFile(input.files[0]);
              this._reportTelemetry({
                action: "pdfjs.image.image_selected",
                data: {
                  alt_text_modal: this._uiManager.useNewAltTextFlow
                }
              });
              this.#getBitmapFetched(data2);
            }
            resolve();
          }, {
            signal
          });
          input.addEventListener("cancel", () => {
            this.remove();
            resolve();
          }, {
            signal
          });
        }).finally(() => this.#getBitmapDone());
        input.click();
      }
      remove() {
        if (this.#bitmapId) {
          this.#bitmap = null;
          this._uiManager.imageManager.deleteId(this.#bitmapId);
          this.#canvas?.remove();
          this.#canvas = null;
          if (this.#resizeTimeoutId) {
            clearTimeout(this.#resizeTimeoutId);
            this.#resizeTimeoutId = null;
          }
        }
        super.remove();
      }
      rebuild() {
        if (!this.parent) {
          if (this.#bitmapId) {
            this.#getBitmap();
          }
          return;
        }
        super.rebuild();
        if (this.div === null) {
          return;
        }
        if (this.#bitmapId && this.#canvas === null) {
          this.#getBitmap();
        }
        if (!this.isAttachedToDOM) {
          this.parent.add(this);
        }
      }
      onceAdded(focus) {
        this._isDraggable = true;
        if (focus) {
          this.div.focus();
        }
      }
      isEmpty() {
        return !(this.#bitmapPromise || this.#bitmap || this.#bitmapUrl || this.#bitmapFile || this.#bitmapId || this.#missingCanvas);
      }
      get toolbarButtons() {
        return [["altText", this.createAltText()]];
      }
      get isResizable() {
        return true;
      }
      render() {
        if (this.div) {
          return this.div;
        }
        let baseX, baseY;
        if (this._isCopy) {
          baseX = this.x;
          baseY = this.y;
        }
        super.render();
        this.div.hidden = true;
        this.createAltText();
        if (!this.#missingCanvas) {
          if (this.#bitmap) {
            this.#createCanvas();
          } else {
            this.#getBitmap();
          }
        }
        if (this._isCopy) {
          this._moveAfterPaste(baseX, baseY);
        }
        this._uiManager.addShouldRescale(this);
        return this.div;
      }
      setCanvas(annotationElementId, canvas) {
        const {
          id: bitmapId,
          bitmap
        } = this._uiManager.imageManager.getFromCanvas(annotationElementId, canvas);
        canvas.remove();
        if (bitmapId && this._uiManager.imageManager.isValidId(bitmapId)) {
          this.#bitmapId = bitmapId;
          if (bitmap) {
            this.#bitmap = bitmap;
          }
          this.#missingCanvas = false;
          this.#createCanvas();
        }
      }
      _onResized() {
        this.onScaleChanging();
      }
      onScaleChanging() {
        if (!this.parent) {
          return;
        }
        if (this.#resizeTimeoutId !== null) {
          clearTimeout(this.#resizeTimeoutId);
        }
        const TIME_TO_WAIT = 200;
        this.#resizeTimeoutId = setTimeout(() => {
          this.#resizeTimeoutId = null;
          this.#drawBitmap();
        }, TIME_TO_WAIT);
      }
      #createCanvas() {
        const {
          div
        } = this;
        let {
          width,
          height
        } = this.#bitmap;
        const [pageWidth, pageHeight] = this.pageDimensions;
        const MAX_RATIO = 0.75;
        if (this.width) {
          width = this.width * pageWidth;
          height = this.height * pageHeight;
        } else if (width > MAX_RATIO * pageWidth || height > MAX_RATIO * pageHeight) {
          const factor = Math.min(MAX_RATIO * pageWidth / width, MAX_RATIO * pageHeight / height);
          width *= factor;
          height *= factor;
        }
        this._uiManager.enableWaiting(false);
        const canvas = this.#canvas = document.createElement("canvas");
        canvas.setAttribute("role", "img");
        this.addContainer(canvas);
        this.width = width / pageWidth;
        this.height = height / pageHeight;
        this.setDims();
        if (this._initialOptions?.isCentered) {
          this.center();
        } else {
          this.fixAndSetPosition();
        }
        this._initialOptions = null;
        if (!this._uiManager.useNewAltTextWhenAddingImage || !this._uiManager.useNewAltTextFlow || this.annotationElementId) {
          div.hidden = false;
        }
        this.#drawBitmap();
        if (!this.#hasBeenAddedInUndoStack) {
          this.parent.addUndoableEditor(this);
          this.#hasBeenAddedInUndoStack = true;
        }
        this._reportTelemetry({
          action: "inserted_image"
        });
        if (this.#bitmapFileName) {
          this.div.setAttribute("aria-description", this.#bitmapFileName);
        }
        if (!this.annotationElementId) {
          this._uiManager.a11yAlert("pdfjs-editor-stamp-added-alert");
        }
      }
      copyCanvas(maxDataDimension, maxPreviewDimension, createImageData = false) {
        if (!maxDataDimension) {
          maxDataDimension = 224;
        }
        const {
          width: bitmapWidth,
          height: bitmapHeight
        } = this.#bitmap;
        const outputScale = new OutputScale();
        let bitmap = this.#bitmap;
        let width = bitmapWidth, height = bitmapHeight;
        let canvas = null;
        if (maxPreviewDimension) {
          if (bitmapWidth > maxPreviewDimension || bitmapHeight > maxPreviewDimension) {
            const ratio = Math.min(maxPreviewDimension / bitmapWidth, maxPreviewDimension / bitmapHeight);
            width = Math.floor(bitmapWidth * ratio);
            height = Math.floor(bitmapHeight * ratio);
          }
          canvas = document.createElement("canvas");
          const scaledWidth = canvas.width = Math.ceil(width * outputScale.sx);
          const scaledHeight = canvas.height = Math.ceil(height * outputScale.sy);
          if (!this.#isSvg) {
            bitmap = this.#scaleBitmap(scaledWidth, scaledHeight);
          }
          const ctx = canvas.getContext("2d");
          ctx.filter = this._uiManager.hcmFilter;
          let white = "white", black = "#cfcfd8";
          if (this._uiManager.hcmFilter !== "none") {
            black = "black";
          } else if (ColorScheme.isDarkMode) {
            white = "#8f8f9d";
            black = "#42414d";
          }
          const boxDim = 15;
          const boxDimWidth = boxDim * outputScale.sx;
          const boxDimHeight = boxDim * outputScale.sy;
          const pattern = new OffscreenCanvas(boxDimWidth * 2, boxDimHeight * 2);
          const patternCtx = pattern.getContext("2d");
          patternCtx.fillStyle = white;
          patternCtx.fillRect(0, 0, boxDimWidth * 2, boxDimHeight * 2);
          patternCtx.fillStyle = black;
          patternCtx.fillRect(0, 0, boxDimWidth, boxDimHeight);
          patternCtx.fillRect(boxDimWidth, boxDimHeight, boxDimWidth, boxDimHeight);
          ctx.fillStyle = ctx.createPattern(pattern, "repeat");
          ctx.fillRect(0, 0, scaledWidth, scaledHeight);
          ctx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, scaledWidth, scaledHeight);
        }
        let imageData = null;
        if (createImageData) {
          let dataWidth, dataHeight;
          if (outputScale.symmetric && bitmap.width < maxDataDimension && bitmap.height < maxDataDimension) {
            dataWidth = bitmap.width;
            dataHeight = bitmap.height;
          } else {
            bitmap = this.#bitmap;
            if (bitmapWidth > maxDataDimension || bitmapHeight > maxDataDimension) {
              const ratio = Math.min(maxDataDimension / bitmapWidth, maxDataDimension / bitmapHeight);
              dataWidth = Math.floor(bitmapWidth * ratio);
              dataHeight = Math.floor(bitmapHeight * ratio);
              if (!this.#isSvg) {
                bitmap = this.#scaleBitmap(dataWidth, dataHeight);
              }
            }
          }
          const offscreen = new OffscreenCanvas(dataWidth, dataHeight);
          const offscreenCtx = offscreen.getContext("2d", {
            willReadFrequently: true
          });
          offscreenCtx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, dataWidth, dataHeight);
          imageData = {
            width: dataWidth,
            height: dataHeight,
            data: offscreenCtx.getImageData(0, 0, dataWidth, dataHeight).data
          };
        }
        return {
          canvas,
          width,
          height,
          imageData
        };
      }
      #scaleBitmap(width, height) {
        const {
          width: bitmapWidth,
          height: bitmapHeight
        } = this.#bitmap;
        let newWidth = bitmapWidth;
        let newHeight = bitmapHeight;
        let bitmap = this.#bitmap;
        while (newWidth > 2 * width || newHeight > 2 * height) {
          const prevWidth = newWidth;
          const prevHeight = newHeight;
          if (newWidth > 2 * width) {
            newWidth = newWidth >= 16384 ? Math.floor(newWidth / 2) - 1 : Math.ceil(newWidth / 2);
          }
          if (newHeight > 2 * height) {
            newHeight = newHeight >= 16384 ? Math.floor(newHeight / 2) - 1 : Math.ceil(newHeight / 2);
          }
          const offscreen = new OffscreenCanvas(newWidth, newHeight);
          const ctx = offscreen.getContext("2d");
          ctx.drawImage(bitmap, 0, 0, prevWidth, prevHeight, 0, 0, newWidth, newHeight);
          bitmap = offscreen.transferToImageBitmap();
        }
        return bitmap;
      }
      #drawBitmap() {
        const [parentWidth, parentHeight] = this.parentDimensions;
        const {
          width,
          height
        } = this;
        const outputScale = new OutputScale();
        const scaledWidth = Math.ceil(width * parentWidth * outputScale.sx);
        const scaledHeight = Math.ceil(height * parentHeight * outputScale.sy);
        const canvas = this.#canvas;
        if (!canvas || canvas.width === scaledWidth && canvas.height === scaledHeight) {
          return;
        }
        canvas.width = scaledWidth;
        canvas.height = scaledHeight;
        const bitmap = this.#isSvg ? this.#bitmap : this.#scaleBitmap(scaledWidth, scaledHeight);
        const ctx = canvas.getContext("2d");
        ctx.filter = this._uiManager.hcmFilter;
        ctx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, scaledWidth, scaledHeight);
      }
      #serializeBitmap(toUrl) {
        if (toUrl) {
          if (this.#isSvg) {
            const url = this._uiManager.imageManager.getSvgUrl(this.#bitmapId);
            if (url) {
              return url;
            }
          }
          const canvas = document.createElement("canvas");
          ({
            width: canvas.width,
            height: canvas.height
          } = this.#bitmap);
          const ctx = canvas.getContext("2d");
          ctx.drawImage(this.#bitmap, 0, 0);
          return canvas.toDataURL();
        }
        if (this.#isSvg) {
          const [pageWidth, pageHeight] = this.pageDimensions;
          const width = Math.round(this.width * pageWidth * PixelsPerInch.PDF_TO_CSS_UNITS);
          const height = Math.round(this.height * pageHeight * PixelsPerInch.PDF_TO_CSS_UNITS);
          const offscreen = new OffscreenCanvas(width, height);
          const ctx = offscreen.getContext("2d");
          ctx.drawImage(this.#bitmap, 0, 0, this.#bitmap.width, this.#bitmap.height, 0, 0, width, height);
          return offscreen.transferToImageBitmap();
        }
        return structuredClone(this.#bitmap);
      }
      static async deserialize(data2, parent2, uiManager) {
        let initialData = null;
        let missingCanvas = false;
        if (data2 instanceof StampAnnotationElement) {
          const {
            data: {
              rect: rect2,
              rotation,
              id,
              structParent,
              popupRef,
              richText,
              contentsObj,
              creationDate,
              modificationDate
            },
            container,
            parent: {
              page: {
                pageNumber
              }
            },
            canvas
          } = data2;
          let bitmapId2, bitmap2;
          if (canvas) {
            delete data2.canvas;
            ({
              id: bitmapId2,
              bitmap: bitmap2
            } = uiManager.imageManager.getFromCanvas(container.id, canvas));
            canvas.remove();
          } else {
            missingCanvas = true;
            data2._hasNoCanvas = true;
          }
          const altText = (await parent2._structTree.getAriaAttributes(`${AnnotationPrefix}${id}`))?.get("aria-label") || "";
          initialData = data2 = {
            annotationType: AnnotationEditorType.STAMP,
            bitmapId: bitmapId2,
            bitmap: bitmap2,
            pageIndex: pageNumber - 1,
            rect: rect2.slice(0),
            rotation,
            annotationElementId: id,
            id,
            deleted: false,
            accessibilityData: {
              decorative: false,
              altText
            },
            isSvg: false,
            structParent,
            popupRef,
            richText,
            comment: contentsObj?.str || null,
            creationDate,
            modificationDate
          };
        }
        const editor = await super.deserialize(data2, parent2, uiManager);
        const {
          rect,
          bitmap,
          bitmapUrl,
          bitmapId,
          isSvg,
          accessibilityData
        } = data2;
        if (missingCanvas) {
          uiManager.addMissingCanvas(data2.id, editor);
          editor.#missingCanvas = true;
        } else if (bitmapId && uiManager.imageManager.isValidId(bitmapId)) {
          editor.#bitmapId = bitmapId;
          if (bitmap) {
            editor.#bitmap = bitmap;
          }
        } else {
          editor.#bitmapUrl = bitmapUrl;
        }
        editor.#isSvg = isSvg;
        const [parentWidth, parentHeight] = editor.pageDimensions;
        editor.width = (rect[2] - rect[0]) / parentWidth;
        editor.height = (rect[3] - rect[1]) / parentHeight;
        if (accessibilityData) {
          editor.altTextData = accessibilityData;
        }
        editor._initialData = initialData;
        if (data2.comment) {
          editor.setCommentData(data2);
        }
        editor.#hasBeenAddedInUndoStack = !!initialData;
        return editor;
      }
      serialize(isForCopying = false, context = null) {
        if (this.isEmpty()) {
          return null;
        }
        if (this.deleted) {
          return this.serializeDeleted();
        }
        const serialized = Object.assign(super.serialize(isForCopying), {
          bitmapId: this.#bitmapId,
          isSvg: this.#isSvg
        });
        this.addComment(serialized);
        if (isForCopying) {
          serialized.bitmapUrl = this.#serializeBitmap(true);
          serialized.accessibilityData = this.serializeAltText(true);
          serialized.isCopy = true;
          return serialized;
        }
        const {
          decorative,
          altText
        } = this.serializeAltText(false);
        if (!decorative && altText) {
          serialized.accessibilityData = {
            type: "Figure",
            alt: altText
          };
        }
        if (this.annotationElementId) {
          const changes = this.#hasElementChanged(serialized);
          if (changes.isSame) {
            return null;
          }
          if (changes.isSameAltText) {
            delete serialized.accessibilityData;
          } else {
            serialized.accessibilityData.structParent = this._initialData.structParent ?? -1;
          }
          serialized.id = this.annotationElementId;
          delete serialized.bitmapId;
          return serialized;
        }
        if (context === null) {
          return serialized;
        }
        context.stamps ||= /* @__PURE__ */ new Map();
        const area = this.#isSvg ? (serialized.rect[2] - serialized.rect[0]) * (serialized.rect[3] - serialized.rect[1]) : null;
        if (!context.stamps.has(this.#bitmapId)) {
          context.stamps.set(this.#bitmapId, {
            area,
            serialized
          });
          serialized.bitmap = this.#serializeBitmap(false);
        } else if (this.#isSvg) {
          const prevData = context.stamps.get(this.#bitmapId);
          if (area > prevData.area) {
            prevData.area = area;
            prevData.serialized.bitmap.close();
            prevData.serialized.bitmap = this.#serializeBitmap(false);
          }
        }
        return serialized;
      }
      #hasElementChanged(serialized) {
        const {
          pageIndex,
          accessibilityData: {
            altText
          }
        } = this._initialData;
        const isSamePageIndex = serialized.pageIndex === pageIndex;
        const isSameAltText = (serialized.accessibilityData?.alt || "") === altText;
        return {
          isSame: !this.hasEditedComment && !this._hasBeenMoved && !this._hasBeenResized && isSamePageIndex && isSameAltText,
          isSameAltText
        };
      }
      renderAnnotationElement(annotation) {
        if (this.deleted) {
          annotation.hide();
          return null;
        }
        annotation.updateEdited({
          rect: this.getPDFRect(),
          popup: this.comment
        });
        return null;
      }
    };
    AnnotationEditorLayer = class _AnnotationEditorLayer {
      #accessibilityManager;
      #allowClick = false;
      #annotationLayer = null;
      #clickAC = null;
      #editorFocusTimeoutId = null;
      #editors = /* @__PURE__ */ new Map();
      #hadPointerDown = false;
      #isDisabling = false;
      #isEnabling = false;
      #drawingAC = null;
      #focusedElement = null;
      #textLayer = null;
      #textSelectionAC = null;
      #textLayerDblClickAC = null;
      #lastPointerDownTimestamp = -1;
      #uiManager;
      static _initialized = false;
      static #editorTypes = new Map([FreeTextEditor, InkEditor, StampEditor, HighlightEditor, SignatureEditor].map((type) => [type._editorType, type]));
      constructor({
        uiManager,
        pageIndex,
        div,
        structTreeLayer,
        accessibilityManager,
        annotationLayer,
        drawLayer,
        textLayer,
        viewport,
        l10n
      }) {
        const editorTypes = [..._AnnotationEditorLayer.#editorTypes.values()];
        if (!_AnnotationEditorLayer._initialized) {
          _AnnotationEditorLayer._initialized = true;
          for (const editorType of editorTypes) {
            editorType.initialize(l10n, uiManager);
          }
        }
        uiManager.registerEditorTypes(editorTypes);
        this.#uiManager = uiManager;
        this.pageIndex = pageIndex;
        this.div = div;
        this.#accessibilityManager = accessibilityManager;
        this.#annotationLayer = annotationLayer;
        this.viewport = viewport;
        this.#textLayer = textLayer;
        this.drawLayer = drawLayer;
        this._structTree = structTreeLayer;
        this.#uiManager.addLayer(this);
      }
      get isEmpty() {
        return this.#editors.size === 0;
      }
      get isInvisible() {
        return this.isEmpty && this.#uiManager.getMode() === AnnotationEditorType.NONE;
      }
      updateToolbar(options) {
        this.#uiManager.updateToolbar(options);
      }
      updateMode(mode = this.#uiManager.getMode()) {
        this.#cleanup();
        switch (mode) {
          case AnnotationEditorType.NONE:
            this.div.classList.toggle("nonEditing", true);
            this.disableTextSelection();
            this.togglePointerEvents(false);
            this.toggleAnnotationLayerPointerEvents(true);
            this.disableClick();
            return;
          case AnnotationEditorType.INK:
            this.disableTextSelection();
            this.togglePointerEvents(true);
            this.enableClick();
            break;
          case AnnotationEditorType.HIGHLIGHT:
            this.enableTextSelection();
            this.togglePointerEvents(false);
            this.disableClick();
            break;
          default:
            this.disableTextSelection();
            this.togglePointerEvents(true);
            this.enableClick();
        }
        this.toggleAnnotationLayerPointerEvents(false);
        const {
          classList
        } = this.div;
        classList.toggle("nonEditing", false);
        if (mode === AnnotationEditorType.POPUP) {
          classList.toggle("commentEditing", true);
        } else {
          classList.toggle("commentEditing", false);
          for (const editorType of _AnnotationEditorLayer.#editorTypes.values()) {
            classList.toggle(`${editorType._type}Editing`, mode === editorType._editorType);
          }
        }
        this.div.hidden = false;
      }
      hasTextLayer(textLayer) {
        return textLayer === this.#textLayer?.div;
      }
      setEditingState(isEditing) {
        this.#uiManager.setEditingState(isEditing);
      }
      addCommands(params) {
        this.#uiManager.addCommands(params);
      }
      cleanUndoStack(type) {
        this.#uiManager.cleanUndoStack(type);
      }
      toggleDrawing(enabled = false) {
        this.div.classList.toggle("drawing", !enabled);
      }
      togglePointerEvents(enabled = false) {
        this.div.classList.toggle("disabled", !enabled);
      }
      toggleAnnotationLayerPointerEvents(enabled = false) {
        this.#annotationLayer?.div.classList.toggle("disabled", !enabled);
      }
      get #allEditorsIterator() {
        return this.#editors.size !== 0 ? this.#editors.values() : this.#uiManager.getEditors(this.pageIndex);
      }
      async enable() {
        this.#isEnabling = true;
        this.div.tabIndex = 0;
        this.togglePointerEvents(true);
        this.div.classList.toggle("nonEditing", false);
        this.#textLayerDblClickAC?.abort();
        this.#textLayerDblClickAC = null;
        const annotationElementIds = /* @__PURE__ */ new Set();
        for (const editor of this.#allEditorsIterator) {
          editor.enableEditing();
          editor.show(true);
          if (editor.annotationElementId) {
            this.#uiManager.removeChangedExistingAnnotation(editor);
            annotationElementIds.add(editor.annotationElementId);
          }
        }
        const annotationLayer = this.#annotationLayer;
        if (annotationLayer) {
          for (const editable of annotationLayer.getEditableAnnotations()) {
            editable.hide();
            if (this.#uiManager.isDeletedAnnotationElement(editable.data.id)) {
              continue;
            }
            if (annotationElementIds.has(editable.data.id)) {
              continue;
            }
            const editor = await this.deserialize(editable);
            if (!editor) {
              continue;
            }
            this.addOrRebuild(editor);
            editor.enableEditing();
          }
        }
        this.#isEnabling = false;
        this.#uiManager._eventBus.dispatch("editorsrendered", {
          source: this,
          pageNumber: this.pageIndex + 1
        });
      }
      disable() {
        this.#isDisabling = true;
        this.div.tabIndex = -1;
        this.togglePointerEvents(false);
        this.div.classList.toggle("nonEditing", true);
        if (this.#textLayer && !this.#textLayerDblClickAC) {
          this.#textLayerDblClickAC = new AbortController();
          const signal = this.#uiManager.combinedSignal(this.#textLayerDblClickAC);
          this.#textLayer.div.addEventListener("pointerdown", (e) => {
            const DBL_CLICK_THRESHOLD = 500;
            const {
              clientX,
              clientY,
              timeStamp
            } = e;
            const lastPointerDownTimestamp = this.#lastPointerDownTimestamp;
            if (timeStamp - lastPointerDownTimestamp > DBL_CLICK_THRESHOLD) {
              this.#lastPointerDownTimestamp = timeStamp;
              return;
            }
            this.#lastPointerDownTimestamp = -1;
            const {
              classList: classList2
            } = this.div;
            classList2.toggle("getElements", true);
            const elements = document.elementsFromPoint(clientX, clientY);
            classList2.toggle("getElements", false);
            if (!this.div.contains(elements[0])) {
              return;
            }
            let id;
            const regex = new RegExp(`^${AnnotationEditorPrefix}[0-9]+$`);
            for (const element of elements) {
              if (regex.test(element.id)) {
                id = element.id;
                break;
              }
            }
            if (!id) {
              return;
            }
            const editor = this.#editors.get(id);
            if (editor?.annotationElementId === null) {
              e.stopPropagation();
              e.preventDefault();
              editor.dblclick(e);
            }
          }, {
            signal,
            capture: true
          });
        }
        const annotationLayer = this.#annotationLayer;
        if (annotationLayer) {
          const changedAnnotations = /* @__PURE__ */ new Map();
          const resetAnnotations = /* @__PURE__ */ new Map();
          for (const editor of this.#allEditorsIterator) {
            editor.disableEditing();
            if (!editor.annotationElementId) {
              editor.updateFakeAnnotationElement(annotationLayer);
              continue;
            }
            if (editor.serialize() !== null) {
              changedAnnotations.set(editor.annotationElementId, editor);
              continue;
            } else {
              resetAnnotations.set(editor.annotationElementId, editor);
            }
            this.getEditableAnnotation(editor.annotationElementId)?.show();
            editor.remove();
          }
          const editables = annotationLayer.getEditableAnnotations();
          for (const editable of editables) {
            const {
              id
            } = editable.data;
            if (this.#uiManager.isDeletedAnnotationElement(id)) {
              editable.updateEdited({
                deleted: true
              });
              continue;
            }
            let editor = resetAnnotations.get(id);
            if (editor) {
              editor.resetAnnotationElement(editable);
              editor.show(false);
              editable.show();
              continue;
            }
            editor = changedAnnotations.get(id);
            if (editor) {
              this.#uiManager.addChangedExistingAnnotation(editor);
              if (editor.renderAnnotationElement(editable)) {
                editor.show(false);
              }
            }
            editable.show();
          }
        }
        this.#cleanup();
        if (this.isEmpty) {
          this.div.hidden = true;
        }
        const {
          classList
        } = this.div;
        for (const editorType of _AnnotationEditorLayer.#editorTypes.values()) {
          classList.remove(`${editorType._type}Editing`);
        }
        this.disableTextSelection();
        this.toggleAnnotationLayerPointerEvents(true);
        this.#isDisabling = false;
      }
      getEditableAnnotation(id) {
        return this.#annotationLayer?.getEditableAnnotation(id) || null;
      }
      setActiveEditor(editor) {
        const currentActive = this.#uiManager.getActive();
        if (currentActive === editor) {
          return;
        }
        this.#uiManager.setActiveEditor(editor);
      }
      enableTextSelection() {
        this.div.tabIndex = -1;
        if (this.#textLayer?.div && !this.#textSelectionAC) {
          this.#textSelectionAC = new AbortController();
          const signal = this.#uiManager.combinedSignal(this.#textSelectionAC);
          this.#textLayer.div.addEventListener("pointerdown", this.#textLayerPointerDown.bind(this), {
            signal
          });
          this.#textLayer.div.classList.add("highlighting");
        }
      }
      disableTextSelection() {
        this.div.tabIndex = 0;
        if (this.#textLayer?.div && this.#textSelectionAC) {
          this.#textSelectionAC.abort();
          this.#textSelectionAC = null;
          this.#textLayer.div.classList.remove("highlighting");
        }
      }
      #textLayerPointerDown(event) {
        this.#uiManager.unselectAll();
        const {
          target
        } = event;
        if (target === this.#textLayer.div || (target.getAttribute("role") === "img" || target.classList.contains("endOfContent")) && this.#textLayer.div.contains(target)) {
          const {
            isMac
          } = util_FeatureTest.platform;
          if (event.button !== 0 || event.ctrlKey && isMac) {
            return;
          }
          this.#uiManager.showAllEditors("highlight", true, true);
          this.#textLayer.div.classList.add("free");
          this.toggleDrawing();
          HighlightEditor.startHighlighting(this, this.#uiManager.direction === "ltr", {
            target: this.#textLayer.div,
            x: event.x,
            y: event.y
          });
          this.#textLayer.div.addEventListener("pointerup", () => {
            this.#textLayer.div.classList.remove("free");
            this.toggleDrawing(true);
          }, {
            once: true,
            signal: this.#uiManager._signal
          });
          event.preventDefault();
        }
      }
      enableClick() {
        if (this.#clickAC) {
          return;
        }
        this.#clickAC = new AbortController();
        const signal = this.#uiManager.combinedSignal(this.#clickAC);
        this.div.addEventListener("pointerdown", this.pointerdown.bind(this), {
          signal
        });
        const pointerup = this.pointerup.bind(this);
        this.div.addEventListener("pointerup", pointerup, {
          signal
        });
        this.div.addEventListener("pointercancel", pointerup, {
          signal
        });
      }
      disableClick() {
        this.#clickAC?.abort();
        this.#clickAC = null;
      }
      attach(editor) {
        this.#editors.set(editor.id, editor);
        const {
          annotationElementId
        } = editor;
        if (annotationElementId && this.#uiManager.isDeletedAnnotationElement(annotationElementId)) {
          this.#uiManager.removeDeletedAnnotationElement(editor);
        }
      }
      detach(editor) {
        this.#editors.delete(editor.id);
        this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);
        if (!this.#isDisabling && editor.annotationElementId) {
          this.#uiManager.addDeletedAnnotationElement(editor);
        }
      }
      remove(editor) {
        this.detach(editor);
        this.#uiManager.removeEditor(editor);
        editor.div.remove();
        editor.isAttachedToDOM = false;
      }
      changeParent(editor) {
        if (editor.parent === this) {
          return;
        }
        if (editor.parent && editor.annotationElementId) {
          this.#uiManager.addDeletedAnnotationElement(editor.annotationElementId);
          AnnotationEditor.deleteAnnotationElement(editor);
          editor.annotationElementId = null;
        }
        this.attach(editor);
        editor.parent?.detach(editor);
        editor.setParent(this);
        if (editor.div && editor.isAttachedToDOM) {
          editor.div.remove();
          this.div.append(editor.div);
        }
      }
      add(editor) {
        if (editor.parent === this && editor.isAttachedToDOM) {
          return;
        }
        this.changeParent(editor);
        this.#uiManager.addEditor(editor);
        this.attach(editor);
        if (!editor.isAttachedToDOM) {
          const div = editor.render();
          this.div.append(div);
          editor.isAttachedToDOM = true;
        }
        editor.fixAndSetPosition();
        editor.onceAdded(!this.#isEnabling);
        this.#uiManager.addToAnnotationStorage(editor);
        editor._reportTelemetry(editor.telemetryInitialData);
      }
      moveEditorInDOM(editor) {
        if (!editor.isAttachedToDOM) {
          return;
        }
        const {
          activeElement
        } = document;
        if (editor.div.contains(activeElement) && !this.#editorFocusTimeoutId) {
          editor._focusEventsAllowed = false;
          this.#editorFocusTimeoutId = setTimeout(() => {
            this.#editorFocusTimeoutId = null;
            if (!editor.div.contains(document.activeElement)) {
              editor.div.addEventListener("focusin", () => {
                editor._focusEventsAllowed = true;
              }, {
                once: true,
                signal: this.#uiManager._signal
              });
              activeElement.focus();
            } else {
              editor._focusEventsAllowed = true;
            }
          }, 0);
        }
        editor._structTreeParentId = this.#accessibilityManager?.moveElementInDOM(this.div, editor.div, editor.contentDiv, true);
      }
      addOrRebuild(editor) {
        if (editor.needsToBeRebuilt()) {
          editor.parent ||= this;
          editor.rebuild();
          editor.show();
        } else {
          this.add(editor);
        }
      }
      addUndoableEditor(editor) {
        const cmd = () => editor._uiManager.rebuild(editor);
        const undo = () => {
          editor.remove();
        };
        this.addCommands({
          cmd,
          undo,
          mustExec: false
        });
      }
      getEditorByUID(uid) {
        for (const editor of this.#editors.values()) {
          if (editor.uid === uid) {
            return editor;
          }
        }
        return null;
      }
      getNextId() {
        return this.#uiManager.getId();
      }
      get #currentEditorType() {
        return _AnnotationEditorLayer.#editorTypes.get(this.#uiManager.getMode());
      }
      combinedSignal(ac) {
        return this.#uiManager.combinedSignal(ac);
      }
      #createNewEditor(params) {
        const editorType = this.#currentEditorType;
        return editorType ? new editorType.prototype.constructor(params) : null;
      }
      canCreateNewEmptyEditor() {
        return this.#currentEditorType?.canCreateNewEmptyEditor();
      }
      async pasteEditor(options, params) {
        this.updateToolbar(options);
        await this.#uiManager.updateMode(options.mode);
        const {
          offsetX,
          offsetY
        } = this.#getCenterPoint();
        const id = this.getNextId();
        const editor = this.#createNewEditor({
          parent: this,
          id,
          x: offsetX,
          y: offsetY,
          uiManager: this.#uiManager,
          isCentered: true,
          ...params
        });
        if (editor) {
          this.add(editor);
        }
      }
      async deserialize(data2) {
        return await _AnnotationEditorLayer.#editorTypes.get(data2.annotationType ?? data2.annotationEditorType)?.deserialize(data2, this, this.#uiManager) || null;
      }
      createAndAddNewEditor(event, isCentered, data2 = {}) {
        const id = this.getNextId();
        const editor = this.#createNewEditor({
          parent: this,
          id,
          x: event.offsetX,
          y: event.offsetY,
          uiManager: this.#uiManager,
          isCentered,
          ...data2
        });
        if (editor) {
          this.add(editor);
        }
        return editor;
      }
      get boundingClientRect() {
        return this.div.getBoundingClientRect();
      }
      #getCenterPoint() {
        const {
          x: x2,
          y: y2,
          width,
          height
        } = this.boundingClientRect;
        const tlX = Math.max(0, x2);
        const tlY = Math.max(0, y2);
        const brX = Math.min(window.innerWidth, x2 + width);
        const brY = Math.min(window.innerHeight, y2 + height);
        const centerX = (tlX + brX) / 2 - x2;
        const centerY = (tlY + brY) / 2 - y2;
        const [offsetX, offsetY] = this.viewport.rotation % 180 === 0 ? [centerX, centerY] : [centerY, centerX];
        return {
          offsetX,
          offsetY
        };
      }
      addNewEditor(data2 = {}) {
        this.createAndAddNewEditor(this.#getCenterPoint(), true, data2);
      }
      setSelected(editor) {
        this.#uiManager.setSelected(editor);
      }
      toggleSelected(editor) {
        this.#uiManager.toggleSelected(editor);
      }
      unselect(editor) {
        this.#uiManager.unselect(editor);
      }
      pointerup(event) {
        const {
          isMac
        } = util_FeatureTest.platform;
        if (event.button !== 0 || event.ctrlKey && isMac) {
          return;
        }
        if (event.target !== this.div) {
          return;
        }
        if (!this.#hadPointerDown) {
          return;
        }
        this.#hadPointerDown = false;
        if (this.#currentEditorType?.isDrawer && this.#currentEditorType.supportMultipleDrawings) {
          return;
        }
        if (!this.#allowClick) {
          this.#allowClick = true;
          return;
        }
        const currentMode = this.#uiManager.getMode();
        if (currentMode === AnnotationEditorType.STAMP || currentMode === AnnotationEditorType.SIGNATURE) {
          this.#uiManager.unselectAll();
          return;
        }
        this.createAndAddNewEditor(event, false);
      }
      pointerdown(event) {
        if (this.#uiManager.getMode() === AnnotationEditorType.HIGHLIGHT) {
          this.enableTextSelection();
        }
        if (this.#hadPointerDown) {
          this.#hadPointerDown = false;
          return;
        }
        const {
          isMac
        } = util_FeatureTest.platform;
        if (event.button !== 0 || event.ctrlKey && isMac) {
          return;
        }
        if (event.target !== this.div) {
          return;
        }
        this.#hadPointerDown = true;
        if (this.#currentEditorType?.isDrawer) {
          this.startDrawingSession(event);
          return;
        }
        const editor = this.#uiManager.getActive();
        this.#allowClick = !editor || editor.isEmpty();
      }
      startDrawingSession(event) {
        this.div.focus({
          preventScroll: true
        });
        if (this.#drawingAC) {
          this.#currentEditorType.startDrawing(this, this.#uiManager, false, event);
          return;
        }
        this.#uiManager.setCurrentDrawingSession(this);
        this.#drawingAC = new AbortController();
        const signal = this.#uiManager.combinedSignal(this.#drawingAC);
        this.div.addEventListener("blur", ({
          relatedTarget
        }) => {
          if (relatedTarget && !this.div.contains(relatedTarget)) {
            this.#focusedElement = null;
            this.commitOrRemove();
          }
        }, {
          signal
        });
        this.#currentEditorType.startDrawing(this, this.#uiManager, false, event);
      }
      pause(on) {
        if (on) {
          const {
            activeElement
          } = document;
          if (this.div.contains(activeElement)) {
            this.#focusedElement = activeElement;
          }
          return;
        }
        if (this.#focusedElement) {
          setTimeout(() => {
            this.#focusedElement?.focus();
            this.#focusedElement = null;
          }, 0);
        }
      }
      endDrawingSession(isAborted = false) {
        if (!this.#drawingAC) {
          return null;
        }
        this.#uiManager.setCurrentDrawingSession(null);
        this.#drawingAC.abort();
        this.#drawingAC = null;
        this.#focusedElement = null;
        return this.#currentEditorType.endDrawing(isAborted);
      }
      findNewParent(editor, x2, y2) {
        const layer = this.#uiManager.findParent(x2, y2);
        if (layer === null || layer === this) {
          return false;
        }
        layer.changeParent(editor);
        return true;
      }
      commitOrRemove() {
        if (this.#drawingAC) {
          this.endDrawingSession();
          return true;
        }
        return false;
      }
      onScaleChanging() {
        if (!this.#drawingAC) {
          return;
        }
        this.#currentEditorType.onScaleChangingWhenDrawing(this);
      }
      destroy() {
        this.commitOrRemove();
        if (this.#uiManager.getActive()?.parent === this) {
          this.#uiManager.commitOrRemove();
          this.#uiManager.setActiveEditor(null);
        }
        if (this.#editorFocusTimeoutId) {
          clearTimeout(this.#editorFocusTimeoutId);
          this.#editorFocusTimeoutId = null;
        }
        for (const editor of this.#editors.values()) {
          this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);
          editor.setParent(null);
          editor.isAttachedToDOM = false;
          editor.div.remove();
        }
        this.div = null;
        this.#editors.clear();
        this.#uiManager.removeLayer(this);
      }
      #cleanup() {
        for (const editor of this.#editors.values()) {
          if (editor.isEmpty()) {
            editor.remove();
          }
        }
      }
      render({
        viewport
      }) {
        this.viewport = viewport;
        setLayerDimensions(this.div, viewport);
        for (const editor of this.#uiManager.getEditors(this.pageIndex)) {
          this.add(editor);
          editor.rebuild();
        }
        this.updateMode();
      }
      update({
        viewport
      }) {
        this.#uiManager.commitOrRemove();
        this.#cleanup();
        const oldRotation = this.viewport.rotation;
        const rotation = viewport.rotation;
        this.viewport = viewport;
        setLayerDimensions(this.div, {
          rotation
        });
        if (oldRotation !== rotation) {
          for (const editor of this.#editors.values()) {
            editor.rotate(rotation);
          }
        }
      }
      get pageDimensions() {
        const {
          pageWidth,
          pageHeight
        } = this.viewport.rawDims;
        return [pageWidth, pageHeight];
      }
      get scale() {
        return this.#uiManager.viewParameters.realScale;
      }
    };
    DrawLayer = class _DrawLayer {
      #parent = null;
      #mapping = /* @__PURE__ */ new Map();
      #toUpdate = /* @__PURE__ */ new Map();
      static #id = 0;
      constructor({
        pageIndex
      }) {
        this.pageIndex = pageIndex;
      }
      setParent(parent2) {
        if (!this.#parent) {
          this.#parent = parent2;
          return;
        }
        if (this.#parent !== parent2) {
          if (this.#mapping.size > 0) {
            for (const root2 of this.#mapping.values()) {
              root2.remove();
              parent2.append(root2);
            }
          }
          this.#parent = parent2;
        }
      }
      static get _svgFactory() {
        return shadow(this, "_svgFactory", new DOMSVGFactory());
      }
      static #setBox(element, [x2, y2, width, height]) {
        const {
          style
        } = element;
        style.top = `${100 * y2}%`;
        style.left = `${100 * x2}%`;
        style.width = `${100 * width}%`;
        style.height = `${100 * height}%`;
      }
      #createSVG() {
        const svg = _DrawLayer._svgFactory.create(1, 1, true);
        this.#parent.append(svg);
        svg.setAttribute("aria-hidden", true);
        return svg;
      }
      #createClipPath(defs, pathId) {
        const clipPath = _DrawLayer._svgFactory.createElement("clipPath");
        defs.append(clipPath);
        const clipPathId = `clip_${pathId}`;
        clipPath.setAttribute("id", clipPathId);
        clipPath.setAttribute("clipPathUnits", "objectBoundingBox");
        const clipPathUse = _DrawLayer._svgFactory.createElement("use");
        clipPath.append(clipPathUse);
        clipPathUse.setAttribute("href", `#${pathId}`);
        clipPathUse.classList.add("clip");
        return clipPathId;
      }
      #updateProperties(element, properties) {
        for (const [key, value] of Object.entries(properties)) {
          if (value === null) {
            element.removeAttribute(key);
          } else {
            element.setAttribute(key, value);
          }
        }
      }
      draw(properties, isPathUpdatable = false, hasClip = false) {
        const id = _DrawLayer.#id++;
        const root2 = this.#createSVG();
        const defs = _DrawLayer._svgFactory.createElement("defs");
        root2.append(defs);
        const path = _DrawLayer._svgFactory.createElement("path");
        defs.append(path);
        const pathId = `path_p${this.pageIndex}_${id}`;
        path.setAttribute("id", pathId);
        path.setAttribute("vector-effect", "non-scaling-stroke");
        if (isPathUpdatable) {
          this.#toUpdate.set(id, path);
        }
        const clipPathId = hasClip ? this.#createClipPath(defs, pathId) : null;
        const use = _DrawLayer._svgFactory.createElement("use");
        root2.append(use);
        use.setAttribute("href", `#${pathId}`);
        this.updateProperties(root2, properties);
        this.#mapping.set(id, root2);
        return {
          id,
          clipPathId: `url(#${clipPathId})`
        };
      }
      drawOutline(properties, mustRemoveSelfIntersections) {
        const id = _DrawLayer.#id++;
        const root2 = this.#createSVG();
        const defs = _DrawLayer._svgFactory.createElement("defs");
        root2.append(defs);
        const path = _DrawLayer._svgFactory.createElement("path");
        defs.append(path);
        const pathId = `path_p${this.pageIndex}_${id}`;
        path.setAttribute("id", pathId);
        path.setAttribute("vector-effect", "non-scaling-stroke");
        let maskId;
        if (mustRemoveSelfIntersections) {
          const mask = _DrawLayer._svgFactory.createElement("mask");
          defs.append(mask);
          maskId = `mask_p${this.pageIndex}_${id}`;
          mask.setAttribute("id", maskId);
          mask.setAttribute("maskUnits", "objectBoundingBox");
          const rect = _DrawLayer._svgFactory.createElement("rect");
          mask.append(rect);
          rect.setAttribute("width", "1");
          rect.setAttribute("height", "1");
          rect.setAttribute("fill", "white");
          const use = _DrawLayer._svgFactory.createElement("use");
          mask.append(use);
          use.setAttribute("href", `#${pathId}`);
          use.setAttribute("stroke", "none");
          use.setAttribute("fill", "black");
          use.setAttribute("fill-rule", "nonzero");
          use.classList.add("mask");
        }
        const use1 = _DrawLayer._svgFactory.createElement("use");
        root2.append(use1);
        use1.setAttribute("href", `#${pathId}`);
        if (maskId) {
          use1.setAttribute("mask", `url(#${maskId})`);
        }
        const use2 = use1.cloneNode();
        root2.append(use2);
        use1.classList.add("mainOutline");
        use2.classList.add("secondaryOutline");
        this.updateProperties(root2, properties);
        this.#mapping.set(id, root2);
        return id;
      }
      finalizeDraw(id, properties) {
        this.#toUpdate.delete(id);
        this.updateProperties(id, properties);
      }
      updateProperties(elementOrId, properties) {
        if (!properties) {
          return;
        }
        const {
          root: root2,
          bbox,
          rootClass,
          path
        } = properties;
        const element = typeof elementOrId === "number" ? this.#mapping.get(elementOrId) : elementOrId;
        if (!element) {
          return;
        }
        if (root2) {
          this.#updateProperties(element, root2);
        }
        if (bbox) {
          _DrawLayer.#setBox(element, bbox);
        }
        if (rootClass) {
          const {
            classList
          } = element;
          for (const [className, value] of Object.entries(rootClass)) {
            classList.toggle(className, value);
          }
        }
        if (path) {
          const defs = element.firstChild;
          const pathElement = defs.firstChild;
          this.#updateProperties(pathElement, path);
        }
      }
      updateParent(id, layer) {
        if (layer === this) {
          return;
        }
        const root2 = this.#mapping.get(id);
        if (!root2) {
          return;
        }
        layer.#parent.append(root2);
        this.#mapping.delete(id);
        layer.#mapping.set(id, root2);
      }
      remove(id) {
        this.#toUpdate.delete(id);
        if (this.#parent === null) {
          return;
        }
        this.#mapping.get(id).remove();
        this.#mapping.delete(id);
      }
      destroy() {
        this.#parent = null;
        for (const root2 of this.#mapping.values()) {
          root2.remove();
        }
        this.#mapping.clear();
        this.#toUpdate.clear();
      }
    };
    {
      globalThis._pdfjsTestingUtils = {
        HighlightOutliner
      };
    }
    globalThis.pdfjsLib = {
      AbortException: AbortException$1,
      AnnotationEditorLayer,
      AnnotationEditorParamsType,
      AnnotationEditorType,
      AnnotationEditorUIManager,
      AnnotationLayer,
      AnnotationMode,
      AnnotationType,
      applyOpacity,
      build,
      ColorPicker,
      createValidAbsoluteUrl,
      CSSConstants,
      DOMSVGFactory,
      DrawLayer,
      FeatureTest: util_FeatureTest,
      fetchData,
      findContrastColor,
      getDocument,
      getFilenameFromUrl,
      getPdfFilenameFromUrl,
      getRGB,
      getUuid,
      getXfaPageViewport,
      GlobalWorkerOptions,
      ImageKind: util_ImageKind,
      InvalidPDFException: InvalidPDFException$1,
      isDataScheme,
      isPdfFile,
      isValidExplicitDest,
      MathClamp,
      noContextMenu,
      normalizeUnicode,
      OPS,
      OutputScale,
      PasswordResponses,
      PDFDataRangeTransport,
      PDFDateString,
      PDFWorker,
      PermissionFlag,
      PixelsPerInch,
      RenderingCancelledException,
      renderRichText,
      ResponseException: ResponseException$1,
      setLayerDimensions,
      shadow,
      SignatureExtractor,
      stopEvent,
      SupportedImageMimeTypes,
      TextLayer,
      TouchManager,
      updateUrlHash,
      Util,
      VerbosityLevel,
      version,
      XfaLayer
    };
    pdfjs = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      AbortException: AbortException$1,
      AnnotationEditorLayer,
      AnnotationEditorParamsType,
      AnnotationEditorType,
      AnnotationEditorUIManager,
      AnnotationLayer,
      AnnotationMode,
      AnnotationType,
      CSSConstants,
      ColorPicker,
      DOMSVGFactory,
      DrawLayer,
      FeatureTest: util_FeatureTest,
      GlobalWorkerOptions,
      ImageKind: util_ImageKind,
      InvalidPDFException: InvalidPDFException$1,
      MathClamp,
      OPS,
      OutputScale,
      PDFDataRangeTransport,
      PDFDateString,
      PDFWorker,
      PasswordResponses,
      PermissionFlag,
      PixelsPerInch,
      RenderingCancelledException,
      ResponseException: ResponseException$1,
      SignatureExtractor,
      SupportedImageMimeTypes,
      TextLayer,
      TouchManager,
      Util,
      VerbosityLevel,
      XfaLayer,
      applyOpacity,
      build,
      createValidAbsoluteUrl,
      fetchData,
      findContrastColor,
      getDocument,
      getFilenameFromUrl,
      getPdfFilenameFromUrl,
      getRGB,
      getUuid,
      getXfaPageViewport,
      isDataScheme,
      isPdfFile,
      isValidExplicitDest,
      noContextMenu,
      normalizeUnicode,
      renderRichText,
      setLayerDimensions,
      shadow,
      stopEvent,
      updateUrlHash,
      version
    }, Symbol.toStringTag, { value: "Module" }));
    InvalidPDFException2 = class _InvalidPDFException2 extends Error {
      /**
       * Create a new InvalidPDFException.
       * @param message - Optional error message.
       * @param cause - Optional underlying cause (preserved on modern runtimes).
       */
      constructor(message, cause) {
        if (cause !== void 0) {
          super(message ?? "Invalid PDF", { cause });
        } else {
          super(message ?? "Invalid PDF");
        }
        this.name = "InvalidPDFException";
        Object.setPrototypeOf(this, _InvalidPDFException2.prototype);
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidPDFException2);
        }
      }
    };
    PasswordException2 = class _PasswordException2 extends Error {
      /**
       * Create a new PasswordException.
       * @param message - Optional error message.
       * @param cause - Optional underlying cause.
       */
      constructor(message, cause) {
        if (cause !== void 0) {
          super(message ?? "Password required or incorrect", { cause });
        } else {
          super(message ?? "Password required or incorrect");
        }
        this.name = "PasswordException";
        Object.setPrototypeOf(this, _PasswordException2.prototype);
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _PasswordException2);
        }
      }
    };
    FormatError2 = class _FormatError2 extends Error {
      /**
       * Create a new FormatError.
       * @param message - Optional message describing the format problem.
       * @param cause - Optional underlying cause.
       */
      constructor(message, cause) {
        if (cause !== void 0) {
          super(message ?? "PDF format error", { cause });
        } else {
          super(message ?? "PDF format error");
        }
        this.name = "FormatError";
        Object.setPrototypeOf(this, _FormatError2.prototype);
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _FormatError2);
        }
      }
    };
    UnknownErrorException2 = class _UnknownErrorException2 extends Error {
      /**
       * Create a new UnknownErrorException.
       * @param message - Optional error message.
       * @param details - Optional additional details from the PDF library.
       * @param cause - Optional underlying cause.
       */
      constructor(message, details, cause) {
        if (cause !== void 0) {
          super(message ?? "Unknown error", { cause });
        } else {
          super(message ?? "Unknown error");
        }
        this.name = "UnknownErrorException";
        Object.setPrototypeOf(this, _UnknownErrorException2.prototype);
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UnknownErrorException2);
        }
        this.details = details;
      }
    };
    ResponseException2 = class _ResponseException2 extends Error {
      /**
       * Create a new ResponseException.
       * @param message - Optional error message.
       * @param status - Optional numeric HTTP/status code.
       * @param missing - Optional field describing missing resources.
       * @param cause - Optional underlying cause.
       */
      constructor(message, status, missing, cause) {
        if (cause !== void 0) {
          super(message ?? "Response error", { cause });
        } else {
          super(message ?? "Response error");
        }
        this.name = "ResponseException";
        Object.setPrototypeOf(this, _ResponseException2.prototype);
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ResponseException2);
        }
        this.status = status;
        this.missing = missing;
      }
    };
    AbortException2 = class _AbortException2 extends Error {
      /**
       * Create a new AbortException.
       * @param message - Optional error message.
       * @param cause - Optional underlying cause.
       */
      constructor(message, cause) {
        if (cause !== void 0) {
          super(message ?? "Operation aborted", { cause });
        } else {
          super(message ?? "Operation aborted");
        }
        this.name = "AbortException";
        Object.setPrototypeOf(this, _AbortException2.prototype);
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AbortException2);
        }
      }
    };
    Shape = class {
      static tolerance = 2;
      static applyTransform(p, m2) {
        const xt = p[0] * m2[0] + p[1] * m2[2] + m2[4];
        const yt = p[0] * m2[1] + p[1] * m2[3] + m2[5];
        return [xt, yt];
      }
    };
    Point = class extends Shape {
      x;
      y;
      constructor(x2, y2) {
        super();
        this.x = x2;
        this.y = y2;
      }
      equal(point) {
        return point.x === this.x && point.y === this.y;
      }
      transform(matrix) {
        const p = Shape.applyTransform([this.x, this.y], matrix);
        this.x = p[0];
        this.y = p[1];
        return this;
      }
    };
    LineDirection = /* @__PURE__ */ ((LineDirection2) => {
      LineDirection2[LineDirection2["None"] = 0] = "None";
      LineDirection2[LineDirection2["Horizontal"] = 1] = "Horizontal";
      LineDirection2[LineDirection2["Vertical"] = 2] = "Vertical";
      return LineDirection2;
    })(LineDirection || {});
    Line = class _Line extends Shape {
      from;
      to;
      direction = 0;
      length = 0;
      intersections = [];
      gaps = [];
      constructor(from, to) {
        super();
        this.from = from;
        this.to = to;
        this.init();
      }
      init() {
        let from = this.from;
        let to = this.to;
        if (Math.abs(from.y - to.y) < Shape.tolerance) {
          this.direction = 1;
          to.y = from.y;
          if (from.x > to.x) {
            const temp = from;
            from = to;
            to = temp;
          }
          this.length = to.x - from.x;
        } else if (Math.abs(from.x - to.x) < Shape.tolerance) {
          this.direction = 2;
          to.x = from.x;
          if (from.y > to.y) {
            const temp = from;
            from = to;
            to = temp;
          }
          this.length = to.y - from.y;
        }
        this.from = from;
        this.to = to;
      }
      _valid = void 0;
      get valid() {
        if (this._valid === void 0) {
          this._valid = this.direction !== 0 && this.length > Shape.tolerance;
        }
        return this._valid;
      }
      get normalized() {
        if (this.direction === 1) {
          return new _Line(
            new Point(this.from.x - Shape.tolerance, this.from.y),
            new Point(this.to.x + Shape.tolerance, this.from.y)
          );
        } else if (this.direction === 2) {
          return new _Line(
            new Point(this.from.x, this.from.y - Shape.tolerance),
            new Point(this.from.x, this.to.y + Shape.tolerance)
          );
        }
        return this;
      }
      addGap(line) {
        this.gaps.push(line);
      }
      containsPoint(p) {
        if (this.direction === 2) {
          return this.from.x === p.x && p.y >= this.from.y && p.y <= this.to.y;
        } else if (this.direction === 1) {
          return this.from.y === p.y && p.x >= this.from.x && p.x <= this.to.x;
        }
        return false;
      }
      // // todo implement
      // public containsLine(l:Line):boolean{
      //     if(this.direction === LineDirection.Vertical && l.direction === LineDirection.Vertical){
      //         return this.from.x === l.from.x
      //     }
      //     else if(this.direction === LineDirection.Horizontal && l.direction === LineDirection.Horizontal){
      //         return this.from.y === l.from.y
      //     }
      //     return false
      // }
      addIntersectionPoint(point) {
        for (const intPoint of this.intersections) {
          if (intPoint.equal(point)) return;
        }
        this.intersections.push(point);
      }
      intersection(line) {
        let result;
        if (!this.valid || !line.valid) {
          return result;
        }
        const thisNormalized = this.normalized;
        const lineNormalized = line.normalized;
        if (this.direction === 1 && line.direction === 2) {
          const x2 = lineNormalized.from.x;
          const y2 = thisNormalized.from.y;
          const isOk = x2 > thisNormalized.from.x && x2 < thisNormalized.to.x && y2 > lineNormalized.from.y && y2 < lineNormalized.to.y;
          if (isOk) {
            const intPoint = new Point(x2, y2);
            this.addIntersectionPoint(intPoint);
            line.addIntersectionPoint(intPoint);
            result = intPoint;
          }
        } else if (this.direction === 2 && line.direction === 1) {
          const x2 = thisNormalized.from.x;
          const y2 = lineNormalized.from.y;
          const isOk = x2 > lineNormalized.from.x && x2 < lineNormalized.to.x && y2 > thisNormalized.from.y && y2 < thisNormalized.to.y;
          if (isOk) {
            const intPoint = new Point(x2, y2);
            this.addIntersectionPoint(intPoint);
            line.addIntersectionPoint(intPoint);
            result = intPoint;
          }
        }
        return result;
      }
      transform(matrix) {
        const p1 = this.from.transform(matrix);
        const p2 = this.to.transform(matrix);
        const x2 = Math.min(p1.x, p2.x);
        const y2 = Math.min(p1.y, p2.y);
        const width = Math.abs(p1.x - p2.x);
        const height = Math.abs(p1.y - p2.y);
        this.from = new Point(x2, y2);
        this.to = new Point(x2 + width, y2 + height);
        this.init();
        return this;
      }
    };
    TableData = class {
      minXY;
      maxXY;
      rows;
      rowPivots;
      colPivots;
      constructor(minXY, maxXY, rowPivots, colPivots) {
        this.minXY = minXY;
        this.maxXY = maxXY;
        this.rows = [];
        this.rowPivots = rowPivots;
        this.colPivots = colPivots;
      }
      findCell(x2, y2) {
        if (x2 >= this.minXY.x && y2 >= this.minXY.y && x2 <= this.maxXY.x && y2 <= this.maxXY.y) {
          for (const row of this.rows) {
            for (const cell of row) {
              if (cell.minXY.x <= x2 && cell.minXY.y <= y2 && cell.maxXY.x >= x2 && cell.maxXY.y >= y2) {
                return cell;
              }
            }
          }
        }
        return void 0;
      }
      get cellCount() {
        return this.rows.reduce((acc, row) => acc + row.length, 0);
      }
      get rowCount() {
        return this.rows.length;
      }
      check() {
        const virtualCellCount = (this.colPivots.length - 1) * (this.rowPivots.length - 1);
        let allCellCount = 0;
        for (const row of this.rows) {
          for (const cell of row) {
            const count = (cell.colspan || 1) * (cell.rowspan || 1);
            allCellCount += count;
          }
        }
        if (virtualCellCount !== allCellCount) {
          return false;
        }
        return true;
      }
      toArray() {
        const tableArr = [];
        for (const row of this.rows) {
          const rowArr = [];
          for (const cell of row) {
            let text3 = cell.text.join("");
            text3 = text3.replace(/^[\s]+|[\s]+$/g, "");
            text3 = text3.trim();
            rowArr.push(text3);
          }
          tableArr.push(rowArr);
        }
        return tableArr;
      }
    };
    Table = class {
      hLines = [];
      vLines = [];
      constructor(line) {
        if (line.direction === LineDirection.Horizontal) {
          this.hLines.push(line);
        } else if (line.direction === LineDirection.Vertical) {
          this.vLines.push(line);
        }
      }
      get isValid() {
        return this.hLines.length + this.vLines.length > 4;
      }
      get rowPivots() {
        const rowSet = /* @__PURE__ */ new Set();
        for (const line of this.hLines) {
          rowSet.add(line.from.y);
        }
        return [...rowSet].sort((a, b2) => a - b2);
      }
      get colPivots() {
        const colSet = /* @__PURE__ */ new Set();
        for (const line of this.vLines) {
          colSet.add(line.from.x);
        }
        return [...colSet].sort((a, b2) => a - b2);
      }
      add(line) {
        const hasIntersection = this.intersection(line);
        if (hasIntersection) {
          if (line.direction === LineDirection.Horizontal) {
            this.hLines.push(line);
            return true;
          } else if (line.direction === LineDirection.Vertical) {
            this.vLines.push(line);
            return true;
          }
        }
        return false;
      }
      intersection(line) {
        let flag = false;
        if (!line.valid) return flag;
        if (line.direction === LineDirection.Horizontal) {
          for (const vLine of this.vLines) {
            const p = line.intersection(vLine);
            if (p) {
              flag = true;
            }
          }
        } else if (line.direction === LineDirection.Vertical) {
          for (const hLine of this.hLines) {
            const p = line.intersection(hLine);
            if (p) {
              flag = true;
            }
          }
        }
        return flag;
      }
      getSameHorizontal(line) {
        const same = [line];
        const other = [];
        while (this.hLines.length > 0) {
          const hLine = this.hLines.shift();
          if (!hLine) continue;
          if (hLine.from.y === line.from.y) {
            same.push(hLine);
          } else {
            other.push(hLine);
          }
        }
        this.hLines = other;
        return same;
      }
      getSameVertical(line) {
        const same = [line];
        const other = [];
        while (this.vLines.length > 0) {
          const vLine = this.vLines.shift();
          if (!vLine) continue;
          if (vLine.from.x === line.from.x) {
            same.push(vLine);
          } else {
            other.push(vLine);
          }
        }
        this.vLines = other;
        return same;
      }
      mergeHorizontalLines(lines) {
        lines.sort((l1, l2) => l1.from.x - l2.from.x);
        const minX = lines[0].from.x;
        const maxX = lines[lines.length - 1].to.x;
        const resultLine = new Line(new Point(minX, lines[0].from.y), new Point(maxX, lines[0].from.y));
        for (let i = 1; i < lines.length; i++) {
          const prevLine = lines[i - 1];
          const currLine = lines[i];
          if (Math.abs(prevLine.to.x - currLine.from.x) > Shape.tolerance) {
            const gapLine = new Line(
              new Point(prevLine.to.x, prevLine.from.y),
              new Point(currLine.from.x, currLine.from.y)
            );
            resultLine.addGap(gapLine);
          }
        }
        return resultLine;
      }
      mergeVerticalLines(lines) {
        lines.sort((l1, l2) => l1.from.y - l2.from.y);
        const minY = lines[0].from.y;
        const maxY = lines[lines.length - 1].to.y;
        const resultLine = new Line(new Point(lines[0].from.x, minY), new Point(lines[0].from.x, maxY));
        for (let i = 1; i < lines.length; i++) {
          const prevLine = lines[i - 1];
          const currLine = lines[i];
          if (Math.abs(prevLine.to.y - currLine.from.y) > Shape.tolerance) {
            const gapLine = new Line(new Point(prevLine.to.x, prevLine.to.y), new Point(prevLine.to.x, currLine.from.y));
            resultLine.addGap(gapLine);
          }
        }
        return resultLine;
      }
      normalize() {
        this.hLines = this.hLines.filter((l) => l.intersections.length > 1);
        this.vLines = this.vLines.filter((l) => l.intersections.length > 1);
        this.hLines.sort((l1, l2) => l1.from.y - l2.from.y);
        this.vLines.sort((l1, l2) => l1.from.x - l2.from.x);
        const newHLines = [];
        while (this.hLines.length > 0) {
          const line = this.hLines.shift();
          if (!line) continue;
          const lines = this.getSameHorizontal(line);
          const merged = this.mergeHorizontalLines(lines);
          newHLines.push(merged);
        }
        this.hLines = newHLines;
        const newVLines = [];
        while (this.vLines.length > 0) {
          const line = this.vLines.shift();
          if (!line) continue;
          const lines = this.getSameVertical(line);
          const merged = this.mergeVerticalLines(lines);
          newVLines.push(merged);
        }
        this.vLines = newVLines;
      }
      verticalExists(line, y1, y2) {
        if (line.direction !== LineDirection.Vertical) {
          throw new Error("Line is not vertical");
        }
        if (y1 >= y2) {
          throw new Error("y1 must be less than y2");
        }
        if (line.from.y <= y1 && line.to.y >= y2) {
          for (const gap of line.gaps) {
            if (gap.from.y <= y1 && gap.to.y >= y2) {
              return false;
            }
          }
          return true;
        }
        return false;
      }
      horizontalExists(line, x1, x2) {
        if (line.direction !== LineDirection.Horizontal) {
          throw new Error("Line is not horizontal");
        }
        if (x1 >= x2) {
          throw new Error("x1 must be less than x2");
        }
        if (line.from.x <= x1 && line.to.x >= x2) {
          for (const gap of line.gaps) {
            if (gap.from.x <= x1 && gap.to.x >= x2) {
              return false;
            }
          }
          return true;
        }
        return false;
      }
      findBottomLineIndex(h2Index, xMiddle) {
        for (let i = h2Index; i < this.hLines.length; i++) {
          const hLine = this.hLines[i];
          if (hLine.from.x <= xMiddle && hLine.to.x >= xMiddle) {
            return i;
          }
        }
        return -1;
      }
      findVerticalLineIndexs(topHLine, yMiddle) {
        const result = [];
        for (let i = 0; i < this.vLines.length; i++) {
          const vLine = this.vLines[i];
          if (vLine.from.y <= yMiddle && vLine.to.y >= yMiddle && topHLine.intersection(vLine)) {
            result.push(i);
          }
        }
        return result;
      }
      getRow(h1Index, h2Index, yMiddle) {
        const tableRow = [];
        const topHLine = this.hLines[h1Index];
        const vLineIndexes = this.findVerticalLineIndexs(topHLine, yMiddle);
        for (let i = 1; i < vLineIndexes.length; i++) {
          const leftVLine = this.vLines[vLineIndexes[i - 1]];
          const rightVLine = this.vLines[vLineIndexes[i]];
          const xMiddle = (leftVLine.from.x + rightVLine.from.x) / 2;
          const bottomHLineIndex = this.findBottomLineIndex(h2Index, xMiddle);
          const bottomHLine = this.hLines[bottomHLineIndex];
          const tableCell = {
            minXY: new Point(leftVLine.from.x, topHLine.from.y),
            maxXY: new Point(rightVLine.from.x, bottomHLine.from.y),
            width: rightVLine.from.x - leftVLine.from.x,
            height: bottomHLine.from.y - topHLine.from.y,
            text: []
          };
          const colSpan = vLineIndexes[i] - vLineIndexes[i - 1];
          const rowSpan = bottomHLineIndex - h1Index;
          if (colSpan > 1) {
            tableCell.colspan = colSpan;
          }
          if (rowSpan > 1) {
            tableCell.rowspan = rowSpan;
          }
          tableRow.push(tableCell);
        }
        return tableRow;
      }
      toData() {
        const rowPivots = this.rowPivots;
        const colPivots = this.colPivots;
        const minXY = new Point(colPivots[0], rowPivots[0]);
        const maxXY = new Point(colPivots[colPivots.length - 1], rowPivots[rowPivots.length - 1]);
        const result = new TableData(minXY, maxXY, rowPivots, colPivots);
        for (let h1 = 1; h1 < this.hLines.length; h1++) {
          const prevHLine = this.hLines[h1 - 1];
          const currHLine = this.hLines[h1];
          const YMiddle = (prevHLine.from.y + currHLine.from.y) / 2;
          const rowData = this.getRow(h1 - 1, h1, YMiddle);
          result.rows.push(rowData);
        }
        return result;
      }
    };
    LineStore = class {
      hLines = [];
      vLines = [];
      add(line) {
        if (line.valid) {
          if (line.direction === LineDirection.Horizontal) {
            this.hLines.push(line);
          } else if (line.direction === LineDirection.Vertical) {
            this.vLines.push(line);
          }
        }
      }
      addRectangle(rect) {
        for (const line of rect.getLines()) {
          this.add(line);
        }
      }
      getTableData() {
        const result = [];
        const tables = this.getTables();
        for (const table of tables) {
          const data2 = table.toData();
          if (data2) {
            result.push(data2);
          }
        }
        return result;
      }
      getTables() {
        const result = [];
        while (this.hLines.length !== 0) {
          const hLine = this.hLines.shift();
          if (!hLine) continue;
          const filled = this.tryFill(result, hLine);
          if (filled) continue;
          const table = new Table(hLine);
          this.fillTable(table);
          result.push(table);
        }
        while (this.vLines.length !== 0) {
          const vLine = this.vLines.shift();
          if (!vLine) continue;
          const filled = this.tryFill(result, vLine);
          if (filled) continue;
          const table = new Table(vLine);
          this.fillTable(table);
          result.push(table);
        }
        const validTables = result.filter((t) => t.isValid);
        for (const table of validTables) {
          table.normalize();
        }
        return validTables;
      }
      normalize() {
        this.normalizeHorizontal();
        this.normalizeVertical();
      }
      normalizeHorizontal() {
        this.hLines.sort((l1, l2) => l1.from.y - l2.from.y);
        const newLines = [];
        let sameY = [];
        for (const line of this.hLines) {
          if (sameY.length === 0) {
            sameY.push(line);
          } else if (Math.abs(sameY[0]?.from.y - line.from.y) < Shape.tolerance) {
            sameY.push(line);
          } else {
            const merged = this.margeHorizontalLines(sameY);
            newLines.push(...merged);
            sameY = [line];
          }
        }
        if (sameY.length > 0) {
          const merged = this.margeHorizontalLines(sameY);
          newLines.push(...merged);
        }
        this.hLines = newLines;
      }
      normalizeVertical() {
        this.vLines.sort((l1, l2) => l1.from.x - l2.from.x);
        const newLines = [];
        let sameX = [];
        for (const line of this.vLines) {
          if (sameX.length === 0) {
            sameX.push(line);
          } else if (Math.abs(sameX[0]?.from.x - line.from.x) < Shape.tolerance) {
            sameX.push(line);
          } else {
            const merged = this.margeVerticalLines(sameX);
            newLines.push(...merged);
            sameX = [line];
          }
        }
        if (sameX.length > 0) {
          const merged = this.margeVerticalLines(sameX);
          newLines.push(...merged);
        }
        this.vLines = newLines;
      }
      fillTable(table) {
        const newVLines = [];
        const newHLines = [];
        for (const vLine of this.vLines) {
          if (!table.add(vLine)) {
            newVLines.push(vLine);
          }
        }
        for (const hLine of this.hLines) {
          if (!table.add(hLine)) {
            newHLines.push(hLine);
          }
        }
        this.hLines = newHLines;
        this.vLines = newVLines;
      }
      tryFill(tables, line) {
        for (const table of tables) {
          if (table.add(line)) {
            this.fillTable(table);
            return true;
          }
        }
        return false;
      }
      margeHorizontalLines(sameYLines) {
        const result = [];
        sameYLines.sort((l1, l2) => l1.from.x - l2.from.x);
        const sameY = sameYLines[0]?.from.y;
        if (sameY === void 0) return result;
        let minX = Number.MAX_SAFE_INTEGER;
        let maxX = Number.MIN_SAFE_INTEGER;
        for (const line of sameYLines) {
          if (line.from.x - maxX < Shape.tolerance) {
            if (line.from.x < minX) {
              minX = line.from.x;
            }
            if (line.to.x > maxX) {
              maxX = line.to.x;
            }
          } else {
            if (maxX > minX) {
              result.push(new Line(new Point(minX, sameY), new Point(maxX, sameY)));
            }
            minX = line.from.x;
            maxX = line.to.x;
          }
        }
        const last2 = result[result.length - 1];
        if (last2) {
          if (last2.from.x !== minX && last2.to.x !== maxX) {
            result.push(new Line(new Point(minX, sameY), new Point(maxX, sameY)));
          }
        } else {
          result.push(new Line(new Point(minX, sameY), new Point(maxX, sameY)));
        }
        return result;
      }
      margeVerticalLines(sameXLines) {
        const result = [];
        sameXLines.sort((l1, l2) => l1.from.y - l2.from.y);
        const sameX = sameXLines[0]?.from.x;
        if (sameX === void 0) return result;
        let minY = Number.MAX_SAFE_INTEGER;
        let maxY = Number.MIN_SAFE_INTEGER;
        for (const line of sameXLines) {
          if (line.from.y - maxY < Shape.tolerance) {
            if (line.from.y < minY) {
              minY = line.from.y;
            }
            if (line.to.y > maxY) {
              maxY = line.to.y;
            }
          } else {
            if (maxY > minY) {
              result.push(new Line(new Point(sameX, minY), new Point(sameX, maxY)));
            }
            minY = line.from.y;
            maxY = line.to.y;
          }
        }
        const last2 = result[result.length - 1];
        if (last2) {
          if (last2.from.y !== minY && last2.to.y !== maxY) {
            result.push(new Line(new Point(sameX, minY), new Point(sameX, maxY)));
          }
        } else {
          result.push(new Line(new Point(sameX, minY), new Point(sameX, maxY)));
        }
        return result;
      }
    };
    Rectangle = class extends Shape {
      from;
      width;
      height;
      constructor(from, width, height) {
        super();
        this.from = from;
        this.width = width;
        this.height = height;
      }
      get to() {
        return new Point(this.from.x + this.width, this.from.y + this.height);
      }
      getLines() {
        const to = this.to;
        const lines = [
          new Line(this.from, new Point(to.x, this.from.y)),
          new Line(this.from, new Point(this.from.x, to.y)),
          new Line(new Point(to.x, this.from.y), to),
          new Line(new Point(this.from.x, to.y), to)
        ];
        return lines.filter((l) => l.valid);
      }
      transform(matrix) {
        const p1 = Shape.applyTransform([this.from.x, this.from.y], matrix);
        const p2 = Shape.applyTransform([this.from.x + this.width, this.from.y + this.height], matrix);
        const x2 = Math.min(p1[0], p2[0]);
        const y2 = Math.min(p1[1], p2[1]);
        const width = Math.abs(p1[0] - p2[0]);
        const height = Math.abs(p1[1] - p2[1]);
        this.from = new Point(x2, y2);
        this.width = width;
        this.height = height;
        return this;
      }
    };
    ImageResult = class {
      pages = [];
      total = 0;
      getPageImage(num, name) {
        for (const pageData of this.pages) {
          if (pageData.pageNumber === num) {
            for (const img of pageData.images) {
              if (img.name === name) {
                return img;
              }
            }
          }
        }
        return null;
      }
      constructor(total) {
        this.total = total;
      }
    };
    XMP_DATE_PROPERTIES = [
      "xmp:createdate",
      "xmp:modifydate",
      "xmp:metadatadate",
      "xap:createdate",
      "xap:modifydate",
      "xap:metadatadate"
    ];
    InfoResult = class {
      // Total number of pages in the PDF document (count of physical pages).
      total;
      /**
       * The PDF 'Info' dictionary. Typical fields include title, author, subject,
       * Creator, Producer and Creation/Modification dates. The exact structure is
       * determined by the PDF and as returned by PDF.js.
       */
      // biome-ignore lint/suspicious/noExplicitAny: <unsupported underline type>
      info;
      // Low-level document metadata object (XMP). Use this to access extended
      // properties that are not present in the Info dictionary.
      metadata;
      /**
       * An array of document fingerprint strings provided by PDF.js. Useful
       * for caching, de-duplication or identifying a document across runs.
       */
      fingerprints;
      /**
       * Permission flags for the document as returned by PDF.js (or null).
       * These flags indicate capabilities such as printing, copying and
       * other restrictions imposed by the PDF security settings.
       */
      permission;
      /**
       * Optional document outline (bookmarks). When present this is the
       * hierarchical navigation structure which viewers use for quick access.
       */
      outline;
      // Results with per-page hyperlink extraction. Empty array by default.
      pages = [];
      /**
       * Collects dates from different sources (Info dictionary and XMP/XAP metadata)
       * and returns them as a DateNode where available. This helps callers compare
       * and choose the most relevant timestamp (for example a creation date vs XMP date).
       */
      getDateNode() {
        const result = {};
        const CreationDate = this.info?.CreationDate;
        if (CreationDate) {
          result.CreationDate = PDFDateString.toDateObject(CreationDate);
        }
        const ModDate = this.info?.ModDate;
        if (ModDate) {
          result.ModDate = PDFDateString.toDateObject(ModDate);
        }
        if (!this.metadata) {
          return result;
        }
        for (const prop2 of XMP_DATE_PROPERTIES) {
          const value = this.metadata?.get(prop2);
          const date = this.parseISODateString(value);
          switch (prop2) {
            case XMP_DATE_PROPERTIES[0]:
              result.XmpCreateDate = date;
              break;
            case XMP_DATE_PROPERTIES[1]:
              result.XmpModifyDate = date;
              break;
            case XMP_DATE_PROPERTIES[2]:
              result.XmpMetadataDate = date;
              break;
            case XMP_DATE_PROPERTIES[3]:
              result.XapCreateDate = date;
              break;
            case XMP_DATE_PROPERTIES[4]:
              result.XapModifyDate = date;
              break;
            case XMP_DATE_PROPERTIES[5]:
              result.XapMetadataDate = date;
              break;
          }
        }
        return result;
      }
      /**
       * Try to parse an ISO-8601 date string from XMP/XAP metadata. If the
       * value is falsy or cannot be parsed, undefined is returned to indicate
       * absence or unparsable input.
       */
      parseISODateString(isoDateString) {
        if (!isoDateString) return void 0;
        const parsedDate = Date.parse(isoDateString);
        if (!Number.isNaN(parsedDate)) {
          return new Date(parsedDate);
        }
        return void 0;
      }
      constructor(total) {
        this.total = total;
      }
    };
    PathGeometry = /* @__PURE__ */ ((PathGeometry2) => {
      PathGeometry2[PathGeometry2["undefined"] = 0] = "undefined";
      PathGeometry2[PathGeometry2["hline"] = 1] = "hline";
      PathGeometry2[PathGeometry2["vline"] = 2] = "vline";
      PathGeometry2[PathGeometry2["rectangle"] = 3] = "rectangle";
      return PathGeometry2;
    })(PathGeometry || {});
    ScreenshotResult = class {
      pages = [];
      total = 0;
      constructor(total) {
        this.total = total;
      }
    };
    TableResult = class {
      pages = [];
      mergedTables = [];
      total = 0;
      constructor(total) {
        this.total = total;
      }
    };
    TextResult = class {
      pages = [];
      text = "";
      total = 0;
      getPageText(num) {
        for (const pageData of this.pages) {
          if (pageData.num === num) return pageData.text;
        }
        return "";
      }
      constructor(total) {
        this.total = total;
      }
    };
    PDFParse = class {
      options;
      doc;
      progress = { loaded: -1, total: 0 };
      /**
       * Create a new parser with `DocumentInitParameters`.
       * Converts Node.js `Buffer` data to `Uint8Array` automatically and ensures a default verbosity level.
       * @param options - Initialization parameters.
       */
      constructor(options) {
        if (options.verbosity === void 0) {
          options.verbosity = VerbosityLevel.ERRORS;
        }
        if (typeof Buffer !== "undefined" && options.data instanceof Buffer) {
          options.data = new Uint8Array(options.data);
        }
        this.options = options;
      }
      async destroy() {
        if (this.doc) {
          await this.doc.destroy();
          this.doc = void 0;
        }
      }
      // biome-ignore-start lint/suspicious/noExplicitAny: unsupported underline type
      static get isNodeJS() {
        const isNodeJS2 = typeof process === "object" && `${process}` === "[object process]" && !process.versions.nw && !(process.versions.electron && typeof process.type !== "undefined" && process.type !== "browser");
        return isNodeJS2;
      }
      static setWorker(workerSrc) {
        if (typeof globalThis.pdfjs === "undefined") {
          globalThis.pdfjs = pdfjs;
        }
        if (GlobalWorkerOptions === null) return "";
        if (workerSrc !== void 0) {
          GlobalWorkerOptions.workerSrc = workerSrc;
          return GlobalWorkerOptions.workerSrc;
        }
        return GlobalWorkerOptions.workerSrc;
      }
      // biome-ignore-end lint/suspicious/noExplicitAny: unsupported underline type
      /**
       * Load document-level metadata (info, outline, permissions, page labels) and optionally gather per-page link details.
       * @param params - Parse options; set `parsePageInfo` to collect per-page metadata described in `ParseParameters`.
       * @returns Aggregated document metadata in an `InfoResult`.
       */
      async getInfo(params = {}) {
        const doc = await this.load();
        const result = new InfoResult(doc.numPages);
        const { info: info2, metadata } = await doc.getMetadata();
        result.info = info2;
        result.metadata = metadata;
        result.fingerprints = doc.fingerprints;
        result.outline = await doc.getOutline();
        result.permission = await doc.getPermissions();
        const pageLabels = await doc.getPageLabels();
        if (params.parsePageInfo) {
          for (let i = 1; i <= result.total; i++) {
            if (this.shouldParse(i, result.total, params)) {
              const page = await doc.getPage(i);
              const pageLinkResult = await this.getPageLinks(page);
              pageLinkResult.pageLabel = pageLabels?.[page.pageNumber];
              result.pages.push(pageLinkResult);
              page.cleanup();
            }
          }
        }
        return result;
      }
      async getPageLinks(page) {
        const viewport = page.getViewport({ scale: 1 });
        const result = {
          pageNumber: page.pageNumber,
          links: [],
          width: viewport.width,
          height: viewport.height
        };
        const annotations = await page.getAnnotations({ intent: "display" }) || [];
        for (const i of annotations) {
          if (i.subtype !== "Link") continue;
          const url = i.url ?? i.unsafeUrl;
          if (!url) continue;
          const text3 = i.overlaidText || "";
          result.links.push({ url, text: text3 });
        }
        return result;
      }
      /**
       * Extract plain text for each requested page, optionally enriching hyperlinks and enforcing line or cell separators.
       * @param params - Parse options controlling pagination, link handling, and line/cell thresholds.
       * @returns A `TextResult` containing page-wise text and a concatenated document string.
       */
      async getText(params = {}) {
        const doc = await this.load();
        const result = new TextResult(doc.numPages);
        for (let i = 1; i <= result.total; i++) {
          if (this.shouldParse(i, result.total, params)) {
            const page = await doc.getPage(i);
            const text3 = await this.getPageText(page, params, result.total);
            result.pages.push({
              text: text3,
              num: i
            });
            page.cleanup();
          }
        }
        for (const page of result.pages) {
          if (params.pageJoiner) {
            let pageNumber = params.pageJoiner.replace("page_number", `${page.num}`);
            pageNumber = pageNumber.replace("total_number", `${result.total}`);
            result.text += `${page.text}
${pageNumber}

`;
          } else {
            result.text += `${page.text}

`;
          }
        }
        return result;
      }
      async load() {
        try {
          if (this.doc === void 0) {
            const loadingTask = getDocument(this.options);
            loadingTask.onProgress = (progress) => {
              this.progress = progress;
            };
            this.doc = await loadingTask.promise;
          }
          return this.doc;
        } catch (error) {
          throw getException(error);
        }
      }
      shouldParse(currentPage, totalPage, params) {
        params.partial = params?.partial ?? [];
        params.first = params?.first ?? 0;
        params.last = params?.last ?? 0;
        if (params.partial.length > 0) {
          if (params.partial.includes(currentPage)) {
            return true;
          }
          return false;
        }
        if (params.first > 0 && params.last > 0) {
          if (currentPage >= params.first && currentPage <= params.last) {
            return true;
          }
          return false;
        }
        if (params.first > 0) {
          if (currentPage <= params.first) {
            return true;
          }
          return false;
        }
        if (params.last > 0) {
          if (currentPage > totalPage - params.last) {
            return true;
          }
          return false;
        }
        return true;
      }
      async getPageText(page, parseParams, total) {
        const viewport = page.getViewport({ scale: 1 });
        const params = setDefaultParseParameters(parseParams);
        const textContent2 = await page.getTextContent({
          includeMarkedContent: !!params.includeMarkedContent,
          disableNormalization: !!params.disableNormalization
        });
        let links = /* @__PURE__ */ new Map();
        if (params.parseHyperlinks) {
          links = await this.getHyperlinks(page, viewport);
        }
        const strBuf = [];
        let lastX;
        let lastY;
        let lineHeight = 0;
        for (const item of textContent2.items) {
          if (!("str" in item)) continue;
          const tm = item.transform ?? item.transform;
          const [x2, y2] = viewport.convertToViewportPoint(tm[4], tm[5]);
          if (params.parseHyperlinks) {
            const posArr = links.get(item.str) || [];
            const hit = posArr.find((l) => x2 >= l.rect.left && x2 <= l.rect.right && y2 >= l.rect.top && y2 <= l.rect.bottom);
            if (hit) {
              item.str = `[${item.str}](${hit.url})`;
            }
          }
          if (params.lineEnforce) {
            if (lastY !== void 0 && Math.abs(lastY - y2) > params.lineThreshold) {
              const lastItem = strBuf.length ? strBuf[strBuf.length - 1] : void 0;
              const isCurrentItemHasNewLine = item.str.startsWith("\n") || item.str.trim() === "" && item.hasEOL;
              if (lastItem?.endsWith("\n") === false && !isCurrentItemHasNewLine) {
                const ydiff = Math.abs(lastY - y2);
                if (ydiff - 1 > lineHeight) {
                  strBuf.push("\n");
                  lineHeight = 0;
                }
              }
            }
          }
          if (params.cellSeparator) {
            if (lastY !== void 0 && Math.abs(lastY - y2) < params.lineThreshold) {
              if (lastX !== void 0 && Math.abs(lastX - x2) > params.cellThreshold) {
                item.str = `${params.cellSeparator}${item.str}`;
              }
            }
          }
          strBuf.push(item.str);
          lastX = x2 + item.width;
          lastY = y2;
          lineHeight = Math.max(lineHeight, item.height);
          if (item.hasEOL) {
            strBuf.push("\n");
          }
          if (item.hasEOL || item.str.endsWith("\n")) {
            lineHeight = 0;
          }
        }
        if (params.itemJoiner) {
          return strBuf.join(params.itemJoiner);
        }
        return strBuf.join("");
      }
      async getHyperlinks(page, viewport) {
        const result = /* @__PURE__ */ new Map();
        const annotations = await page.getAnnotations({ intent: "display" }) || [];
        for (const i of annotations) {
          if (i.subtype !== "Link") continue;
          const url = i.url ?? i.unsafeUrl;
          if (!url) continue;
          const text3 = i.overlaidText;
          if (!text3) continue;
          const rectVp = viewport.convertToViewportRectangle(i.rect);
          const left = Math.min(rectVp[0], rectVp[2]) - 0.5;
          const top = Math.min(rectVp[1], rectVp[3]) - 0.5;
          const right = Math.max(rectVp[0], rectVp[2]) + 0.5;
          const bottom = Math.max(rectVp[1], rectVp[3]) + 0.5;
          const pos = { rect: { left, top, right, bottom }, url, text: text3, used: false };
          const el = result.get(text3);
          if (el) {
            el.push(pos);
          } else {
            result.set(text3, [pos]);
          }
        }
        return result;
      }
      /**
       * Extract embedded images from requested pages.
       *
       * Behavior notes:
       * - Pages are selected according to ParseParameters (partial, first, last).
       * - Images smaller than `params.imageThreshold` (width OR height) are skipped.
       * - Returned ImageResult contains per-page PageImages; each image entry includes:
       *     - data: Uint8Array (present when params.imageBuffer === true)
       *     - dataUrl: string (present when params.imageDataUrl === true)
       *     - width, height, kind, name
       * - Works in both Node.js (canvas.toBuffer) and browser (canvas.toDataURL) environments.
       *
       * @param params - ParseParameters controlling page selection, thresholds and output format.
       * @returns Promise<ImageResult> with extracted images grouped by page.
       */
      async getImage(params = {}) {
        const doc = await this.load();
        const result = new ImageResult(doc.numPages);
        setDefaultParseParameters(params);
        for (let i = 1; i <= result.total; i++) {
          if (this.shouldParse(i, result.total, params)) {
            const page = await doc.getPage(i);
            const ops = await page.getOperatorList();
            const pageImages = { pageNumber: i, images: [] };
            result.pages.push(pageImages);
            for (let j2 = 0; j2 < ops.fnArray.length; j2++) {
              if (ops.fnArray[j2] === OPS.paintInlineImageXObject || ops.fnArray[j2] === OPS.paintImageXObject) {
                const name = ops.argsArray[j2][0];
                const isCommon = page.commonObjs.has(name);
                const imgPromise = isCommon ? this.resolveEmbeddedImage(page.commonObjs, name) : this.resolveEmbeddedImage(page.objs, name);
                const { width, height, kind, data: data2 } = await imgPromise;
                if (params.imageThreshold) {
                  if (params.imageThreshold >= width || params.imageThreshold >= height) {
                    continue;
                  }
                }
                const canvasFactory = doc.canvasFactory;
                const canvasAndContext = canvasFactory.create(width, height);
                const context = canvasAndContext.context;
                let imgData = null;
                if (kind === util_ImageKind.RGBA_32BPP) {
                  imgData = context.createImageData(width, height);
                  imgData.data.set(data2);
                } else {
                  imgData = context.createImageData(width, height);
                  this.convertToRGBA({
                    src: data2,
                    dest: new Uint32Array(imgData.data.buffer),
                    width,
                    height,
                    kind
                  });
                }
                context.putImageData(imgData, 0, 0);
                let buffer = new Uint8Array();
                let dataUrl = "";
                if (typeof canvasAndContext.canvas.toBuffer === "function") {
                  let nodeBuffer;
                  if (params.imageBuffer) {
                    nodeBuffer = canvasAndContext.canvas.toBuffer("image/png");
                    buffer = new Uint8Array(nodeBuffer);
                  }
                  if (params.imageDataUrl) {
                    if (nodeBuffer) {
                      dataUrl = `data:image/png;base64,${nodeBuffer.toString("base64")}`;
                    } else {
                      nodeBuffer = canvasAndContext.canvas.toBuffer("image/png");
                      buffer = new Uint8Array(nodeBuffer);
                      dataUrl = `data:image/png;base64,${nodeBuffer.toString("base64")}`;
                    }
                  }
                } else {
                  if (params.imageBuffer) {
                    const imageData = canvasAndContext.context.getImageData(
                      0,
                      0,
                      canvasAndContext.canvas.width,
                      canvasAndContext.canvas.height
                    );
                    buffer = new Uint8Array(imageData.data);
                  }
                  if (params.imageDataUrl) {
                    dataUrl = canvasAndContext.canvas.toDataURL("image/png");
                  }
                }
                pageImages.images.push({
                  data: buffer,
                  dataUrl,
                  name,
                  height,
                  width,
                  kind
                });
              }
            }
          }
        }
        return result;
      }
      convertToRGBA({
        src,
        dest,
        width,
        height,
        kind
      }) {
        if (kind === util_ImageKind.RGB_24BPP) {
          for (let i = 0, j2 = 0; i < src.length; i += 3, j2++) {
            const r = src[i];
            const g = src[i + 1];
            const b2 = src[i + 2];
            dest[j2] = 255 << 24 | b2 << 16 | g << 8 | r;
          }
        } else if (kind === util_ImageKind.GRAYSCALE_1BPP) {
          let pixelIndex = 0;
          for (let i = 0; i < src.length; i++) {
            const byte = src[i];
            for (let bit = 7; bit >= 0; bit--) {
              if (pixelIndex >= width * height) break;
              const isWhite = (byte >> bit & 1) === 1;
              const gray = isWhite ? 255 : 0;
              dest[pixelIndex++] = 255 << 24 | gray << 16 | gray << 8 | gray;
            }
          }
        } else if (kind === void 0 || kind === null) {
          const bytesPerPixel = src.length / (width * height);
          if (Math.abs(bytesPerPixel - 3) < 0.1) {
            for (let i = 0, j2 = 0; i < src.length; i += 3, j2++) {
              const r = src[i];
              const g = src[i + 1];
              const b2 = src[i + 2];
              dest[j2] = 255 << 24 | b2 << 16 | g << 8 | r;
            }
          } else if (Math.abs(bytesPerPixel - 4) < 0.1) {
            for (let i = 0, j2 = 0; i < src.length; i += 4, j2++) {
              const r = src[i];
              const g = src[i + 1];
              const b2 = src[i + 2];
              const a = src[i + 3];
              dest[j2] = a << 24 | b2 << 16 | g << 8 | r;
            }
          } else if (Math.abs(bytesPerPixel - 1) < 0.1) {
            for (let i = 0; i < src.length; i++) {
              const gray = src[i];
              dest[i] = 255 << 24 | gray << 16 | gray << 8 | gray;
            }
          } else {
            throw new Error(
              `convertToRGBA: Cannot infer image format. kind: ${kind}, bytesPerPixel: ${bytesPerPixel}, width: ${width}, height: ${height}, dataLength: ${src.length}`
            );
          }
        } else {
          throw new Error(
            `convertToRGBA: Unsupported image kind: ${kind}. Available kinds: GRAYSCALE_1BPP=${util_ImageKind.GRAYSCALE_1BPP}, RGB_24BPP=${util_ImageKind.RGB_24BPP}, RGBA_32BPP=${util_ImageKind.RGBA_32BPP}`
          );
        }
      }
      resolveEmbeddedImage(pdfObjects, name) {
        return new Promise((resolve, reject) => {
          pdfObjects.get(name, (imgData) => {
            if (imgData) {
              let dataBuff;
              if (imgData.data instanceof Uint8Array) {
                dataBuff = imgData.data;
              } else if (imgData.data instanceof Uint8ClampedArray) {
                dataBuff = new Uint8Array(imgData.data);
              } else if (imgData.data?.buffer) {
                dataBuff = new Uint8Array(imgData.data.buffer);
              } else if (imgData.bitmap) {
                const canvasFactory = this.doc.canvasFactory;
                const canvasAndContext = canvasFactory.create(imgData.bitmap.width, imgData.bitmap.height);
                canvasAndContext.context.drawImage(imgData.bitmap, 0, 0);
                const imageData = canvasAndContext.context.getImageData(0, 0, imgData.bitmap.width, imgData.bitmap.height);
                dataBuff = new Uint8Array(imageData.data.buffer);
              } else if (ArrayBuffer.isView(imgData.data)) {
                dataBuff = new Uint8Array(imgData.data.buffer, imgData.data.byteOffset, imgData.data.byteLength);
              }
              if (!dataBuff) {
                reject(
                  new Error(
                    `Image object ${name}: data field is empty or invalid. Available fields: ${Object.keys(imgData).join(", ")}`
                  )
                );
                return;
              }
              if (dataBuff.length === 0) {
                reject(new Error(`Image object ${name}: data buffer is empty (length: 0)`));
                return;
              }
              resolve({ width: imgData.width, height: imgData.height, kind: imgData.kind, data: dataBuff });
            } else {
              reject(new Error(`Image object ${name} not found`));
            }
          });
        });
      }
      /**
       * Render pages to raster screenshots.
       *
       * Behavior notes:
       * - Pages are selected according to ParseParameters (partial, first, last).
       * - Use params.scale for zoom; if params.desiredWidth is specified it takes precedence.
       * - Each ScreenshotResult page contains:
       *     - data: Uint8Array (when params.imageBuffer === true)
       *     - dataUrl: string (when params.imageDataUrl === true)
       *     - pageNumber, width, height, scale
       * - Works in both Node.js (canvas.toBuffer) and browser (canvas.toDataURL) environments.
       *
       * @param parseParams - ParseParameters controlling page selection and render options.
       * @returns Promise<ScreenshotResult> with rendered page images.
       */
      async getScreenshot(parseParams = {}) {
        const params = setDefaultParseParameters(parseParams);
        const doc = await this.load();
        const result = new ScreenshotResult(doc.numPages);
        if (this.doc === void 0) {
          throw new Error("PDF document not loaded");
        }
        for (let i = 1; i <= result.total; i++) {
          if (this.shouldParse(i, result.total, params)) {
            const page = await this.doc.getPage(i);
            let viewport = page.getViewport({ scale: params.scale });
            if (params.desiredWidth) {
              viewport = page.getViewport({ scale: 1 });
              const scale = params.desiredWidth / viewport.width;
              viewport = page.getViewport({ scale });
            }
            const canvasFactory = this.doc.canvasFactory;
            const canvasAndContext = canvasFactory.create(viewport.width, viewport.height);
            const renderContext = {
              canvasContext: canvasAndContext.context,
              viewport,
              canvas: canvasAndContext.canvas
            };
            const renderTask = page.render(renderContext);
            await renderTask.promise;
            let data2 = new Uint8Array();
            let dataUrl = "";
            if (typeof canvasAndContext.canvas.toBuffer === "function") {
              let nodeBuffer;
              if (params.imageBuffer) {
                nodeBuffer = canvasAndContext.canvas.toBuffer("image/png");
                data2 = new Uint8Array(nodeBuffer);
              }
              if (params.imageDataUrl) {
                if (nodeBuffer) {
                  dataUrl = `data:image/png;base64,${nodeBuffer.toString("base64")}`;
                } else {
                  nodeBuffer = canvasAndContext.canvas.toBuffer("image/png");
                  data2 = new Uint8Array(nodeBuffer);
                  dataUrl = `data:image/png;base64,${nodeBuffer.toString("base64")}`;
                }
              }
            } else {
              if (params.imageBuffer) {
                const imageData = canvasAndContext.context.getImageData(
                  0,
                  0,
                  canvasAndContext.canvas.width,
                  canvasAndContext.canvas.height
                );
                data2 = new Uint8Array(imageData.data);
              }
              if (params.imageDataUrl) {
                dataUrl = canvasAndContext.canvas.toDataURL("image/png");
              }
            }
            result.pages.push({
              data: data2,
              dataUrl,
              pageNumber: i,
              width: viewport.width,
              height: viewport.height,
              scale: viewport.scale
            });
            page.cleanup();
          }
        }
        return result;
      }
      /**
       * Detect and extract tables from pages by analysing vector drawing operators, then populate cells with text.
       *
       * Behavior notes:
       * - Scans operator lists for rectangles/lines that form table grids (uses PathGeometry and LineStore).
       * - Normalizes detected geometry and matches positioned text to table cells.
       * - Honors ParseParameters for page selection.
       *
       * @param params - ParseParameters controlling which pages to analyse (partial/first/last).
       * @returns Promise<TableResult> containing discovered tables per page.
       */
      async getTable(params = {}) {
        const doc = await this.load();
        const result = new TableResult(doc.numPages);
        if (this.doc === void 0) {
          throw new Error("PDF document not loaded");
        }
        for (let i = 1; i <= result.total; i++) {
          if (this.shouldParse(i, result.total, params)) {
            const page = await this.doc.getPage(i);
            const store = await this.getPageTables(page);
            store.normalize();
            const tableDataArr = store.getTableData();
            await this.fillPageTables(page, tableDataArr);
            const pageTableResult = { num: i, tables: [] };
            for (const table of tableDataArr) {
              pageTableResult.tables.push(table.toArray());
            }
            result.pages.push(pageTableResult);
            page.cleanup();
          }
        }
        return result;
      }
      getPathGeometry(mm) {
        const width = mm[2] - mm[0];
        const height = mm[3] - mm[1];
        if (mm[0] === Infinity) {
          return PathGeometry.undefined;
        }
        if (width > 5 && height > 5) {
          return PathGeometry.rectangle;
        } else if (width > 5 && height === 0) {
          return PathGeometry.hline;
        } else if (width === 0 && height > 5) {
          return PathGeometry.vline;
        }
        return PathGeometry.undefined;
      }
      async getPageTables(page) {
        const lineStore = new LineStore();
        const viewport = page.getViewport({ scale: 1 });
        let transformMatrix = [1, 0, 0, 1, 0, 0];
        const transformStack = [];
        const opList = await page.getOperatorList();
        for (let i = 0; i < opList.fnArray.length; i++) {
          const fn = opList.fnArray[i];
          const args = opList.argsArray[i];
          const op = args?.[0] ?? 0;
          const mm = args?.[2] ?? [Infinity, Infinity, -Infinity, -Infinity];
          if (fn === OPS.constructPath) {
            if (op === OPS.fill) ;
            if (op !== OPS.stroke) {
              continue;
            }
            const pg = this.getPathGeometry(mm);
            if (pg === PathGeometry.rectangle) {
              const rect = new Rectangle(new Point(mm[0], mm[1]), mm[2] - mm[0], mm[3] - mm[1]);
              rect.transform(transformMatrix);
              rect.transform(viewport.transform);
              lineStore.addRectangle(rect);
            } else if (pg === PathGeometry.hline || pg === PathGeometry.vline) {
              const from = new Point(mm[0], mm[1]);
              const to = new Point(mm[2], mm[3]);
              const line = new Line(from, to);
              line.transform(transformMatrix);
              line.transform(viewport.transform);
              lineStore.add(line);
            } else ;
          } else if (fn === OPS.setLineWidth) ;
          else if (fn === OPS.save) {
            transformStack.push(transformMatrix);
          } else if (fn === OPS.restore) {
            const restoredMatrix = transformStack.pop();
            if (restoredMatrix) {
              transformMatrix = restoredMatrix;
            }
          } else if (fn === OPS.transform) {
            transformMatrix = Util.transform(transformMatrix, args);
          }
        }
        return lineStore;
      }
      // private async getPageGeometry(page: PDFPageProxy): Promise<LineStore> {
      // 	const lineStore: LineStore = new LineStore();
      // 	const opList = await page.getOperatorList();
      // 	const viewport = page.getViewport({ scale: 1 });
      // 	let transformMatrix = [1, 0, 0, 1, 0, 0];
      // 	const transformStack: Array<Array<number>> = [];
      // 	let current_x: number = 0;
      // 	let current_y: number = 0;
      // 	for (let j = 0; j < opList.fnArray.length; j++) {
      // 		const fn = opList.fnArray[j];
      // 		const args = opList.argsArray[j];
      // 		if (fn === pdfjs.OPS.constructPath) {
      // 			while (args[0].length) {
      // 				const op = args[0].shift();
      // 				const combinedMatrix = pdfjs.Util.transform(viewport.transform, transformMatrix);
      // 				if (op === pdfjs.OPS.rectangle) {
      // 					const x = args[1].shift();
      // 					const y = args[1].shift();
      // 					const width = args[1].shift();
      // 					const height = args[1].shift();
      // 					if (Math.min(width, height) <= 2) {
      // 						// TODO remove
      // 						debugger;
      // 					}
      // 					const rect = new Rectangle(new Point(x, y), width, height);
      // 					rect.transform(combinedMatrix);
      // 					//rect.transform(viewport.transform);
      // 					lineStore.addRectangle(rect);
      // 				} else if (op === pdfjs.OPS.moveTo) {
      // 					current_x = args[1].shift();
      // 					current_y = args[1].shift();
      // 				} else if (op === pdfjs.OPS.lineTo) {
      // 					const x = args[1].shift();
      // 					const y = args[1].shift();
      // 					//default trasform
      // 					const from = new Point(current_x, current_y);
      // 					const to = new Point(x, y);
      // 					const line = new Line(from, to);
      // 					line.transform(combinedMatrix);
      // 					//line.transform(viewport.transform);
      // 					// // viewport transform
      // 					// const _from = viewport.convertToViewportPoint(line.from.x, line.from.y)
      // 					// const _to = viewport.convertToViewportPoint(line.to.x, line.to.y)
      // 					//
      // 					// const transformedLine = new Line(new Point(_from[0], _from[1]), new Point(_to[0], _to[1]))
      // 					lineStore.add(line);
      // 					current_x = x;
      // 					current_y = y;
      // 				}
      // 			}
      // 		} else if (fn === pdfjs.OPS.save) {
      // 			transformStack.push(transformMatrix);
      // 		} else if (fn === pdfjs.OPS.restore) {
      // 			const restoredMatrix = transformStack.pop();
      // 			if (restoredMatrix) {
      // 				transformMatrix = restoredMatrix;
      // 			}
      // 		} else if (fn === pdfjs.OPS.transform) {
      // 			//transformMatrix = this.transform_fn(transformMatrix, args);
      // 			transformMatrix = pdfjs.Util.transform(transformMatrix, args);
      // 		}
      // 	}
      // 	return lineStore;
      // }
      async fillPageTables(page, pageTables) {
        const viewport = page.getViewport({ scale: 1 });
        const textContent2 = await page.getTextContent({
          includeMarkedContent: false,
          disableNormalization: false
        });
        for (const textItem of textContent2.items) {
          if (!("str" in textItem)) continue;
          const tx = Util.transform(
            Util.transform(viewport.transform, textItem.transform),
            [1, 0, 0, -1, 0, 0]
          );
          for (const pageTable of pageTables) {
            const cell = pageTable.findCell(tx[4], tx[5]);
            if (cell) {
              cell.text.push(textItem.str);
              if (textItem.hasEOL) {
                cell.text.push("\n");
              }
              break;
            }
          }
        }
      }
    };
    PDFParse.setWorker(pdf_worker_min);
  }
});

// src/services/LlmsTxtService.ts
var LlmsTxtService_exports = {};
__export(LlmsTxtService_exports, {
  LlmsTxtService: () => LlmsTxtService
});
var LlmsTxtService;
var init_LlmsTxtService = __esm({
  "src/services/LlmsTxtService.ts"() {
    "use strict";
    init_DatabaseService();
    LlmsTxtService = class {
      static cache = null;
      static CACHE_DURATION = 36e5;
      // 1 小時
      static CHUNK_SIZE = 500;
      // 每個 chunk 的字符數
      static CHUNK_OVERLAP = 100;
      // chunk 之間的重疊字符數
      /**
       * 獲取並處理 llms.txt 內容
       */
      static async getLlmsTxtChunks() {
        try {
          const url = await DatabaseService.getSetting("llms_txt_url");
          if (!url) {
            console.log("No llms.txt URL configured");
            return [];
          }
          const now = Date.now();
          if (this.cache && this.cache.url === url && now - this.cache.timestamp < this.CACHE_DURATION) {
            console.log("Using cached llms.txt chunks");
            return this.cache.chunks;
          }
          console.log("Fetching llms.txt from:", url);
          const response = await fetch(url);
          if (!response.ok) {
            throw new Error(`Failed to fetch llms.txt: ${response.status}`);
          }
          const content = await response.text();
          console.log("Fetched llms.txt content, length:", content.length);
          const chunks = this.splitIntoChunks(content);
          console.log("Split into", chunks.length, "chunks");
          this.cache = {
            url,
            content,
            chunks,
            timestamp: now
          };
          return chunks;
        } catch (error) {
          console.error("Error fetching llms.txt:", error);
          return [];
        }
      }
      /**
       * 將文本切分成 chunks（帶重疊）
       */
      static splitIntoChunks(text3) {
        const chunks = [];
        let start = 0;
        while (start < text3.length) {
          const end2 = Math.min(start + this.CHUNK_SIZE, text3.length);
          const chunk = text3.substring(start, end2);
          chunks.push(chunk);
          start += this.CHUNK_SIZE - this.CHUNK_OVERLAP;
        }
        return chunks;
      }
      /**
       * 提取中文字符和英文單詞作為關鍵字
       */
      static extractKeywords(text3) {
        const textLower = text3.toLowerCase();
        const chineseChars = textLower.match(/[\u4e00-\u9fa5]/g) || [];
        const englishWords = textLower.match(/[a-z]{2,}/g) || [];
        const numbers = textLower.match(/\d+/g) || [];
        return [...chineseChars, ...englishWords, ...numbers];
      }
      /**
       * 計算 BM25 分數
       */
      static calculateBM25Score(queryKeywords, docKeywords, avgDocLength, k1 = 1.5, b2 = 0.75) {
        if (docKeywords.length === 0) return 0;
        let score = 0;
        const docLength = docKeywords.length;
        for (const queryKeyword of queryKeywords) {
          const tf = docKeywords.filter((k2) => k2 === queryKeyword).length;
          if (tf === 0) continue;
          const numerator = tf * (k1 + 1);
          const denominator = tf + k1 * (1 - b2 + b2 * (docLength / avgDocLength));
          score += numerator / denominator;
        }
        return score;
      }
      /**
       * 搜索相關的 chunks（使用 BM25 算法）
       */
      static async searchChunks(query) {
        const chunks = await this.getLlmsTxtChunks();
        if (chunks.length === 0) {
          return [];
        }
        console.log("\u{1F50D} LlmsTxtService.searchChunks() called with query:", query);
        const queryKeywords = this.extractKeywords(query);
        console.log("\u{1F50D} Query keywords:", queryKeywords);
        const allChunkKeywords = chunks.map((chunk) => this.extractKeywords(chunk));
        const avgChunkLength = allChunkKeywords.reduce((sum, keywords) => sum + keywords.length, 0) / allChunkKeywords.length;
        const scoredChunks = chunks.map((chunk, index2) => {
          const chunkKeywords = allChunkKeywords[index2];
          const bm25Score = this.calculateBM25Score(queryKeywords, chunkKeywords, avgChunkLength);
          return {
            chunk,
            context: "",
            score: bm25Score,
            index: index2
          };
        });
        const results = scoredChunks.filter((item) => item.score > 0).sort((a, b2) => b2.score - a.score);
        console.log("\u{1F50D} LlmsTxtService found", results.length, "matching chunks");
        if (results.length > 0) {
          console.log("\u{1F50D} Top chunk score:", results[0].score.toFixed(2));
        }
        const topResults = results.slice(0, 5);
        topResults.forEach((result) => {
          const contextChunks = [];
          if (result.index > 0) {
            contextChunks.push(chunks[result.index - 1]);
          }
          contextChunks.push(result.chunk);
          if (result.index < chunks.length - 1) {
            contextChunks.push(chunks[result.index + 1]);
          }
          result.context = contextChunks.join("\n...\n");
        });
        return topResults.map((r) => ({ chunk: r.chunk, context: r.context, score: r.score }));
      }
      /**
       * 清除緩存
       */
      static clearCache() {
        this.cache = null;
      }
    };
  }
});

// src/components/styles.ts
var styles = {
  container: `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 999999;
  `,
  overlay: `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: transparent;
    pointer-events: auto;
    z-index: 1;
  `,
  panel: `
    position: fixed;
    top: 0;
    height: 100%;
    background: white;
    box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    transition: right 0.3s ease, left 0.3s ease;
    pointer-events: auto;
    z-index: 2;
  `,
  panelHeader: `
    padding: 20px;
    border-bottom: 1px solid #e5e7eb;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #6366f1;
    color: white;
  `,
  panelTitle: `
    margin: 0;
    font-size: 18px;
    font-weight: 600;
  `,
  closeButton: `
    background: transparent;
    border: none;
    color: white;
    font-size: 24px;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    transition: background 0.2s;
  `,
  viewContainer: `
    flex: 1;
    overflow: hidden;
    position: relative;
  `,
  chatView: `
    height: 100%;
    display: flex;
    flex-direction: column;
  `,
  messagesContainer: `
    flex: 1;
    overflow-y: auto;
    padding: 80px 20px 20px 20px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    scroll-behavior: smooth;
    scrollbar-width: thin;
    scrollbar-color: #d1d5db #f3f4f6;
    background: #ffffff;
  `,
  userMessage: `
    align-self: flex-end;
    background: #6366f1;
    color: white;
    padding: 12px 16px;
    border-radius: 12px;
    max-width: 80%;
    word-wrap: break-word;
    font-size: 14px;
    line-height: 1.5;
  `,
  assistantMessage: `
    align-self: stretch;
    background: transparent;
    color: #1f2937;
    padding: 0;
    border-radius: 0;
    max-width: 100%;
    word-wrap: break-word;
    font-size: 15px;
    line-height: 1.8;
    border: none;
    margin-bottom: 24px;
  `,
  // Markdown 樣式
  markdownStyles: `
    <style>
      #sm-messages h1, #sm-messages h2, #sm-messages h3, #sm-messages h4, #sm-messages h5, #sm-messages h6 {
        font-weight: 600;
        margin-top: 16px;
        margin-bottom: 8px;
        color: #111827;
      }
      #sm-messages h1 { font-size: 24px; }
      #sm-messages h2 { font-size: 20px; }
      #sm-messages h3 { font-size: 18px; }
      #sm-messages h4 { font-size: 16px; }
      #sm-messages p {
        margin-bottom: 12px;
        line-height: 1.8;
      }
      #sm-messages ul, #sm-messages ol {
        margin-left: 24px;
        margin-bottom: 12px;
        padding-left: 0;
      }
      #sm-messages ul {
        list-style-type: disc;
      }
      #sm-messages ol {
        list-style-type: decimal;
      }
      #sm-messages li {
        margin-bottom: 6px;
        line-height: 1.6;
        display: list-item;
      }
      #sm-messages ul ul {
        list-style-type: circle;
        margin-top: 6px;
      }
      #sm-messages ul ul ul {
        list-style-type: square;
      }
      #sm-messages strong, #sm-messages b {
        font-weight: 700;
        color: #111827;
      }
      #sm-messages em {
        font-style: italic;
      }
      #sm-messages code {
        background: #f3f4f6;
        padding: 2px 6px;
        border-radius: 4px;
        font-family: 'Courier New', monospace;
        font-size: 14px;
        color: #dc2626;
      }
      #sm-messages pre {
        background: #1f2937;
        color: #f9fafb;
        padding: 12px;
        border-radius: 8px;
        overflow-x: auto;
        margin-bottom: 12px;
      }
      #sm-messages pre code {
        background: transparent;
        color: #f9fafb;
        padding: 0;
      }
      #sm-messages blockquote {
        border-left: 4px solid #6366f1;
        padding-left: 12px;
        margin-left: 0;
        margin-bottom: 12px;
        color: #6b7280;
        font-style: italic;
      }
      #sm-messages a {
        color: #6366f1;
        text-decoration: underline;
      }
      #sm-messages a:hover {
        color: #4f46e5;
      }
      #sm-messages hr {
        border: none;
        border-top: 1px solid #e5e7eb;
        margin: 16px 0;
      }
      #sm-messages table {
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 12px;
      }
      #sm-messages th, #sm-messages td {
        border: 1px solid #e5e7eb;
        padding: 8px;
        text-align: left;
      }
      #sm-messages th {
        background: #f9fafb;
        font-weight: 600;
      }
    </style>
  `,
  sources: `
    margin-top: 8px;
    padding-top: 8px;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
    font-size: 12px;
  `,
  sourceLink: `
    color: #6366f1;
    text-decoration: none;
    display: inline-block;
    margin-top: 4px;
  `,
  inputContainer: `
    padding: 16px;
    border-top: 1px solid #e5e7eb;
    display: flex;
    flex-direction: column;
    gap: 8px;
  `,
  imagePreview: `
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px;
    background: #f3f4f6;
    border-radius: 8px;
    position: relative;
  `,
  previewImage: `
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 4px;
    border: 1px solid #d1d5db;
  `,
  removeImageButton: `
    position: absolute;
    top: 4px;
    right: 4px;
    background: rgba(0, 0, 0, 0.6);
    color: white;
    border: none;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
  `,
  imageContext: `
    flex: 1;
    font-size: 12px;
    color: #6b7280;
    line-height: 1.4;
  `,
  input: `
    width: 100%;
    padding: 16px 50px 16px 16px;
    border: 1px solid #d1d5db;
    border-radius: 12px;
    font-size: 15px;
    color: #1f2937;
    background: #ffffff;
    outline: none;
    transition: border-color 0.2s;
    min-height: 50px;
    box-sizing: border-box;
  `,
  sendButton: `
    padding: 12px 24px;
    background: #6366f1;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.2s;
  `,
  sendIconButton: `
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    background: #6366f1;
    color: white;
    border: none;
    border-radius: 8px;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background 0.2s;
  `,
  iconButton: `
    background: white;
    border: 1px solid #e5e7eb;
    color: #6b7280;
    border-radius: 6px;
    width: 28px;
    height: 28px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  `,
  rulesView: `
    height: 100%;
    overflow-y: auto;
    padding: 20px;
  `,
  ruleItem: `
    padding: 16px;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    margin-bottom: 12px;
    cursor: pointer;
    transition: all 0.2s;
    background: white;
  `,
  ruleItemActive: `
    border-color: #6366f1;
    background: #eef2ff;
  `,
  ruleTitle: `
    margin: 0 0 8px 0;
    font-size: 16px;
    font-weight: 600;
    color: #1f2937;
  `,
  ruleDescription: `
    margin: 0;
    font-size: 14px;
    color: #6b7280;
    line-height: 1.5;
  `,
  panelFooter: `
    padding: 12px;
    border-top: 1px solid #e5e7eb;
    display: flex;
    gap: 8px;
    background: #f9fafb;
  `,
  tabButton: `
    flex: 1;
    padding: 10px;
    background: white;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
    color: #6b7280;
  `,
  tabButtonActive: `
    background: #6366f1;
    color: white;
    border-color: #6366f1;
  `
};

// node_modules/marked/lib/marked.esm.js
function L() {
  return { async: false, breaks: false, extensions: null, gfm: true, hooks: null, pedantic: false, renderer: null, silent: false, tokenizer: null, walkTokens: null };
}
var T = L();
function G(u3) {
  T = u3;
}
var I = { exec: () => null };
function h(u3, e = "") {
  let t = typeof u3 == "string" ? u3 : u3.source, n = { replace: (r, i) => {
    let s = typeof i == "string" ? i : i.source;
    return s = s.replace(m.caret, "$1"), t = t.replace(r, s), n;
  }, getRegex: () => new RegExp(t, e) };
  return n;
}
var m = { codeRemoveIndent: /^(?: {1,4}| {0,3}\t)/gm, outputLinkReplace: /\\([\[\]])/g, indentCodeCompensation: /^(\s+)(?:```)/, beginningSpace: /^\s+/, endingHash: /#$/, startingSpaceChar: /^ /, endingSpaceChar: / $/, nonSpaceChar: /[^ ]/, newLineCharGlobal: /\n/g, tabCharGlobal: /\t/g, multipleSpaceGlobal: /\s+/g, blankLine: /^[ \t]*$/, doubleBlankLine: /\n[ \t]*\n[ \t]*$/, blockquoteStart: /^ {0,3}>/, blockquoteSetextReplace: /\n {0,3}((?:=+|-+) *)(?=\n|$)/g, blockquoteSetextReplace2: /^ {0,3}>[ \t]?/gm, listReplaceTabs: /^\t+/, listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g, listIsTask: /^\[[ xX]\] /, listReplaceTask: /^\[[ xX]\] +/, anyLine: /\n.*\n/, hrefBrackets: /^<(.*)>$/, tableDelimiter: /[:|]/, tableAlignChars: /^\||\| *$/g, tableRowBlankLine: /\n[ \t]*$/, tableAlignRight: /^ *-+: *$/, tableAlignCenter: /^ *:-+: *$/, tableAlignLeft: /^ *:-+ *$/, startATag: /^<a /i, endATag: /^<\/a>/i, startPreScriptTag: /^<(pre|code|kbd|script)(\s|>)/i, endPreScriptTag: /^<\/(pre|code|kbd|script)(\s|>)/i, startAngleBracket: /^</, endAngleBracket: />$/, pedanticHrefTitle: /^([^'"]*[^\s])\s+(['"])(.*)\2/, unicodeAlphaNumeric: /[\p{L}\p{N}]/u, escapeTest: /[&<>"']/, escapeReplace: /[&<>"']/g, escapeTestNoEncode: /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/, escapeReplaceNoEncode: /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/g, unescapeTest: /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig, caret: /(^|[^\[])\^/g, percentDecode: /%25/g, findPipe: /\|/g, splitPipe: / \|/, slashPipe: /\\\|/g, carriageReturn: /\r\n|\r/g, spaceLine: /^ +$/gm, notSpaceStart: /^\S*/, endingNewline: /\n$/, listItemRegex: (u3) => new RegExp(`^( {0,3}${u3})((?:[	 ][^\\n]*)?(?:\\n|$))`), nextBulletRegex: (u3) => new RegExp(`^ {0,${Math.min(3, u3 - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`), hrRegex: (u3) => new RegExp(`^ {0,${Math.min(3, u3 - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`), fencesBeginRegex: (u3) => new RegExp(`^ {0,${Math.min(3, u3 - 1)}}(?:\`\`\`|~~~)`), headingBeginRegex: (u3) => new RegExp(`^ {0,${Math.min(3, u3 - 1)}}#`), htmlBeginRegex: (u3) => new RegExp(`^ {0,${Math.min(3, u3 - 1)}}<(?:[a-z].*>|!--)`, "i") };
var be = /^(?:[ \t]*(?:\n|$))+/;
var Re = /^((?: {4}| {0,3}\t)[^\n]+(?:\n(?:[ \t]*(?:\n|$))*)?)+/;
var Te = /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/;
var E = /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/;
var Oe = /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/;
var F = /(?:[*+-]|\d{1,9}[.)])/;
var ie = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\n {0,3}(=+|-+) *(?:\n+|$)/;
var oe = h(ie).replace(/bull/g, F).replace(/blockCode/g, /(?: {4}| {0,3}\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\n>]+>\n/).replace(/\|table/g, "").getRegex();
var we = h(ie).replace(/bull/g, F).replace(/blockCode/g, /(?: {4}| {0,3}\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\n>]+>\n/).replace(/table/g, / {0,3}\|?(?:[:\- ]*\|)+[\:\- ]*\n/).getRegex();
var j = /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/;
var ye = /^[^\n]+/;
var Q = /(?!\s*\])(?:\\[\s\S]|[^\[\]\\])+/;
var Pe = h(/^ {0,3}\[(label)\]: *(?:\n[ \t]*)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n[ \t]*)?| *\n[ \t]*)(title))? *(?:\n+|$)/).replace("label", Q).replace("title", /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/).getRegex();
var Se = h(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/).replace(/bull/g, F).getRegex();
var v = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
var U = /<!--(?:-?>|[\s\S]*?(?:-->|$))/;
var $e = h("^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n[ 	]*)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ 	]*)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ 	]*)+\\n|$))", "i").replace("comment", U).replace("tag", v).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
var ae = h(j).replace("hr", E).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", v).getRegex();
var _e = h(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/).replace("paragraph", ae).getRegex();
var K = { blockquote: _e, code: Re, def: Pe, fences: Te, heading: Oe, hr: E, html: $e, lheading: oe, list: Se, newline: be, paragraph: ae, table: I, text: ye };
var re = h("^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)").replace("hr", E).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("blockquote", " {0,3}>").replace("code", "(?: {4}| {0,3}	)[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", v).getRegex();
var Le = { ...K, lheading: we, table: re, paragraph: h(j).replace("hr", E).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("table", re).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", v).getRegex() };
var Me = { ...K, html: h(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", U).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(), def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/, heading: /^(#{1,6})(.*)(?:\n+|$)/, fences: I, lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/, paragraph: h(j).replace("hr", E).replace("heading", ` *#{1,6} *[^
]`).replace("lheading", oe).replace("|table", "").replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").replace("|tag", "").getRegex() };
var ze = /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/;
var Ae = /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/;
var le = /^( {2,}|\\)\n(?!\s*$)/;
var Ie = /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/;
var D = /[\p{P}\p{S}]/u;
var W = /[\s\p{P}\p{S}]/u;
var ue = /[^\s\p{P}\p{S}]/u;
var Ee = h(/^((?![*_])punctSpace)/, "u").replace(/punctSpace/g, W).getRegex();
var pe = /(?!~)[\p{P}\p{S}]/u;
var Ce = /(?!~)[\s\p{P}\p{S}]/u;
var Be = /(?:[^\s\p{P}\p{S}]|~)/u;
var qe = h(/link|code|html/, "g").replace("link", /\[(?:[^\[\]`]|(?<!`)(?<a>`+)[^`]+\k<a>(?!`))*?\]\((?:\\[\s\S]|[^\\\(\)]|\((?:\\[\s\S]|[^\\\(\)])*\))*\)/).replace("code", /(?<!`)(?<b>`+)[^`]+\k<b>(?!`)/).replace("html", /<(?! )[^<>]*?>/).getRegex();
var ce = /^(?:\*+(?:((?!\*)punct)|[^\s*]))|^_+(?:((?!_)punct)|([^\s_]))/;
var ve = h(ce, "u").replace(/punct/g, D).getRegex();
var De = h(ce, "u").replace(/punct/g, pe).getRegex();
var he = "^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)punct(\\*+)(?=[\\s]|$)|notPunctSpace(\\*+)(?!\\*)(?=punctSpace|$)|(?!\\*)punctSpace(\\*+)(?=notPunctSpace)|[\\s](\\*+)(?!\\*)(?=punct)|(?!\\*)punct(\\*+)(?!\\*)(?=punct)|notPunctSpace(\\*+)(?=notPunctSpace)";
var He = h(he, "gu").replace(/notPunctSpace/g, ue).replace(/punctSpace/g, W).replace(/punct/g, D).getRegex();
var Ze = h(he, "gu").replace(/notPunctSpace/g, Be).replace(/punctSpace/g, Ce).replace(/punct/g, pe).getRegex();
var Ge = h("^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)", "gu").replace(/notPunctSpace/g, ue).replace(/punctSpace/g, W).replace(/punct/g, D).getRegex();
var Ne = h(/\\(punct)/, "gu").replace(/punct/g, D).getRegex();
var Fe = h(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/).replace("scheme", /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace("email", /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();
var je = h(U).replace("(?:-->|$)", "-->").getRegex();
var Qe = h("^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>").replace("comment", je).replace("attribute", /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/).getRegex();
var q = /(?:\[(?:\\[\s\S]|[^\[\]\\])*\]|\\[\s\S]|`+[^`]*?`+(?!`)|[^\[\]\\`])*?/;
var Ue = h(/^!?\[(label)\]\(\s*(href)(?:(?:[ \t]*(?:\n[ \t]*)?)(title))?\s*\)/).replace("label", q).replace("href", /<(?:\\.|[^\n<>\\])+>|[^ \t\n\x00-\x1f]*/).replace("title", /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/).getRegex();
var de = h(/^!?\[(label)\]\[(ref)\]/).replace("label", q).replace("ref", Q).getRegex();
var ke = h(/^!?\[(ref)\](?:\[\])?/).replace("ref", Q).getRegex();
var Ke = h("reflink|nolink(?!\\()", "g").replace("reflink", de).replace("nolink", ke).getRegex();
var se = /[hH][tT][tT][pP][sS]?|[fF][tT][pP]/;
var X = { _backpedal: I, anyPunctuation: Ne, autolink: Fe, blockSkip: qe, br: le, code: Ae, del: I, emStrongLDelim: ve, emStrongRDelimAst: He, emStrongRDelimUnd: Ge, escape: ze, link: Ue, nolink: ke, punctuation: Ee, reflink: de, reflinkSearch: Ke, tag: Qe, text: Ie, url: I };
var We = { ...X, link: h(/^!?\[(label)\]\((.*?)\)/).replace("label", q).getRegex(), reflink: h(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", q).getRegex() };
var N = { ...X, emStrongRDelimAst: Ze, emStrongLDelim: De, url: h(/^((?:protocol):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/).replace("protocol", se).replace("email", /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(), _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/, del: /^(~~?)(?=[^\s~])((?:\\[\s\S]|[^\\])*?(?:\\[\s\S]|[^\s~\\]))\1(?=[^~]|$)/, text: h(/^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|protocol:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/).replace("protocol", se).getRegex() };
var Xe = { ...N, br: h(le).replace("{2,}", "*").getRegex(), text: h(N.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex() };
var C = { normal: K, gfm: Le, pedantic: Me };
var M = { normal: X, gfm: N, breaks: Xe, pedantic: We };
var Je = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" };
var ge = (u3) => Je[u3];
function w(u3, e) {
  if (e) {
    if (m.escapeTest.test(u3)) return u3.replace(m.escapeReplace, ge);
  } else if (m.escapeTestNoEncode.test(u3)) return u3.replace(m.escapeReplaceNoEncode, ge);
  return u3;
}
function J(u3) {
  try {
    u3 = encodeURI(u3).replace(m.percentDecode, "%");
  } catch {
    return null;
  }
  return u3;
}
function V(u3, e) {
  let t = u3.replace(m.findPipe, (i, s, o) => {
    let a = false, l = s;
    for (; --l >= 0 && o[l] === "\\"; ) a = !a;
    return a ? "|" : " |";
  }), n = t.split(m.splitPipe), r = 0;
  if (n[0].trim() || n.shift(), n.length > 0 && !n.at(-1)?.trim() && n.pop(), e) if (n.length > e) n.splice(e);
  else for (; n.length < e; ) n.push("");
  for (; r < n.length; r++) n[r] = n[r].trim().replace(m.slashPipe, "|");
  return n;
}
function z(u3, e, t) {
  let n = u3.length;
  if (n === 0) return "";
  let r = 0;
  for (; r < n; ) {
    let i = u3.charAt(n - r - 1);
    if (i === e && !t) r++;
    else if (i !== e && t) r++;
    else break;
  }
  return u3.slice(0, n - r);
}
function fe(u3, e) {
  if (u3.indexOf(e[1]) === -1) return -1;
  let t = 0;
  for (let n = 0; n < u3.length; n++) if (u3[n] === "\\") n++;
  else if (u3[n] === e[0]) t++;
  else if (u3[n] === e[1] && (t--, t < 0)) return n;
  return t > 0 ? -2 : -1;
}
function me(u3, e, t, n, r) {
  let i = e.href, s = e.title || null, o = u3[1].replace(r.other.outputLinkReplace, "$1");
  n.state.inLink = true;
  let a = { type: u3[0].charAt(0) === "!" ? "image" : "link", raw: t, href: i, title: s, text: o, tokens: n.inlineTokens(o) };
  return n.state.inLink = false, a;
}
function Ve(u3, e, t) {
  let n = u3.match(t.other.indentCodeCompensation);
  if (n === null) return e;
  let r = n[1];
  return e.split(`
`).map((i) => {
    let s = i.match(t.other.beginningSpace);
    if (s === null) return i;
    let [o] = s;
    return o.length >= r.length ? i.slice(r.length) : i;
  }).join(`
`);
}
var y = class {
  options;
  rules;
  lexer;
  constructor(e) {
    this.options = e || T;
  }
  space(e) {
    let t = this.rules.block.newline.exec(e);
    if (t && t[0].length > 0) return { type: "space", raw: t[0] };
  }
  code(e) {
    let t = this.rules.block.code.exec(e);
    if (t) {
      let n = t[0].replace(this.rules.other.codeRemoveIndent, "");
      return { type: "code", raw: t[0], codeBlockStyle: "indented", text: this.options.pedantic ? n : z(n, `
`) };
    }
  }
  fences(e) {
    let t = this.rules.block.fences.exec(e);
    if (t) {
      let n = t[0], r = Ve(n, t[3] || "", this.rules);
      return { type: "code", raw: n, lang: t[2] ? t[2].trim().replace(this.rules.inline.anyPunctuation, "$1") : t[2], text: r };
    }
  }
  heading(e) {
    let t = this.rules.block.heading.exec(e);
    if (t) {
      let n = t[2].trim();
      if (this.rules.other.endingHash.test(n)) {
        let r = z(n, "#");
        (this.options.pedantic || !r || this.rules.other.endingSpaceChar.test(r)) && (n = r.trim());
      }
      return { type: "heading", raw: t[0], depth: t[1].length, text: n, tokens: this.lexer.inline(n) };
    }
  }
  hr(e) {
    let t = this.rules.block.hr.exec(e);
    if (t) return { type: "hr", raw: z(t[0], `
`) };
  }
  blockquote(e) {
    let t = this.rules.block.blockquote.exec(e);
    if (t) {
      let n = z(t[0], `
`).split(`
`), r = "", i = "", s = [];
      for (; n.length > 0; ) {
        let o = false, a = [], l;
        for (l = 0; l < n.length; l++) if (this.rules.other.blockquoteStart.test(n[l])) a.push(n[l]), o = true;
        else if (!o) a.push(n[l]);
        else break;
        n = n.slice(l);
        let c = a.join(`
`), p = c.replace(this.rules.other.blockquoteSetextReplace, `
    $1`).replace(this.rules.other.blockquoteSetextReplace2, "");
        r = r ? `${r}
${c}` : c, i = i ? `${i}
${p}` : p;
        let g = this.lexer.state.top;
        if (this.lexer.state.top = true, this.lexer.blockTokens(p, s, true), this.lexer.state.top = g, n.length === 0) break;
        let d = s.at(-1);
        if (d?.type === "code") break;
        if (d?.type === "blockquote") {
          let R = d, f = R.raw + `
` + n.join(`
`), O = this.blockquote(f);
          s[s.length - 1] = O, r = r.substring(0, r.length - R.raw.length) + O.raw, i = i.substring(0, i.length - R.text.length) + O.text;
          break;
        } else if (d?.type === "list") {
          let R = d, f = R.raw + `
` + n.join(`
`), O = this.list(f);
          s[s.length - 1] = O, r = r.substring(0, r.length - d.raw.length) + O.raw, i = i.substring(0, i.length - R.raw.length) + O.raw, n = f.substring(s.at(-1).raw.length).split(`
`);
          continue;
        }
      }
      return { type: "blockquote", raw: r, tokens: s, text: i };
    }
  }
  list(e) {
    let t = this.rules.block.list.exec(e);
    if (t) {
      let n = t[1].trim(), r = n.length > 1, i = { type: "list", raw: "", ordered: r, start: r ? +n.slice(0, -1) : "", loose: false, items: [] };
      n = r ? `\\d{1,9}\\${n.slice(-1)}` : `\\${n}`, this.options.pedantic && (n = r ? n : "[*+-]");
      let s = this.rules.other.listItemRegex(n), o = false;
      for (; e; ) {
        let l = false, c = "", p = "";
        if (!(t = s.exec(e)) || this.rules.block.hr.test(e)) break;
        c = t[0], e = e.substring(c.length);
        let g = t[2].split(`
`, 1)[0].replace(this.rules.other.listReplaceTabs, (H) => " ".repeat(3 * H.length)), d = e.split(`
`, 1)[0], R = !g.trim(), f = 0;
        if (this.options.pedantic ? (f = 2, p = g.trimStart()) : R ? f = t[1].length + 1 : (f = t[2].search(this.rules.other.nonSpaceChar), f = f > 4 ? 1 : f, p = g.slice(f), f += t[1].length), R && this.rules.other.blankLine.test(d) && (c += d + `
`, e = e.substring(d.length + 1), l = true), !l) {
          let H = this.rules.other.nextBulletRegex(f), ee = this.rules.other.hrRegex(f), te = this.rules.other.fencesBeginRegex(f), ne = this.rules.other.headingBeginRegex(f), xe = this.rules.other.htmlBeginRegex(f);
          for (; e; ) {
            let Z = e.split(`
`, 1)[0], A;
            if (d = Z, this.options.pedantic ? (d = d.replace(this.rules.other.listReplaceNesting, "  "), A = d) : A = d.replace(this.rules.other.tabCharGlobal, "    "), te.test(d) || ne.test(d) || xe.test(d) || H.test(d) || ee.test(d)) break;
            if (A.search(this.rules.other.nonSpaceChar) >= f || !d.trim()) p += `
` + A.slice(f);
            else {
              if (R || g.replace(this.rules.other.tabCharGlobal, "    ").search(this.rules.other.nonSpaceChar) >= 4 || te.test(g) || ne.test(g) || ee.test(g)) break;
              p += `
` + d;
            }
            !R && !d.trim() && (R = true), c += Z + `
`, e = e.substring(Z.length + 1), g = A.slice(f);
          }
        }
        i.loose || (o ? i.loose = true : this.rules.other.doubleBlankLine.test(c) && (o = true));
        let O = null, Y;
        this.options.gfm && (O = this.rules.other.listIsTask.exec(p), O && (Y = O[0] !== "[ ] ", p = p.replace(this.rules.other.listReplaceTask, ""))), i.items.push({ type: "list_item", raw: c, task: !!O, checked: Y, loose: false, text: p, tokens: [] }), i.raw += c;
      }
      let a = i.items.at(-1);
      if (a) a.raw = a.raw.trimEnd(), a.text = a.text.trimEnd();
      else return;
      i.raw = i.raw.trimEnd();
      for (let l = 0; l < i.items.length; l++) if (this.lexer.state.top = false, i.items[l].tokens = this.lexer.blockTokens(i.items[l].text, []), !i.loose) {
        let c = i.items[l].tokens.filter((g) => g.type === "space"), p = c.length > 0 && c.some((g) => this.rules.other.anyLine.test(g.raw));
        i.loose = p;
      }
      if (i.loose) for (let l = 0; l < i.items.length; l++) i.items[l].loose = true;
      return i;
    }
  }
  html(e) {
    let t = this.rules.block.html.exec(e);
    if (t) return { type: "html", block: true, raw: t[0], pre: t[1] === "pre" || t[1] === "script" || t[1] === "style", text: t[0] };
  }
  def(e) {
    let t = this.rules.block.def.exec(e);
    if (t) {
      let n = t[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, " "), r = t[2] ? t[2].replace(this.rules.other.hrefBrackets, "$1").replace(this.rules.inline.anyPunctuation, "$1") : "", i = t[3] ? t[3].substring(1, t[3].length - 1).replace(this.rules.inline.anyPunctuation, "$1") : t[3];
      return { type: "def", tag: n, raw: t[0], href: r, title: i };
    }
  }
  table(e) {
    let t = this.rules.block.table.exec(e);
    if (!t || !this.rules.other.tableDelimiter.test(t[2])) return;
    let n = V(t[1]), r = t[2].replace(this.rules.other.tableAlignChars, "").split("|"), i = t[3]?.trim() ? t[3].replace(this.rules.other.tableRowBlankLine, "").split(`
`) : [], s = { type: "table", raw: t[0], header: [], align: [], rows: [] };
    if (n.length === r.length) {
      for (let o of r) this.rules.other.tableAlignRight.test(o) ? s.align.push("right") : this.rules.other.tableAlignCenter.test(o) ? s.align.push("center") : this.rules.other.tableAlignLeft.test(o) ? s.align.push("left") : s.align.push(null);
      for (let o = 0; o < n.length; o++) s.header.push({ text: n[o], tokens: this.lexer.inline(n[o]), header: true, align: s.align[o] });
      for (let o of i) s.rows.push(V(o, s.header.length).map((a, l) => ({ text: a, tokens: this.lexer.inline(a), header: false, align: s.align[l] })));
      return s;
    }
  }
  lheading(e) {
    let t = this.rules.block.lheading.exec(e);
    if (t) return { type: "heading", raw: t[0], depth: t[2].charAt(0) === "=" ? 1 : 2, text: t[1], tokens: this.lexer.inline(t[1]) };
  }
  paragraph(e) {
    let t = this.rules.block.paragraph.exec(e);
    if (t) {
      let n = t[1].charAt(t[1].length - 1) === `
` ? t[1].slice(0, -1) : t[1];
      return { type: "paragraph", raw: t[0], text: n, tokens: this.lexer.inline(n) };
    }
  }
  text(e) {
    let t = this.rules.block.text.exec(e);
    if (t) return { type: "text", raw: t[0], text: t[0], tokens: this.lexer.inline(t[0]) };
  }
  escape(e) {
    let t = this.rules.inline.escape.exec(e);
    if (t) return { type: "escape", raw: t[0], text: t[1] };
  }
  tag(e) {
    let t = this.rules.inline.tag.exec(e);
    if (t) return !this.lexer.state.inLink && this.rules.other.startATag.test(t[0]) ? this.lexer.state.inLink = true : this.lexer.state.inLink && this.rules.other.endATag.test(t[0]) && (this.lexer.state.inLink = false), !this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(t[0]) ? this.lexer.state.inRawBlock = true : this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(t[0]) && (this.lexer.state.inRawBlock = false), { type: "html", raw: t[0], inLink: this.lexer.state.inLink, inRawBlock: this.lexer.state.inRawBlock, block: false, text: t[0] };
  }
  link(e) {
    let t = this.rules.inline.link.exec(e);
    if (t) {
      let n = t[2].trim();
      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(n)) {
        if (!this.rules.other.endAngleBracket.test(n)) return;
        let s = z(n.slice(0, -1), "\\");
        if ((n.length - s.length) % 2 === 0) return;
      } else {
        let s = fe(t[2], "()");
        if (s === -2) return;
        if (s > -1) {
          let a = (t[0].indexOf("!") === 0 ? 5 : 4) + t[1].length + s;
          t[2] = t[2].substring(0, s), t[0] = t[0].substring(0, a).trim(), t[3] = "";
        }
      }
      let r = t[2], i = "";
      if (this.options.pedantic) {
        let s = this.rules.other.pedanticHrefTitle.exec(r);
        s && (r = s[1], i = s[3]);
      } else i = t[3] ? t[3].slice(1, -1) : "";
      return r = r.trim(), this.rules.other.startAngleBracket.test(r) && (this.options.pedantic && !this.rules.other.endAngleBracket.test(n) ? r = r.slice(1) : r = r.slice(1, -1)), me(t, { href: r && r.replace(this.rules.inline.anyPunctuation, "$1"), title: i && i.replace(this.rules.inline.anyPunctuation, "$1") }, t[0], this.lexer, this.rules);
    }
  }
  reflink(e, t) {
    let n;
    if ((n = this.rules.inline.reflink.exec(e)) || (n = this.rules.inline.nolink.exec(e))) {
      let r = (n[2] || n[1]).replace(this.rules.other.multipleSpaceGlobal, " "), i = t[r.toLowerCase()];
      if (!i) {
        let s = n[0].charAt(0);
        return { type: "text", raw: s, text: s };
      }
      return me(n, i, n[0], this.lexer, this.rules);
    }
  }
  emStrong(e, t, n = "") {
    let r = this.rules.inline.emStrongLDelim.exec(e);
    if (!r || r[3] && n.match(this.rules.other.unicodeAlphaNumeric)) return;
    if (!(r[1] || r[2] || "") || !n || this.rules.inline.punctuation.exec(n)) {
      let s = [...r[0]].length - 1, o, a, l = s, c = 0, p = r[0][0] === "*" ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;
      for (p.lastIndex = 0, t = t.slice(-1 * e.length + s); (r = p.exec(t)) != null; ) {
        if (o = r[1] || r[2] || r[3] || r[4] || r[5] || r[6], !o) continue;
        if (a = [...o].length, r[3] || r[4]) {
          l += a;
          continue;
        } else if ((r[5] || r[6]) && s % 3 && !((s + a) % 3)) {
          c += a;
          continue;
        }
        if (l -= a, l > 0) continue;
        a = Math.min(a, a + l + c);
        let g = [...r[0]][0].length, d = e.slice(0, s + r.index + g + a);
        if (Math.min(s, a) % 2) {
          let f = d.slice(1, -1);
          return { type: "em", raw: d, text: f, tokens: this.lexer.inlineTokens(f) };
        }
        let R = d.slice(2, -2);
        return { type: "strong", raw: d, text: R, tokens: this.lexer.inlineTokens(R) };
      }
    }
  }
  codespan(e) {
    let t = this.rules.inline.code.exec(e);
    if (t) {
      let n = t[2].replace(this.rules.other.newLineCharGlobal, " "), r = this.rules.other.nonSpaceChar.test(n), i = this.rules.other.startingSpaceChar.test(n) && this.rules.other.endingSpaceChar.test(n);
      return r && i && (n = n.substring(1, n.length - 1)), { type: "codespan", raw: t[0], text: n };
    }
  }
  br(e) {
    let t = this.rules.inline.br.exec(e);
    if (t) return { type: "br", raw: t[0] };
  }
  del(e) {
    let t = this.rules.inline.del.exec(e);
    if (t) return { type: "del", raw: t[0], text: t[2], tokens: this.lexer.inlineTokens(t[2]) };
  }
  autolink(e) {
    let t = this.rules.inline.autolink.exec(e);
    if (t) {
      let n, r;
      return t[2] === "@" ? (n = t[1], r = "mailto:" + n) : (n = t[1], r = n), { type: "link", raw: t[0], text: n, href: r, tokens: [{ type: "text", raw: n, text: n }] };
    }
  }
  url(e) {
    let t;
    if (t = this.rules.inline.url.exec(e)) {
      let n, r;
      if (t[2] === "@") n = t[0], r = "mailto:" + n;
      else {
        let i;
        do
          i = t[0], t[0] = this.rules.inline._backpedal.exec(t[0])?.[0] ?? "";
        while (i !== t[0]);
        n = t[0], t[1] === "www." ? r = "http://" + t[0] : r = t[0];
      }
      return { type: "link", raw: t[0], text: n, href: r, tokens: [{ type: "text", raw: n, text: n }] };
    }
  }
  inlineText(e) {
    let t = this.rules.inline.text.exec(e);
    if (t) {
      let n = this.lexer.state.inRawBlock;
      return { type: "text", raw: t[0], text: t[0], escaped: n };
    }
  }
};
var x = class u {
  tokens;
  options;
  state;
  tokenizer;
  inlineQueue;
  constructor(e) {
    this.tokens = [], this.tokens.links = /* @__PURE__ */ Object.create(null), this.options = e || T, this.options.tokenizer = this.options.tokenizer || new y(), this.tokenizer = this.options.tokenizer, this.tokenizer.options = this.options, this.tokenizer.lexer = this, this.inlineQueue = [], this.state = { inLink: false, inRawBlock: false, top: true };
    let t = { other: m, block: C.normal, inline: M.normal };
    this.options.pedantic ? (t.block = C.pedantic, t.inline = M.pedantic) : this.options.gfm && (t.block = C.gfm, this.options.breaks ? t.inline = M.breaks : t.inline = M.gfm), this.tokenizer.rules = t;
  }
  static get rules() {
    return { block: C, inline: M };
  }
  static lex(e, t) {
    return new u(t).lex(e);
  }
  static lexInline(e, t) {
    return new u(t).inlineTokens(e);
  }
  lex(e) {
    e = e.replace(m.carriageReturn, `
`), this.blockTokens(e, this.tokens);
    for (let t = 0; t < this.inlineQueue.length; t++) {
      let n = this.inlineQueue[t];
      this.inlineTokens(n.src, n.tokens);
    }
    return this.inlineQueue = [], this.tokens;
  }
  blockTokens(e, t = [], n = false) {
    for (this.options.pedantic && (e = e.replace(m.tabCharGlobal, "    ").replace(m.spaceLine, "")); e; ) {
      let r;
      if (this.options.extensions?.block?.some((s) => (r = s.call({ lexer: this }, e, t)) ? (e = e.substring(r.raw.length), t.push(r), true) : false)) continue;
      if (r = this.tokenizer.space(e)) {
        e = e.substring(r.raw.length);
        let s = t.at(-1);
        r.raw.length === 1 && s !== void 0 ? s.raw += `
` : t.push(r);
        continue;
      }
      if (r = this.tokenizer.code(e)) {
        e = e.substring(r.raw.length);
        let s = t.at(-1);
        s?.type === "paragraph" || s?.type === "text" ? (s.raw += (s.raw.endsWith(`
`) ? "" : `
`) + r.raw, s.text += `
` + r.text, this.inlineQueue.at(-1).src = s.text) : t.push(r);
        continue;
      }
      if (r = this.tokenizer.fences(e)) {
        e = e.substring(r.raw.length), t.push(r);
        continue;
      }
      if (r = this.tokenizer.heading(e)) {
        e = e.substring(r.raw.length), t.push(r);
        continue;
      }
      if (r = this.tokenizer.hr(e)) {
        e = e.substring(r.raw.length), t.push(r);
        continue;
      }
      if (r = this.tokenizer.blockquote(e)) {
        e = e.substring(r.raw.length), t.push(r);
        continue;
      }
      if (r = this.tokenizer.list(e)) {
        e = e.substring(r.raw.length), t.push(r);
        continue;
      }
      if (r = this.tokenizer.html(e)) {
        e = e.substring(r.raw.length), t.push(r);
        continue;
      }
      if (r = this.tokenizer.def(e)) {
        e = e.substring(r.raw.length);
        let s = t.at(-1);
        s?.type === "paragraph" || s?.type === "text" ? (s.raw += (s.raw.endsWith(`
`) ? "" : `
`) + r.raw, s.text += `
` + r.raw, this.inlineQueue.at(-1).src = s.text) : this.tokens.links[r.tag] || (this.tokens.links[r.tag] = { href: r.href, title: r.title }, t.push(r));
        continue;
      }
      if (r = this.tokenizer.table(e)) {
        e = e.substring(r.raw.length), t.push(r);
        continue;
      }
      if (r = this.tokenizer.lheading(e)) {
        e = e.substring(r.raw.length), t.push(r);
        continue;
      }
      let i = e;
      if (this.options.extensions?.startBlock) {
        let s = 1 / 0, o = e.slice(1), a;
        this.options.extensions.startBlock.forEach((l) => {
          a = l.call({ lexer: this }, o), typeof a == "number" && a >= 0 && (s = Math.min(s, a));
        }), s < 1 / 0 && s >= 0 && (i = e.substring(0, s + 1));
      }
      if (this.state.top && (r = this.tokenizer.paragraph(i))) {
        let s = t.at(-1);
        n && s?.type === "paragraph" ? (s.raw += (s.raw.endsWith(`
`) ? "" : `
`) + r.raw, s.text += `
` + r.text, this.inlineQueue.pop(), this.inlineQueue.at(-1).src = s.text) : t.push(r), n = i.length !== e.length, e = e.substring(r.raw.length);
        continue;
      }
      if (r = this.tokenizer.text(e)) {
        e = e.substring(r.raw.length);
        let s = t.at(-1);
        s?.type === "text" ? (s.raw += (s.raw.endsWith(`
`) ? "" : `
`) + r.raw, s.text += `
` + r.text, this.inlineQueue.pop(), this.inlineQueue.at(-1).src = s.text) : t.push(r);
        continue;
      }
      if (e) {
        let s = "Infinite loop on byte: " + e.charCodeAt(0);
        if (this.options.silent) {
          console.error(s);
          break;
        } else throw new Error(s);
      }
    }
    return this.state.top = true, t;
  }
  inline(e, t = []) {
    return this.inlineQueue.push({ src: e, tokens: t }), t;
  }
  inlineTokens(e, t = []) {
    let n = e, r = null;
    if (this.tokens.links) {
      let o = Object.keys(this.tokens.links);
      if (o.length > 0) for (; (r = this.tokenizer.rules.inline.reflinkSearch.exec(n)) != null; ) o.includes(r[0].slice(r[0].lastIndexOf("[") + 1, -1)) && (n = n.slice(0, r.index) + "[" + "a".repeat(r[0].length - 2) + "]" + n.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex));
    }
    for (; (r = this.tokenizer.rules.inline.anyPunctuation.exec(n)) != null; ) n = n.slice(0, r.index) + "++" + n.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
    for (; (r = this.tokenizer.rules.inline.blockSkip.exec(n)) != null; ) n = n.slice(0, r.index) + "[" + "a".repeat(r[0].length - 2) + "]" + n.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    n = this.options.hooks?.emStrongMask?.call({ lexer: this }, n) ?? n;
    let i = false, s = "";
    for (; e; ) {
      i || (s = ""), i = false;
      let o;
      if (this.options.extensions?.inline?.some((l) => (o = l.call({ lexer: this }, e, t)) ? (e = e.substring(o.raw.length), t.push(o), true) : false)) continue;
      if (o = this.tokenizer.escape(e)) {
        e = e.substring(o.raw.length), t.push(o);
        continue;
      }
      if (o = this.tokenizer.tag(e)) {
        e = e.substring(o.raw.length), t.push(o);
        continue;
      }
      if (o = this.tokenizer.link(e)) {
        e = e.substring(o.raw.length), t.push(o);
        continue;
      }
      if (o = this.tokenizer.reflink(e, this.tokens.links)) {
        e = e.substring(o.raw.length);
        let l = t.at(-1);
        o.type === "text" && l?.type === "text" ? (l.raw += o.raw, l.text += o.text) : t.push(o);
        continue;
      }
      if (o = this.tokenizer.emStrong(e, n, s)) {
        e = e.substring(o.raw.length), t.push(o);
        continue;
      }
      if (o = this.tokenizer.codespan(e)) {
        e = e.substring(o.raw.length), t.push(o);
        continue;
      }
      if (o = this.tokenizer.br(e)) {
        e = e.substring(o.raw.length), t.push(o);
        continue;
      }
      if (o = this.tokenizer.del(e)) {
        e = e.substring(o.raw.length), t.push(o);
        continue;
      }
      if (o = this.tokenizer.autolink(e)) {
        e = e.substring(o.raw.length), t.push(o);
        continue;
      }
      if (!this.state.inLink && (o = this.tokenizer.url(e))) {
        e = e.substring(o.raw.length), t.push(o);
        continue;
      }
      let a = e;
      if (this.options.extensions?.startInline) {
        let l = 1 / 0, c = e.slice(1), p;
        this.options.extensions.startInline.forEach((g) => {
          p = g.call({ lexer: this }, c), typeof p == "number" && p >= 0 && (l = Math.min(l, p));
        }), l < 1 / 0 && l >= 0 && (a = e.substring(0, l + 1));
      }
      if (o = this.tokenizer.inlineText(a)) {
        e = e.substring(o.raw.length), o.raw.slice(-1) !== "_" && (s = o.raw.slice(-1)), i = true;
        let l = t.at(-1);
        l?.type === "text" ? (l.raw += o.raw, l.text += o.text) : t.push(o);
        continue;
      }
      if (e) {
        let l = "Infinite loop on byte: " + e.charCodeAt(0);
        if (this.options.silent) {
          console.error(l);
          break;
        } else throw new Error(l);
      }
    }
    return t;
  }
};
var P = class {
  options;
  parser;
  constructor(e) {
    this.options = e || T;
  }
  space(e) {
    return "";
  }
  code({ text: e, lang: t, escaped: n }) {
    let r = (t || "").match(m.notSpaceStart)?.[0], i = e.replace(m.endingNewline, "") + `
`;
    return r ? '<pre><code class="language-' + w(r) + '">' + (n ? i : w(i, true)) + `</code></pre>
` : "<pre><code>" + (n ? i : w(i, true)) + `</code></pre>
`;
  }
  blockquote({ tokens: e }) {
    return `<blockquote>
${this.parser.parse(e)}</blockquote>
`;
  }
  html({ text: e }) {
    return e;
  }
  def(e) {
    return "";
  }
  heading({ tokens: e, depth: t }) {
    return `<h${t}>${this.parser.parseInline(e)}</h${t}>
`;
  }
  hr(e) {
    return `<hr>
`;
  }
  list(e) {
    let t = e.ordered, n = e.start, r = "";
    for (let o = 0; o < e.items.length; o++) {
      let a = e.items[o];
      r += this.listitem(a);
    }
    let i = t ? "ol" : "ul", s = t && n !== 1 ? ' start="' + n + '"' : "";
    return "<" + i + s + `>
` + r + "</" + i + `>
`;
  }
  listitem(e) {
    let t = "";
    if (e.task) {
      let n = this.checkbox({ checked: !!e.checked });
      e.loose ? e.tokens[0]?.type === "paragraph" ? (e.tokens[0].text = n + " " + e.tokens[0].text, e.tokens[0].tokens && e.tokens[0].tokens.length > 0 && e.tokens[0].tokens[0].type === "text" && (e.tokens[0].tokens[0].text = n + " " + w(e.tokens[0].tokens[0].text), e.tokens[0].tokens[0].escaped = true)) : e.tokens.unshift({ type: "text", raw: n + " ", text: n + " ", escaped: true }) : t += n + " ";
    }
    return t += this.parser.parse(e.tokens, !!e.loose), `<li>${t}</li>
`;
  }
  checkbox({ checked: e }) {
    return "<input " + (e ? 'checked="" ' : "") + 'disabled="" type="checkbox">';
  }
  paragraph({ tokens: e }) {
    return `<p>${this.parser.parseInline(e)}</p>
`;
  }
  table(e) {
    let t = "", n = "";
    for (let i = 0; i < e.header.length; i++) n += this.tablecell(e.header[i]);
    t += this.tablerow({ text: n });
    let r = "";
    for (let i = 0; i < e.rows.length; i++) {
      let s = e.rows[i];
      n = "";
      for (let o = 0; o < s.length; o++) n += this.tablecell(s[o]);
      r += this.tablerow({ text: n });
    }
    return r && (r = `<tbody>${r}</tbody>`), `<table>
<thead>
` + t + `</thead>
` + r + `</table>
`;
  }
  tablerow({ text: e }) {
    return `<tr>
${e}</tr>
`;
  }
  tablecell(e) {
    let t = this.parser.parseInline(e.tokens), n = e.header ? "th" : "td";
    return (e.align ? `<${n} align="${e.align}">` : `<${n}>`) + t + `</${n}>
`;
  }
  strong({ tokens: e }) {
    return `<strong>${this.parser.parseInline(e)}</strong>`;
  }
  em({ tokens: e }) {
    return `<em>${this.parser.parseInline(e)}</em>`;
  }
  codespan({ text: e }) {
    return `<code>${w(e, true)}</code>`;
  }
  br(e) {
    return "<br>";
  }
  del({ tokens: e }) {
    return `<del>${this.parser.parseInline(e)}</del>`;
  }
  link({ href: e, title: t, tokens: n }) {
    let r = this.parser.parseInline(n), i = J(e);
    if (i === null) return r;
    e = i;
    let s = '<a href="' + e + '"';
    return t && (s += ' title="' + w(t) + '"'), s += ">" + r + "</a>", s;
  }
  image({ href: e, title: t, text: n, tokens: r }) {
    r && (n = this.parser.parseInline(r, this.parser.textRenderer));
    let i = J(e);
    if (i === null) return w(n);
    e = i;
    let s = `<img src="${e}" alt="${n}"`;
    return t && (s += ` title="${w(t)}"`), s += ">", s;
  }
  text(e) {
    return "tokens" in e && e.tokens ? this.parser.parseInline(e.tokens) : "escaped" in e && e.escaped ? e.text : w(e.text);
  }
};
var $ = class {
  strong({ text: e }) {
    return e;
  }
  em({ text: e }) {
    return e;
  }
  codespan({ text: e }) {
    return e;
  }
  del({ text: e }) {
    return e;
  }
  html({ text: e }) {
    return e;
  }
  text({ text: e }) {
    return e;
  }
  link({ text: e }) {
    return "" + e;
  }
  image({ text: e }) {
    return "" + e;
  }
  br() {
    return "";
  }
};
var b = class u2 {
  options;
  renderer;
  textRenderer;
  constructor(e) {
    this.options = e || T, this.options.renderer = this.options.renderer || new P(), this.renderer = this.options.renderer, this.renderer.options = this.options, this.renderer.parser = this, this.textRenderer = new $();
  }
  static parse(e, t) {
    return new u2(t).parse(e);
  }
  static parseInline(e, t) {
    return new u2(t).parseInline(e);
  }
  parse(e, t = true) {
    let n = "";
    for (let r = 0; r < e.length; r++) {
      let i = e[r];
      if (this.options.extensions?.renderers?.[i.type]) {
        let o = i, a = this.options.extensions.renderers[o.type].call({ parser: this }, o);
        if (a !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "def", "paragraph", "text"].includes(o.type)) {
          n += a || "";
          continue;
        }
      }
      let s = i;
      switch (s.type) {
        case "space": {
          n += this.renderer.space(s);
          continue;
        }
        case "hr": {
          n += this.renderer.hr(s);
          continue;
        }
        case "heading": {
          n += this.renderer.heading(s);
          continue;
        }
        case "code": {
          n += this.renderer.code(s);
          continue;
        }
        case "table": {
          n += this.renderer.table(s);
          continue;
        }
        case "blockquote": {
          n += this.renderer.blockquote(s);
          continue;
        }
        case "list": {
          n += this.renderer.list(s);
          continue;
        }
        case "html": {
          n += this.renderer.html(s);
          continue;
        }
        case "def": {
          n += this.renderer.def(s);
          continue;
        }
        case "paragraph": {
          n += this.renderer.paragraph(s);
          continue;
        }
        case "text": {
          let o = s, a = this.renderer.text(o);
          for (; r + 1 < e.length && e[r + 1].type === "text"; ) o = e[++r], a += `
` + this.renderer.text(o);
          t ? n += this.renderer.paragraph({ type: "paragraph", raw: a, text: a, tokens: [{ type: "text", raw: a, text: a, escaped: true }] }) : n += a;
          continue;
        }
        default: {
          let o = 'Token with "' + s.type + '" type was not found.';
          if (this.options.silent) return console.error(o), "";
          throw new Error(o);
        }
      }
    }
    return n;
  }
  parseInline(e, t = this.renderer) {
    let n = "";
    for (let r = 0; r < e.length; r++) {
      let i = e[r];
      if (this.options.extensions?.renderers?.[i.type]) {
        let o = this.options.extensions.renderers[i.type].call({ parser: this }, i);
        if (o !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(i.type)) {
          n += o || "";
          continue;
        }
      }
      let s = i;
      switch (s.type) {
        case "escape": {
          n += t.text(s);
          break;
        }
        case "html": {
          n += t.html(s);
          break;
        }
        case "link": {
          n += t.link(s);
          break;
        }
        case "image": {
          n += t.image(s);
          break;
        }
        case "strong": {
          n += t.strong(s);
          break;
        }
        case "em": {
          n += t.em(s);
          break;
        }
        case "codespan": {
          n += t.codespan(s);
          break;
        }
        case "br": {
          n += t.br(s);
          break;
        }
        case "del": {
          n += t.del(s);
          break;
        }
        case "text": {
          n += t.text(s);
          break;
        }
        default: {
          let o = 'Token with "' + s.type + '" type was not found.';
          if (this.options.silent) return console.error(o), "";
          throw new Error(o);
        }
      }
    }
    return n;
  }
};
var S = class {
  options;
  block;
  constructor(e) {
    this.options = e || T;
  }
  static passThroughHooks = /* @__PURE__ */ new Set(["preprocess", "postprocess", "processAllTokens", "emStrongMask"]);
  static passThroughHooksRespectAsync = /* @__PURE__ */ new Set(["preprocess", "postprocess", "processAllTokens"]);
  preprocess(e) {
    return e;
  }
  postprocess(e) {
    return e;
  }
  processAllTokens(e) {
    return e;
  }
  emStrongMask(e) {
    return e;
  }
  provideLexer() {
    return this.block ? x.lex : x.lexInline;
  }
  provideParser() {
    return this.block ? b.parse : b.parseInline;
  }
};
var B = class {
  defaults = L();
  options = this.setOptions;
  parse = this.parseMarkdown(true);
  parseInline = this.parseMarkdown(false);
  Parser = b;
  Renderer = P;
  TextRenderer = $;
  Lexer = x;
  Tokenizer = y;
  Hooks = S;
  constructor(...e) {
    this.use(...e);
  }
  walkTokens(e, t) {
    let n = [];
    for (let r of e) switch (n = n.concat(t.call(this, r)), r.type) {
      case "table": {
        let i = r;
        for (let s of i.header) n = n.concat(this.walkTokens(s.tokens, t));
        for (let s of i.rows) for (let o of s) n = n.concat(this.walkTokens(o.tokens, t));
        break;
      }
      case "list": {
        let i = r;
        n = n.concat(this.walkTokens(i.items, t));
        break;
      }
      default: {
        let i = r;
        this.defaults.extensions?.childTokens?.[i.type] ? this.defaults.extensions.childTokens[i.type].forEach((s) => {
          let o = i[s].flat(1 / 0);
          n = n.concat(this.walkTokens(o, t));
        }) : i.tokens && (n = n.concat(this.walkTokens(i.tokens, t)));
      }
    }
    return n;
  }
  use(...e) {
    let t = this.defaults.extensions || { renderers: {}, childTokens: {} };
    return e.forEach((n) => {
      let r = { ...n };
      if (r.async = this.defaults.async || r.async || false, n.extensions && (n.extensions.forEach((i) => {
        if (!i.name) throw new Error("extension name required");
        if ("renderer" in i) {
          let s = t.renderers[i.name];
          s ? t.renderers[i.name] = function(...o) {
            let a = i.renderer.apply(this, o);
            return a === false && (a = s.apply(this, o)), a;
          } : t.renderers[i.name] = i.renderer;
        }
        if ("tokenizer" in i) {
          if (!i.level || i.level !== "block" && i.level !== "inline") throw new Error("extension level must be 'block' or 'inline'");
          let s = t[i.level];
          s ? s.unshift(i.tokenizer) : t[i.level] = [i.tokenizer], i.start && (i.level === "block" ? t.startBlock ? t.startBlock.push(i.start) : t.startBlock = [i.start] : i.level === "inline" && (t.startInline ? t.startInline.push(i.start) : t.startInline = [i.start]));
        }
        "childTokens" in i && i.childTokens && (t.childTokens[i.name] = i.childTokens);
      }), r.extensions = t), n.renderer) {
        let i = this.defaults.renderer || new P(this.defaults);
        for (let s in n.renderer) {
          if (!(s in i)) throw new Error(`renderer '${s}' does not exist`);
          if (["options", "parser"].includes(s)) continue;
          let o = s, a = n.renderer[o], l = i[o];
          i[o] = (...c) => {
            let p = a.apply(i, c);
            return p === false && (p = l.apply(i, c)), p || "";
          };
        }
        r.renderer = i;
      }
      if (n.tokenizer) {
        let i = this.defaults.tokenizer || new y(this.defaults);
        for (let s in n.tokenizer) {
          if (!(s in i)) throw new Error(`tokenizer '${s}' does not exist`);
          if (["options", "rules", "lexer"].includes(s)) continue;
          let o = s, a = n.tokenizer[o], l = i[o];
          i[o] = (...c) => {
            let p = a.apply(i, c);
            return p === false && (p = l.apply(i, c)), p;
          };
        }
        r.tokenizer = i;
      }
      if (n.hooks) {
        let i = this.defaults.hooks || new S();
        for (let s in n.hooks) {
          if (!(s in i)) throw new Error(`hook '${s}' does not exist`);
          if (["options", "block"].includes(s)) continue;
          let o = s, a = n.hooks[o], l = i[o];
          S.passThroughHooks.has(s) ? i[o] = (c) => {
            if (this.defaults.async && S.passThroughHooksRespectAsync.has(s)) return (async () => {
              let g = await a.call(i, c);
              return l.call(i, g);
            })();
            let p = a.call(i, c);
            return l.call(i, p);
          } : i[o] = (...c) => {
            if (this.defaults.async) return (async () => {
              let g = await a.apply(i, c);
              return g === false && (g = await l.apply(i, c)), g;
            })();
            let p = a.apply(i, c);
            return p === false && (p = l.apply(i, c)), p;
          };
        }
        r.hooks = i;
      }
      if (n.walkTokens) {
        let i = this.defaults.walkTokens, s = n.walkTokens;
        r.walkTokens = function(o) {
          let a = [];
          return a.push(s.call(this, o)), i && (a = a.concat(i.call(this, o))), a;
        };
      }
      this.defaults = { ...this.defaults, ...r };
    }), this;
  }
  setOptions(e) {
    return this.defaults = { ...this.defaults, ...e }, this;
  }
  lexer(e, t) {
    return x.lex(e, t ?? this.defaults);
  }
  parser(e, t) {
    return b.parse(e, t ?? this.defaults);
  }
  parseMarkdown(e) {
    return (n, r) => {
      let i = { ...r }, s = { ...this.defaults, ...i }, o = this.onError(!!s.silent, !!s.async);
      if (this.defaults.async === true && i.async === false) return o(new Error("marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise."));
      if (typeof n > "u" || n === null) return o(new Error("marked(): input parameter is undefined or null"));
      if (typeof n != "string") return o(new Error("marked(): input parameter is of type " + Object.prototype.toString.call(n) + ", string expected"));
      if (s.hooks && (s.hooks.options = s, s.hooks.block = e), s.async) return (async () => {
        let a = s.hooks ? await s.hooks.preprocess(n) : n, c = await (s.hooks ? await s.hooks.provideLexer() : e ? x.lex : x.lexInline)(a, s), p = s.hooks ? await s.hooks.processAllTokens(c) : c;
        s.walkTokens && await Promise.all(this.walkTokens(p, s.walkTokens));
        let d = await (s.hooks ? await s.hooks.provideParser() : e ? b.parse : b.parseInline)(p, s);
        return s.hooks ? await s.hooks.postprocess(d) : d;
      })().catch(o);
      try {
        s.hooks && (n = s.hooks.preprocess(n));
        let l = (s.hooks ? s.hooks.provideLexer() : e ? x.lex : x.lexInline)(n, s);
        s.hooks && (l = s.hooks.processAllTokens(l)), s.walkTokens && this.walkTokens(l, s.walkTokens);
        let p = (s.hooks ? s.hooks.provideParser() : e ? b.parse : b.parseInline)(l, s);
        return s.hooks && (p = s.hooks.postprocess(p)), p;
      } catch (a) {
        return o(a);
      }
    };
  }
  onError(e, t) {
    return (n) => {
      if (n.message += `
Please report this to https://github.com/markedjs/marked.`, e) {
        let r = "<p>An error occurred:</p><pre>" + w(n.message + "", true) + "</pre>";
        return t ? Promise.resolve(r) : r;
      }
      if (t) return Promise.reject(n);
      throw n;
    };
  }
};
var _ = new B();
function k(u3, e) {
  return _.parse(u3, e);
}
k.options = k.setOptions = function(u3) {
  return _.setOptions(u3), k.defaults = _.defaults, G(k.defaults), k;
};
k.getDefaults = L;
k.defaults = T;
k.use = function(...u3) {
  return _.use(...u3), k.defaults = _.defaults, G(k.defaults), k;
};
k.walkTokens = function(u3, e) {
  return _.walkTokens(u3, e);
};
k.parseInline = _.parseInline;
k.Parser = b;
k.parser = b.parse;
k.Renderer = P;
k.TextRenderer = $;
k.Lexer = x;
k.lexer = x.lex;
k.Tokenizer = y;
k.Hooks = S;
k.parse = k;
var Ht = k.options;
var Zt = k.setOptions;
var Gt = k.use;
var Nt = k.walkTokens;
var Ft = k.parseInline;
var Qt = b.parse;
var Ut = x.lex;

// src/components/SidePanel.ts
k.setOptions({
  breaks: true,
  // 支援換行
  gfm: true
  // 支援 GitHub Flavored Markdown
});
var SidePanel = class {
  container;
  overlay;
  panel;
  isOpen = false;
  width;
  position;
  capturedImage = null;
  capturedText = null;
  // 回調函數
  onSendMessage;
  onSelectRule;
  onClose;
  onOpen;
  constructor(width = "33.33%", position = "right") {
    this.width = width;
    this.position = position;
    this.container = this.createContainer();
    this.overlay = this.createOverlay();
    this.panel = this.createPanel();
    this.injectMarkdownStyles();
  }
  /**
   * 注入 Markdown 樣式
   */
  injectMarkdownStyles() {
    if (document.getElementById("sm-markdown-styles")) return;
    const styleEl = document.createElement("div");
    styleEl.id = "sm-markdown-styles";
    styleEl.innerHTML = styles.markdownStyles;
    document.head.appendChild(styleEl);
  }
  /**
   * 創建容器
   */
  createContainer() {
    const container = document.createElement("div");
    container.id = "sm-container";
    container.style.cssText = styles.container;
    return container;
  }
  /**
   * 創建遮罩層
   */
  createOverlay() {
    const overlay = document.createElement("div");
    overlay.style.cssText = styles.overlay;
    overlay.style.display = "none";
    overlay.addEventListener("click", () => this.close());
    return overlay;
  }
  /**
   * 創建面板
   */
  createPanel() {
    const panel = document.createElement("div");
    panel.style.cssText = styles.panel;
    panel.style.width = this.width;
    if (this.position === "right") {
      panel.style.right = `-${this.width}`;
      panel.style.left = "auto";
    } else {
      panel.style.left = `-${this.width}`;
      panel.style.right = "auto";
    }
    panel.innerHTML = `
      <div id="sm-view-container" style="${styles.viewContainer}">
        <!-- \u53F3\u4E0A\u89D2\u5DE5\u5177\u6309\u9215 -->
        <div style="position: absolute; top: 16px; right: 16px; display: flex; gap: 6px; z-index: 10;">

          <button id="sm-history-btn" style="${styles.iconButton}" title="\u6B77\u53F2\u8A18\u9304">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
          </button>
          <button id="sm-refresh-btn" style="${styles.iconButton}" title="\u5237\u65B0">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21.5 2v6h-6M2.5 22v-6h6M2 11.5a10 10 0 0118.8-4.3M22 12.5a10 10 0 01-18.8 4.2"/>
            </svg>
          </button>
          <button id="sm-close-btn" style="${styles.iconButton}" title="\u95DC\u9589">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M18 6L6 18M6 6l12 12"/>
            </svg>
          </button>
        </div>

        <!-- \u5C0D\u8A71\u8996\u5716 -->
        <div id="sm-chat-view" style="${styles.chatView}">
          <div id="sm-messages" style="${styles.messagesContainer}"></div>
          <div style="${styles.inputContainer}">
            <!-- \u5716\u7247\u9810\u89BD\uFF08\u9810\u8A2D\u96B1\u85CF\uFF09 -->
            <div id="sm-image-preview" style="display: none; margin-bottom: 12px; padding: 12px; background: #f3f4f6; border-radius: 8px; position: relative;">
              <img id="sm-preview-img" style="width: 60px; height: 60px; object-fit: cover; border-radius: 4px; border: 1px solid #d1d5db;" />
              <button id="sm-remove-image" style="position: absolute; top: 8px; right: 8px; background: rgba(0, 0, 0, 0.6); color: white; border: none; border-radius: 50%; width: 20px; height: 20px; font-size: 12px; cursor: pointer; display: flex; align-items: center; justify-content: center; padding: 0;">\u2715</button>
              <div id="sm-image-context" style="margin-left: 72px; font-size: 12px; color: #6b7280; line-height: 1.4;"></div>
            </div>

            <div style="position: relative; width: 100%;">
              <input
                type="text"
                id="sm-input"
                placeholder="\u8F38\u5165\u8A0A\u606F..."
                style="${styles.input}"
              />
              <button id="sm-send-btn" style="${styles.sendIconButton}" title="\u767C\u9001">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z"/>
                </svg>
              </button>
            </div>
          </div>
        </div>


      </div>
    `;
    this.bindEvents(panel);
    return panel;
  }
  /**
   * 綁定事件
   */
  bindEvents(panel) {
    panel.querySelector("#sm-close-btn")?.addEventListener("click", () => {
      this.close();
    });
    const sendBtn = panel.querySelector("#sm-send-btn");
    if (sendBtn) {
      console.log("\u2705 Send button found, binding click event");
      sendBtn.addEventListener("click", (e) => {
        console.log("\u{1F525} Send button clicked via addEventListener!");
        e.preventDefault();
        e.stopPropagation();
        this.handleSend();
      });
      sendBtn.onclick = (e) => {
        console.log("\u{1F525} Send button clicked via onclick!");
        e.preventDefault();
        e.stopPropagation();
        this.handleSend();
      };
      panel.addEventListener("click", (e) => {
        if (e.target.id === "sm-send-btn" || e.target.closest("#sm-send-btn")) {
          console.log("\u{1F525} Send button clicked via delegation!");
          e.preventDefault();
          e.stopPropagation();
          this.handleSend();
        }
      });
    } else {
      console.error("\u274C Send button not found!");
    }
    const input = panel.querySelector("#sm-input");
    if (input) {
      console.log("\u2705 Input field found, binding events");
      input.addEventListener("keydown", (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault();
          console.log("\u{1F525} Enter key pressed in input");
          this.handleSend();
        }
      });
      input.addEventListener("input", (e) => {
        console.log("\u{1F525} Input event:", e.target.value);
      });
      input.addEventListener("focus", () => {
        console.log("\u{1F525} Input focused");
      });
      input.addEventListener("blur", () => {
        console.log("\u{1F525} Input blurred");
      });
    } else {
      console.error("\u274C Input field not found!");
    }
    panel.querySelector("#sm-chat-tab")?.addEventListener("click", () => {
      this.showView("chat");
    });
    panel.querySelector("#sm-refresh-btn")?.addEventListener("click", () => {
      this.clearMessages();
    });
    panel.querySelector("#sm-history-btn")?.addEventListener("click", () => {
      this.showHistory();
    });
    panel.querySelector("#sm-remove-image")?.addEventListener("click", () => {
      this.clearCapturedImage();
    });
  }
  /**
   * 處理發送訊息
   */
  handleSend() {
    const input = this.panel.querySelector("#sm-input");
    const message = input.value.trim();
    if ((message || this.capturedImage) && this.onSendMessage) {
      this.onSendMessage(message, this.capturedImage || void 0, this.capturedText || void 0);
      input.value = "";
      this.clearCapturedImage();
    }
  }
  /**
   * 顯示視圖
   */
  showView(view) {
    const chatView = this.panel.querySelector("#sm-chat-view");
    const chatTab = this.panel.querySelector("#sm-chat-tab");
    if (view === "chat") {
      chatView.style.display = "flex";
      chatTab.style.cssText = styles.tabButton + "; " + styles.tabButtonActive;
    }
  }
  /**
   * 添加訊息
   */
  addMessage(message) {
    const messagesContainer = this.panel.querySelector("#sm-messages");
    if (!messagesContainer) return;
    const messageEl = document.createElement("div");
    messageEl.style.cssText = message.role === "user" ? styles.userMessage : styles.assistantMessage;
    if (message.role === "assistant") {
      messageEl.innerHTML = message.content;
    } else {
      messageEl.textContent = message.content;
    }
    if (message.sources && message.sources.length > 0) {
      const sourcesEl = document.createElement("div");
      sourcesEl.style.cssText = styles.sources;
      sourcesEl.innerHTML = "<strong>\u53C3\u8003\u4F86\u6E90\uFF1A</strong><br>";
      message.sources.forEach((source, index2) => {
        const link = document.createElement("a");
        link.href = source.url;
        link.target = "_blank";
        link.textContent = `[${index2 + 1}] ${source.title}`;
        link.style.cssText = styles.sourceLink;
        sourcesEl.appendChild(link);
        sourcesEl.appendChild(document.createElement("br"));
      });
      messageEl.appendChild(sourcesEl);
    }
    messagesContainer.appendChild(messageEl);
    setTimeout(() => {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }, 10);
  }
  /**
   * 顯示搜尋動畫
   */
  showSearchingAnimation() {
    const messagesContainer = this.panel.querySelector("#sm-messages");
    if (!messagesContainer) return document.createElement("div");
    const searchingEl = document.createElement("div");
    searchingEl.id = "searching-animation";
    searchingEl.style.cssText = `
      align-self: stretch;
      padding: 16px 0;
      display: flex;
      align-items: center;
      gap: 8px;
      color: #6b7280;
      font-size: 14px;
    `;
    searchingEl.innerHTML = `
      <div style="
        width: 20px;
        height: 20px;
        border: 2px solid #e5e7eb;
        border-top-color: #6366f1;
        border-radius: 50%;
        animation: spin 0.8s linear infinite;
      "></div>
      <span>\u6B63\u5728\u641C\u5C0B\u76F8\u95DC\u8CC7\u8A0A...</span>
      <style>
        @keyframes spin {
          to { transform: rotate(360deg); }
        }
      </style>
    `;
    messagesContainer.appendChild(searchingEl);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    return searchingEl;
  }
  /**
   * 移除搜尋動畫
   */
  removeSearchingAnimation() {
    const searchingEl = this.panel.querySelector("#searching-animation");
    if (searchingEl) {
      searchingEl.remove();
    }
  }
  /**
   * 開始流式回覆
   */
  startStreamingMessage() {
    const messagesContainer = this.panel.querySelector("#sm-messages");
    if (!messagesContainer) return document.createElement("div");
    const messageEl = document.createElement("div");
    messageEl.id = "streaming-message";
    messageEl.style.cssText = styles.assistantMessage;
    const contentEl = document.createElement("div");
    contentEl.id = "streaming-content";
    messageEl.appendChild(contentEl);
    messagesContainer.appendChild(messageEl);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    return messageEl;
  }
  /**
   * 追加流式內容
   */
  async appendStreamingContent(text3) {
    const contentEl = this.panel.querySelector("#streaming-content");
    if (contentEl) {
      const currentText = contentEl.getAttribute("data-raw-text") || "";
      const newText = currentText + text3;
      contentEl.setAttribute("data-raw-text", newText);
      try {
        const htmlContent = await k.parse(newText);
        contentEl.innerHTML = htmlContent;
      } catch (error) {
        contentEl.textContent = newText;
      }
      const messagesContainer = this.panel.querySelector("#sm-messages");
      if (messagesContainer) {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }
    }
  }
  /**
   * 完成流式回覆
   */
  async finishStreamingMessage(sources) {
    const messageEl = this.panel.querySelector("#streaming-message");
    const contentEl = this.panel.querySelector("#streaming-content");
    if (!messageEl || !contentEl) return;
    contentEl.removeAttribute("data-raw-text");
    messageEl.removeAttribute("id");
    contentEl.removeAttribute("id");
    if (sources && sources.length > 0) {
      const sourcesEl = document.createElement("div");
      sourcesEl.style.cssText = styles.sources;
      sourcesEl.innerHTML = "<strong>\u53C3\u8003\u4F86\u6E90\uFF1A</strong><br>";
      sources.forEach((source, index2) => {
        const link = document.createElement("a");
        link.href = source.url;
        link.target = "_blank";
        link.textContent = `[${index2 + 1}] ${source.title}`;
        link.style.cssText = styles.sourceLink;
        sourcesEl.appendChild(link);
        sourcesEl.appendChild(document.createElement("br"));
      });
      messageEl.appendChild(sourcesEl);
    }
  }
  /**
   * 顯示歡迎畫面
   */
  showWelcomeScreen() {
    const messagesContainer = this.panel.querySelector("#sm-messages");
    if (!messagesContainer) return;
    const welcomeEl = document.createElement("div");
    welcomeEl.id = "welcome-screen";
    welcomeEl.style.cssText = `
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100%;
      text-align: center;
      padding: 40px;
    `;
    welcomeEl.innerHTML = `
      <div style="
        font-size: 48px;
        font-weight: 700;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 24px;
        letter-spacing: 2px;
      ">ASK LENS</div>
      <div style="
        font-size: 18px;
        color: #4b5563;
        margin-bottom: 8px;
        font-weight: 500;
      ">\u6709\u4EC0\u9EBC\u53EF\u4EE5\u5E6B\u52A9\u60A8\u7684\u55CE\uFF1F</div>
      <div style="
        font-size: 16px;
        color: #9ca3af;
        font-weight: 400;
      ">How can I help you today?</div>
    `;
    messagesContainer.appendChild(welcomeEl);
  }
  /**
   * 移除歡迎畫面
   */
  removeWelcomeScreen() {
    const welcomeEl = this.panel.querySelector("#welcome-screen");
    if (welcomeEl) {
      welcomeEl.remove();
    }
  }
  /**
   * 設置規則列表 (已移除規則功能)
   */
  setRules(rules, currentRuleId) {
  }
  /**
   * 清除訊息
   */
  clearMessages(showWelcome = true) {
    const messagesContainer = this.panel.querySelector("#sm-messages");
    if (messagesContainer) {
      messagesContainer.innerHTML = "";
      if (showWelcome) {
        this.showWelcomeScreen();
      }
    }
  }
  /**
   * 顯示歷史記錄
   */
  async showHistory() {
    try {
      const { DatabaseService: DatabaseService2 } = await Promise.resolve().then(() => (init_DatabaseService(), DatabaseService_exports));
      const conversations = await DatabaseService2.getConversations();
      this.showHistoryView(conversations);
    } catch (error) {
      console.error("Failed to load history:", error);
      alert("\u8F09\u5165\u6B77\u53F2\u8A18\u9304\u5931\u6557");
    }
  }
  /**
   * 顯示歷史記錄視圖
   */
  showHistoryView(conversations) {
    const chatView = this.panel.querySelector("#sm-chat-view");
    console.log("\u{1F4CB} showHistoryView called with", conversations.length, "conversations");
    console.log("\u{1F4CB} chatView:", chatView);
    if (!chatView) {
      console.error("\u274C chatView not found");
      return;
    }
    chatView.style.display = "none";
    let historyView = this.panel.querySelector("#sm-history-view");
    if (!historyView) {
      historyView = document.createElement("div");
      historyView.id = "sm-history-view";
      historyView.style.cssText = styles.chatView;
      const parent2 = chatView.parentElement;
      console.log("\u{1F4CB} parent element:", parent2);
      if (parent2) {
        parent2.appendChild(historyView);
        console.log("\u2705 History view created and appended");
      } else {
        console.error("\u274C Parent element not found");
        return;
      }
    }
    historyView.style.display = "flex";
    historyView.style.flexDirection = "column";
    console.log("\u2705 History view display set to flex");
    if (!Array.isArray(conversations) || conversations.length === 0) {
      historyView.innerHTML = `
        <div style="flex: 1; display: flex; align-items: center; justify-content: center; color: #6b7280;">
          <p style="font-size: 14px;">\u76EE\u524D\u6C92\u6709\u5C0D\u8A71\u8A18\u9304</p>
        </div>
        <div style="padding: 16px; border-top: 1px solid #e5e7eb;">
          <button id="sm-back-to-chat" style="
            width: 100%;
            padding: 12px;
            background: #3b82f6;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
          ">\u8FD4\u56DE\u5C0D\u8A71</button>
        </div>
      `;
    } else {
      const historyItems2 = conversations.map((c) => {
        let messages = [];
        try {
          messages = typeof c.messages === "string" ? JSON.parse(c.messages) : c.messages;
        } catch (e) {
          messages = [];
        }
        const messageCount = Array.isArray(messages) ? messages.length : 0;
        const createdAt = new Date(c.created_at).toLocaleString("zh-TW", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit"
        });
        const conversationId = c.conversation_id || c.id || "unknown";
        const displayId = conversationId.toString().slice(-8);
        return `
          <div class="history-item" data-conversation-id="${conversationId}" style="
            padding: 16px;
            border-bottom: 1px solid #e5e7eb;
            cursor: pointer;
            transition: background-color 0.2s;
          " onmouseover="this.style.backgroundColor='#f3f4f6'" onmouseout="this.style.backgroundColor='white'">
            <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 8px;">
              <div style="font-weight: 600; color: #1f2937; font-size: 14px;">\u5C0D\u8A71 #${displayId}</div>
              <div style="font-size: 12px; color: #6b7280;">${createdAt}</div>
            </div>
            <div style="font-size: 12px; color: #6b7280;">
              \u8A0A\u606F\u6578: ${messageCount} | \u7528\u6236: ${c.user_id || "unknown"}
            </div>
          </div>
        `;
      }).join("");
      historyView.innerHTML = `
        <div style="flex: 1; overflow-y: auto;">
          <div style="padding: 16px; border-bottom: 2px solid #e5e7eb; background: #f9fafb;">
            <h3 style="margin: 0; font-size: 16px; font-weight: 600; color: #1f2937;">\u5C0D\u8A71\u6B77\u53F2\u8A18\u9304</h3>
            <p style="margin: 8px 0 0 0; font-size: 12px; color: #6b7280;">\u9EDE\u64CA\u5C0D\u8A71\u4EE5\u67E5\u770B\u8A73\u60C5</p>
          </div>
          ${historyItems2}
        </div>
        <div style="padding: 16px; border-top: 1px solid #e5e7eb;">
          <button id="sm-back-to-chat" style="
            width: 100%;
            padding: 12px;
            background: #3b82f6;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
          ">\u8FD4\u56DE\u5C0D\u8A71</button>
        </div>
      `;
    }
    const backButton = historyView.querySelector("#sm-back-to-chat");
    backButton?.addEventListener("click", () => {
      historyView.style.display = "none";
      chatView.style.display = "flex";
      console.log("\u2705 Returned to chat view");
    });
    const historyItems = historyView.querySelectorAll(".history-item");
    historyItems.forEach((item) => {
      item.addEventListener("click", async () => {
        const conversationId = item.getAttribute("data-conversation-id");
        if (conversationId) {
          await this.loadConversation(conversationId);
        }
      });
    });
  }
  /**
   * 載入指定對話
   */
  async loadConversation(conversationId) {
    try {
      console.log("\u{1F504} Loading conversation:", conversationId);
      const { DatabaseService: DatabaseService2 } = await Promise.resolve().then(() => (init_DatabaseService(), DatabaseService_exports));
      const conversation = await DatabaseService2.getConversation(conversationId);
      console.log("\u{1F4E6} Received conversation:", conversation);
      if (!conversation) {
        alert("\u7121\u6CD5\u8F09\u5165\u5C0D\u8A71");
        return;
      }
      this.clearMessages(false);
      let messages = [];
      if (typeof conversation.messages === "string") {
        try {
          messages = JSON.parse(conversation.messages);
          console.log("\u2705 Parsed messages from string:", messages);
        } catch (e) {
          console.error("\u274C Failed to parse messages:", e);
          messages = [];
        }
      } else if (Array.isArray(conversation.messages)) {
        messages = conversation.messages;
        console.log("\u2705 Messages already array:", messages);
      } else {
        console.warn("\u26A0\uFE0F Messages is neither string nor array:", typeof conversation.messages);
        messages = [];
      }
      console.log("\u{1F4DD} Loading", messages.length, "messages into chat view");
      messages.forEach((msg, index2) => {
        console.log(`  Message ${index2 + 1}:`, msg.role, msg.content?.substring(0, 50));
        this.addMessage(msg);
      });
      const historyView = this.panel.querySelector("#sm-history-view");
      const chatView = this.panel.querySelector("#sm-chat-view");
      if (historyView) {
        historyView.style.display = "none";
      }
      if (chatView) {
        chatView.style.display = "flex";
      }
      console.log("\u2705 Loaded conversation and returned to chat view");
      if (window.LensService) {
        window.LensService.setConversationId(conversationId);
      }
    } catch (error) {
      console.error("Failed to load conversation:", error);
      alert("\u8F09\u5165\u5C0D\u8A71\u5931\u6557");
    }
  }
  /**
   * 打開面板
   */
  open() {
    if (this.isOpen) return;
    if (!this.container.parentElement) {
      document.body.appendChild(this.container);
      this.container.appendChild(this.overlay);
      this.container.appendChild(this.panel);
    }
    this.overlay.style.display = "block";
    setTimeout(() => {
      if (this.position === "right") {
        this.panel.style.right = "0";
      } else {
        this.panel.style.left = "0";
      }
    }, 10);
    this.isOpen = true;
    if (this.onOpen) {
      this.onOpen();
    }
  }
  /**
   * 關閉面板
   */
  close() {
    if (!this.isOpen) return;
    if (this.position === "right") {
      this.panel.style.right = `-${this.width}`;
    } else {
      this.panel.style.left = `-${this.width}`;
    }
    setTimeout(() => {
      this.overlay.style.display = "none";
    }, 300);
    this.isOpen = false;
    if (this.onClose) {
      this.onClose();
    }
  }
  /**
   * 檢查面板是否打開
   */
  isPanelOpen() {
    return this.isOpen;
  }
  /**
   * 推動頁面內容
   */
  pushPageContent() {
    const body = document.body;
    const html3 = document.documentElement;
    const panelWidthPercent = parseFloat(this.width.replace("%", ""));
    const pageWidthPercent = 100 - panelWidthPercent;
    if (this.position === "right") {
      body.style.transform = `translateX(0)`;
      body.style.width = `${pageWidthPercent}%`;
      body.style.marginLeft = "0";
      body.style.marginRight = "0";
    } else {
      body.style.transform = `translateX(${panelWidthPercent}%)`;
      body.style.width = `${pageWidthPercent}%`;
      body.style.marginLeft = "0";
      body.style.marginRight = "0";
    }
    body.style.transition = "transform 0.3s ease, width 0.3s ease";
    body.style.boxSizing = "border-box";
  }
  /**
   * 恢復頁面內容
   */
  restorePageContent() {
    const body = document.body;
    body.style.transform = "";
    body.style.width = "";
    body.style.transition = "";
    body.style.boxSizing = "";
    body.style.marginLeft = "";
    body.style.marginRight = "";
  }
  /**
   * 設置捕獲的圖片
   */
  setCapturedImage(imageBase64, text3) {
    this.capturedImage = imageBase64;
    this.capturedText = text3;
    const preview = this.panel.querySelector("#sm-image-preview");
    const img = this.panel.querySelector("#sm-preview-img");
    const context = this.panel.querySelector("#sm-image-context");
    if (preview && img && context) {
      preview.style.display = "flex";
      img.src = imageBase64;
      context.textContent = text3.substring(0, 100) + (text3.length > 100 ? "..." : "");
    }
    const input = this.panel.querySelector("#sm-input");
    if (input) {
      input.focus();
    }
  }
  /**
   * 清除捕獲的圖片
   */
  clearCapturedImage() {
    this.capturedImage = null;
    this.capturedText = null;
    const preview = this.panel.querySelector("#sm-image-preview");
    if (preview) {
      preview.style.display = "none";
    }
  }
  /**
   * 將截圖設置到輸入框
   */
  setScreenshotInInput(base64Image) {
    this.capturedImage = base64Image;
    const preview = this.panel.querySelector("#sm-image-preview");
    const img = this.panel.querySelector("#sm-preview-img");
    if (preview && img) {
      img.src = base64Image;
      preview.style.display = "block";
    }
    if (!this.isOpen) {
      this.open();
    }
    const input = this.panel.querySelector("#sm-input");
    if (input) {
      input.focus();
    }
  }
  /**
   * 設置回調函數
   */
  setCallbacks(callbacks) {
    this.onSendMessage = callbacks.onSendMessage;
    this.onSelectRule = callbacks.onSelectRule;
    this.onClose = callbacks.onClose;
    this.onOpen = callbacks.onOpen;
  }
  /**
   * 銷毀
   */
  destroy() {
    this.close();
    if (this.container.parentElement) {
      document.body.removeChild(this.container);
    }
  }
};

// src/admin/AdminPanel.ts
init_ManualIndexService();
init_DatabaseService();

// src/services/KnowledgeBaseService.ts
init_axios2();

// node_modules/cheerio/dist/browser/static.js
var static_exports = {};
__export(static_exports, {
  contains: () => contains,
  extract: () => extract,
  html: () => html,
  merge: () => merge2,
  parseHTML: () => parseHTML,
  root: () => root,
  text: () => text,
  xml: () => xml
});

// node_modules/domutils/lib/esm/index.js
var esm_exports2 = {};
__export(esm_exports2, {
  DocumentPosition: () => DocumentPosition,
  append: () => append2,
  appendChild: () => appendChild,
  compareDocumentPosition: () => compareDocumentPosition,
  existsOne: () => existsOne,
  filter: () => filter2,
  find: () => find,
  findAll: () => findAll,
  findOne: () => findOne,
  findOneChild: () => findOneChild,
  getAttributeValue: () => getAttributeValue,
  getChildren: () => getChildren,
  getElementById: () => getElementById,
  getElements: () => getElements,
  getElementsByClassName: () => getElementsByClassName,
  getElementsByTagName: () => getElementsByTagName,
  getElementsByTagType: () => getElementsByTagType,
  getFeed: () => getFeed,
  getInnerHTML: () => getInnerHTML,
  getName: () => getName,
  getOuterHTML: () => getOuterHTML,
  getParent: () => getParent,
  getSiblings: () => getSiblings,
  getText: () => getText,
  hasAttrib: () => hasAttrib,
  hasChildren: () => hasChildren,
  innerText: () => innerText,
  isCDATA: () => isCDATA,
  isComment: () => isComment,
  isDocument: () => isDocument,
  isTag: () => isTag2,
  isText: () => isText,
  nextElementSibling: () => nextElementSibling,
  prepend: () => prepend,
  prependChild: () => prependChild,
  prevElementSibling: () => prevElementSibling,
  removeElement: () => removeElement,
  removeSubsets: () => removeSubsets,
  replaceElement: () => replaceElement,
  testElement: () => testElement,
  textContent: () => textContent,
  uniqueSort: () => uniqueSort
});

// node_modules/domelementtype/lib/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  CDATA: () => CDATA,
  Comment: () => Comment,
  Directive: () => Directive,
  Doctype: () => Doctype,
  ElementType: () => ElementType,
  Root: () => Root,
  Script: () => Script,
  Style: () => Style,
  Tag: () => Tag,
  Text: () => Text,
  isTag: () => isTag
});
var ElementType;
(function(ElementType2) {
  ElementType2["Root"] = "root";
  ElementType2["Text"] = "text";
  ElementType2["Directive"] = "directive";
  ElementType2["Comment"] = "comment";
  ElementType2["Script"] = "script";
  ElementType2["Style"] = "style";
  ElementType2["Tag"] = "tag";
  ElementType2["CDATA"] = "cdata";
  ElementType2["Doctype"] = "doctype";
})(ElementType || (ElementType = {}));
function isTag(elem) {
  return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;
}
var Root = ElementType.Root;
var Text = ElementType.Text;
var Directive = ElementType.Directive;
var Comment = ElementType.Comment;
var Script = ElementType.Script;
var Style = ElementType.Style;
var Tag = ElementType.Tag;
var CDATA = ElementType.CDATA;
var Doctype = ElementType.Doctype;

// node_modules/domhandler/lib/esm/node.js
var Node2 = class {
  constructor() {
    this.parent = null;
    this.prev = null;
    this.next = null;
    this.startIndex = null;
    this.endIndex = null;
  }
  // Read-write aliases for properties
  /**
   * Same as {@link parent}.
   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
   */
  get parentNode() {
    return this.parent;
  }
  set parentNode(parent2) {
    this.parent = parent2;
  }
  /**
   * Same as {@link prev}.
   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
   */
  get previousSibling() {
    return this.prev;
  }
  set previousSibling(prev2) {
    this.prev = prev2;
  }
  /**
   * Same as {@link next}.
   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
   */
  get nextSibling() {
    return this.next;
  }
  set nextSibling(next2) {
    this.next = next2;
  }
  /**
   * Clone this node, and optionally its children.
   *
   * @param recursive Clone child nodes as well.
   * @returns A clone of the node.
   */
  cloneNode(recursive = false) {
    return cloneNode(this, recursive);
  }
};
var DataNode = class extends Node2 {
  /**
   * @param data The content of the data node
   */
  constructor(data2) {
    super();
    this.data = data2;
  }
  /**
   * Same as {@link data}.
   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
   */
  get nodeValue() {
    return this.data;
  }
  set nodeValue(data2) {
    this.data = data2;
  }
};
var Text2 = class extends DataNode {
  constructor() {
    super(...arguments);
    this.type = ElementType.Text;
  }
  get nodeType() {
    return 3;
  }
};
var Comment2 = class extends DataNode {
  constructor() {
    super(...arguments);
    this.type = ElementType.Comment;
  }
  get nodeType() {
    return 8;
  }
};
var ProcessingInstruction = class extends DataNode {
  constructor(name, data2) {
    super(data2);
    this.name = name;
    this.type = ElementType.Directive;
  }
  get nodeType() {
    return 1;
  }
};
var NodeWithChildren = class extends Node2 {
  /**
   * @param children Children of the node. Only certain node types can have children.
   */
  constructor(children2) {
    super();
    this.children = children2;
  }
  // Aliases
  /** First child of the node. */
  get firstChild() {
    var _a5;
    return (_a5 = this.children[0]) !== null && _a5 !== void 0 ? _a5 : null;
  }
  /** Last child of the node. */
  get lastChild() {
    return this.children.length > 0 ? this.children[this.children.length - 1] : null;
  }
  /**
   * Same as {@link children}.
   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
   */
  get childNodes() {
    return this.children;
  }
  set childNodes(children2) {
    this.children = children2;
  }
};
var CDATA2 = class extends NodeWithChildren {
  constructor() {
    super(...arguments);
    this.type = ElementType.CDATA;
  }
  get nodeType() {
    return 4;
  }
};
var Document = class extends NodeWithChildren {
  constructor() {
    super(...arguments);
    this.type = ElementType.Root;
  }
  get nodeType() {
    return 9;
  }
};
var Element = class extends NodeWithChildren {
  /**
   * @param name Name of the tag, eg. `div`, `span`.
   * @param attribs Object mapping attribute names to attribute values.
   * @param children Children of the node.
   */
  constructor(name, attribs, children2 = [], type = name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag) {
    super(children2);
    this.name = name;
    this.attribs = attribs;
    this.type = type;
  }
  get nodeType() {
    return 1;
  }
  // DOM Level 1 aliases
  /**
   * Same as {@link name}.
   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
   */
  get tagName() {
    return this.name;
  }
  set tagName(name) {
    this.name = name;
  }
  get attributes() {
    return Object.keys(this.attribs).map((name) => {
      var _a5, _b;
      return {
        name,
        value: this.attribs[name],
        namespace: (_a5 = this["x-attribsNamespace"]) === null || _a5 === void 0 ? void 0 : _a5[name],
        prefix: (_b = this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
      };
    });
  }
};
function isTag2(node) {
  return isTag(node);
}
function isCDATA(node) {
  return node.type === ElementType.CDATA;
}
function isText(node) {
  return node.type === ElementType.Text;
}
function isComment(node) {
  return node.type === ElementType.Comment;
}
function isDirective(node) {
  return node.type === ElementType.Directive;
}
function isDocument(node) {
  return node.type === ElementType.Root;
}
function hasChildren(node) {
  return Object.prototype.hasOwnProperty.call(node, "children");
}
function cloneNode(node, recursive = false) {
  let result;
  if (isText(node)) {
    result = new Text2(node.data);
  } else if (isComment(node)) {
    result = new Comment2(node.data);
  } else if (isTag2(node)) {
    const children2 = recursive ? cloneChildren(node.children) : [];
    const clone2 = new Element(node.name, { ...node.attribs }, children2);
    children2.forEach((child) => child.parent = clone2);
    if (node.namespace != null) {
      clone2.namespace = node.namespace;
    }
    if (node["x-attribsNamespace"]) {
      clone2["x-attribsNamespace"] = { ...node["x-attribsNamespace"] };
    }
    if (node["x-attribsPrefix"]) {
      clone2["x-attribsPrefix"] = { ...node["x-attribsPrefix"] };
    }
    result = clone2;
  } else if (isCDATA(node)) {
    const children2 = recursive ? cloneChildren(node.children) : [];
    const clone2 = new CDATA2(children2);
    children2.forEach((child) => child.parent = clone2);
    result = clone2;
  } else if (isDocument(node)) {
    const children2 = recursive ? cloneChildren(node.children) : [];
    const clone2 = new Document(children2);
    children2.forEach((child) => child.parent = clone2);
    if (node["x-mode"]) {
      clone2["x-mode"] = node["x-mode"];
    }
    result = clone2;
  } else if (isDirective(node)) {
    const instruction = new ProcessingInstruction(node.name, node.data);
    if (node["x-name"] != null) {
      instruction["x-name"] = node["x-name"];
      instruction["x-publicId"] = node["x-publicId"];
      instruction["x-systemId"] = node["x-systemId"];
    }
    result = instruction;
  } else {
    throw new Error(`Not implemented yet: ${node.type}`);
  }
  result.startIndex = node.startIndex;
  result.endIndex = node.endIndex;
  if (node.sourceCodeLocation != null) {
    result.sourceCodeLocation = node.sourceCodeLocation;
  }
  return result;
}
function cloneChildren(childs) {
  const children2 = childs.map((child) => cloneNode(child, true));
  for (let i = 1; i < children2.length; i++) {
    children2[i].prev = children2[i - 1];
    children2[i - 1].next = children2[i];
  }
  return children2;
}

// node_modules/domhandler/lib/esm/index.js
var defaultOpts = {
  withStartIndices: false,
  withEndIndices: false,
  xmlMode: false
};
var DomHandler = class {
  /**
   * @param callback Called once parsing has completed.
   * @param options Settings for the handler.
   * @param elementCB Callback whenever a tag is closed.
   */
  constructor(callback, options, elementCB) {
    this.dom = [];
    this.root = new Document(this.dom);
    this.done = false;
    this.tagStack = [this.root];
    this.lastNode = null;
    this.parser = null;
    if (typeof options === "function") {
      elementCB = options;
      options = defaultOpts;
    }
    if (typeof callback === "object") {
      options = callback;
      callback = void 0;
    }
    this.callback = callback !== null && callback !== void 0 ? callback : null;
    this.options = options !== null && options !== void 0 ? options : defaultOpts;
    this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
  }
  onparserinit(parser) {
    this.parser = parser;
  }
  // Resets the handler back to starting state
  onreset() {
    this.dom = [];
    this.root = new Document(this.dom);
    this.done = false;
    this.tagStack = [this.root];
    this.lastNode = null;
    this.parser = null;
  }
  // Signals the handler that parsing is done
  onend() {
    if (this.done)
      return;
    this.done = true;
    this.parser = null;
    this.handleCallback(null);
  }
  onerror(error) {
    this.handleCallback(error);
  }
  onclosetag() {
    this.lastNode = null;
    const elem = this.tagStack.pop();
    if (this.options.withEndIndices) {
      elem.endIndex = this.parser.endIndex;
    }
    if (this.elementCB)
      this.elementCB(elem);
  }
  onopentag(name, attribs) {
    const type = this.options.xmlMode ? ElementType.Tag : void 0;
    const element = new Element(name, attribs, void 0, type);
    this.addNode(element);
    this.tagStack.push(element);
  }
  ontext(data2) {
    const { lastNode } = this;
    if (lastNode && lastNode.type === ElementType.Text) {
      lastNode.data += data2;
      if (this.options.withEndIndices) {
        lastNode.endIndex = this.parser.endIndex;
      }
    } else {
      const node = new Text2(data2);
      this.addNode(node);
      this.lastNode = node;
    }
  }
  oncomment(data2) {
    if (this.lastNode && this.lastNode.type === ElementType.Comment) {
      this.lastNode.data += data2;
      return;
    }
    const node = new Comment2(data2);
    this.addNode(node);
    this.lastNode = node;
  }
  oncommentend() {
    this.lastNode = null;
  }
  oncdatastart() {
    const text3 = new Text2("");
    const node = new CDATA2([text3]);
    this.addNode(node);
    text3.parent = node;
    this.lastNode = text3;
  }
  oncdataend() {
    this.lastNode = null;
  }
  onprocessinginstruction(name, data2) {
    const node = new ProcessingInstruction(name, data2);
    this.addNode(node);
  }
  handleCallback(error) {
    if (typeof this.callback === "function") {
      this.callback(error, this.dom);
    } else if (error) {
      throw error;
    }
  }
  addNode(node) {
    const parent2 = this.tagStack[this.tagStack.length - 1];
    const previousSibling = parent2.children[parent2.children.length - 1];
    if (this.options.withStartIndices) {
      node.startIndex = this.parser.startIndex;
    }
    if (this.options.withEndIndices) {
      node.endIndex = this.parser.endIndex;
    }
    parent2.children.push(node);
    if (previousSibling) {
      node.prev = previousSibling;
      previousSibling.next = node;
    }
    node.parent = parent2;
    this.lastNode = null;
  }
};

// node_modules/entities/lib/esm/generated/decode-data-html.js
var decode_data_html_default = new Uint16Array(
  // prettier-ignore
  '\u1D41<\xD5\u0131\u028A\u049D\u057B\u05D0\u0675\u06DE\u07A2\u07D6\u080F\u0A4A\u0A91\u0DA1\u0E6D\u0F09\u0F26\u10CA\u1228\u12E1\u1415\u149D\u14C3\u14DF\u1525\0\0\0\0\0\0\u156B\u16CD\u198D\u1C12\u1DDD\u1F7E\u2060\u21B0\u228D\u23C0\u23FB\u2442\u2824\u2912\u2D08\u2E48\u2FCE\u3016\u32BA\u3639\u37AC\u38FE\u3A28\u3A71\u3AE0\u3B2E\u0800EMabcfglmnoprstu\\bfms\x7F\x84\x8B\x90\x95\x98\xA6\xB3\xB9\xC8\xCFlig\u803B\xC6\u40C6P\u803B&\u4026cute\u803B\xC1\u40C1reve;\u4102\u0100iyx}rc\u803B\xC2\u40C2;\u4410r;\uC000\u{1D504}rave\u803B\xC0\u40C0pha;\u4391acr;\u4100d;\u6A53\u0100gp\x9D\xA1on;\u4104f;\uC000\u{1D538}plyFunction;\u6061ing\u803B\xC5\u40C5\u0100cs\xBE\xC3r;\uC000\u{1D49C}ign;\u6254ilde\u803B\xC3\u40C3ml\u803B\xC4\u40C4\u0400aceforsu\xE5\xFB\xFE\u0117\u011C\u0122\u0127\u012A\u0100cr\xEA\xF2kslash;\u6216\u0176\xF6\xF8;\u6AE7ed;\u6306y;\u4411\u0180crt\u0105\u010B\u0114ause;\u6235noullis;\u612Ca;\u4392r;\uC000\u{1D505}pf;\uC000\u{1D539}eve;\u42D8c\xF2\u0113mpeq;\u624E\u0700HOacdefhilorsu\u014D\u0151\u0156\u0180\u019E\u01A2\u01B5\u01B7\u01BA\u01DC\u0215\u0273\u0278\u027Ecy;\u4427PY\u803B\xA9\u40A9\u0180cpy\u015D\u0162\u017Aute;\u4106\u0100;i\u0167\u0168\u62D2talDifferentialD;\u6145leys;\u612D\u0200aeio\u0189\u018E\u0194\u0198ron;\u410Cdil\u803B\xC7\u40C7rc;\u4108nint;\u6230ot;\u410A\u0100dn\u01A7\u01ADilla;\u40B8terDot;\u40B7\xF2\u017Fi;\u43A7rcle\u0200DMPT\u01C7\u01CB\u01D1\u01D6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01E2\u01F8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020FoubleQuote;\u601Duote;\u6019\u0200lnpu\u021E\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6A74\u0180git\u022F\u0236\u023Aruent;\u6261nt;\u622FourIntegral;\u622E\u0100fr\u024C\u024E;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6A2Fcr;\uC000\u{1D49E}p\u0100;C\u0284\u0285\u62D3ap;\u624D\u0580DJSZacefios\u02A0\u02AC\u02B0\u02B4\u02B8\u02CB\u02D7\u02E1\u02E6\u0333\u048D\u0100;o\u0179\u02A5trahd;\u6911cy;\u4402cy;\u4405cy;\u440F\u0180grs\u02BF\u02C4\u02C7ger;\u6021r;\u61A1hv;\u6AE4\u0100ay\u02D0\u02D5ron;\u410E;\u4414l\u0100;t\u02DD\u02DE\u6207a;\u4394r;\uC000\u{1D507}\u0100af\u02EB\u0327\u0100cm\u02F0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031Ccute;\u40B4o\u0174\u030B\u030D;\u42D9bleAcute;\u42DDrave;\u4060ilde;\u42DCond;\u62C4ferentialD;\u6146\u0470\u033D\0\0\0\u0342\u0354\0\u0405f;\uC000\u{1D53B}\u0180;DE\u0348\u0349\u034D\u40A8ot;\u60DCqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03CF\u03E2\u03F8ontourIntegra\xEC\u0239o\u0274\u0379\0\0\u037B\xBB\u0349nArrow;\u61D3\u0100eo\u0387\u03A4ft\u0180ART\u0390\u0396\u03A1rrow;\u61D0ightArrow;\u61D4e\xE5\u02CAng\u0100LR\u03AB\u03C4eft\u0100AR\u03B3\u03B9rrow;\u67F8ightArrow;\u67FAightArrow;\u67F9ight\u0100AT\u03D8\u03DErrow;\u61D2ee;\u62A8p\u0241\u03E9\0\0\u03EFrrow;\u61D1ownArrow;\u61D5erticalBar;\u6225n\u0300ABLRTa\u0412\u042A\u0430\u045E\u047F\u037Crrow\u0180;BU\u041D\u041E\u0422\u6193ar;\u6913pArrow;\u61F5reve;\u4311eft\u02D2\u043A\0\u0446\0\u0450ightVector;\u6950eeVector;\u695Eector\u0100;B\u0459\u045A\u61BDar;\u6956ight\u01D4\u0467\0\u0471eeVector;\u695Fector\u0100;B\u047A\u047B\u61C1ar;\u6957ee\u0100;A\u0486\u0487\u62A4rrow;\u61A7\u0100ct\u0492\u0497r;\uC000\u{1D49F}rok;\u4110\u0800NTacdfglmopqstux\u04BD\u04C0\u04C4\u04CB\u04DE\u04E2\u04E7\u04EE\u04F5\u0521\u052F\u0536\u0552\u055D\u0560\u0565G;\u414AH\u803B\xD0\u40D0cute\u803B\xC9\u40C9\u0180aiy\u04D2\u04D7\u04DCron;\u411Arc\u803B\xCA\u40CA;\u442Dot;\u4116r;\uC000\u{1D508}rave\u803B\xC8\u40C8ement;\u6208\u0100ap\u04FA\u04FEcr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65FBerySmallSquare;\u65AB\u0100gp\u0526\u052Aon;\u4118f;\uC000\u{1D53C}silon;\u4395u\u0100ai\u053C\u0549l\u0100;T\u0542\u0543\u6A75ilde;\u6242librium;\u61CC\u0100ci\u0557\u055Ar;\u6130m;\u6A73a;\u4397ml\u803B\xCB\u40CB\u0100ip\u056A\u056Fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058D\u05B2\u05CCy;\u4424r;\uC000\u{1D509}lled\u0253\u0597\0\0\u05A3mallSquare;\u65FCerySmallSquare;\u65AA\u0370\u05BA\0\u05BF\0\0\u05C4f;\uC000\u{1D53D}All;\u6200riertrf;\u6131c\xF2\u05CB\u0600JTabcdfgorst\u05E8\u05EC\u05EF\u05FA\u0600\u0612\u0616\u061B\u061D\u0623\u066C\u0672cy;\u4403\u803B>\u403Emma\u0100;d\u05F7\u05F8\u4393;\u43DCreve;\u411E\u0180eiy\u0607\u060C\u0610dil;\u4122rc;\u411C;\u4413ot;\u4120r;\uC000\u{1D50A};\u62D9pf;\uC000\u{1D53E}eater\u0300EFGLST\u0635\u0644\u064E\u0656\u065B\u0666qual\u0100;L\u063E\u063F\u6265ess;\u62DBullEqual;\u6267reater;\u6AA2ess;\u6277lantEqual;\u6A7Eilde;\u6273cr;\uC000\u{1D4A2};\u626B\u0400Aacfiosu\u0685\u068B\u0696\u069B\u069E\u06AA\u06BE\u06CARDcy;\u442A\u0100ct\u0690\u0694ek;\u42C7;\u405Eirc;\u4124r;\u610ClbertSpace;\u610B\u01F0\u06AF\0\u06B2f;\u610DizontalLine;\u6500\u0100ct\u06C3\u06C5\xF2\u06A9rok;\u4126mp\u0144\u06D0\u06D8ownHum\xF0\u012Fqual;\u624F\u0700EJOacdfgmnostu\u06FA\u06FE\u0703\u0707\u070E\u071A\u071E\u0721\u0728\u0744\u0778\u078B\u078F\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803B\xCD\u40CD\u0100iy\u0713\u0718rc\u803B\xCE\u40CE;\u4418ot;\u4130r;\u6111rave\u803B\xCC\u40CC\u0180;ap\u0720\u072F\u073F\u0100cg\u0734\u0737r;\u412AinaryI;\u6148lie\xF3\u03DD\u01F4\u0749\0\u0762\u0100;e\u074D\u074E\u622C\u0100gr\u0753\u0758ral;\u622Bsection;\u62C2isible\u0100CT\u076C\u0772omma;\u6063imes;\u6062\u0180gpt\u077F\u0783\u0788on;\u412Ef;\uC000\u{1D540}a;\u4399cr;\u6110ilde;\u4128\u01EB\u079A\0\u079Ecy;\u4406l\u803B\xCF\u40CF\u0280cfosu\u07AC\u07B7\u07BC\u07C2\u07D0\u0100iy\u07B1\u07B5rc;\u4134;\u4419r;\uC000\u{1D50D}pf;\uC000\u{1D541}\u01E3\u07C7\0\u07CCr;\uC000\u{1D4A5}rcy;\u4408kcy;\u4404\u0380HJacfos\u07E4\u07E8\u07EC\u07F1\u07FD\u0802\u0808cy;\u4425cy;\u440Cppa;\u439A\u0100ey\u07F6\u07FBdil;\u4136;\u441Ar;\uC000\u{1D50E}pf;\uC000\u{1D542}cr;\uC000\u{1D4A6}\u0580JTaceflmost\u0825\u0829\u082C\u0850\u0863\u09B3\u09B8\u09C7\u09CD\u0A37\u0A47cy;\u4409\u803B<\u403C\u0280cmnpr\u0837\u083C\u0841\u0844\u084Dute;\u4139bda;\u439Bg;\u67EAlacetrf;\u6112r;\u619E\u0180aey\u0857\u085C\u0861ron;\u413Ddil;\u413B;\u441B\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087E\u08A9\u08B1\u08E0\u08E6\u08FC\u092F\u095B\u0390\u096A\u0100nr\u0883\u088FgleBracket;\u67E8row\u0180;BR\u0899\u089A\u089E\u6190ar;\u61E4ightArrow;\u61C6eiling;\u6308o\u01F5\u08B7\0\u08C3bleBracket;\u67E6n\u01D4\u08C8\0\u08D2eeVector;\u6961ector\u0100;B\u08DB\u08DC\u61C3ar;\u6959loor;\u630Aight\u0100AV\u08EF\u08F5rrow;\u6194ector;\u694E\u0100er\u0901\u0917e\u0180;AV\u0909\u090A\u0910\u62A3rrow;\u61A4ector;\u695Aiangle\u0180;BE\u0924\u0925\u0929\u62B2ar;\u69CFqual;\u62B4p\u0180DTV\u0937\u0942\u094CownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61BFar;\u6958ector\u0100;B\u0965\u0966\u61BCar;\u6952ight\xE1\u039Cs\u0300EFGLST\u097E\u098B\u0995\u099D\u09A2\u09ADqualGreater;\u62DAullEqual;\u6266reater;\u6276ess;\u6AA1lantEqual;\u6A7Dilde;\u6272r;\uC000\u{1D50F}\u0100;e\u09BD\u09BE\u62D8ftarrow;\u61DAidot;\u413F\u0180npw\u09D4\u0A16\u0A1Bg\u0200LRlr\u09DE\u09F7\u0A02\u0A10eft\u0100AR\u09E6\u09ECrrow;\u67F5ightArrow;\u67F7ightArrow;\u67F6eft\u0100ar\u03B3\u0A0Aight\xE1\u03BFight\xE1\u03CAf;\uC000\u{1D543}er\u0100LR\u0A22\u0A2CeftArrow;\u6199ightArrow;\u6198\u0180cht\u0A3E\u0A40\u0A42\xF2\u084C;\u61B0rok;\u4141;\u626A\u0400acefiosu\u0A5A\u0A5D\u0A60\u0A77\u0A7C\u0A85\u0A8B\u0A8Ep;\u6905y;\u441C\u0100dl\u0A65\u0A6FiumSpace;\u605Flintrf;\u6133r;\uC000\u{1D510}nusPlus;\u6213pf;\uC000\u{1D544}c\xF2\u0A76;\u439C\u0480Jacefostu\u0AA3\u0AA7\u0AAD\u0AC0\u0B14\u0B19\u0D91\u0D97\u0D9Ecy;\u440Acute;\u4143\u0180aey\u0AB4\u0AB9\u0ABEron;\u4147dil;\u4145;\u441D\u0180gsw\u0AC7\u0AF0\u0B0Eative\u0180MTV\u0AD3\u0ADF\u0AE8ediumSpace;\u600Bhi\u0100cn\u0AE6\u0AD8\xEB\u0AD9eryThi\xEE\u0AD9ted\u0100GL\u0AF8\u0B06reaterGreate\xF2\u0673essLes\xF3\u0A48Line;\u400Ar;\uC000\u{1D511}\u0200Bnpt\u0B22\u0B28\u0B37\u0B3Areak;\u6060BreakingSpace;\u40A0f;\u6115\u0680;CDEGHLNPRSTV\u0B55\u0B56\u0B6A\u0B7C\u0BA1\u0BEB\u0C04\u0C5E\u0C84\u0CA6\u0CD8\u0D61\u0D85\u6AEC\u0100ou\u0B5B\u0B64ngruent;\u6262pCap;\u626DoubleVerticalBar;\u6226\u0180lqx\u0B83\u0B8A\u0B9Bement;\u6209ual\u0100;T\u0B92\u0B93\u6260ilde;\uC000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0BB6\u0BB7\u0BBD\u0BC9\u0BD3\u0BD8\u0BE5\u626Fqual;\u6271ullEqual;\uC000\u2267\u0338reater;\uC000\u226B\u0338ess;\u6279lantEqual;\uC000\u2A7E\u0338ilde;\u6275ump\u0144\u0BF2\u0BFDownHump;\uC000\u224E\u0338qual;\uC000\u224F\u0338e\u0100fs\u0C0A\u0C27tTriangle\u0180;BE\u0C1A\u0C1B\u0C21\u62EAar;\uC000\u29CF\u0338qual;\u62ECs\u0300;EGLST\u0C35\u0C36\u0C3C\u0C44\u0C4B\u0C58\u626Equal;\u6270reater;\u6278ess;\uC000\u226A\u0338lantEqual;\uC000\u2A7D\u0338ilde;\u6274ested\u0100GL\u0C68\u0C79reaterGreater;\uC000\u2AA2\u0338essLess;\uC000\u2AA1\u0338recedes\u0180;ES\u0C92\u0C93\u0C9B\u6280qual;\uC000\u2AAF\u0338lantEqual;\u62E0\u0100ei\u0CAB\u0CB9verseElement;\u620CghtTriangle\u0180;BE\u0CCB\u0CCC\u0CD2\u62EBar;\uC000\u29D0\u0338qual;\u62ED\u0100qu\u0CDD\u0D0CuareSu\u0100bp\u0CE8\u0CF9set\u0100;E\u0CF0\u0CF3\uC000\u228F\u0338qual;\u62E2erset\u0100;E\u0D03\u0D06\uC000\u2290\u0338qual;\u62E3\u0180bcp\u0D13\u0D24\u0D4Eset\u0100;E\u0D1B\u0D1E\uC000\u2282\u20D2qual;\u6288ceeds\u0200;EST\u0D32\u0D33\u0D3B\u0D46\u6281qual;\uC000\u2AB0\u0338lantEqual;\u62E1ilde;\uC000\u227F\u0338erset\u0100;E\u0D58\u0D5B\uC000\u2283\u20D2qual;\u6289ilde\u0200;EFT\u0D6E\u0D6F\u0D75\u0D7F\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uC000\u{1D4A9}ilde\u803B\xD1\u40D1;\u439D\u0700Eacdfgmoprstuv\u0DBD\u0DC2\u0DC9\u0DD5\u0DDB\u0DE0\u0DE7\u0DFC\u0E02\u0E20\u0E22\u0E32\u0E3F\u0E44lig;\u4152cute\u803B\xD3\u40D3\u0100iy\u0DCE\u0DD3rc\u803B\xD4\u40D4;\u441Eblac;\u4150r;\uC000\u{1D512}rave\u803B\xD2\u40D2\u0180aei\u0DEE\u0DF2\u0DF6cr;\u414Cga;\u43A9cron;\u439Fpf;\uC000\u{1D546}enCurly\u0100DQ\u0E0E\u0E1AoubleQuote;\u601Cuote;\u6018;\u6A54\u0100cl\u0E27\u0E2Cr;\uC000\u{1D4AA}ash\u803B\xD8\u40D8i\u016C\u0E37\u0E3Cde\u803B\xD5\u40D5es;\u6A37ml\u803B\xD6\u40D6er\u0100BP\u0E4B\u0E60\u0100ar\u0E50\u0E53r;\u603Eac\u0100ek\u0E5A\u0E5C;\u63DEet;\u63B4arenthesis;\u63DC\u0480acfhilors\u0E7F\u0E87\u0E8A\u0E8F\u0E92\u0E94\u0E9D\u0EB0\u0EFCrtialD;\u6202y;\u441Fr;\uC000\u{1D513}i;\u43A6;\u43A0usMinus;\u40B1\u0100ip\u0EA2\u0EADncareplan\xE5\u069Df;\u6119\u0200;eio\u0EB9\u0EBA\u0EE0\u0EE4\u6ABBcedes\u0200;EST\u0EC8\u0EC9\u0ECF\u0EDA\u627Aqual;\u6AAFlantEqual;\u627Cilde;\u627Eme;\u6033\u0100dp\u0EE9\u0EEEuct;\u620Fortion\u0100;a\u0225\u0EF9l;\u621D\u0100ci\u0F01\u0F06r;\uC000\u{1D4AB};\u43A8\u0200Ufos\u0F11\u0F16\u0F1B\u0F1FOT\u803B"\u4022r;\uC000\u{1D514}pf;\u611Acr;\uC000\u{1D4AC}\u0600BEacefhiorsu\u0F3E\u0F43\u0F47\u0F60\u0F73\u0FA7\u0FAA\u0FAD\u1096\u10A9\u10B4\u10BEarr;\u6910G\u803B\xAE\u40AE\u0180cnr\u0F4E\u0F53\u0F56ute;\u4154g;\u67EBr\u0100;t\u0F5C\u0F5D\u61A0l;\u6916\u0180aey\u0F67\u0F6C\u0F71ron;\u4158dil;\u4156;\u4420\u0100;v\u0F78\u0F79\u611Cerse\u0100EU\u0F82\u0F99\u0100lq\u0F87\u0F8Eement;\u620Builibrium;\u61CBpEquilibrium;\u696Fr\xBB\u0F79o;\u43A1ght\u0400ACDFTUVa\u0FC1\u0FEB\u0FF3\u1022\u1028\u105B\u1087\u03D8\u0100nr\u0FC6\u0FD2gleBracket;\u67E9row\u0180;BL\u0FDC\u0FDD\u0FE1\u6192ar;\u61E5eftArrow;\u61C4eiling;\u6309o\u01F5\u0FF9\0\u1005bleBracket;\u67E7n\u01D4\u100A\0\u1014eeVector;\u695Dector\u0100;B\u101D\u101E\u61C2ar;\u6955loor;\u630B\u0100er\u102D\u1043e\u0180;AV\u1035\u1036\u103C\u62A2rrow;\u61A6ector;\u695Biangle\u0180;BE\u1050\u1051\u1055\u62B3ar;\u69D0qual;\u62B5p\u0180DTV\u1063\u106E\u1078ownVector;\u694FeeVector;\u695Cector\u0100;B\u1082\u1083\u61BEar;\u6954ector\u0100;B\u1091\u1092\u61C0ar;\u6953\u0100pu\u109B\u109Ef;\u611DndImplies;\u6970ightarrow;\u61DB\u0100ch\u10B9\u10BCr;\u611B;\u61B1leDelayed;\u69F4\u0680HOacfhimoqstu\u10E4\u10F1\u10F7\u10FD\u1119\u111E\u1151\u1156\u1161\u1167\u11B5\u11BB\u11BF\u0100Cc\u10E9\u10EEHcy;\u4429y;\u4428FTcy;\u442Ccute;\u415A\u0280;aeiy\u1108\u1109\u110E\u1113\u1117\u6ABCron;\u4160dil;\u415Erc;\u415C;\u4421r;\uC000\u{1D516}ort\u0200DLRU\u112A\u1134\u113E\u1149ownArrow\xBB\u041EeftArrow\xBB\u089AightArrow\xBB\u0FDDpArrow;\u6191gma;\u43A3allCircle;\u6218pf;\uC000\u{1D54A}\u0272\u116D\0\0\u1170t;\u621Aare\u0200;ISU\u117B\u117C\u1189\u11AF\u65A1ntersection;\u6293u\u0100bp\u118F\u119Eset\u0100;E\u1197\u1198\u628Fqual;\u6291erset\u0100;E\u11A8\u11A9\u6290qual;\u6292nion;\u6294cr;\uC000\u{1D4AE}ar;\u62C6\u0200bcmp\u11C8\u11DB\u1209\u120B\u0100;s\u11CD\u11CE\u62D0et\u0100;E\u11CD\u11D5qual;\u6286\u0100ch\u11E0\u1205eeds\u0200;EST\u11ED\u11EE\u11F4\u11FF\u627Bqual;\u6AB0lantEqual;\u627Dilde;\u627FTh\xE1\u0F8C;\u6211\u0180;es\u1212\u1213\u1223\u62D1rset\u0100;E\u121C\u121D\u6283qual;\u6287et\xBB\u1213\u0580HRSacfhiors\u123E\u1244\u1249\u1255\u125E\u1271\u1276\u129F\u12C2\u12C8\u12D1ORN\u803B\xDE\u40DEADE;\u6122\u0100Hc\u124E\u1252cy;\u440By;\u4426\u0100bu\u125A\u125C;\u4009;\u43A4\u0180aey\u1265\u126A\u126Fron;\u4164dil;\u4162;\u4422r;\uC000\u{1D517}\u0100ei\u127B\u1289\u01F2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128E\u1298kSpace;\uC000\u205F\u200ASpace;\u6009lde\u0200;EFT\u12AB\u12AC\u12B2\u12BC\u623Cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uC000\u{1D54B}ipleDot;\u60DB\u0100ct\u12D6\u12DBr;\uC000\u{1D4AF}rok;\u4166\u0AE1\u12F7\u130E\u131A\u1326\0\u132C\u1331\0\0\0\0\0\u1338\u133D\u1377\u1385\0\u13FF\u1404\u140A\u1410\u0100cr\u12FB\u1301ute\u803B\xDA\u40DAr\u0100;o\u1307\u1308\u619Fcir;\u6949r\u01E3\u1313\0\u1316y;\u440Eve;\u416C\u0100iy\u131E\u1323rc\u803B\xDB\u40DB;\u4423blac;\u4170r;\uC000\u{1D518}rave\u803B\xD9\u40D9acr;\u416A\u0100di\u1341\u1369er\u0100BP\u1348\u135D\u0100ar\u134D\u1350r;\u405Fac\u0100ek\u1357\u1359;\u63DFet;\u63B5arenthesis;\u63DDon\u0100;P\u1370\u1371\u62C3lus;\u628E\u0100gp\u137B\u137Fon;\u4172f;\uC000\u{1D54C}\u0400ADETadps\u1395\u13AE\u13B8\u13C4\u03E8\u13D2\u13D7\u13F3rrow\u0180;BD\u1150\u13A0\u13A4ar;\u6912ownArrow;\u61C5ownArrow;\u6195quilibrium;\u696Eee\u0100;A\u13CB\u13CC\u62A5rrow;\u61A5own\xE1\u03F3er\u0100LR\u13DE\u13E8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13F9\u13FA\u43D2on;\u43A5ing;\u416Ecr;\uC000\u{1D4B0}ilde;\u4168ml\u803B\xDC\u40DC\u0480Dbcdefosv\u1427\u142C\u1430\u1433\u143E\u1485\u148A\u1490\u1496ash;\u62ABar;\u6AEBy;\u4412ash\u0100;l\u143B\u143C\u62A9;\u6AE6\u0100er\u1443\u1445;\u62C1\u0180bty\u144C\u1450\u147Aar;\u6016\u0100;i\u144F\u1455cal\u0200BLST\u1461\u1465\u146A\u1474ar;\u6223ine;\u407Ceparator;\u6758ilde;\u6240ThinSpace;\u600Ar;\uC000\u{1D519}pf;\uC000\u{1D54D}cr;\uC000\u{1D4B1}dash;\u62AA\u0280cefos\u14A7\u14AC\u14B1\u14B6\u14BCirc;\u4174dge;\u62C0r;\uC000\u{1D51A}pf;\uC000\u{1D54E}cr;\uC000\u{1D4B2}\u0200fios\u14CB\u14D0\u14D2\u14D8r;\uC000\u{1D51B};\u439Epf;\uC000\u{1D54F}cr;\uC000\u{1D4B3}\u0480AIUacfosu\u14F1\u14F5\u14F9\u14FD\u1504\u150F\u1514\u151A\u1520cy;\u442Fcy;\u4407cy;\u442Ecute\u803B\xDD\u40DD\u0100iy\u1509\u150Drc;\u4176;\u442Br;\uC000\u{1D51C}pf;\uC000\u{1D550}cr;\uC000\u{1D4B4}ml;\u4178\u0400Hacdefos\u1535\u1539\u153F\u154B\u154F\u155D\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417D;\u4417ot;\u417B\u01F2\u1554\0\u155BoWidt\xE8\u0AD9a;\u4396r;\u6128pf;\u6124cr;\uC000\u{1D4B5}\u0BE1\u1583\u158A\u1590\0\u15B0\u15B6\u15BF\0\0\0\0\u15C6\u15DB\u15EB\u165F\u166D\0\u1695\u169B\u16B2\u16B9\0\u16BEcute\u803B\xE1\u40E1reve;\u4103\u0300;Ediuy\u159C\u159D\u15A1\u15A3\u15A8\u15AD\u623E;\uC000\u223E\u0333;\u623Frc\u803B\xE2\u40E2te\u80BB\xB4\u0306;\u4430lig\u803B\xE6\u40E6\u0100;r\xB2\u15BA;\uC000\u{1D51E}rave\u803B\xE0\u40E0\u0100ep\u15CA\u15D6\u0100fp\u15CF\u15D4sym;\u6135\xE8\u15D3ha;\u43B1\u0100ap\u15DFc\u0100cl\u15E4\u15E7r;\u4101g;\u6A3F\u0264\u15F0\0\0\u160A\u0280;adsv\u15FA\u15FB\u15FF\u1601\u1607\u6227nd;\u6A55;\u6A5Clope;\u6A58;\u6A5A\u0380;elmrsz\u1618\u1619\u161B\u161E\u163F\u164F\u1659\u6220;\u69A4e\xBB\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163A\u163C\u163E;\u69A8;\u69A9;\u69AA;\u69AB;\u69AC;\u69AD;\u69AE;\u69AFt\u0100;v\u1645\u1646\u621Fb\u0100;d\u164C\u164D\u62BE;\u699D\u0100pt\u1654\u1657h;\u6222\xBB\xB9arr;\u637C\u0100gp\u1663\u1667on;\u4105f;\uC000\u{1D552}\u0380;Eaeiop\u12C1\u167B\u167D\u1682\u1684\u1687\u168A;\u6A70cir;\u6A6F;\u624Ad;\u624Bs;\u4027rox\u0100;e\u12C1\u1692\xF1\u1683ing\u803B\xE5\u40E5\u0180cty\u16A1\u16A6\u16A8r;\uC000\u{1D4B6};\u402Amp\u0100;e\u12C1\u16AF\xF1\u0288ilde\u803B\xE3\u40E3ml\u803B\xE4\u40E4\u0100ci\u16C2\u16C8onin\xF4\u0272nt;\u6A11\u0800Nabcdefiklnoprsu\u16ED\u16F1\u1730\u173C\u1743\u1748\u1778\u177D\u17E0\u17E6\u1839\u1850\u170D\u193D\u1948\u1970ot;\u6AED\u0100cr\u16F6\u171Ek\u0200ceps\u1700\u1705\u170D\u1713ong;\u624Cpsilon;\u43F6rime;\u6035im\u0100;e\u171A\u171B\u623Dq;\u62CD\u0176\u1722\u1726ee;\u62BDed\u0100;g\u172C\u172D\u6305e\xBB\u172Drk\u0100;t\u135C\u1737brk;\u63B6\u0100oy\u1701\u1741;\u4431quo;\u601E\u0280cmprt\u1753\u175B\u1761\u1764\u1768aus\u0100;e\u010A\u0109ptyv;\u69B0s\xE9\u170Cno\xF5\u0113\u0180ahw\u176F\u1771\u1773;\u43B2;\u6136een;\u626Cr;\uC000\u{1D51F}g\u0380costuvw\u178D\u179D\u17B3\u17C1\u17D5\u17DB\u17DE\u0180aiu\u1794\u1796\u179A\xF0\u0760rc;\u65EFp\xBB\u1371\u0180dpt\u17A4\u17A8\u17ADot;\u6A00lus;\u6A01imes;\u6A02\u0271\u17B9\0\0\u17BEcup;\u6A06ar;\u6605riangle\u0100du\u17CD\u17D2own;\u65BDp;\u65B3plus;\u6A04e\xE5\u1444\xE5\u14ADarow;\u690D\u0180ako\u17ED\u1826\u1835\u0100cn\u17F2\u1823k\u0180lst\u17FA\u05AB\u1802ozenge;\u69EBriangle\u0200;dlr\u1812\u1813\u1818\u181D\u65B4own;\u65BEeft;\u65C2ight;\u65B8k;\u6423\u01B1\u182B\0\u1833\u01B2\u182F\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183E\u184D\u0100;q\u1843\u1846\uC000=\u20E5uiv;\uC000\u2261\u20E5t;\u6310\u0200ptwx\u1859\u185E\u1867\u186Cf;\uC000\u{1D553}\u0100;t\u13CB\u1863om\xBB\u13CCtie;\u62C8\u0600DHUVbdhmptuv\u1885\u1896\u18AA\u18BB\u18D7\u18DB\u18EC\u18FF\u1905\u190A\u1910\u1921\u0200LRlr\u188E\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18A1\u18A2\u18A4\u18A6\u18A8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18B3\u18B5\u18B7\u18B9;\u655D;\u655A;\u655C;\u6559\u0380;HLRhlr\u18CA\u18CB\u18CD\u18CF\u18D1\u18D3\u18D5\u6551;\u656C;\u6563;\u6560;\u656B;\u6562;\u655Fox;\u69C9\u0200LRlr\u18E4\u18E6\u18E8\u18EA;\u6555;\u6552;\u6510;\u650C\u0280;DUdu\u06BD\u18F7\u18F9\u18FB\u18FD;\u6565;\u6568;\u652C;\u6534inus;\u629Flus;\u629Eimes;\u62A0\u0200LRlr\u1919\u191B\u191D\u191F;\u655B;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193B\u6502;\u656A;\u6561;\u655E;\u653C;\u6524;\u651C\u0100ev\u0123\u1942bar\u803B\xA6\u40A6\u0200ceio\u1951\u1956\u195A\u1960r;\uC000\u{1D4B7}mi;\u604Fm\u0100;e\u171A\u171Cl\u0180;bh\u1968\u1969\u196B\u405C;\u69C5sub;\u67C8\u016C\u1974\u197El\u0100;e\u1979\u197A\u6022t\xBB\u197Ap\u0180;Ee\u012F\u1985\u1987;\u6AAE\u0100;q\u06DC\u06DB\u0CE1\u19A7\0\u19E8\u1A11\u1A15\u1A32\0\u1A37\u1A50\0\0\u1AB4\0\0\u1AC1\0\0\u1B21\u1B2E\u1B4D\u1B52\0\u1BFD\0\u1C0C\u0180cpr\u19AD\u19B2\u19DDute;\u4107\u0300;abcds\u19BF\u19C0\u19C4\u19CA\u19D5\u19D9\u6229nd;\u6A44rcup;\u6A49\u0100au\u19CF\u19D2p;\u6A4Bp;\u6A47ot;\u6A40;\uC000\u2229\uFE00\u0100eo\u19E2\u19E5t;\u6041\xEE\u0693\u0200aeiu\u19F0\u19FB\u1A01\u1A05\u01F0\u19F5\0\u19F8s;\u6A4Don;\u410Ddil\u803B\xE7\u40E7rc;\u4109ps\u0100;s\u1A0C\u1A0D\u6A4Cm;\u6A50ot;\u410B\u0180dmn\u1A1B\u1A20\u1A26il\u80BB\xB8\u01ADptyv;\u69B2t\u8100\xA2;e\u1A2D\u1A2E\u40A2r\xE4\u01B2r;\uC000\u{1D520}\u0180cei\u1A3D\u1A40\u1A4Dy;\u4447ck\u0100;m\u1A47\u1A48\u6713ark\xBB\u1A48;\u43C7r\u0380;Ecefms\u1A5F\u1A60\u1A62\u1A6B\u1AA4\u1AAA\u1AAE\u65CB;\u69C3\u0180;el\u1A69\u1A6A\u1A6D\u42C6q;\u6257e\u0261\u1A74\0\0\u1A88rrow\u0100lr\u1A7C\u1A81eft;\u61BAight;\u61BB\u0280RSacd\u1A92\u1A94\u1A96\u1A9A\u1A9F\xBB\u0F47;\u64C8st;\u629Birc;\u629Aash;\u629Dnint;\u6A10id;\u6AEFcir;\u69C2ubs\u0100;u\u1ABB\u1ABC\u6663it\xBB\u1ABC\u02EC\u1AC7\u1AD4\u1AFA\0\u1B0Aon\u0100;e\u1ACD\u1ACE\u403A\u0100;q\xC7\xC6\u026D\u1AD9\0\0\u1AE2a\u0100;t\u1ADE\u1ADF\u402C;\u4040\u0180;fl\u1AE8\u1AE9\u1AEB\u6201\xEE\u1160e\u0100mx\u1AF1\u1AF6ent\xBB\u1AE9e\xF3\u024D\u01E7\u1AFE\0\u1B07\u0100;d\u12BB\u1B02ot;\u6A6Dn\xF4\u0246\u0180fry\u1B10\u1B14\u1B17;\uC000\u{1D554}o\xE4\u0254\u8100\xA9;s\u0155\u1B1Dr;\u6117\u0100ao\u1B25\u1B29rr;\u61B5ss;\u6717\u0100cu\u1B32\u1B37r;\uC000\u{1D4B8}\u0100bp\u1B3C\u1B44\u0100;e\u1B41\u1B42\u6ACF;\u6AD1\u0100;e\u1B49\u1B4A\u6AD0;\u6AD2dot;\u62EF\u0380delprvw\u1B60\u1B6C\u1B77\u1B82\u1BAC\u1BD4\u1BF9arr\u0100lr\u1B68\u1B6A;\u6938;\u6935\u0270\u1B72\0\0\u1B75r;\u62DEc;\u62DFarr\u0100;p\u1B7F\u1B80\u61B6;\u693D\u0300;bcdos\u1B8F\u1B90\u1B96\u1BA1\u1BA5\u1BA8\u622Arcap;\u6A48\u0100au\u1B9B\u1B9Ep;\u6A46p;\u6A4Aot;\u628Dr;\u6A45;\uC000\u222A\uFE00\u0200alrv\u1BB5\u1BBF\u1BDE\u1BE3rr\u0100;m\u1BBC\u1BBD\u61B7;\u693Cy\u0180evw\u1BC7\u1BD4\u1BD8q\u0270\u1BCE\0\0\u1BD2re\xE3\u1B73u\xE3\u1B75ee;\u62CEedge;\u62CFen\u803B\xA4\u40A4earrow\u0100lr\u1BEE\u1BF3eft\xBB\u1B80ight\xBB\u1BBDe\xE4\u1BDD\u0100ci\u1C01\u1C07onin\xF4\u01F7nt;\u6231lcty;\u632D\u0980AHabcdefhijlorstuwz\u1C38\u1C3B\u1C3F\u1C5D\u1C69\u1C75\u1C8A\u1C9E\u1CAC\u1CB7\u1CFB\u1CFF\u1D0D\u1D7B\u1D91\u1DAB\u1DBB\u1DC6\u1DCDr\xF2\u0381ar;\u6965\u0200glrs\u1C48\u1C4D\u1C52\u1C54ger;\u6020eth;\u6138\xF2\u1133h\u0100;v\u1C5A\u1C5B\u6010\xBB\u090A\u016B\u1C61\u1C67arow;\u690Fa\xE3\u0315\u0100ay\u1C6E\u1C73ron;\u410F;\u4434\u0180;ao\u0332\u1C7C\u1C84\u0100gr\u02BF\u1C81r;\u61CAtseq;\u6A77\u0180glm\u1C91\u1C94\u1C98\u803B\xB0\u40B0ta;\u43B4ptyv;\u69B1\u0100ir\u1CA3\u1CA8sht;\u697F;\uC000\u{1D521}ar\u0100lr\u1CB3\u1CB5\xBB\u08DC\xBB\u101E\u0280aegsv\u1CC2\u0378\u1CD6\u1CDC\u1CE0m\u0180;os\u0326\u1CCA\u1CD4nd\u0100;s\u0326\u1CD1uit;\u6666amma;\u43DDin;\u62F2\u0180;io\u1CE7\u1CE8\u1CF8\u40F7de\u8100\xF7;o\u1CE7\u1CF0ntimes;\u62C7n\xF8\u1CF7cy;\u4452c\u026F\u1D06\0\0\u1D0Arn;\u631Eop;\u630D\u0280lptuw\u1D18\u1D1D\u1D22\u1D49\u1D55lar;\u4024f;\uC000\u{1D555}\u0280;emps\u030B\u1D2D\u1D37\u1D3D\u1D42q\u0100;d\u0352\u1D33ot;\u6251inus;\u6238lus;\u6214quare;\u62A1blebarwedg\xE5\xFAn\u0180adh\u112E\u1D5D\u1D67ownarrow\xF3\u1C83arpoon\u0100lr\u1D72\u1D76ef\xF4\u1CB4igh\xF4\u1CB6\u0162\u1D7F\u1D85karo\xF7\u0F42\u026F\u1D8A\0\0\u1D8Ern;\u631Fop;\u630C\u0180cot\u1D98\u1DA3\u1DA6\u0100ry\u1D9D\u1DA1;\uC000\u{1D4B9};\u4455l;\u69F6rok;\u4111\u0100dr\u1DB0\u1DB4ot;\u62F1i\u0100;f\u1DBA\u1816\u65BF\u0100ah\u1DC0\u1DC3r\xF2\u0429a\xF2\u0FA6angle;\u69A6\u0100ci\u1DD2\u1DD5y;\u445Fgrarr;\u67FF\u0900Dacdefglmnopqrstux\u1E01\u1E09\u1E19\u1E38\u0578\u1E3C\u1E49\u1E61\u1E7E\u1EA5\u1EAF\u1EBD\u1EE1\u1F2A\u1F37\u1F44\u1F4E\u1F5A\u0100Do\u1E06\u1D34o\xF4\u1C89\u0100cs\u1E0E\u1E14ute\u803B\xE9\u40E9ter;\u6A6E\u0200aioy\u1E22\u1E27\u1E31\u1E36ron;\u411Br\u0100;c\u1E2D\u1E2E\u6256\u803B\xEA\u40EAlon;\u6255;\u444Dot;\u4117\u0100Dr\u1E41\u1E45ot;\u6252;\uC000\u{1D522}\u0180;rs\u1E50\u1E51\u1E57\u6A9Aave\u803B\xE8\u40E8\u0100;d\u1E5C\u1E5D\u6A96ot;\u6A98\u0200;ils\u1E6A\u1E6B\u1E72\u1E74\u6A99nters;\u63E7;\u6113\u0100;d\u1E79\u1E7A\u6A95ot;\u6A97\u0180aps\u1E85\u1E89\u1E97cr;\u4113ty\u0180;sv\u1E92\u1E93\u1E95\u6205et\xBB\u1E93p\u01001;\u1E9D\u1EA4\u0133\u1EA1\u1EA3;\u6004;\u6005\u6003\u0100gs\u1EAA\u1EAC;\u414Bp;\u6002\u0100gp\u1EB4\u1EB8on;\u4119f;\uC000\u{1D556}\u0180als\u1EC4\u1ECE\u1ED2r\u0100;s\u1ECA\u1ECB\u62D5l;\u69E3us;\u6A71i\u0180;lv\u1EDA\u1EDB\u1EDF\u43B5on\xBB\u1EDB;\u43F5\u0200csuv\u1EEA\u1EF3\u1F0B\u1F23\u0100io\u1EEF\u1E31rc\xBB\u1E2E\u0269\u1EF9\0\0\u1EFB\xED\u0548ant\u0100gl\u1F02\u1F06tr\xBB\u1E5Dess\xBB\u1E7A\u0180aei\u1F12\u1F16\u1F1Als;\u403Dst;\u625Fv\u0100;D\u0235\u1F20D;\u6A78parsl;\u69E5\u0100Da\u1F2F\u1F33ot;\u6253rr;\u6971\u0180cdi\u1F3E\u1F41\u1EF8r;\u612Fo\xF4\u0352\u0100ah\u1F49\u1F4B;\u43B7\u803B\xF0\u40F0\u0100mr\u1F53\u1F57l\u803B\xEB\u40EBo;\u60AC\u0180cip\u1F61\u1F64\u1F67l;\u4021s\xF4\u056E\u0100eo\u1F6C\u1F74ctatio\xEE\u0559nential\xE5\u0579\u09E1\u1F92\0\u1F9E\0\u1FA1\u1FA7\0\0\u1FC6\u1FCC\0\u1FD3\0\u1FE6\u1FEA\u2000\0\u2008\u205Allingdotse\xF1\u1E44y;\u4444male;\u6640\u0180ilr\u1FAD\u1FB3\u1FC1lig;\u8000\uFB03\u0269\u1FB9\0\0\u1FBDg;\u8000\uFB00ig;\u8000\uFB04;\uC000\u{1D523}lig;\u8000\uFB01lig;\uC000fj\u0180alt\u1FD9\u1FDC\u1FE1t;\u666Dig;\u8000\uFB02ns;\u65B1of;\u4192\u01F0\u1FEE\0\u1FF3f;\uC000\u{1D557}\u0100ak\u05BF\u1FF7\u0100;v\u1FFC\u1FFD\u62D4;\u6AD9artint;\u6A0D\u0100ao\u200C\u2055\u0100cs\u2011\u2052\u03B1\u201A\u2030\u2038\u2045\u2048\0\u2050\u03B2\u2022\u2025\u2027\u202A\u202C\0\u202E\u803B\xBD\u40BD;\u6153\u803B\xBC\u40BC;\u6155;\u6159;\u615B\u01B3\u2034\0\u2036;\u6154;\u6156\u02B4\u203E\u2041\0\0\u2043\u803B\xBE\u40BE;\u6157;\u615C5;\u6158\u01B6\u204C\0\u204E;\u615A;\u615D8;\u615El;\u6044wn;\u6322cr;\uC000\u{1D4BB}\u0880Eabcdefgijlnorstv\u2082\u2089\u209F\u20A5\u20B0\u20B4\u20F0\u20F5\u20FA\u20FF\u2103\u2112\u2138\u0317\u213E\u2152\u219E\u0100;l\u064D\u2087;\u6A8C\u0180cmp\u2090\u2095\u209Dute;\u41F5ma\u0100;d\u209C\u1CDA\u43B3;\u6A86reve;\u411F\u0100iy\u20AA\u20AErc;\u411D;\u4433ot;\u4121\u0200;lqs\u063E\u0642\u20BD\u20C9\u0180;qs\u063E\u064C\u20C4lan\xF4\u0665\u0200;cdl\u0665\u20D2\u20D5\u20E5c;\u6AA9ot\u0100;o\u20DC\u20DD\u6A80\u0100;l\u20E2\u20E3\u6A82;\u6A84\u0100;e\u20EA\u20ED\uC000\u22DB\uFE00s;\u6A94r;\uC000\u{1D524}\u0100;g\u0673\u061Bmel;\u6137cy;\u4453\u0200;Eaj\u065A\u210C\u210E\u2110;\u6A92;\u6AA5;\u6AA4\u0200Eaes\u211B\u211D\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6A8Arox\xBB\u2124\u0100;q\u212E\u212F\u6A88\u0100;q\u212E\u211Bim;\u62E7pf;\uC000\u{1D558}\u0100ci\u2143\u2146r;\u610Am\u0180;el\u066B\u214E\u2150;\u6A8E;\u6A90\u8300>;cdlqr\u05EE\u2160\u216A\u216E\u2173\u2179\u0100ci\u2165\u2167;\u6AA7r;\u6A7Aot;\u62D7Par;\u6995uest;\u6A7C\u0280adels\u2184\u216A\u2190\u0656\u219B\u01F0\u2189\0\u218Epro\xF8\u209Er;\u6978q\u0100lq\u063F\u2196les\xF3\u2088i\xED\u066B\u0100en\u21A3\u21ADrtneqq;\uC000\u2269\uFE00\xC5\u21AA\u0500Aabcefkosy\u21C4\u21C7\u21F1\u21F5\u21FA\u2218\u221D\u222F\u2268\u227Dr\xF2\u03A0\u0200ilmr\u21D0\u21D4\u21D7\u21DBrs\xF0\u1484f\xBB\u2024il\xF4\u06A9\u0100dr\u21E0\u21E4cy;\u444A\u0180;cw\u08F4\u21EB\u21EFir;\u6948;\u61ADar;\u610Firc;\u4125\u0180alr\u2201\u220E\u2213rts\u0100;u\u2209\u220A\u6665it\xBB\u220Alip;\u6026con;\u62B9r;\uC000\u{1D525}s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223A\u223E\u2243\u225E\u2263rr;\u61FFtht;\u623Bk\u0100lr\u2249\u2253eftarrow;\u61A9ightarrow;\u61AAf;\uC000\u{1D559}bar;\u6015\u0180clt\u226F\u2274\u2278r;\uC000\u{1D4BD}as\xE8\u21F4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xBB\u1C5B\u0AE1\u22A3\0\u22AA\0\u22B8\u22C5\u22CE\0\u22D5\u22F3\0\0\u22F8\u2322\u2367\u2362\u237F\0\u2386\u23AA\u23B4cute\u803B\xED\u40ED\u0180;iy\u0771\u22B0\u22B5rc\u803B\xEE\u40EE;\u4438\u0100cx\u22BC\u22BFy;\u4435cl\u803B\xA1\u40A1\u0100fr\u039F\u22C9;\uC000\u{1D526}rave\u803B\xEC\u40EC\u0200;ino\u073E\u22DD\u22E9\u22EE\u0100in\u22E2\u22E6nt;\u6A0Ct;\u622Dfin;\u69DCta;\u6129lig;\u4133\u0180aop\u22FE\u231A\u231D\u0180cgt\u2305\u2308\u2317r;\u412B\u0180elp\u071F\u230F\u2313in\xE5\u078Ear\xF4\u0720h;\u4131f;\u62B7ed;\u41B5\u0280;cfot\u04F4\u232C\u2331\u233D\u2341are;\u6105in\u0100;t\u2338\u2339\u621Eie;\u69DDdo\xF4\u2319\u0280;celp\u0757\u234C\u2350\u235B\u2361al;\u62BA\u0100gr\u2355\u2359er\xF3\u1563\xE3\u234Darhk;\u6A17rod;\u6A3C\u0200cgpt\u236F\u2372\u2376\u237By;\u4451on;\u412Ff;\uC000\u{1D55A}a;\u43B9uest\u803B\xBF\u40BF\u0100ci\u238A\u238Fr;\uC000\u{1D4BE}n\u0280;Edsv\u04F4\u239B\u239D\u23A1\u04F3;\u62F9ot;\u62F5\u0100;v\u23A6\u23A7\u62F4;\u62F3\u0100;i\u0777\u23AElde;\u4129\u01EB\u23B8\0\u23BCcy;\u4456l\u803B\xEF\u40EF\u0300cfmosu\u23CC\u23D7\u23DC\u23E1\u23E7\u23F5\u0100iy\u23D1\u23D5rc;\u4135;\u4439r;\uC000\u{1D527}ath;\u4237pf;\uC000\u{1D55B}\u01E3\u23EC\0\u23F1r;\uC000\u{1D4BF}rcy;\u4458kcy;\u4454\u0400acfghjos\u240B\u2416\u2422\u2427\u242D\u2431\u2435\u243Bppa\u0100;v\u2413\u2414\u43BA;\u43F0\u0100ey\u241B\u2420dil;\u4137;\u443Ar;\uC000\u{1D528}reen;\u4138cy;\u4445cy;\u445Cpf;\uC000\u{1D55C}cr;\uC000\u{1D4C0}\u0B80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248D\u2491\u250E\u253D\u255A\u2580\u264E\u265E\u2665\u2679\u267D\u269A\u26B2\u26D8\u275D\u2768\u278B\u27C0\u2801\u2812\u0180art\u2477\u247A\u247Cr\xF2\u09C6\xF2\u0395ail;\u691Barr;\u690E\u0100;g\u0994\u248B;\u6A8Bar;\u6962\u0963\u24A5\0\u24AA\0\u24B1\0\0\0\0\0\u24B5\u24BA\0\u24C6\u24C8\u24CD\0\u24F9ute;\u413Amptyv;\u69B4ra\xEE\u084Cbda;\u43BBg\u0180;dl\u088E\u24C1\u24C3;\u6991\xE5\u088E;\u6A85uo\u803B\xAB\u40ABr\u0400;bfhlpst\u0899\u24DE\u24E6\u24E9\u24EB\u24EE\u24F1\u24F5\u0100;f\u089D\u24E3s;\u691Fs;\u691D\xEB\u2252p;\u61ABl;\u6939im;\u6973l;\u61A2\u0180;ae\u24FF\u2500\u2504\u6AABil;\u6919\u0100;s\u2509\u250A\u6AAD;\uC000\u2AAD\uFE00\u0180abr\u2515\u2519\u251Drr;\u690Crk;\u6772\u0100ak\u2522\u252Cc\u0100ek\u2528\u252A;\u407B;\u405B\u0100es\u2531\u2533;\u698Bl\u0100du\u2539\u253B;\u698F;\u698D\u0200aeuy\u2546\u254B\u2556\u2558ron;\u413E\u0100di\u2550\u2554il;\u413C\xEC\u08B0\xE2\u2529;\u443B\u0200cqrs\u2563\u2566\u256D\u257Da;\u6936uo\u0100;r\u0E19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694Bh;\u61B2\u0280;fgqs\u258B\u258C\u0989\u25F3\u25FF\u6264t\u0280ahlrt\u2598\u25A4\u25B7\u25C2\u25E8rrow\u0100;t\u0899\u25A1a\xE9\u24F6arpoon\u0100du\u25AF\u25B4own\xBB\u045Ap\xBB\u0966eftarrows;\u61C7ight\u0180ahs\u25CD\u25D6\u25DErrow\u0100;s\u08F4\u08A7arpoon\xF3\u0F98quigarro\xF7\u21F0hreetimes;\u62CB\u0180;qs\u258B\u0993\u25FAlan\xF4\u09AC\u0280;cdgs\u09AC\u260A\u260D\u261D\u2628c;\u6AA8ot\u0100;o\u2614\u2615\u6A7F\u0100;r\u261A\u261B\u6A81;\u6A83\u0100;e\u2622\u2625\uC000\u22DA\uFE00s;\u6A93\u0280adegs\u2633\u2639\u263D\u2649\u264Bppro\xF8\u24C6ot;\u62D6q\u0100gq\u2643\u2645\xF4\u0989gt\xF2\u248C\xF4\u099Bi\xED\u09B2\u0180ilr\u2655\u08E1\u265Asht;\u697C;\uC000\u{1D529}\u0100;E\u099C\u2663;\u6A91\u0161\u2669\u2676r\u0100du\u25B2\u266E\u0100;l\u0965\u2673;\u696Alk;\u6584cy;\u4459\u0280;acht\u0A48\u2688\u268B\u2691\u2696r\xF2\u25C1orne\xF2\u1D08ard;\u696Bri;\u65FA\u0100io\u269F\u26A4dot;\u4140ust\u0100;a\u26AC\u26AD\u63B0che\xBB\u26AD\u0200Eaes\u26BB\u26BD\u26C9\u26D4;\u6268p\u0100;p\u26C3\u26C4\u6A89rox\xBB\u26C4\u0100;q\u26CE\u26CF\u6A87\u0100;q\u26CE\u26BBim;\u62E6\u0400abnoptwz\u26E9\u26F4\u26F7\u271A\u272F\u2741\u2747\u2750\u0100nr\u26EE\u26F1g;\u67ECr;\u61FDr\xEB\u08C1g\u0180lmr\u26FF\u270D\u2714eft\u0100ar\u09E6\u2707ight\xE1\u09F2apsto;\u67FCight\xE1\u09FDparrow\u0100lr\u2725\u2729ef\xF4\u24EDight;\u61AC\u0180afl\u2736\u2739\u273Dr;\u6985;\uC000\u{1D55D}us;\u6A2Dimes;\u6A34\u0161\u274B\u274Fst;\u6217\xE1\u134E\u0180;ef\u2757\u2758\u1800\u65CAnge\xBB\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277C\u2785\u2787r\xF2\u08A8orne\xF2\u1D8Car\u0100;d\u0F98\u2783;\u696D;\u600Eri;\u62BF\u0300achiqt\u2798\u279D\u0A40\u27A2\u27AE\u27BBquo;\u6039r;\uC000\u{1D4C1}m\u0180;eg\u09B2\u27AA\u27AC;\u6A8D;\u6A8F\u0100bu\u252A\u27B3o\u0100;r\u0E1F\u27B9;\u601Arok;\u4142\u8400<;cdhilqr\u082B\u27D2\u2639\u27DC\u27E0\u27E5\u27EA\u27F0\u0100ci\u27D7\u27D9;\u6AA6r;\u6A79re\xE5\u25F2mes;\u62C9arr;\u6976uest;\u6A7B\u0100Pi\u27F5\u27F9ar;\u6996\u0180;ef\u2800\u092D\u181B\u65C3r\u0100du\u2807\u280Dshar;\u694Ahar;\u6966\u0100en\u2817\u2821rtneqq;\uC000\u2268\uFE00\xC5\u281E\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288E\u2893\u28A0\u28A5\u28A8\u28DA\u28E2\u28E4\u0A83\u28F3\u2902Dot;\u623A\u0200clpr\u284E\u2852\u2863\u287Dr\u803B\xAF\u40AF\u0100et\u2857\u2859;\u6642\u0100;e\u285E\u285F\u6720se\xBB\u285F\u0100;s\u103B\u2868to\u0200;dlu\u103B\u2873\u2877\u287Bow\xEE\u048Cef\xF4\u090F\xF0\u13D1ker;\u65AE\u0100oy\u2887\u288Cmma;\u6A29;\u443Cash;\u6014asuredangle\xBB\u1626r;\uC000\u{1D52A}o;\u6127\u0180cdn\u28AF\u28B4\u28C9ro\u803B\xB5\u40B5\u0200;acd\u1464\u28BD\u28C0\u28C4s\xF4\u16A7ir;\u6AF0ot\u80BB\xB7\u01B5us\u0180;bd\u28D2\u1903\u28D3\u6212\u0100;u\u1D3C\u28D8;\u6A2A\u0163\u28DE\u28E1p;\u6ADB\xF2\u2212\xF0\u0A81\u0100dp\u28E9\u28EEels;\u62A7f;\uC000\u{1D55E}\u0100ct\u28F8\u28FDr;\uC000\u{1D4C2}pos\xBB\u159D\u0180;lm\u2909\u290A\u290D\u43BCtimap;\u62B8\u0C00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297E\u2989\u2998\u29DA\u29E9\u2A15\u2A1A\u2A58\u2A5D\u2A83\u2A95\u2AA4\u2AA8\u2B04\u2B07\u2B44\u2B7F\u2BAE\u2C34\u2C67\u2C7C\u2CE9\u0100gt\u2947\u294B;\uC000\u22D9\u0338\u0100;v\u2950\u0BCF\uC000\u226B\u20D2\u0180elt\u295A\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61CDightarrow;\u61CE;\uC000\u22D8\u0338\u0100;v\u297B\u0C47\uC000\u226A\u20D2ightarrow;\u61CF\u0100Dd\u298E\u2993ash;\u62AFash;\u62AE\u0280bcnpt\u29A3\u29A7\u29AC\u29B1\u29CCla\xBB\u02DEute;\u4144g;\uC000\u2220\u20D2\u0280;Eiop\u0D84\u29BC\u29C0\u29C5\u29C8;\uC000\u2A70\u0338d;\uC000\u224B\u0338s;\u4149ro\xF8\u0D84ur\u0100;a\u29D3\u29D4\u666El\u0100;s\u29D3\u0B38\u01F3\u29DF\0\u29E3p\u80BB\xA0\u0B37mp\u0100;e\u0BF9\u0C00\u0280aeouy\u29F4\u29FE\u2A03\u2A10\u2A13\u01F0\u29F9\0\u29FB;\u6A43on;\u4148dil;\u4146ng\u0100;d\u0D7E\u2A0Aot;\uC000\u2A6D\u0338p;\u6A42;\u443Dash;\u6013\u0380;Aadqsx\u0B92\u2A29\u2A2D\u2A3B\u2A41\u2A45\u2A50rr;\u61D7r\u0100hr\u2A33\u2A36k;\u6924\u0100;o\u13F2\u13F0ot;\uC000\u2250\u0338ui\xF6\u0B63\u0100ei\u2A4A\u2A4Ear;\u6928\xED\u0B98ist\u0100;s\u0BA0\u0B9Fr;\uC000\u{1D52B}\u0200Eest\u0BC5\u2A66\u2A79\u2A7C\u0180;qs\u0BBC\u2A6D\u0BE1\u0180;qs\u0BBC\u0BC5\u2A74lan\xF4\u0BE2i\xED\u0BEA\u0100;r\u0BB6\u2A81\xBB\u0BB7\u0180Aap\u2A8A\u2A8D\u2A91r\xF2\u2971rr;\u61AEar;\u6AF2\u0180;sv\u0F8D\u2A9C\u0F8C\u0100;d\u2AA1\u2AA2\u62FC;\u62FAcy;\u445A\u0380AEadest\u2AB7\u2ABA\u2ABE\u2AC2\u2AC5\u2AF6\u2AF9r\xF2\u2966;\uC000\u2266\u0338rr;\u619Ar;\u6025\u0200;fqs\u0C3B\u2ACE\u2AE3\u2AEFt\u0100ar\u2AD4\u2AD9rro\xF7\u2AC1ightarro\xF7\u2A90\u0180;qs\u0C3B\u2ABA\u2AEAlan\xF4\u0C55\u0100;s\u0C55\u2AF4\xBB\u0C36i\xED\u0C5D\u0100;r\u0C35\u2AFEi\u0100;e\u0C1A\u0C25i\xE4\u0D90\u0100pt\u2B0C\u2B11f;\uC000\u{1D55F}\u8180\xAC;in\u2B19\u2B1A\u2B36\u40ACn\u0200;Edv\u0B89\u2B24\u2B28\u2B2E;\uC000\u22F9\u0338ot;\uC000\u22F5\u0338\u01E1\u0B89\u2B33\u2B35;\u62F7;\u62F6i\u0100;v\u0CB8\u2B3C\u01E1\u0CB8\u2B41\u2B43;\u62FE;\u62FD\u0180aor\u2B4B\u2B63\u2B69r\u0200;ast\u0B7B\u2B55\u2B5A\u2B5Flle\xEC\u0B7Bl;\uC000\u2AFD\u20E5;\uC000\u2202\u0338lint;\u6A14\u0180;ce\u0C92\u2B70\u2B73u\xE5\u0CA5\u0100;c\u0C98\u2B78\u0100;e\u0C92\u2B7D\xF1\u0C98\u0200Aait\u2B88\u2B8B\u2B9D\u2BA7r\xF2\u2988rr\u0180;cw\u2B94\u2B95\u2B99\u619B;\uC000\u2933\u0338;\uC000\u219D\u0338ghtarrow\xBB\u2B95ri\u0100;e\u0CCB\u0CD6\u0380chimpqu\u2BBD\u2BCD\u2BD9\u2B04\u0B78\u2BE4\u2BEF\u0200;cer\u0D32\u2BC6\u0D37\u2BC9u\xE5\u0D45;\uC000\u{1D4C3}ort\u026D\u2B05\0\0\u2BD6ar\xE1\u2B56m\u0100;e\u0D6E\u2BDF\u0100;q\u0D74\u0D73su\u0100bp\u2BEB\u2BED\xE5\u0CF8\xE5\u0D0B\u0180bcp\u2BF6\u2C11\u2C19\u0200;Ees\u2BFF\u2C00\u0D22\u2C04\u6284;\uC000\u2AC5\u0338et\u0100;e\u0D1B\u2C0Bq\u0100;q\u0D23\u2C00c\u0100;e\u0D32\u2C17\xF1\u0D38\u0200;Ees\u2C22\u2C23\u0D5F\u2C27\u6285;\uC000\u2AC6\u0338et\u0100;e\u0D58\u2C2Eq\u0100;q\u0D60\u2C23\u0200gilr\u2C3D\u2C3F\u2C45\u2C47\xEC\u0BD7lde\u803B\xF1\u40F1\xE7\u0C43iangle\u0100lr\u2C52\u2C5Ceft\u0100;e\u0C1A\u2C5A\xF1\u0C26ight\u0100;e\u0CCB\u2C65\xF1\u0CD7\u0100;m\u2C6C\u2C6D\u43BD\u0180;es\u2C74\u2C75\u2C79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2C8F\u2C94\u2C99\u2C9E\u2CA3\u2CB0\u2CB6\u2CD3\u2CE3ash;\u62ADarr;\u6904p;\uC000\u224D\u20D2ash;\u62AC\u0100et\u2CA8\u2CAC;\uC000\u2265\u20D2;\uC000>\u20D2nfin;\u69DE\u0180Aet\u2CBD\u2CC1\u2CC5rr;\u6902;\uC000\u2264\u20D2\u0100;r\u2CCA\u2CCD\uC000<\u20D2ie;\uC000\u22B4\u20D2\u0100At\u2CD8\u2CDCrr;\u6903rie;\uC000\u22B5\u20D2im;\uC000\u223C\u20D2\u0180Aan\u2CF0\u2CF4\u2D02rr;\u61D6r\u0100hr\u2CFA\u2CFDk;\u6923\u0100;o\u13E7\u13E5ear;\u6927\u1253\u1A95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2D2D\0\u2D38\u2D48\u2D60\u2D65\u2D72\u2D84\u1B07\0\0\u2D8D\u2DAB\0\u2DC8\u2DCE\0\u2DDC\u2E19\u2E2B\u2E3E\u2E43\u0100cs\u2D31\u1A97ute\u803B\xF3\u40F3\u0100iy\u2D3C\u2D45r\u0100;c\u1A9E\u2D42\u803B\xF4\u40F4;\u443E\u0280abios\u1AA0\u2D52\u2D57\u01C8\u2D5Alac;\u4151v;\u6A38old;\u69BClig;\u4153\u0100cr\u2D69\u2D6Dir;\u69BF;\uC000\u{1D52C}\u036F\u2D79\0\0\u2D7C\0\u2D82n;\u42DBave\u803B\xF2\u40F2;\u69C1\u0100bm\u2D88\u0DF4ar;\u69B5\u0200acit\u2D95\u2D98\u2DA5\u2DA8r\xF2\u1A80\u0100ir\u2D9D\u2DA0r;\u69BEoss;\u69BBn\xE5\u0E52;\u69C0\u0180aei\u2DB1\u2DB5\u2DB9cr;\u414Dga;\u43C9\u0180cdn\u2DC0\u2DC5\u01CDron;\u43BF;\u69B6pf;\uC000\u{1D560}\u0180ael\u2DD4\u2DD7\u01D2r;\u69B7rp;\u69B9\u0380;adiosv\u2DEA\u2DEB\u2DEE\u2E08\u2E0D\u2E10\u2E16\u6228r\xF2\u1A86\u0200;efm\u2DF7\u2DF8\u2E02\u2E05\u6A5Dr\u0100;o\u2DFE\u2DFF\u6134f\xBB\u2DFF\u803B\xAA\u40AA\u803B\xBA\u40BAgof;\u62B6r;\u6A56lope;\u6A57;\u6A5B\u0180clo\u2E1F\u2E21\u2E27\xF2\u2E01ash\u803B\xF8\u40F8l;\u6298i\u016C\u2E2F\u2E34de\u803B\xF5\u40F5es\u0100;a\u01DB\u2E3As;\u6A36ml\u803B\xF6\u40F6bar;\u633D\u0AE1\u2E5E\0\u2E7D\0\u2E80\u2E9D\0\u2EA2\u2EB9\0\0\u2ECB\u0E9C\0\u2F13\0\0\u2F2B\u2FBC\0\u2FC8r\u0200;ast\u0403\u2E67\u2E72\u0E85\u8100\xB6;l\u2E6D\u2E6E\u40B6le\xEC\u0403\u0269\u2E78\0\0\u2E7Bm;\u6AF3;\u6AFDy;\u443Fr\u0280cimpt\u2E8B\u2E8F\u2E93\u1865\u2E97nt;\u4025od;\u402Eil;\u6030enk;\u6031r;\uC000\u{1D52D}\u0180imo\u2EA8\u2EB0\u2EB4\u0100;v\u2EAD\u2EAE\u43C6;\u43D5ma\xF4\u0A76ne;\u660E\u0180;tv\u2EBF\u2EC0\u2EC8\u43C0chfork\xBB\u1FFD;\u43D6\u0100au\u2ECF\u2EDFn\u0100ck\u2ED5\u2EDDk\u0100;h\u21F4\u2EDB;\u610E\xF6\u21F4s\u0480;abcdemst\u2EF3\u2EF4\u1908\u2EF9\u2EFD\u2F04\u2F06\u2F0A\u2F0E\u402Bcir;\u6A23ir;\u6A22\u0100ou\u1D40\u2F02;\u6A25;\u6A72n\u80BB\xB1\u0E9Dim;\u6A26wo;\u6A27\u0180ipu\u2F19\u2F20\u2F25ntint;\u6A15f;\uC000\u{1D561}nd\u803B\xA3\u40A3\u0500;Eaceinosu\u0EC8\u2F3F\u2F41\u2F44\u2F47\u2F81\u2F89\u2F92\u2F7E\u2FB6;\u6AB3p;\u6AB7u\xE5\u0ED9\u0100;c\u0ECE\u2F4C\u0300;acens\u0EC8\u2F59\u2F5F\u2F66\u2F68\u2F7Eppro\xF8\u2F43urlye\xF1\u0ED9\xF1\u0ECE\u0180aes\u2F6F\u2F76\u2F7Approx;\u6AB9qq;\u6AB5im;\u62E8i\xED\u0EDFme\u0100;s\u2F88\u0EAE\u6032\u0180Eas\u2F78\u2F90\u2F7A\xF0\u2F75\u0180dfp\u0EEC\u2F99\u2FAF\u0180als\u2FA0\u2FA5\u2FAAlar;\u632Eine;\u6312urf;\u6313\u0100;t\u0EFB\u2FB4\xEF\u0EFBrel;\u62B0\u0100ci\u2FC0\u2FC5r;\uC000\u{1D4C5};\u43C8ncsp;\u6008\u0300fiopsu\u2FDA\u22E2\u2FDF\u2FE5\u2FEB\u2FF1r;\uC000\u{1D52E}pf;\uC000\u{1D562}rime;\u6057cr;\uC000\u{1D4C6}\u0180aeo\u2FF8\u3009\u3013t\u0100ei\u2FFE\u3005rnion\xF3\u06B0nt;\u6A16st\u0100;e\u3010\u3011\u403F\xF1\u1F19\xF4\u0F14\u0A80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30E0\u310E\u312B\u3147\u3162\u3172\u318E\u3206\u3215\u3224\u3229\u3258\u326E\u3272\u3290\u32B0\u32B7\u0180art\u3047\u304A\u304Cr\xF2\u10B3\xF2\u03DDail;\u691Car\xF2\u1C65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307F\u308F\u3094\u30CC\u0100eu\u306D\u3071;\uC000\u223D\u0331te;\u4155i\xE3\u116Emptyv;\u69B3g\u0200;del\u0FD1\u3089\u308B\u308D;\u6992;\u69A5\xE5\u0FD1uo\u803B\xBB\u40BBr\u0580;abcfhlpstw\u0FDC\u30AC\u30AF\u30B7\u30B9\u30BC\u30BE\u30C0\u30C3\u30C7\u30CAp;\u6975\u0100;f\u0FE0\u30B4s;\u6920;\u6933s;\u691E\xEB\u225D\xF0\u272El;\u6945im;\u6974l;\u61A3;\u619D\u0100ai\u30D1\u30D5il;\u691Ao\u0100;n\u30DB\u30DC\u6236al\xF3\u0F1E\u0180abr\u30E7\u30EA\u30EEr\xF2\u17E5rk;\u6773\u0100ak\u30F3\u30FDc\u0100ek\u30F9\u30FB;\u407D;\u405D\u0100es\u3102\u3104;\u698Cl\u0100du\u310A\u310C;\u698E;\u6990\u0200aeuy\u3117\u311C\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xEC\u0FF2\xE2\u30FA;\u4440\u0200clqs\u3134\u3137\u313D\u3144a;\u6937dhar;\u6969uo\u0100;r\u020E\u020Dh;\u61B3\u0180acg\u314E\u315F\u0F44l\u0200;ips\u0F78\u3158\u315B\u109Cn\xE5\u10BBar\xF4\u0FA9t;\u65AD\u0180ilr\u3169\u1023\u316Esht;\u697D;\uC000\u{1D52F}\u0100ao\u3177\u3186r\u0100du\u317D\u317F\xBB\u047B\u0100;l\u1091\u3184;\u696C\u0100;v\u318B\u318C\u43C1;\u43F1\u0180gns\u3195\u31F9\u31FCht\u0300ahlrst\u31A4\u31B0\u31C2\u31D8\u31E4\u31EErrow\u0100;t\u0FDC\u31ADa\xE9\u30C8arpoon\u0100du\u31BB\u31BFow\xEE\u317Ep\xBB\u1092eft\u0100ah\u31CA\u31D0rrow\xF3\u0FEAarpoon\xF3\u0551ightarrows;\u61C9quigarro\xF7\u30CBhreetimes;\u62CCg;\u42DAingdotse\xF1\u1F32\u0180ahm\u320D\u3210\u3213r\xF2\u0FEAa\xF2\u0551;\u600Foust\u0100;a\u321E\u321F\u63B1che\xBB\u321Fmid;\u6AEE\u0200abpt\u3232\u323D\u3240\u3252\u0100nr\u3237\u323Ag;\u67EDr;\u61FEr\xEB\u1003\u0180afl\u3247\u324A\u324Er;\u6986;\uC000\u{1D563}us;\u6A2Eimes;\u6A35\u0100ap\u325D\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6A12ar\xF2\u31E3\u0200achq\u327B\u3280\u10BC\u3285quo;\u603Ar;\uC000\u{1D4C7}\u0100bu\u30FB\u328Ao\u0100;r\u0214\u0213\u0180hir\u3297\u329B\u32A0re\xE5\u31F8mes;\u62CAi\u0200;efl\u32AA\u1059\u1821\u32AB\u65B9tri;\u69CEluhar;\u6968;\u611E\u0D61\u32D5\u32DB\u32DF\u332C\u3338\u3371\0\u337A\u33A4\0\0\u33EC\u33F0\0\u3428\u3448\u345A\u34AD\u34B1\u34CA\u34F1\0\u3616\0\0\u3633cute;\u415Bqu\xEF\u27BA\u0500;Eaceinpsy\u11ED\u32F3\u32F5\u32FF\u3302\u330B\u330F\u331F\u3326\u3329;\u6AB4\u01F0\u32FA\0\u32FC;\u6AB8on;\u4161u\xE5\u11FE\u0100;d\u11F3\u3307il;\u415Frc;\u415D\u0180Eas\u3316\u3318\u331B;\u6AB6p;\u6ABAim;\u62E9olint;\u6A13i\xED\u1204;\u4441ot\u0180;be\u3334\u1D47\u3335\u62C5;\u6A66\u0380Aacmstx\u3346\u334A\u3357\u335B\u335E\u3363\u336Drr;\u61D8r\u0100hr\u3350\u3352\xEB\u2228\u0100;o\u0A36\u0A34t\u803B\xA7\u40A7i;\u403Bwar;\u6929m\u0100in\u3369\xF0nu\xF3\xF1t;\u6736r\u0100;o\u3376\u2055\uC000\u{1D530}\u0200acoy\u3382\u3386\u3391\u33A0rp;\u666F\u0100hy\u338B\u338Fcy;\u4449;\u4448rt\u026D\u3399\0\0\u339Ci\xE4\u1464ara\xEC\u2E6F\u803B\xAD\u40AD\u0100gm\u33A8\u33B4ma\u0180;fv\u33B1\u33B2\u33B2\u43C3;\u43C2\u0400;deglnpr\u12AB\u33C5\u33C9\u33CE\u33D6\u33DE\u33E1\u33E6ot;\u6A6A\u0100;q\u12B1\u12B0\u0100;E\u33D3\u33D4\u6A9E;\u6AA0\u0100;E\u33DB\u33DC\u6A9D;\u6A9Fe;\u6246lus;\u6A24arr;\u6972ar\xF2\u113D\u0200aeit\u33F8\u3408\u340F\u3417\u0100ls\u33FD\u3404lsetm\xE9\u336Ahp;\u6A33parsl;\u69E4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341C\u341D\u6AAA\u0100;s\u3422\u3423\u6AAC;\uC000\u2AAC\uFE00\u0180flp\u342E\u3433\u3442tcy;\u444C\u0100;b\u3438\u3439\u402F\u0100;a\u343E\u343F\u69C4r;\u633Ff;\uC000\u{1D564}a\u0100dr\u344D\u0402es\u0100;u\u3454\u3455\u6660it\xBB\u3455\u0180csu\u3460\u3479\u349F\u0100au\u3465\u346Fp\u0100;s\u1188\u346B;\uC000\u2293\uFE00p\u0100;s\u11B4\u3475;\uC000\u2294\uFE00u\u0100bp\u347F\u348F\u0180;es\u1197\u119C\u3486et\u0100;e\u1197\u348D\xF1\u119D\u0180;es\u11A8\u11AD\u3496et\u0100;e\u11A8\u349D\xF1\u11AE\u0180;af\u117B\u34A6\u05B0r\u0165\u34AB\u05B1\xBB\u117Car\xF2\u1148\u0200cemt\u34B9\u34BE\u34C2\u34C5r;\uC000\u{1D4C8}tm\xEE\xF1i\xEC\u3415ar\xE6\u11BE\u0100ar\u34CE\u34D5r\u0100;f\u34D4\u17BF\u6606\u0100an\u34DA\u34EDight\u0100ep\u34E3\u34EApsilo\xEE\u1EE0h\xE9\u2EAFs\xBB\u2852\u0280bcmnp\u34FB\u355E\u1209\u358B\u358E\u0480;Edemnprs\u350E\u350F\u3511\u3515\u351E\u3523\u352C\u3531\u3536\u6282;\u6AC5ot;\u6ABD\u0100;d\u11DA\u351Aot;\u6AC3ult;\u6AC1\u0100Ee\u3528\u352A;\u6ACB;\u628Alus;\u6ABFarr;\u6979\u0180eiu\u353D\u3552\u3555t\u0180;en\u350E\u3545\u354Bq\u0100;q\u11DA\u350Feq\u0100;q\u352B\u3528m;\u6AC7\u0100bp\u355A\u355C;\u6AD5;\u6AD3c\u0300;acens\u11ED\u356C\u3572\u3579\u357B\u3326ppro\xF8\u32FAurlye\xF1\u11FE\xF1\u11F3\u0180aes\u3582\u3588\u331Bppro\xF8\u331Aq\xF1\u3317g;\u666A\u0680123;Edehlmnps\u35A9\u35AC\u35AF\u121C\u35B2\u35B4\u35C0\u35C9\u35D5\u35DA\u35DF\u35E8\u35ED\u803B\xB9\u40B9\u803B\xB2\u40B2\u803B\xB3\u40B3;\u6AC6\u0100os\u35B9\u35BCt;\u6ABEub;\u6AD8\u0100;d\u1222\u35C5ot;\u6AC4s\u0100ou\u35CF\u35D2l;\u67C9b;\u6AD7arr;\u697Bult;\u6AC2\u0100Ee\u35E4\u35E6;\u6ACC;\u628Blus;\u6AC0\u0180eiu\u35F4\u3609\u360Ct\u0180;en\u121C\u35FC\u3602q\u0100;q\u1222\u35B2eq\u0100;q\u35E7\u35E4m;\u6AC8\u0100bp\u3611\u3613;\u6AD4;\u6AD6\u0180Aan\u361C\u3620\u362Drr;\u61D9r\u0100hr\u3626\u3628\xEB\u222E\u0100;o\u0A2B\u0A29war;\u692Alig\u803B\xDF\u40DF\u0BE1\u3651\u365D\u3660\u12CE\u3673\u3679\0\u367E\u36C2\0\0\0\0\0\u36DB\u3703\0\u3709\u376C\0\0\0\u3787\u0272\u3656\0\0\u365Bget;\u6316;\u43C4r\xEB\u0E5F\u0180aey\u3666\u366B\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uC000\u{1D531}\u0200eiko\u3686\u369D\u36B5\u36BC\u01F2\u368B\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369B\u43B8ym;\u43D1\u0100cn\u36A2\u36B2k\u0100as\u36A8\u36AEppro\xF8\u12C1im\xBB\u12ACs\xF0\u129E\u0100as\u36BA\u36AE\xF0\u12C1rn\u803B\xFE\u40FE\u01EC\u031F\u36C6\u22E7es\u8180\xD7;bd\u36CF\u36D0\u36D8\u40D7\u0100;a\u190F\u36D5r;\u6A31;\u6A30\u0180eps\u36E1\u36E3\u3700\xE1\u2A4D\u0200;bcf\u0486\u36EC\u36F0\u36F4ot;\u6336ir;\u6AF1\u0100;o\u36F9\u36FC\uC000\u{1D565}rk;\u6ADA\xE1\u3362rime;\u6034\u0180aip\u370F\u3712\u3764d\xE5\u1248\u0380adempst\u3721\u374D\u3740\u3751\u3757\u375C\u375Fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65B5own\xBB\u1DBBeft\u0100;e\u2800\u373E\xF1\u092E;\u625Cight\u0100;e\u32AA\u374B\xF1\u105Aot;\u65ECinus;\u6A3Alus;\u6A39b;\u69CDime;\u6A3Bezium;\u63E2\u0180cht\u3772\u377D\u3781\u0100ry\u3777\u377B;\uC000\u{1D4C9};\u4446cy;\u445Brok;\u4167\u0100io\u378B\u378Ex\xF4\u1777head\u0100lr\u3797\u37A0eftarro\xF7\u084Fightarrow\xBB\u0F5D\u0900AHabcdfghlmoprstuw\u37D0\u37D3\u37D7\u37E4\u37F0\u37FC\u380E\u381C\u3823\u3834\u3851\u385D\u386B\u38A9\u38CC\u38D2\u38EA\u38F6r\xF2\u03EDar;\u6963\u0100cr\u37DC\u37E2ute\u803B\xFA\u40FA\xF2\u1150r\u01E3\u37EA\0\u37EDy;\u445Eve;\u416D\u0100iy\u37F5\u37FArc\u803B\xFB\u40FB;\u4443\u0180abh\u3803\u3806\u380Br\xF2\u13ADlac;\u4171a\xF2\u13C3\u0100ir\u3813\u3818sht;\u697E;\uC000\u{1D532}rave\u803B\xF9\u40F9\u0161\u3827\u3831r\u0100lr\u382C\u382E\xBB\u0957\xBB\u1083lk;\u6580\u0100ct\u3839\u384D\u026F\u383F\0\0\u384Arn\u0100;e\u3845\u3846\u631Cr\xBB\u3846op;\u630Fri;\u65F8\u0100al\u3856\u385Acr;\u416B\u80BB\xA8\u0349\u0100gp\u3862\u3866on;\u4173f;\uC000\u{1D566}\u0300adhlsu\u114B\u3878\u387D\u1372\u3891\u38A0own\xE1\u13B3arpoon\u0100lr\u3888\u388Cef\xF4\u382Digh\xF4\u382Fi\u0180;hl\u3899\u389A\u389C\u43C5\xBB\u13FAon\xBB\u389Aparrows;\u61C8\u0180cit\u38B0\u38C4\u38C8\u026F\u38B6\0\0\u38C1rn\u0100;e\u38BC\u38BD\u631Dr\xBB\u38BDop;\u630Eng;\u416Fri;\u65F9cr;\uC000\u{1D4CA}\u0180dir\u38D9\u38DD\u38E2ot;\u62F0lde;\u4169i\u0100;f\u3730\u38E8\xBB\u1813\u0100am\u38EF\u38F2r\xF2\u38A8l\u803B\xFC\u40FCangle;\u69A7\u0780ABDacdeflnoprsz\u391C\u391F\u3929\u392D\u39B5\u39B8\u39BD\u39DF\u39E4\u39E8\u39F3\u39F9\u39FD\u3A01\u3A20r\xF2\u03F7ar\u0100;v\u3926\u3927\u6AE8;\u6AE9as\xE8\u03E1\u0100nr\u3932\u3937grt;\u699C\u0380eknprst\u34E3\u3946\u394B\u3952\u395D\u3964\u3996app\xE1\u2415othin\xE7\u1E96\u0180hir\u34EB\u2EC8\u3959op\xF4\u2FB5\u0100;h\u13B7\u3962\xEF\u318D\u0100iu\u3969\u396Dgm\xE1\u33B3\u0100bp\u3972\u3984setneq\u0100;q\u397D\u3980\uC000\u228A\uFE00;\uC000\u2ACB\uFE00setneq\u0100;q\u398F\u3992\uC000\u228B\uFE00;\uC000\u2ACC\uFE00\u0100hr\u399B\u399Fet\xE1\u369Ciangle\u0100lr\u39AA\u39AFeft\xBB\u0925ight\xBB\u1051y;\u4432ash\xBB\u1036\u0180elr\u39C4\u39D2\u39D7\u0180;be\u2DEA\u39CB\u39CFar;\u62BBq;\u625Alip;\u62EE\u0100bt\u39DC\u1468a\xF2\u1469r;\uC000\u{1D533}tr\xE9\u39AEsu\u0100bp\u39EF\u39F1\xBB\u0D1C\xBB\u0D59pf;\uC000\u{1D567}ro\xF0\u0EFBtr\xE9\u39B4\u0100cu\u3A06\u3A0Br;\uC000\u{1D4CB}\u0100bp\u3A10\u3A18n\u0100Ee\u3980\u3A16\xBB\u397En\u0100Ee\u3992\u3A1E\xBB\u3990igzag;\u699A\u0380cefoprs\u3A36\u3A3B\u3A56\u3A5B\u3A54\u3A61\u3A6Airc;\u4175\u0100di\u3A40\u3A51\u0100bg\u3A45\u3A49ar;\u6A5Fe\u0100;q\u15FA\u3A4F;\u6259erp;\u6118r;\uC000\u{1D534}pf;\uC000\u{1D568}\u0100;e\u1479\u3A66at\xE8\u1479cr;\uC000\u{1D4CC}\u0AE3\u178E\u3A87\0\u3A8B\0\u3A90\u3A9B\0\0\u3A9D\u3AA8\u3AAB\u3AAF\0\0\u3AC3\u3ACE\0\u3AD8\u17DC\u17DFtr\xE9\u17D1r;\uC000\u{1D535}\u0100Aa\u3A94\u3A97r\xF2\u03C3r\xF2\u09F6;\u43BE\u0100Aa\u3AA1\u3AA4r\xF2\u03B8r\xF2\u09EBa\xF0\u2713is;\u62FB\u0180dpt\u17A4\u3AB5\u3ABE\u0100fl\u3ABA\u17A9;\uC000\u{1D569}im\xE5\u17B2\u0100Aa\u3AC7\u3ACAr\xF2\u03CEr\xF2\u0A01\u0100cq\u3AD2\u17B8r;\uC000\u{1D4CD}\u0100pt\u17D6\u3ADCr\xE9\u17D4\u0400acefiosu\u3AF0\u3AFD\u3B08\u3B0C\u3B11\u3B15\u3B1B\u3B21c\u0100uy\u3AF6\u3AFBte\u803B\xFD\u40FD;\u444F\u0100iy\u3B02\u3B06rc;\u4177;\u444Bn\u803B\xA5\u40A5r;\uC000\u{1D536}cy;\u4457pf;\uC000\u{1D56A}cr;\uC000\u{1D4CE}\u0100cm\u3B26\u3B29y;\u444El\u803B\xFF\u40FF\u0500acdefhiosw\u3B42\u3B48\u3B54\u3B58\u3B64\u3B69\u3B6D\u3B74\u3B7A\u3B80cute;\u417A\u0100ay\u3B4D\u3B52ron;\u417E;\u4437ot;\u417C\u0100et\u3B5D\u3B61tr\xE6\u155Fa;\u43B6r;\uC000\u{1D537}cy;\u4436grarr;\u61DDpf;\uC000\u{1D56B}cr;\uC000\u{1D4CF}\u0100jn\u3B85\u3B87;\u600Dj;\u600C'.split("").map((c) => c.charCodeAt(0))
);

// node_modules/entities/lib/esm/generated/decode-data-xml.js
var decode_data_xml_default = new Uint16Array(
  // prettier-ignore
  "\u0200aglq	\x1B\u026D\0\0p;\u4026os;\u4027t;\u403Et;\u403Cuot;\u4022".split("").map((c) => c.charCodeAt(0))
);

// node_modules/entities/lib/esm/decode_codepoint.js
var _a;
var decodeMap = /* @__PURE__ */ new Map([
  [0, 65533],
  // C1 Unicode control character reference replacements
  [128, 8364],
  [130, 8218],
  [131, 402],
  [132, 8222],
  [133, 8230],
  [134, 8224],
  [135, 8225],
  [136, 710],
  [137, 8240],
  [138, 352],
  [139, 8249],
  [140, 338],
  [142, 381],
  [145, 8216],
  [146, 8217],
  [147, 8220],
  [148, 8221],
  [149, 8226],
  [150, 8211],
  [151, 8212],
  [152, 732],
  [153, 8482],
  [154, 353],
  [155, 8250],
  [156, 339],
  [158, 382],
  [159, 376]
]);
var fromCodePoint = (
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
  (_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function(codePoint) {
    let output = "";
    if (codePoint > 65535) {
      codePoint -= 65536;
      output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
      codePoint = 56320 | codePoint & 1023;
    }
    output += String.fromCharCode(codePoint);
    return output;
  }
);
function replaceCodePoint(codePoint) {
  var _a5;
  if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
    return 65533;
  }
  return (_a5 = decodeMap.get(codePoint)) !== null && _a5 !== void 0 ? _a5 : codePoint;
}

// node_modules/entities/lib/esm/decode.js
var CharCodes;
(function(CharCodes5) {
  CharCodes5[CharCodes5["NUM"] = 35] = "NUM";
  CharCodes5[CharCodes5["SEMI"] = 59] = "SEMI";
  CharCodes5[CharCodes5["EQUALS"] = 61] = "EQUALS";
  CharCodes5[CharCodes5["ZERO"] = 48] = "ZERO";
  CharCodes5[CharCodes5["NINE"] = 57] = "NINE";
  CharCodes5[CharCodes5["LOWER_A"] = 97] = "LOWER_A";
  CharCodes5[CharCodes5["LOWER_F"] = 102] = "LOWER_F";
  CharCodes5[CharCodes5["LOWER_X"] = 120] = "LOWER_X";
  CharCodes5[CharCodes5["LOWER_Z"] = 122] = "LOWER_Z";
  CharCodes5[CharCodes5["UPPER_A"] = 65] = "UPPER_A";
  CharCodes5[CharCodes5["UPPER_F"] = 70] = "UPPER_F";
  CharCodes5[CharCodes5["UPPER_Z"] = 90] = "UPPER_Z";
})(CharCodes || (CharCodes = {}));
var TO_LOWER_BIT = 32;
var BinTrieFlags;
(function(BinTrieFlags4) {
  BinTrieFlags4[BinTrieFlags4["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
  BinTrieFlags4[BinTrieFlags4["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
  BinTrieFlags4[BinTrieFlags4["JUMP_TABLE"] = 127] = "JUMP_TABLE";
})(BinTrieFlags || (BinTrieFlags = {}));
function isNumber2(code) {
  return code >= CharCodes.ZERO && code <= CharCodes.NINE;
}
function isHexadecimalCharacter(code) {
  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;
}
function isAsciiAlphaNumeric(code) {
  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber2(code);
}
function isEntityInAttributeInvalidEnd(code) {
  return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
}
var EntityDecoderState;
(function(EntityDecoderState4) {
  EntityDecoderState4[EntityDecoderState4["EntityStart"] = 0] = "EntityStart";
  EntityDecoderState4[EntityDecoderState4["NumericStart"] = 1] = "NumericStart";
  EntityDecoderState4[EntityDecoderState4["NumericDecimal"] = 2] = "NumericDecimal";
  EntityDecoderState4[EntityDecoderState4["NumericHex"] = 3] = "NumericHex";
  EntityDecoderState4[EntityDecoderState4["NamedEntity"] = 4] = "NamedEntity";
})(EntityDecoderState || (EntityDecoderState = {}));
var DecodingMode;
(function(DecodingMode4) {
  DecodingMode4[DecodingMode4["Legacy"] = 0] = "Legacy";
  DecodingMode4[DecodingMode4["Strict"] = 1] = "Strict";
  DecodingMode4[DecodingMode4["Attribute"] = 2] = "Attribute";
})(DecodingMode || (DecodingMode = {}));
var EntityDecoder = class {
  constructor(decodeTree, emitCodePoint, errors) {
    this.decodeTree = decodeTree;
    this.emitCodePoint = emitCodePoint;
    this.errors = errors;
    this.state = EntityDecoderState.EntityStart;
    this.consumed = 1;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.decodeMode = DecodingMode.Strict;
  }
  /** Resets the instance to make it reusable. */
  startEntity(decodeMode) {
    this.decodeMode = decodeMode;
    this.state = EntityDecoderState.EntityStart;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.consumed = 1;
  }
  /**
   * Write an entity to the decoder. This can be called multiple times with partial entities.
   * If the entity is incomplete, the decoder will return -1.
   *
   * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
   * entity is incomplete, and resume when the next string is written.
   *
   * @param string The string containing the entity (or a continuation of the entity).
   * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  write(str, offset) {
    switch (this.state) {
      case EntityDecoderState.EntityStart: {
        if (str.charCodeAt(offset) === CharCodes.NUM) {
          this.state = EntityDecoderState.NumericStart;
          this.consumed += 1;
          return this.stateNumericStart(str, offset + 1);
        }
        this.state = EntityDecoderState.NamedEntity;
        return this.stateNamedEntity(str, offset);
      }
      case EntityDecoderState.NumericStart: {
        return this.stateNumericStart(str, offset);
      }
      case EntityDecoderState.NumericDecimal: {
        return this.stateNumericDecimal(str, offset);
      }
      case EntityDecoderState.NumericHex: {
        return this.stateNumericHex(str, offset);
      }
      case EntityDecoderState.NamedEntity: {
        return this.stateNamedEntity(str, offset);
      }
    }
  }
  /**
   * Switches between the numeric decimal and hexadecimal states.
   *
   * Equivalent to the `Numeric character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericStart(str, offset) {
    if (offset >= str.length) {
      return -1;
    }
    if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
      this.state = EntityDecoderState.NumericHex;
      this.consumed += 1;
      return this.stateNumericHex(str, offset + 1);
    }
    this.state = EntityDecoderState.NumericDecimal;
    return this.stateNumericDecimal(str, offset);
  }
  addToNumericResult(str, start, end2, base) {
    if (start !== end2) {
      const digitCount = end2 - start;
      this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);
      this.consumed += digitCount;
    }
  }
  /**
   * Parses a hexadecimal numeric entity.
   *
   * Equivalent to the `Hexademical character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericHex(str, offset) {
    const startIdx = offset;
    while (offset < str.length) {
      const char = str.charCodeAt(offset);
      if (isNumber2(char) || isHexadecimalCharacter(char)) {
        offset += 1;
      } else {
        this.addToNumericResult(str, startIdx, offset, 16);
        return this.emitNumericEntity(char, 3);
      }
    }
    this.addToNumericResult(str, startIdx, offset, 16);
    return -1;
  }
  /**
   * Parses a decimal numeric entity.
   *
   * Equivalent to the `Decimal character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericDecimal(str, offset) {
    const startIdx = offset;
    while (offset < str.length) {
      const char = str.charCodeAt(offset);
      if (isNumber2(char)) {
        offset += 1;
      } else {
        this.addToNumericResult(str, startIdx, offset, 10);
        return this.emitNumericEntity(char, 2);
      }
    }
    this.addToNumericResult(str, startIdx, offset, 10);
    return -1;
  }
  /**
   * Validate and emit a numeric entity.
   *
   * Implements the logic from the `Hexademical character reference start
   * state` and `Numeric character reference end state` in the HTML spec.
   *
   * @param lastCp The last code point of the entity. Used to see if the
   *               entity was terminated with a semicolon.
   * @param expectedLength The minimum number of characters that should be
   *                       consumed. Used to validate that at least one digit
   *                       was consumed.
   * @returns The number of characters that were consumed.
   */
  emitNumericEntity(lastCp, expectedLength) {
    var _a5;
    if (this.consumed <= expectedLength) {
      (_a5 = this.errors) === null || _a5 === void 0 ? void 0 : _a5.absenceOfDigitsInNumericCharacterReference(this.consumed);
      return 0;
    }
    if (lastCp === CharCodes.SEMI) {
      this.consumed += 1;
    } else if (this.decodeMode === DecodingMode.Strict) {
      return 0;
    }
    this.emitCodePoint(replaceCodePoint(this.result), this.consumed);
    if (this.errors) {
      if (lastCp !== CharCodes.SEMI) {
        this.errors.missingSemicolonAfterCharacterReference();
      }
      this.errors.validateNumericCharacterReference(this.result);
    }
    return this.consumed;
  }
  /**
   * Parses a named entity.
   *
   * Equivalent to the `Named character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNamedEntity(str, offset) {
    const { decodeTree } = this;
    let current = decodeTree[this.treeIndex];
    let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
    for (; offset < str.length; offset++, this.excess++) {
      const char = str.charCodeAt(offset);
      this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
      if (this.treeIndex < 0) {
        return this.result === 0 || // If we are parsing an attribute
        this.decodeMode === DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,
        (valueLength === 0 || // And there should be no invalid characters.
        isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
      }
      current = decodeTree[this.treeIndex];
      valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
      if (valueLength !== 0) {
        if (char === CharCodes.SEMI) {
          return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
        }
        if (this.decodeMode !== DecodingMode.Strict) {
          this.result = this.treeIndex;
          this.consumed += this.excess;
          this.excess = 0;
        }
      }
    }
    return -1;
  }
  /**
   * Emit a named entity that was not terminated with a semicolon.
   *
   * @returns The number of characters consumed.
   */
  emitNotTerminatedNamedEntity() {
    var _a5;
    const { result, decodeTree } = this;
    const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
    this.emitNamedEntityData(result, valueLength, this.consumed);
    (_a5 = this.errors) === null || _a5 === void 0 ? void 0 : _a5.missingSemicolonAfterCharacterReference();
    return this.consumed;
  }
  /**
   * Emit a named entity.
   *
   * @param result The index of the entity in the decode tree.
   * @param valueLength The number of bytes in the entity.
   * @param consumed The number of characters consumed.
   *
   * @returns The number of characters consumed.
   */
  emitNamedEntityData(result, valueLength, consumed) {
    const { decodeTree } = this;
    this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
    if (valueLength === 3) {
      this.emitCodePoint(decodeTree[result + 2], consumed);
    }
    return consumed;
  }
  /**
   * Signal to the parser that the end of the input was reached.
   *
   * Remaining data will be emitted and relevant errors will be produced.
   *
   * @returns The number of characters consumed.
   */
  end() {
    var _a5;
    switch (this.state) {
      case EntityDecoderState.NamedEntity: {
        return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
      }
      case EntityDecoderState.NumericDecimal: {
        return this.emitNumericEntity(0, 2);
      }
      case EntityDecoderState.NumericHex: {
        return this.emitNumericEntity(0, 3);
      }
      case EntityDecoderState.NumericStart: {
        (_a5 = this.errors) === null || _a5 === void 0 ? void 0 : _a5.absenceOfDigitsInNumericCharacterReference(this.consumed);
        return 0;
      }
      case EntityDecoderState.EntityStart: {
        return 0;
      }
    }
  }
};
function getDecoder(decodeTree) {
  let ret = "";
  const decoder = new EntityDecoder(decodeTree, (str) => ret += fromCodePoint(str));
  return function decodeWithTrie(str, decodeMode) {
    let lastIndex = 0;
    let offset = 0;
    while ((offset = str.indexOf("&", offset)) >= 0) {
      ret += str.slice(lastIndex, offset);
      decoder.startEntity(decodeMode);
      const len = decoder.write(
        str,
        // Skip the "&"
        offset + 1
      );
      if (len < 0) {
        lastIndex = offset + decoder.end();
        break;
      }
      lastIndex = offset + len;
      offset = len === 0 ? lastIndex + 1 : lastIndex;
    }
    const result = ret + str.slice(lastIndex);
    ret = "";
    return result;
  };
}
function determineBranch(decodeTree, current, nodeIdx, char) {
  const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
  const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
  if (branchCount === 0) {
    return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
  }
  if (jumpOffset) {
    const value = char - jumpOffset;
    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
  }
  let lo = nodeIdx;
  let hi = lo + branchCount - 1;
  while (lo <= hi) {
    const mid = lo + hi >>> 1;
    const midVal = decodeTree[mid];
    if (midVal < char) {
      lo = mid + 1;
    } else if (midVal > char) {
      hi = mid - 1;
    } else {
      return decodeTree[mid + branchCount];
    }
  }
  return -1;
}
var htmlDecoder = getDecoder(decode_data_html_default);
var xmlDecoder = getDecoder(decode_data_xml_default);

// node_modules/entities/lib/esm/generated/encode-html.js
function restoreDiff(arr) {
  for (let i = 1; i < arr.length; i++) {
    arr[i][0] += arr[i - 1][0] + 1;
  }
  return arr;
}
var encode_html_default = new Map(/* @__PURE__ */ restoreDiff([[9, "&Tab;"], [0, "&NewLine;"], [22, "&excl;"], [0, "&quot;"], [0, "&num;"], [0, "&dollar;"], [0, "&percnt;"], [0, "&amp;"], [0, "&apos;"], [0, "&lpar;"], [0, "&rpar;"], [0, "&ast;"], [0, "&plus;"], [0, "&comma;"], [1, "&period;"], [0, "&sol;"], [10, "&colon;"], [0, "&semi;"], [0, { v: "&lt;", n: 8402, o: "&nvlt;" }], [0, { v: "&equals;", n: 8421, o: "&bne;" }], [0, { v: "&gt;", n: 8402, o: "&nvgt;" }], [0, "&quest;"], [0, "&commat;"], [26, "&lbrack;"], [0, "&bsol;"], [0, "&rbrack;"], [0, "&Hat;"], [0, "&lowbar;"], [0, "&DiacriticalGrave;"], [5, { n: 106, o: "&fjlig;" }], [20, "&lbrace;"], [0, "&verbar;"], [0, "&rbrace;"], [34, "&nbsp;"], [0, "&iexcl;"], [0, "&cent;"], [0, "&pound;"], [0, "&curren;"], [0, "&yen;"], [0, "&brvbar;"], [0, "&sect;"], [0, "&die;"], [0, "&copy;"], [0, "&ordf;"], [0, "&laquo;"], [0, "&not;"], [0, "&shy;"], [0, "&circledR;"], [0, "&macr;"], [0, "&deg;"], [0, "&PlusMinus;"], [0, "&sup2;"], [0, "&sup3;"], [0, "&acute;"], [0, "&micro;"], [0, "&para;"], [0, "&centerdot;"], [0, "&cedil;"], [0, "&sup1;"], [0, "&ordm;"], [0, "&raquo;"], [0, "&frac14;"], [0, "&frac12;"], [0, "&frac34;"], [0, "&iquest;"], [0, "&Agrave;"], [0, "&Aacute;"], [0, "&Acirc;"], [0, "&Atilde;"], [0, "&Auml;"], [0, "&angst;"], [0, "&AElig;"], [0, "&Ccedil;"], [0, "&Egrave;"], [0, "&Eacute;"], [0, "&Ecirc;"], [0, "&Euml;"], [0, "&Igrave;"], [0, "&Iacute;"], [0, "&Icirc;"], [0, "&Iuml;"], [0, "&ETH;"], [0, "&Ntilde;"], [0, "&Ograve;"], [0, "&Oacute;"], [0, "&Ocirc;"], [0, "&Otilde;"], [0, "&Ouml;"], [0, "&times;"], [0, "&Oslash;"], [0, "&Ugrave;"], [0, "&Uacute;"], [0, "&Ucirc;"], [0, "&Uuml;"], [0, "&Yacute;"], [0, "&THORN;"], [0, "&szlig;"], [0, "&agrave;"], [0, "&aacute;"], [0, "&acirc;"], [0, "&atilde;"], [0, "&auml;"], [0, "&aring;"], [0, "&aelig;"], [0, "&ccedil;"], [0, "&egrave;"], [0, "&eacute;"], [0, "&ecirc;"], [0, "&euml;"], [0, "&igrave;"], [0, "&iacute;"], [0, "&icirc;"], [0, "&iuml;"], [0, "&eth;"], [0, "&ntilde;"], [0, "&ograve;"], [0, "&oacute;"], [0, "&ocirc;"], [0, "&otilde;"], [0, "&ouml;"], [0, "&div;"], [0, "&oslash;"], [0, "&ugrave;"], [0, "&uacute;"], [0, "&ucirc;"], [0, "&uuml;"], [0, "&yacute;"], [0, "&thorn;"], [0, "&yuml;"], [0, "&Amacr;"], [0, "&amacr;"], [0, "&Abreve;"], [0, "&abreve;"], [0, "&Aogon;"], [0, "&aogon;"], [0, "&Cacute;"], [0, "&cacute;"], [0, "&Ccirc;"], [0, "&ccirc;"], [0, "&Cdot;"], [0, "&cdot;"], [0, "&Ccaron;"], [0, "&ccaron;"], [0, "&Dcaron;"], [0, "&dcaron;"], [0, "&Dstrok;"], [0, "&dstrok;"], [0, "&Emacr;"], [0, "&emacr;"], [2, "&Edot;"], [0, "&edot;"], [0, "&Eogon;"], [0, "&eogon;"], [0, "&Ecaron;"], [0, "&ecaron;"], [0, "&Gcirc;"], [0, "&gcirc;"], [0, "&Gbreve;"], [0, "&gbreve;"], [0, "&Gdot;"], [0, "&gdot;"], [0, "&Gcedil;"], [1, "&Hcirc;"], [0, "&hcirc;"], [0, "&Hstrok;"], [0, "&hstrok;"], [0, "&Itilde;"], [0, "&itilde;"], [0, "&Imacr;"], [0, "&imacr;"], [2, "&Iogon;"], [0, "&iogon;"], [0, "&Idot;"], [0, "&imath;"], [0, "&IJlig;"], [0, "&ijlig;"], [0, "&Jcirc;"], [0, "&jcirc;"], [0, "&Kcedil;"], [0, "&kcedil;"], [0, "&kgreen;"], [0, "&Lacute;"], [0, "&lacute;"], [0, "&Lcedil;"], [0, "&lcedil;"], [0, "&Lcaron;"], [0, "&lcaron;"], [0, "&Lmidot;"], [0, "&lmidot;"], [0, "&Lstrok;"], [0, "&lstrok;"], [0, "&Nacute;"], [0, "&nacute;"], [0, "&Ncedil;"], [0, "&ncedil;"], [0, "&Ncaron;"], [0, "&ncaron;"], [0, "&napos;"], [0, "&ENG;"], [0, "&eng;"], [0, "&Omacr;"], [0, "&omacr;"], [2, "&Odblac;"], [0, "&odblac;"], [0, "&OElig;"], [0, "&oelig;"], [0, "&Racute;"], [0, "&racute;"], [0, "&Rcedil;"], [0, "&rcedil;"], [0, "&Rcaron;"], [0, "&rcaron;"], [0, "&Sacute;"], [0, "&sacute;"], [0, "&Scirc;"], [0, "&scirc;"], [0, "&Scedil;"], [0, "&scedil;"], [0, "&Scaron;"], [0, "&scaron;"], [0, "&Tcedil;"], [0, "&tcedil;"], [0, "&Tcaron;"], [0, "&tcaron;"], [0, "&Tstrok;"], [0, "&tstrok;"], [0, "&Utilde;"], [0, "&utilde;"], [0, "&Umacr;"], [0, "&umacr;"], [0, "&Ubreve;"], [0, "&ubreve;"], [0, "&Uring;"], [0, "&uring;"], [0, "&Udblac;"], [0, "&udblac;"], [0, "&Uogon;"], [0, "&uogon;"], [0, "&Wcirc;"], [0, "&wcirc;"], [0, "&Ycirc;"], [0, "&ycirc;"], [0, "&Yuml;"], [0, "&Zacute;"], [0, "&zacute;"], [0, "&Zdot;"], [0, "&zdot;"], [0, "&Zcaron;"], [0, "&zcaron;"], [19, "&fnof;"], [34, "&imped;"], [63, "&gacute;"], [65, "&jmath;"], [142, "&circ;"], [0, "&caron;"], [16, "&breve;"], [0, "&DiacriticalDot;"], [0, "&ring;"], [0, "&ogon;"], [0, "&DiacriticalTilde;"], [0, "&dblac;"], [51, "&DownBreve;"], [127, "&Alpha;"], [0, "&Beta;"], [0, "&Gamma;"], [0, "&Delta;"], [0, "&Epsilon;"], [0, "&Zeta;"], [0, "&Eta;"], [0, "&Theta;"], [0, "&Iota;"], [0, "&Kappa;"], [0, "&Lambda;"], [0, "&Mu;"], [0, "&Nu;"], [0, "&Xi;"], [0, "&Omicron;"], [0, "&Pi;"], [0, "&Rho;"], [1, "&Sigma;"], [0, "&Tau;"], [0, "&Upsilon;"], [0, "&Phi;"], [0, "&Chi;"], [0, "&Psi;"], [0, "&ohm;"], [7, "&alpha;"], [0, "&beta;"], [0, "&gamma;"], [0, "&delta;"], [0, "&epsi;"], [0, "&zeta;"], [0, "&eta;"], [0, "&theta;"], [0, "&iota;"], [0, "&kappa;"], [0, "&lambda;"], [0, "&mu;"], [0, "&nu;"], [0, "&xi;"], [0, "&omicron;"], [0, "&pi;"], [0, "&rho;"], [0, "&sigmaf;"], [0, "&sigma;"], [0, "&tau;"], [0, "&upsi;"], [0, "&phi;"], [0, "&chi;"], [0, "&psi;"], [0, "&omega;"], [7, "&thetasym;"], [0, "&Upsi;"], [2, "&phiv;"], [0, "&piv;"], [5, "&Gammad;"], [0, "&digamma;"], [18, "&kappav;"], [0, "&rhov;"], [3, "&epsiv;"], [0, "&backepsilon;"], [10, "&IOcy;"], [0, "&DJcy;"], [0, "&GJcy;"], [0, "&Jukcy;"], [0, "&DScy;"], [0, "&Iukcy;"], [0, "&YIcy;"], [0, "&Jsercy;"], [0, "&LJcy;"], [0, "&NJcy;"], [0, "&TSHcy;"], [0, "&KJcy;"], [1, "&Ubrcy;"], [0, "&DZcy;"], [0, "&Acy;"], [0, "&Bcy;"], [0, "&Vcy;"], [0, "&Gcy;"], [0, "&Dcy;"], [0, "&IEcy;"], [0, "&ZHcy;"], [0, "&Zcy;"], [0, "&Icy;"], [0, "&Jcy;"], [0, "&Kcy;"], [0, "&Lcy;"], [0, "&Mcy;"], [0, "&Ncy;"], [0, "&Ocy;"], [0, "&Pcy;"], [0, "&Rcy;"], [0, "&Scy;"], [0, "&Tcy;"], [0, "&Ucy;"], [0, "&Fcy;"], [0, "&KHcy;"], [0, "&TScy;"], [0, "&CHcy;"], [0, "&SHcy;"], [0, "&SHCHcy;"], [0, "&HARDcy;"], [0, "&Ycy;"], [0, "&SOFTcy;"], [0, "&Ecy;"], [0, "&YUcy;"], [0, "&YAcy;"], [0, "&acy;"], [0, "&bcy;"], [0, "&vcy;"], [0, "&gcy;"], [0, "&dcy;"], [0, "&iecy;"], [0, "&zhcy;"], [0, "&zcy;"], [0, "&icy;"], [0, "&jcy;"], [0, "&kcy;"], [0, "&lcy;"], [0, "&mcy;"], [0, "&ncy;"], [0, "&ocy;"], [0, "&pcy;"], [0, "&rcy;"], [0, "&scy;"], [0, "&tcy;"], [0, "&ucy;"], [0, "&fcy;"], [0, "&khcy;"], [0, "&tscy;"], [0, "&chcy;"], [0, "&shcy;"], [0, "&shchcy;"], [0, "&hardcy;"], [0, "&ycy;"], [0, "&softcy;"], [0, "&ecy;"], [0, "&yucy;"], [0, "&yacy;"], [1, "&iocy;"], [0, "&djcy;"], [0, "&gjcy;"], [0, "&jukcy;"], [0, "&dscy;"], [0, "&iukcy;"], [0, "&yicy;"], [0, "&jsercy;"], [0, "&ljcy;"], [0, "&njcy;"], [0, "&tshcy;"], [0, "&kjcy;"], [1, "&ubrcy;"], [0, "&dzcy;"], [7074, "&ensp;"], [0, "&emsp;"], [0, "&emsp13;"], [0, "&emsp14;"], [1, "&numsp;"], [0, "&puncsp;"], [0, "&ThinSpace;"], [0, "&hairsp;"], [0, "&NegativeMediumSpace;"], [0, "&zwnj;"], [0, "&zwj;"], [0, "&lrm;"], [0, "&rlm;"], [0, "&dash;"], [2, "&ndash;"], [0, "&mdash;"], [0, "&horbar;"], [0, "&Verbar;"], [1, "&lsquo;"], [0, "&CloseCurlyQuote;"], [0, "&lsquor;"], [1, "&ldquo;"], [0, "&CloseCurlyDoubleQuote;"], [0, "&bdquo;"], [1, "&dagger;"], [0, "&Dagger;"], [0, "&bull;"], [2, "&nldr;"], [0, "&hellip;"], [9, "&permil;"], [0, "&pertenk;"], [0, "&prime;"], [0, "&Prime;"], [0, "&tprime;"], [0, "&backprime;"], [3, "&lsaquo;"], [0, "&rsaquo;"], [3, "&oline;"], [2, "&caret;"], [1, "&hybull;"], [0, "&frasl;"], [10, "&bsemi;"], [7, "&qprime;"], [7, { v: "&MediumSpace;", n: 8202, o: "&ThickSpace;" }], [0, "&NoBreak;"], [0, "&af;"], [0, "&InvisibleTimes;"], [0, "&ic;"], [72, "&euro;"], [46, "&tdot;"], [0, "&DotDot;"], [37, "&complexes;"], [2, "&incare;"], [4, "&gscr;"], [0, "&hamilt;"], [0, "&Hfr;"], [0, "&Hopf;"], [0, "&planckh;"], [0, "&hbar;"], [0, "&imagline;"], [0, "&Ifr;"], [0, "&lagran;"], [0, "&ell;"], [1, "&naturals;"], [0, "&numero;"], [0, "&copysr;"], [0, "&weierp;"], [0, "&Popf;"], [0, "&Qopf;"], [0, "&realine;"], [0, "&real;"], [0, "&reals;"], [0, "&rx;"], [3, "&trade;"], [1, "&integers;"], [2, "&mho;"], [0, "&zeetrf;"], [0, "&iiota;"], [2, "&bernou;"], [0, "&Cayleys;"], [1, "&escr;"], [0, "&Escr;"], [0, "&Fouriertrf;"], [1, "&Mellintrf;"], [0, "&order;"], [0, "&alefsym;"], [0, "&beth;"], [0, "&gimel;"], [0, "&daleth;"], [12, "&CapitalDifferentialD;"], [0, "&dd;"], [0, "&ee;"], [0, "&ii;"], [10, "&frac13;"], [0, "&frac23;"], [0, "&frac15;"], [0, "&frac25;"], [0, "&frac35;"], [0, "&frac45;"], [0, "&frac16;"], [0, "&frac56;"], [0, "&frac18;"], [0, "&frac38;"], [0, "&frac58;"], [0, "&frac78;"], [49, "&larr;"], [0, "&ShortUpArrow;"], [0, "&rarr;"], [0, "&darr;"], [0, "&harr;"], [0, "&updownarrow;"], [0, "&nwarr;"], [0, "&nearr;"], [0, "&LowerRightArrow;"], [0, "&LowerLeftArrow;"], [0, "&nlarr;"], [0, "&nrarr;"], [1, { v: "&rarrw;", n: 824, o: "&nrarrw;" }], [0, "&Larr;"], [0, "&Uarr;"], [0, "&Rarr;"], [0, "&Darr;"], [0, "&larrtl;"], [0, "&rarrtl;"], [0, "&LeftTeeArrow;"], [0, "&mapstoup;"], [0, "&map;"], [0, "&DownTeeArrow;"], [1, "&hookleftarrow;"], [0, "&hookrightarrow;"], [0, "&larrlp;"], [0, "&looparrowright;"], [0, "&harrw;"], [0, "&nharr;"], [1, "&lsh;"], [0, "&rsh;"], [0, "&ldsh;"], [0, "&rdsh;"], [1, "&crarr;"], [0, "&cularr;"], [0, "&curarr;"], [2, "&circlearrowleft;"], [0, "&circlearrowright;"], [0, "&leftharpoonup;"], [0, "&DownLeftVector;"], [0, "&RightUpVector;"], [0, "&LeftUpVector;"], [0, "&rharu;"], [0, "&DownRightVector;"], [0, "&dharr;"], [0, "&dharl;"], [0, "&RightArrowLeftArrow;"], [0, "&udarr;"], [0, "&LeftArrowRightArrow;"], [0, "&leftleftarrows;"], [0, "&upuparrows;"], [0, "&rightrightarrows;"], [0, "&ddarr;"], [0, "&leftrightharpoons;"], [0, "&Equilibrium;"], [0, "&nlArr;"], [0, "&nhArr;"], [0, "&nrArr;"], [0, "&DoubleLeftArrow;"], [0, "&DoubleUpArrow;"], [0, "&DoubleRightArrow;"], [0, "&dArr;"], [0, "&DoubleLeftRightArrow;"], [0, "&DoubleUpDownArrow;"], [0, "&nwArr;"], [0, "&neArr;"], [0, "&seArr;"], [0, "&swArr;"], [0, "&lAarr;"], [0, "&rAarr;"], [1, "&zigrarr;"], [6, "&larrb;"], [0, "&rarrb;"], [15, "&DownArrowUpArrow;"], [7, "&loarr;"], [0, "&roarr;"], [0, "&hoarr;"], [0, "&forall;"], [0, "&comp;"], [0, { v: "&part;", n: 824, o: "&npart;" }], [0, "&exist;"], [0, "&nexist;"], [0, "&empty;"], [1, "&Del;"], [0, "&Element;"], [0, "&NotElement;"], [1, "&ni;"], [0, "&notni;"], [2, "&prod;"], [0, "&coprod;"], [0, "&sum;"], [0, "&minus;"], [0, "&MinusPlus;"], [0, "&dotplus;"], [1, "&Backslash;"], [0, "&lowast;"], [0, "&compfn;"], [1, "&radic;"], [2, "&prop;"], [0, "&infin;"], [0, "&angrt;"], [0, { v: "&ang;", n: 8402, o: "&nang;" }], [0, "&angmsd;"], [0, "&angsph;"], [0, "&mid;"], [0, "&nmid;"], [0, "&DoubleVerticalBar;"], [0, "&NotDoubleVerticalBar;"], [0, "&and;"], [0, "&or;"], [0, { v: "&cap;", n: 65024, o: "&caps;" }], [0, { v: "&cup;", n: 65024, o: "&cups;" }], [0, "&int;"], [0, "&Int;"], [0, "&iiint;"], [0, "&conint;"], [0, "&Conint;"], [0, "&Cconint;"], [0, "&cwint;"], [0, "&ClockwiseContourIntegral;"], [0, "&awconint;"], [0, "&there4;"], [0, "&becaus;"], [0, "&ratio;"], [0, "&Colon;"], [0, "&dotminus;"], [1, "&mDDot;"], [0, "&homtht;"], [0, { v: "&sim;", n: 8402, o: "&nvsim;" }], [0, { v: "&backsim;", n: 817, o: "&race;" }], [0, { v: "&ac;", n: 819, o: "&acE;" }], [0, "&acd;"], [0, "&VerticalTilde;"], [0, "&NotTilde;"], [0, { v: "&eqsim;", n: 824, o: "&nesim;" }], [0, "&sime;"], [0, "&NotTildeEqual;"], [0, "&cong;"], [0, "&simne;"], [0, "&ncong;"], [0, "&ap;"], [0, "&nap;"], [0, "&ape;"], [0, { v: "&apid;", n: 824, o: "&napid;" }], [0, "&backcong;"], [0, { v: "&asympeq;", n: 8402, o: "&nvap;" }], [0, { v: "&bump;", n: 824, o: "&nbump;" }], [0, { v: "&bumpe;", n: 824, o: "&nbumpe;" }], [0, { v: "&doteq;", n: 824, o: "&nedot;" }], [0, "&doteqdot;"], [0, "&efDot;"], [0, "&erDot;"], [0, "&Assign;"], [0, "&ecolon;"], [0, "&ecir;"], [0, "&circeq;"], [1, "&wedgeq;"], [0, "&veeeq;"], [1, "&triangleq;"], [2, "&equest;"], [0, "&ne;"], [0, { v: "&Congruent;", n: 8421, o: "&bnequiv;" }], [0, "&nequiv;"], [1, { v: "&le;", n: 8402, o: "&nvle;" }], [0, { v: "&ge;", n: 8402, o: "&nvge;" }], [0, { v: "&lE;", n: 824, o: "&nlE;" }], [0, { v: "&gE;", n: 824, o: "&ngE;" }], [0, { v: "&lnE;", n: 65024, o: "&lvertneqq;" }], [0, { v: "&gnE;", n: 65024, o: "&gvertneqq;" }], [0, { v: "&ll;", n: new Map(/* @__PURE__ */ restoreDiff([[824, "&nLtv;"], [7577, "&nLt;"]])) }], [0, { v: "&gg;", n: new Map(/* @__PURE__ */ restoreDiff([[824, "&nGtv;"], [7577, "&nGt;"]])) }], [0, "&between;"], [0, "&NotCupCap;"], [0, "&nless;"], [0, "&ngt;"], [0, "&nle;"], [0, "&nge;"], [0, "&lesssim;"], [0, "&GreaterTilde;"], [0, "&nlsim;"], [0, "&ngsim;"], [0, "&LessGreater;"], [0, "&gl;"], [0, "&NotLessGreater;"], [0, "&NotGreaterLess;"], [0, "&pr;"], [0, "&sc;"], [0, "&prcue;"], [0, "&sccue;"], [0, "&PrecedesTilde;"], [0, { v: "&scsim;", n: 824, o: "&NotSucceedsTilde;" }], [0, "&NotPrecedes;"], [0, "&NotSucceeds;"], [0, { v: "&sub;", n: 8402, o: "&NotSubset;" }], [0, { v: "&sup;", n: 8402, o: "&NotSuperset;" }], [0, "&nsub;"], [0, "&nsup;"], [0, "&sube;"], [0, "&supe;"], [0, "&NotSubsetEqual;"], [0, "&NotSupersetEqual;"], [0, { v: "&subne;", n: 65024, o: "&varsubsetneq;" }], [0, { v: "&supne;", n: 65024, o: "&varsupsetneq;" }], [1, "&cupdot;"], [0, "&UnionPlus;"], [0, { v: "&sqsub;", n: 824, o: "&NotSquareSubset;" }], [0, { v: "&sqsup;", n: 824, o: "&NotSquareSuperset;" }], [0, "&sqsube;"], [0, "&sqsupe;"], [0, { v: "&sqcap;", n: 65024, o: "&sqcaps;" }], [0, { v: "&sqcup;", n: 65024, o: "&sqcups;" }], [0, "&CirclePlus;"], [0, "&CircleMinus;"], [0, "&CircleTimes;"], [0, "&osol;"], [0, "&CircleDot;"], [0, "&circledcirc;"], [0, "&circledast;"], [1, "&circleddash;"], [0, "&boxplus;"], [0, "&boxminus;"], [0, "&boxtimes;"], [0, "&dotsquare;"], [0, "&RightTee;"], [0, "&dashv;"], [0, "&DownTee;"], [0, "&bot;"], [1, "&models;"], [0, "&DoubleRightTee;"], [0, "&Vdash;"], [0, "&Vvdash;"], [0, "&VDash;"], [0, "&nvdash;"], [0, "&nvDash;"], [0, "&nVdash;"], [0, "&nVDash;"], [0, "&prurel;"], [1, "&LeftTriangle;"], [0, "&RightTriangle;"], [0, { v: "&LeftTriangleEqual;", n: 8402, o: "&nvltrie;" }], [0, { v: "&RightTriangleEqual;", n: 8402, o: "&nvrtrie;" }], [0, "&origof;"], [0, "&imof;"], [0, "&multimap;"], [0, "&hercon;"], [0, "&intcal;"], [0, "&veebar;"], [1, "&barvee;"], [0, "&angrtvb;"], [0, "&lrtri;"], [0, "&bigwedge;"], [0, "&bigvee;"], [0, "&bigcap;"], [0, "&bigcup;"], [0, "&diam;"], [0, "&sdot;"], [0, "&sstarf;"], [0, "&divideontimes;"], [0, "&bowtie;"], [0, "&ltimes;"], [0, "&rtimes;"], [0, "&leftthreetimes;"], [0, "&rightthreetimes;"], [0, "&backsimeq;"], [0, "&curlyvee;"], [0, "&curlywedge;"], [0, "&Sub;"], [0, "&Sup;"], [0, "&Cap;"], [0, "&Cup;"], [0, "&fork;"], [0, "&epar;"], [0, "&lessdot;"], [0, "&gtdot;"], [0, { v: "&Ll;", n: 824, o: "&nLl;" }], [0, { v: "&Gg;", n: 824, o: "&nGg;" }], [0, { v: "&leg;", n: 65024, o: "&lesg;" }], [0, { v: "&gel;", n: 65024, o: "&gesl;" }], [2, "&cuepr;"], [0, "&cuesc;"], [0, "&NotPrecedesSlantEqual;"], [0, "&NotSucceedsSlantEqual;"], [0, "&NotSquareSubsetEqual;"], [0, "&NotSquareSupersetEqual;"], [2, "&lnsim;"], [0, "&gnsim;"], [0, "&precnsim;"], [0, "&scnsim;"], [0, "&nltri;"], [0, "&NotRightTriangle;"], [0, "&nltrie;"], [0, "&NotRightTriangleEqual;"], [0, "&vellip;"], [0, "&ctdot;"], [0, "&utdot;"], [0, "&dtdot;"], [0, "&disin;"], [0, "&isinsv;"], [0, "&isins;"], [0, { v: "&isindot;", n: 824, o: "&notindot;" }], [0, "&notinvc;"], [0, "&notinvb;"], [1, { v: "&isinE;", n: 824, o: "&notinE;" }], [0, "&nisd;"], [0, "&xnis;"], [0, "&nis;"], [0, "&notnivc;"], [0, "&notnivb;"], [6, "&barwed;"], [0, "&Barwed;"], [1, "&lceil;"], [0, "&rceil;"], [0, "&LeftFloor;"], [0, "&rfloor;"], [0, "&drcrop;"], [0, "&dlcrop;"], [0, "&urcrop;"], [0, "&ulcrop;"], [0, "&bnot;"], [1, "&profline;"], [0, "&profsurf;"], [1, "&telrec;"], [0, "&target;"], [5, "&ulcorn;"], [0, "&urcorn;"], [0, "&dlcorn;"], [0, "&drcorn;"], [2, "&frown;"], [0, "&smile;"], [9, "&cylcty;"], [0, "&profalar;"], [7, "&topbot;"], [6, "&ovbar;"], [1, "&solbar;"], [60, "&angzarr;"], [51, "&lmoustache;"], [0, "&rmoustache;"], [2, "&OverBracket;"], [0, "&bbrk;"], [0, "&bbrktbrk;"], [37, "&OverParenthesis;"], [0, "&UnderParenthesis;"], [0, "&OverBrace;"], [0, "&UnderBrace;"], [2, "&trpezium;"], [4, "&elinters;"], [59, "&blank;"], [164, "&circledS;"], [55, "&boxh;"], [1, "&boxv;"], [9, "&boxdr;"], [3, "&boxdl;"], [3, "&boxur;"], [3, "&boxul;"], [3, "&boxvr;"], [7, "&boxvl;"], [7, "&boxhd;"], [7, "&boxhu;"], [7, "&boxvh;"], [19, "&boxH;"], [0, "&boxV;"], [0, "&boxdR;"], [0, "&boxDr;"], [0, "&boxDR;"], [0, "&boxdL;"], [0, "&boxDl;"], [0, "&boxDL;"], [0, "&boxuR;"], [0, "&boxUr;"], [0, "&boxUR;"], [0, "&boxuL;"], [0, "&boxUl;"], [0, "&boxUL;"], [0, "&boxvR;"], [0, "&boxVr;"], [0, "&boxVR;"], [0, "&boxvL;"], [0, "&boxVl;"], [0, "&boxVL;"], [0, "&boxHd;"], [0, "&boxhD;"], [0, "&boxHD;"], [0, "&boxHu;"], [0, "&boxhU;"], [0, "&boxHU;"], [0, "&boxvH;"], [0, "&boxVh;"], [0, "&boxVH;"], [19, "&uhblk;"], [3, "&lhblk;"], [3, "&block;"], [8, "&blk14;"], [0, "&blk12;"], [0, "&blk34;"], [13, "&square;"], [8, "&blacksquare;"], [0, "&EmptyVerySmallSquare;"], [1, "&rect;"], [0, "&marker;"], [2, "&fltns;"], [1, "&bigtriangleup;"], [0, "&blacktriangle;"], [0, "&triangle;"], [2, "&blacktriangleright;"], [0, "&rtri;"], [3, "&bigtriangledown;"], [0, "&blacktriangledown;"], [0, "&dtri;"], [2, "&blacktriangleleft;"], [0, "&ltri;"], [6, "&loz;"], [0, "&cir;"], [32, "&tridot;"], [2, "&bigcirc;"], [8, "&ultri;"], [0, "&urtri;"], [0, "&lltri;"], [0, "&EmptySmallSquare;"], [0, "&FilledSmallSquare;"], [8, "&bigstar;"], [0, "&star;"], [7, "&phone;"], [49, "&female;"], [1, "&male;"], [29, "&spades;"], [2, "&clubs;"], [1, "&hearts;"], [0, "&diamondsuit;"], [3, "&sung;"], [2, "&flat;"], [0, "&natural;"], [0, "&sharp;"], [163, "&check;"], [3, "&cross;"], [8, "&malt;"], [21, "&sext;"], [33, "&VerticalSeparator;"], [25, "&lbbrk;"], [0, "&rbbrk;"], [84, "&bsolhsub;"], [0, "&suphsol;"], [28, "&LeftDoubleBracket;"], [0, "&RightDoubleBracket;"], [0, "&lang;"], [0, "&rang;"], [0, "&Lang;"], [0, "&Rang;"], [0, "&loang;"], [0, "&roang;"], [7, "&longleftarrow;"], [0, "&longrightarrow;"], [0, "&longleftrightarrow;"], [0, "&DoubleLongLeftArrow;"], [0, "&DoubleLongRightArrow;"], [0, "&DoubleLongLeftRightArrow;"], [1, "&longmapsto;"], [2, "&dzigrarr;"], [258, "&nvlArr;"], [0, "&nvrArr;"], [0, "&nvHarr;"], [0, "&Map;"], [6, "&lbarr;"], [0, "&bkarow;"], [0, "&lBarr;"], [0, "&dbkarow;"], [0, "&drbkarow;"], [0, "&DDotrahd;"], [0, "&UpArrowBar;"], [0, "&DownArrowBar;"], [2, "&Rarrtl;"], [2, "&latail;"], [0, "&ratail;"], [0, "&lAtail;"], [0, "&rAtail;"], [0, "&larrfs;"], [0, "&rarrfs;"], [0, "&larrbfs;"], [0, "&rarrbfs;"], [2, "&nwarhk;"], [0, "&nearhk;"], [0, "&hksearow;"], [0, "&hkswarow;"], [0, "&nwnear;"], [0, "&nesear;"], [0, "&seswar;"], [0, "&swnwar;"], [8, { v: "&rarrc;", n: 824, o: "&nrarrc;" }], [1, "&cudarrr;"], [0, "&ldca;"], [0, "&rdca;"], [0, "&cudarrl;"], [0, "&larrpl;"], [2, "&curarrm;"], [0, "&cularrp;"], [7, "&rarrpl;"], [2, "&harrcir;"], [0, "&Uarrocir;"], [0, "&lurdshar;"], [0, "&ldrushar;"], [2, "&LeftRightVector;"], [0, "&RightUpDownVector;"], [0, "&DownLeftRightVector;"], [0, "&LeftUpDownVector;"], [0, "&LeftVectorBar;"], [0, "&RightVectorBar;"], [0, "&RightUpVectorBar;"], [0, "&RightDownVectorBar;"], [0, "&DownLeftVectorBar;"], [0, "&DownRightVectorBar;"], [0, "&LeftUpVectorBar;"], [0, "&LeftDownVectorBar;"], [0, "&LeftTeeVector;"], [0, "&RightTeeVector;"], [0, "&RightUpTeeVector;"], [0, "&RightDownTeeVector;"], [0, "&DownLeftTeeVector;"], [0, "&DownRightTeeVector;"], [0, "&LeftUpTeeVector;"], [0, "&LeftDownTeeVector;"], [0, "&lHar;"], [0, "&uHar;"], [0, "&rHar;"], [0, "&dHar;"], [0, "&luruhar;"], [0, "&ldrdhar;"], [0, "&ruluhar;"], [0, "&rdldhar;"], [0, "&lharul;"], [0, "&llhard;"], [0, "&rharul;"], [0, "&lrhard;"], [0, "&udhar;"], [0, "&duhar;"], [0, "&RoundImplies;"], [0, "&erarr;"], [0, "&simrarr;"], [0, "&larrsim;"], [0, "&rarrsim;"], [0, "&rarrap;"], [0, "&ltlarr;"], [1, "&gtrarr;"], [0, "&subrarr;"], [1, "&suplarr;"], [0, "&lfisht;"], [0, "&rfisht;"], [0, "&ufisht;"], [0, "&dfisht;"], [5, "&lopar;"], [0, "&ropar;"], [4, "&lbrke;"], [0, "&rbrke;"], [0, "&lbrkslu;"], [0, "&rbrksld;"], [0, "&lbrksld;"], [0, "&rbrkslu;"], [0, "&langd;"], [0, "&rangd;"], [0, "&lparlt;"], [0, "&rpargt;"], [0, "&gtlPar;"], [0, "&ltrPar;"], [3, "&vzigzag;"], [1, "&vangrt;"], [0, "&angrtvbd;"], [6, "&ange;"], [0, "&range;"], [0, "&dwangle;"], [0, "&uwangle;"], [0, "&angmsdaa;"], [0, "&angmsdab;"], [0, "&angmsdac;"], [0, "&angmsdad;"], [0, "&angmsdae;"], [0, "&angmsdaf;"], [0, "&angmsdag;"], [0, "&angmsdah;"], [0, "&bemptyv;"], [0, "&demptyv;"], [0, "&cemptyv;"], [0, "&raemptyv;"], [0, "&laemptyv;"], [0, "&ohbar;"], [0, "&omid;"], [0, "&opar;"], [1, "&operp;"], [1, "&olcross;"], [0, "&odsold;"], [1, "&olcir;"], [0, "&ofcir;"], [0, "&olt;"], [0, "&ogt;"], [0, "&cirscir;"], [0, "&cirE;"], [0, "&solb;"], [0, "&bsolb;"], [3, "&boxbox;"], [3, "&trisb;"], [0, "&rtriltri;"], [0, { v: "&LeftTriangleBar;", n: 824, o: "&NotLeftTriangleBar;" }], [0, { v: "&RightTriangleBar;", n: 824, o: "&NotRightTriangleBar;" }], [11, "&iinfin;"], [0, "&infintie;"], [0, "&nvinfin;"], [4, "&eparsl;"], [0, "&smeparsl;"], [0, "&eqvparsl;"], [5, "&blacklozenge;"], [8, "&RuleDelayed;"], [1, "&dsol;"], [9, "&bigodot;"], [0, "&bigoplus;"], [0, "&bigotimes;"], [1, "&biguplus;"], [1, "&bigsqcup;"], [5, "&iiiint;"], [0, "&fpartint;"], [2, "&cirfnint;"], [0, "&awint;"], [0, "&rppolint;"], [0, "&scpolint;"], [0, "&npolint;"], [0, "&pointint;"], [0, "&quatint;"], [0, "&intlarhk;"], [10, "&pluscir;"], [0, "&plusacir;"], [0, "&simplus;"], [0, "&plusdu;"], [0, "&plussim;"], [0, "&plustwo;"], [1, "&mcomma;"], [0, "&minusdu;"], [2, "&loplus;"], [0, "&roplus;"], [0, "&Cross;"], [0, "&timesd;"], [0, "&timesbar;"], [1, "&smashp;"], [0, "&lotimes;"], [0, "&rotimes;"], [0, "&otimesas;"], [0, "&Otimes;"], [0, "&odiv;"], [0, "&triplus;"], [0, "&triminus;"], [0, "&tritime;"], [0, "&intprod;"], [2, "&amalg;"], [0, "&capdot;"], [1, "&ncup;"], [0, "&ncap;"], [0, "&capand;"], [0, "&cupor;"], [0, "&cupcap;"], [0, "&capcup;"], [0, "&cupbrcap;"], [0, "&capbrcup;"], [0, "&cupcup;"], [0, "&capcap;"], [0, "&ccups;"], [0, "&ccaps;"], [2, "&ccupssm;"], [2, "&And;"], [0, "&Or;"], [0, "&andand;"], [0, "&oror;"], [0, "&orslope;"], [0, "&andslope;"], [1, "&andv;"], [0, "&orv;"], [0, "&andd;"], [0, "&ord;"], [1, "&wedbar;"], [6, "&sdote;"], [3, "&simdot;"], [2, { v: "&congdot;", n: 824, o: "&ncongdot;" }], [0, "&easter;"], [0, "&apacir;"], [0, { v: "&apE;", n: 824, o: "&napE;" }], [0, "&eplus;"], [0, "&pluse;"], [0, "&Esim;"], [0, "&Colone;"], [0, "&Equal;"], [1, "&ddotseq;"], [0, "&equivDD;"], [0, "&ltcir;"], [0, "&gtcir;"], [0, "&ltquest;"], [0, "&gtquest;"], [0, { v: "&leqslant;", n: 824, o: "&nleqslant;" }], [0, { v: "&geqslant;", n: 824, o: "&ngeqslant;" }], [0, "&lesdot;"], [0, "&gesdot;"], [0, "&lesdoto;"], [0, "&gesdoto;"], [0, "&lesdotor;"], [0, "&gesdotol;"], [0, "&lap;"], [0, "&gap;"], [0, "&lne;"], [0, "&gne;"], [0, "&lnap;"], [0, "&gnap;"], [0, "&lEg;"], [0, "&gEl;"], [0, "&lsime;"], [0, "&gsime;"], [0, "&lsimg;"], [0, "&gsiml;"], [0, "&lgE;"], [0, "&glE;"], [0, "&lesges;"], [0, "&gesles;"], [0, "&els;"], [0, "&egs;"], [0, "&elsdot;"], [0, "&egsdot;"], [0, "&el;"], [0, "&eg;"], [2, "&siml;"], [0, "&simg;"], [0, "&simlE;"], [0, "&simgE;"], [0, { v: "&LessLess;", n: 824, o: "&NotNestedLessLess;" }], [0, { v: "&GreaterGreater;", n: 824, o: "&NotNestedGreaterGreater;" }], [1, "&glj;"], [0, "&gla;"], [0, "&ltcc;"], [0, "&gtcc;"], [0, "&lescc;"], [0, "&gescc;"], [0, "&smt;"], [0, "&lat;"], [0, { v: "&smte;", n: 65024, o: "&smtes;" }], [0, { v: "&late;", n: 65024, o: "&lates;" }], [0, "&bumpE;"], [0, { v: "&PrecedesEqual;", n: 824, o: "&NotPrecedesEqual;" }], [0, { v: "&sce;", n: 824, o: "&NotSucceedsEqual;" }], [2, "&prE;"], [0, "&scE;"], [0, "&precneqq;"], [0, "&scnE;"], [0, "&prap;"], [0, "&scap;"], [0, "&precnapprox;"], [0, "&scnap;"], [0, "&Pr;"], [0, "&Sc;"], [0, "&subdot;"], [0, "&supdot;"], [0, "&subplus;"], [0, "&supplus;"], [0, "&submult;"], [0, "&supmult;"], [0, "&subedot;"], [0, "&supedot;"], [0, { v: "&subE;", n: 824, o: "&nsubE;" }], [0, { v: "&supE;", n: 824, o: "&nsupE;" }], [0, "&subsim;"], [0, "&supsim;"], [2, { v: "&subnE;", n: 65024, o: "&varsubsetneqq;" }], [0, { v: "&supnE;", n: 65024, o: "&varsupsetneqq;" }], [2, "&csub;"], [0, "&csup;"], [0, "&csube;"], [0, "&csupe;"], [0, "&subsup;"], [0, "&supsub;"], [0, "&subsub;"], [0, "&supsup;"], [0, "&suphsub;"], [0, "&supdsub;"], [0, "&forkv;"], [0, "&topfork;"], [0, "&mlcp;"], [8, "&Dashv;"], [1, "&Vdashl;"], [0, "&Barv;"], [0, "&vBar;"], [0, "&vBarv;"], [1, "&Vbar;"], [0, "&Not;"], [0, "&bNot;"], [0, "&rnmid;"], [0, "&cirmid;"], [0, "&midcir;"], [0, "&topcir;"], [0, "&nhpar;"], [0, "&parsim;"], [9, { v: "&parsl;", n: 8421, o: "&nparsl;" }], [44343, { n: new Map(/* @__PURE__ */ restoreDiff([[56476, "&Ascr;"], [1, "&Cscr;"], [0, "&Dscr;"], [2, "&Gscr;"], [2, "&Jscr;"], [0, "&Kscr;"], [2, "&Nscr;"], [0, "&Oscr;"], [0, "&Pscr;"], [0, "&Qscr;"], [1, "&Sscr;"], [0, "&Tscr;"], [0, "&Uscr;"], [0, "&Vscr;"], [0, "&Wscr;"], [0, "&Xscr;"], [0, "&Yscr;"], [0, "&Zscr;"], [0, "&ascr;"], [0, "&bscr;"], [0, "&cscr;"], [0, "&dscr;"], [1, "&fscr;"], [1, "&hscr;"], [0, "&iscr;"], [0, "&jscr;"], [0, "&kscr;"], [0, "&lscr;"], [0, "&mscr;"], [0, "&nscr;"], [1, "&pscr;"], [0, "&qscr;"], [0, "&rscr;"], [0, "&sscr;"], [0, "&tscr;"], [0, "&uscr;"], [0, "&vscr;"], [0, "&wscr;"], [0, "&xscr;"], [0, "&yscr;"], [0, "&zscr;"], [52, "&Afr;"], [0, "&Bfr;"], [1, "&Dfr;"], [0, "&Efr;"], [0, "&Ffr;"], [0, "&Gfr;"], [2, "&Jfr;"], [0, "&Kfr;"], [0, "&Lfr;"], [0, "&Mfr;"], [0, "&Nfr;"], [0, "&Ofr;"], [0, "&Pfr;"], [0, "&Qfr;"], [1, "&Sfr;"], [0, "&Tfr;"], [0, "&Ufr;"], [0, "&Vfr;"], [0, "&Wfr;"], [0, "&Xfr;"], [0, "&Yfr;"], [1, "&afr;"], [0, "&bfr;"], [0, "&cfr;"], [0, "&dfr;"], [0, "&efr;"], [0, "&ffr;"], [0, "&gfr;"], [0, "&hfr;"], [0, "&ifr;"], [0, "&jfr;"], [0, "&kfr;"], [0, "&lfr;"], [0, "&mfr;"], [0, "&nfr;"], [0, "&ofr;"], [0, "&pfr;"], [0, "&qfr;"], [0, "&rfr;"], [0, "&sfr;"], [0, "&tfr;"], [0, "&ufr;"], [0, "&vfr;"], [0, "&wfr;"], [0, "&xfr;"], [0, "&yfr;"], [0, "&zfr;"], [0, "&Aopf;"], [0, "&Bopf;"], [1, "&Dopf;"], [0, "&Eopf;"], [0, "&Fopf;"], [0, "&Gopf;"], [1, "&Iopf;"], [0, "&Jopf;"], [0, "&Kopf;"], [0, "&Lopf;"], [0, "&Mopf;"], [1, "&Oopf;"], [3, "&Sopf;"], [0, "&Topf;"], [0, "&Uopf;"], [0, "&Vopf;"], [0, "&Wopf;"], [0, "&Xopf;"], [0, "&Yopf;"], [1, "&aopf;"], [0, "&bopf;"], [0, "&copf;"], [0, "&dopf;"], [0, "&eopf;"], [0, "&fopf;"], [0, "&gopf;"], [0, "&hopf;"], [0, "&iopf;"], [0, "&jopf;"], [0, "&kopf;"], [0, "&lopf;"], [0, "&mopf;"], [0, "&nopf;"], [0, "&oopf;"], [0, "&popf;"], [0, "&qopf;"], [0, "&ropf;"], [0, "&sopf;"], [0, "&topf;"], [0, "&uopf;"], [0, "&vopf;"], [0, "&wopf;"], [0, "&xopf;"], [0, "&yopf;"], [0, "&zopf;"]])) }], [8906, "&fflig;"], [0, "&filig;"], [0, "&fllig;"], [0, "&ffilig;"], [0, "&ffllig;"]]));

// node_modules/entities/lib/esm/escape.js
var xmlReplacer = /["&'<>$\x80-\uFFFF]/g;
var xmlCodeMap = /* @__PURE__ */ new Map([
  [34, "&quot;"],
  [38, "&amp;"],
  [39, "&apos;"],
  [60, "&lt;"],
  [62, "&gt;"]
]);
var getCodePoint = (
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  String.prototype.codePointAt != null ? (str, index2) => str.codePointAt(index2) : (
    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
    (c, index2) => (c.charCodeAt(index2) & 64512) === 55296 ? (c.charCodeAt(index2) - 55296) * 1024 + c.charCodeAt(index2 + 1) - 56320 + 65536 : c.charCodeAt(index2)
  )
);
function encodeXML(str) {
  let ret = "";
  let lastIdx = 0;
  let match;
  while ((match = xmlReplacer.exec(str)) !== null) {
    const i = match.index;
    const char = str.charCodeAt(i);
    const next2 = xmlCodeMap.get(char);
    if (next2 !== void 0) {
      ret += str.substring(lastIdx, i) + next2;
      lastIdx = i + 1;
    } else {
      ret += `${str.substring(lastIdx, i)}&#x${getCodePoint(str, i).toString(16)};`;
      lastIdx = xmlReplacer.lastIndex += Number((char & 64512) === 55296);
    }
  }
  return ret + str.substr(lastIdx);
}
function getEscaper(regex, map2) {
  return function escape3(data2) {
    let match;
    let lastIdx = 0;
    let result = "";
    while (match = regex.exec(data2)) {
      if (lastIdx !== match.index) {
        result += data2.substring(lastIdx, match.index);
      }
      result += map2.get(match[0].charCodeAt(0));
      lastIdx = match.index + 1;
    }
    return result + data2.substring(lastIdx);
  };
}
var escapeUTF8 = getEscaper(/[&<>'"]/g, xmlCodeMap);
var escapeAttribute = getEscaper(/["&\u00A0]/g, /* @__PURE__ */ new Map([
  [34, "&quot;"],
  [38, "&amp;"],
  [160, "&nbsp;"]
]));
var escapeText = getEscaper(/[&<>\u00A0]/g, /* @__PURE__ */ new Map([
  [38, "&amp;"],
  [60, "&lt;"],
  [62, "&gt;"],
  [160, "&nbsp;"]
]));

// node_modules/entities/lib/esm/index.js
var EntityLevel;
(function(EntityLevel2) {
  EntityLevel2[EntityLevel2["XML"] = 0] = "XML";
  EntityLevel2[EntityLevel2["HTML"] = 1] = "HTML";
})(EntityLevel || (EntityLevel = {}));
var EncodingMode;
(function(EncodingMode2) {
  EncodingMode2[EncodingMode2["UTF8"] = 0] = "UTF8";
  EncodingMode2[EncodingMode2["ASCII"] = 1] = "ASCII";
  EncodingMode2[EncodingMode2["Extensive"] = 2] = "Extensive";
  EncodingMode2[EncodingMode2["Attribute"] = 3] = "Attribute";
  EncodingMode2[EncodingMode2["Text"] = 4] = "Text";
})(EncodingMode || (EncodingMode = {}));

// node_modules/dom-serializer/lib/esm/foreignNames.js
var elementNames = new Map([
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "clipPath",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feDropShadow",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "foreignObject",
  "glyphRef",
  "linearGradient",
  "radialGradient",
  "textPath"
].map((val2) => [val2.toLowerCase(), val2]));
var attributeNames = new Map([
  "definitionURL",
  "attributeName",
  "attributeType",
  "baseFrequency",
  "baseProfile",
  "calcMode",
  "clipPathUnits",
  "diffuseConstant",
  "edgeMode",
  "filterUnits",
  "glyphRef",
  "gradientTransform",
  "gradientUnits",
  "kernelMatrix",
  "kernelUnitLength",
  "keyPoints",
  "keySplines",
  "keyTimes",
  "lengthAdjust",
  "limitingConeAngle",
  "markerHeight",
  "markerUnits",
  "markerWidth",
  "maskContentUnits",
  "maskUnits",
  "numOctaves",
  "pathLength",
  "patternContentUnits",
  "patternTransform",
  "patternUnits",
  "pointsAtX",
  "pointsAtY",
  "pointsAtZ",
  "preserveAlpha",
  "preserveAspectRatio",
  "primitiveUnits",
  "refX",
  "refY",
  "repeatCount",
  "repeatDur",
  "requiredExtensions",
  "requiredFeatures",
  "specularConstant",
  "specularExponent",
  "spreadMethod",
  "startOffset",
  "stdDeviation",
  "stitchTiles",
  "surfaceScale",
  "systemLanguage",
  "tableValues",
  "targetX",
  "targetY",
  "textLength",
  "viewBox",
  "viewTarget",
  "xChannelSelector",
  "yChannelSelector",
  "zoomAndPan"
].map((val2) => [val2.toLowerCase(), val2]));

// node_modules/dom-serializer/lib/esm/index.js
var unencodedElements = /* @__PURE__ */ new Set([
  "style",
  "script",
  "xmp",
  "iframe",
  "noembed",
  "noframes",
  "plaintext",
  "noscript"
]);
function replaceQuotes(value) {
  return value.replace(/"/g, "&quot;");
}
function formatAttributes(attributes2, opts) {
  var _a5;
  if (!attributes2)
    return;
  const encode3 = ((_a5 = opts.encodeEntities) !== null && _a5 !== void 0 ? _a5 : opts.decodeEntities) === false ? replaceQuotes : opts.xmlMode || opts.encodeEntities !== "utf8" ? encodeXML : escapeAttribute;
  return Object.keys(attributes2).map((key) => {
    var _a6, _b;
    const value = (_a6 = attributes2[key]) !== null && _a6 !== void 0 ? _a6 : "";
    if (opts.xmlMode === "foreign") {
      key = (_b = attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
    }
    if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
      return key;
    }
    return `${key}="${encode3(value)}"`;
  }).join(" ");
}
var singleTag = /* @__PURE__ */ new Set([
  "area",
  "base",
  "basefont",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "img",
  "input",
  "isindex",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
function render(node, options = {}) {
  const nodes = "length" in node ? node : [node];
  let output = "";
  for (let i = 0; i < nodes.length; i++) {
    output += renderNode(nodes[i], options);
  }
  return output;
}
var esm_default = render;
function renderNode(node, options) {
  switch (node.type) {
    case Root:
      return render(node.children, options);
    case Doctype:
    case Directive:
      return renderDirective(node);
    case Comment:
      return renderComment(node);
    case CDATA:
      return renderCdata(node);
    case Script:
    case Style:
    case Tag:
      return renderTag(node, options);
    case Text:
      return renderText(node, options);
  }
}
var foreignModeIntegrationPoints = /* @__PURE__ */ new Set([
  "mi",
  "mo",
  "mn",
  "ms",
  "mtext",
  "annotation-xml",
  "foreignObject",
  "desc",
  "title"
]);
var foreignElements = /* @__PURE__ */ new Set(["svg", "math"]);
function renderTag(elem, opts) {
  var _a5;
  if (opts.xmlMode === "foreign") {
    elem.name = (_a5 = elementNames.get(elem.name)) !== null && _a5 !== void 0 ? _a5 : elem.name;
    if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {
      opts = { ...opts, xmlMode: false };
    }
  }
  if (!opts.xmlMode && foreignElements.has(elem.name)) {
    opts = { ...opts, xmlMode: "foreign" };
  }
  let tag = `<${elem.name}`;
  const attribs = formatAttributes(elem.attribs, opts);
  if (attribs) {
    tag += ` ${attribs}`;
  }
  if (elem.children.length === 0 && (opts.xmlMode ? (
    // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags
    opts.selfClosingTags !== false
  ) : (
    // User explicitly asked for self-closing tags, even in HTML mode
    opts.selfClosingTags && singleTag.has(elem.name)
  ))) {
    if (!opts.xmlMode)
      tag += " ";
    tag += "/>";
  } else {
    tag += ">";
    if (elem.children.length > 0) {
      tag += render(elem.children, opts);
    }
    if (opts.xmlMode || !singleTag.has(elem.name)) {
      tag += `</${elem.name}>`;
    }
  }
  return tag;
}
function renderDirective(elem) {
  return `<${elem.data}>`;
}
function renderText(elem, opts) {
  var _a5;
  let data2 = elem.data || "";
  if (((_a5 = opts.encodeEntities) !== null && _a5 !== void 0 ? _a5 : opts.decodeEntities) !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {
    data2 = opts.xmlMode || opts.encodeEntities !== "utf8" ? encodeXML(data2) : escapeText(data2);
  }
  return data2;
}
function renderCdata(elem) {
  return `<![CDATA[${elem.children[0].data}]]>`;
}
function renderComment(elem) {
  return `<!--${elem.data}-->`;
}

// node_modules/domutils/lib/esm/stringify.js
function getOuterHTML(node, options) {
  return esm_default(node, options);
}
function getInnerHTML(node, options) {
  return hasChildren(node) ? node.children.map((node2) => getOuterHTML(node2, options)).join("") : "";
}
function getText(node) {
  if (Array.isArray(node))
    return node.map(getText).join("");
  if (isTag2(node))
    return node.name === "br" ? "\n" : getText(node.children);
  if (isCDATA(node))
    return getText(node.children);
  if (isText(node))
    return node.data;
  return "";
}
function textContent(node) {
  if (Array.isArray(node))
    return node.map(textContent).join("");
  if (hasChildren(node) && !isComment(node)) {
    return textContent(node.children);
  }
  if (isText(node))
    return node.data;
  return "";
}
function innerText(node) {
  if (Array.isArray(node))
    return node.map(innerText).join("");
  if (hasChildren(node) && (node.type === ElementType.Tag || isCDATA(node))) {
    return innerText(node.children);
  }
  if (isText(node))
    return node.data;
  return "";
}

// node_modules/domutils/lib/esm/traversal.js
function getChildren(elem) {
  return hasChildren(elem) ? elem.children : [];
}
function getParent(elem) {
  return elem.parent || null;
}
function getSiblings(elem) {
  const parent2 = getParent(elem);
  if (parent2 != null)
    return getChildren(parent2);
  const siblings2 = [elem];
  let { prev: prev2, next: next2 } = elem;
  while (prev2 != null) {
    siblings2.unshift(prev2);
    ({ prev: prev2 } = prev2);
  }
  while (next2 != null) {
    siblings2.push(next2);
    ({ next: next2 } = next2);
  }
  return siblings2;
}
function getAttributeValue(elem, name) {
  var _a5;
  return (_a5 = elem.attribs) === null || _a5 === void 0 ? void 0 : _a5[name];
}
function hasAttrib(elem, name) {
  return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
}
function getName(elem) {
  return elem.name;
}
function nextElementSibling(elem) {
  let { next: next2 } = elem;
  while (next2 !== null && !isTag2(next2))
    ({ next: next2 } = next2);
  return next2;
}
function prevElementSibling(elem) {
  let { prev: prev2 } = elem;
  while (prev2 !== null && !isTag2(prev2))
    ({ prev: prev2 } = prev2);
  return prev2;
}

// node_modules/domutils/lib/esm/manipulation.js
function removeElement(elem) {
  if (elem.prev)
    elem.prev.next = elem.next;
  if (elem.next)
    elem.next.prev = elem.prev;
  if (elem.parent) {
    const childs = elem.parent.children;
    const childsIndex = childs.lastIndexOf(elem);
    if (childsIndex >= 0) {
      childs.splice(childsIndex, 1);
    }
  }
  elem.next = null;
  elem.prev = null;
  elem.parent = null;
}
function replaceElement(elem, replacement) {
  const prev2 = replacement.prev = elem.prev;
  if (prev2) {
    prev2.next = replacement;
  }
  const next2 = replacement.next = elem.next;
  if (next2) {
    next2.prev = replacement;
  }
  const parent2 = replacement.parent = elem.parent;
  if (parent2) {
    const childs = parent2.children;
    childs[childs.lastIndexOf(elem)] = replacement;
    elem.parent = null;
  }
}
function appendChild(parent2, child) {
  removeElement(child);
  child.next = null;
  child.parent = parent2;
  if (parent2.children.push(child) > 1) {
    const sibling = parent2.children[parent2.children.length - 2];
    sibling.next = child;
    child.prev = sibling;
  } else {
    child.prev = null;
  }
}
function append2(elem, next2) {
  removeElement(next2);
  const { parent: parent2 } = elem;
  const currNext = elem.next;
  next2.next = currNext;
  next2.prev = elem;
  elem.next = next2;
  next2.parent = parent2;
  if (currNext) {
    currNext.prev = next2;
    if (parent2) {
      const childs = parent2.children;
      childs.splice(childs.lastIndexOf(currNext), 0, next2);
    }
  } else if (parent2) {
    parent2.children.push(next2);
  }
}
function prependChild(parent2, child) {
  removeElement(child);
  child.parent = parent2;
  child.prev = null;
  if (parent2.children.unshift(child) !== 1) {
    const sibling = parent2.children[1];
    sibling.prev = child;
    child.next = sibling;
  } else {
    child.next = null;
  }
}
function prepend(elem, prev2) {
  removeElement(prev2);
  const { parent: parent2 } = elem;
  if (parent2) {
    const childs = parent2.children;
    childs.splice(childs.indexOf(elem), 0, prev2);
  }
  if (elem.prev) {
    elem.prev.next = prev2;
  }
  prev2.parent = parent2;
  prev2.prev = elem.prev;
  prev2.next = elem;
  elem.prev = prev2;
}

// node_modules/domutils/lib/esm/querying.js
function filter2(test2, node, recurse = true, limit = Infinity) {
  return find(test2, Array.isArray(node) ? node : [node], recurse, limit);
}
function find(test2, nodes, recurse, limit) {
  const result = [];
  const nodeStack = [Array.isArray(nodes) ? nodes : [nodes]];
  const indexStack = [0];
  for (; ; ) {
    if (indexStack[0] >= nodeStack[0].length) {
      if (indexStack.length === 1) {
        return result;
      }
      nodeStack.shift();
      indexStack.shift();
      continue;
    }
    const elem = nodeStack[0][indexStack[0]++];
    if (test2(elem)) {
      result.push(elem);
      if (--limit <= 0)
        return result;
    }
    if (recurse && hasChildren(elem) && elem.children.length > 0) {
      indexStack.unshift(0);
      nodeStack.unshift(elem.children);
    }
  }
}
function findOneChild(test2, nodes) {
  return nodes.find(test2);
}
function findOne(test2, nodes, recurse = true) {
  const searchedNodes = Array.isArray(nodes) ? nodes : [nodes];
  for (let i = 0; i < searchedNodes.length; i++) {
    const node = searchedNodes[i];
    if (isTag2(node) && test2(node)) {
      return node;
    }
    if (recurse && hasChildren(node) && node.children.length > 0) {
      const found = findOne(test2, node.children, true);
      if (found)
        return found;
    }
  }
  return null;
}
function existsOne(test2, nodes) {
  return (Array.isArray(nodes) ? nodes : [nodes]).some((node) => isTag2(node) && test2(node) || hasChildren(node) && existsOne(test2, node.children));
}
function findAll(test2, nodes) {
  const result = [];
  const nodeStack = [Array.isArray(nodes) ? nodes : [nodes]];
  const indexStack = [0];
  for (; ; ) {
    if (indexStack[0] >= nodeStack[0].length) {
      if (nodeStack.length === 1) {
        return result;
      }
      nodeStack.shift();
      indexStack.shift();
      continue;
    }
    const elem = nodeStack[0][indexStack[0]++];
    if (isTag2(elem) && test2(elem))
      result.push(elem);
    if (hasChildren(elem) && elem.children.length > 0) {
      indexStack.unshift(0);
      nodeStack.unshift(elem.children);
    }
  }
}

// node_modules/domutils/lib/esm/legacy.js
var Checks = {
  tag_name(name) {
    if (typeof name === "function") {
      return (elem) => isTag2(elem) && name(elem.name);
    } else if (name === "*") {
      return isTag2;
    }
    return (elem) => isTag2(elem) && elem.name === name;
  },
  tag_type(type) {
    if (typeof type === "function") {
      return (elem) => type(elem.type);
    }
    return (elem) => elem.type === type;
  },
  tag_contains(data2) {
    if (typeof data2 === "function") {
      return (elem) => isText(elem) && data2(elem.data);
    }
    return (elem) => isText(elem) && elem.data === data2;
  }
};
function getAttribCheck(attrib, value) {
  if (typeof value === "function") {
    return (elem) => isTag2(elem) && value(elem.attribs[attrib]);
  }
  return (elem) => isTag2(elem) && elem.attribs[attrib] === value;
}
function combineFuncs(a, b2) {
  return (elem) => a(elem) || b2(elem);
}
function compileTest(options) {
  const funcs = Object.keys(options).map((key) => {
    const value = options[key];
    return Object.prototype.hasOwnProperty.call(Checks, key) ? Checks[key](value) : getAttribCheck(key, value);
  });
  return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
}
function testElement(options, node) {
  const test2 = compileTest(options);
  return test2 ? test2(node) : true;
}
function getElements(options, nodes, recurse, limit = Infinity) {
  const test2 = compileTest(options);
  return test2 ? filter2(test2, nodes, recurse, limit) : [];
}
function getElementById(id, nodes, recurse = true) {
  if (!Array.isArray(nodes))
    nodes = [nodes];
  return findOne(getAttribCheck("id", id), nodes, recurse);
}
function getElementsByTagName(tagName, nodes, recurse = true, limit = Infinity) {
  return filter2(Checks["tag_name"](tagName), nodes, recurse, limit);
}
function getElementsByClassName(className, nodes, recurse = true, limit = Infinity) {
  return filter2(getAttribCheck("class", className), nodes, recurse, limit);
}
function getElementsByTagType(type, nodes, recurse = true, limit = Infinity) {
  return filter2(Checks["tag_type"](type), nodes, recurse, limit);
}

// node_modules/domutils/lib/esm/helpers.js
function removeSubsets(nodes) {
  let idx = nodes.length;
  while (--idx >= 0) {
    const node = nodes[idx];
    if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
      nodes.splice(idx, 1);
      continue;
    }
    for (let ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
      if (nodes.includes(ancestor)) {
        nodes.splice(idx, 1);
        break;
      }
    }
  }
  return nodes;
}
var DocumentPosition;
(function(DocumentPosition2) {
  DocumentPosition2[DocumentPosition2["DISCONNECTED"] = 1] = "DISCONNECTED";
  DocumentPosition2[DocumentPosition2["PRECEDING"] = 2] = "PRECEDING";
  DocumentPosition2[DocumentPosition2["FOLLOWING"] = 4] = "FOLLOWING";
  DocumentPosition2[DocumentPosition2["CONTAINS"] = 8] = "CONTAINS";
  DocumentPosition2[DocumentPosition2["CONTAINED_BY"] = 16] = "CONTAINED_BY";
})(DocumentPosition || (DocumentPosition = {}));
function compareDocumentPosition(nodeA, nodeB) {
  const aParents = [];
  const bParents = [];
  if (nodeA === nodeB) {
    return 0;
  }
  let current = hasChildren(nodeA) ? nodeA : nodeA.parent;
  while (current) {
    aParents.unshift(current);
    current = current.parent;
  }
  current = hasChildren(nodeB) ? nodeB : nodeB.parent;
  while (current) {
    bParents.unshift(current);
    current = current.parent;
  }
  const maxIdx = Math.min(aParents.length, bParents.length);
  let idx = 0;
  while (idx < maxIdx && aParents[idx] === bParents[idx]) {
    idx++;
  }
  if (idx === 0) {
    return DocumentPosition.DISCONNECTED;
  }
  const sharedParent = aParents[idx - 1];
  const siblings2 = sharedParent.children;
  const aSibling = aParents[idx];
  const bSibling = bParents[idx];
  if (siblings2.indexOf(aSibling) > siblings2.indexOf(bSibling)) {
    if (sharedParent === nodeB) {
      return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;
    }
    return DocumentPosition.FOLLOWING;
  }
  if (sharedParent === nodeA) {
    return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;
  }
  return DocumentPosition.PRECEDING;
}
function uniqueSort(nodes) {
  nodes = nodes.filter((node, i, arr) => !arr.includes(node, i + 1));
  nodes.sort((a, b2) => {
    const relative = compareDocumentPosition(a, b2);
    if (relative & DocumentPosition.PRECEDING) {
      return -1;
    } else if (relative & DocumentPosition.FOLLOWING) {
      return 1;
    }
    return 0;
  });
  return nodes;
}

// node_modules/domutils/lib/esm/feeds.js
function getFeed(doc) {
  const feedRoot = getOneElement(isValidFeed, doc);
  return !feedRoot ? null : feedRoot.name === "feed" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);
}
function getAtomFeed(feedRoot) {
  var _a5;
  const childs = feedRoot.children;
  const feed = {
    type: "atom",
    items: getElementsByTagName("entry", childs).map((item) => {
      var _a6;
      const { children: children2 } = item;
      const entry = { media: getMediaElements(children2) };
      addConditionally(entry, "id", "id", children2);
      addConditionally(entry, "title", "title", children2);
      const href2 = (_a6 = getOneElement("link", children2)) === null || _a6 === void 0 ? void 0 : _a6.attribs["href"];
      if (href2) {
        entry.link = href2;
      }
      const description = fetch2("summary", children2) || fetch2("content", children2);
      if (description) {
        entry.description = description;
      }
      const pubDate = fetch2("updated", children2);
      if (pubDate) {
        entry.pubDate = new Date(pubDate);
      }
      return entry;
    })
  };
  addConditionally(feed, "id", "id", childs);
  addConditionally(feed, "title", "title", childs);
  const href = (_a5 = getOneElement("link", childs)) === null || _a5 === void 0 ? void 0 : _a5.attribs["href"];
  if (href) {
    feed.link = href;
  }
  addConditionally(feed, "description", "subtitle", childs);
  const updated = fetch2("updated", childs);
  if (updated) {
    feed.updated = new Date(updated);
  }
  addConditionally(feed, "author", "email", childs, true);
  return feed;
}
function getRssFeed(feedRoot) {
  var _a5, _b;
  const childs = (_b = (_a5 = getOneElement("channel", feedRoot.children)) === null || _a5 === void 0 ? void 0 : _a5.children) !== null && _b !== void 0 ? _b : [];
  const feed = {
    type: feedRoot.name.substr(0, 3),
    id: "",
    items: getElementsByTagName("item", feedRoot.children).map((item) => {
      const { children: children2 } = item;
      const entry = { media: getMediaElements(children2) };
      addConditionally(entry, "id", "guid", children2);
      addConditionally(entry, "title", "title", children2);
      addConditionally(entry, "link", "link", children2);
      addConditionally(entry, "description", "description", children2);
      const pubDate = fetch2("pubDate", children2) || fetch2("dc:date", children2);
      if (pubDate)
        entry.pubDate = new Date(pubDate);
      return entry;
    })
  };
  addConditionally(feed, "title", "title", childs);
  addConditionally(feed, "link", "link", childs);
  addConditionally(feed, "description", "description", childs);
  const updated = fetch2("lastBuildDate", childs);
  if (updated) {
    feed.updated = new Date(updated);
  }
  addConditionally(feed, "author", "managingEditor", childs, true);
  return feed;
}
var MEDIA_KEYS_STRING = ["url", "type", "lang"];
var MEDIA_KEYS_INT = [
  "fileSize",
  "bitrate",
  "framerate",
  "samplingrate",
  "channels",
  "duration",
  "height",
  "width"
];
function getMediaElements(where) {
  return getElementsByTagName("media:content", where).map((elem) => {
    const { attribs } = elem;
    const media = {
      medium: attribs["medium"],
      isDefault: !!attribs["isDefault"]
    };
    for (const attrib of MEDIA_KEYS_STRING) {
      if (attribs[attrib]) {
        media[attrib] = attribs[attrib];
      }
    }
    for (const attrib of MEDIA_KEYS_INT) {
      if (attribs[attrib]) {
        media[attrib] = parseInt(attribs[attrib], 10);
      }
    }
    if (attribs["expression"]) {
      media.expression = attribs["expression"];
    }
    return media;
  });
}
function getOneElement(tagName, node) {
  return getElementsByTagName(tagName, node, true, 1)[0];
}
function fetch2(tagName, where, recurse = false) {
  return textContent(getElementsByTagName(tagName, where, recurse, 1)).trim();
}
function addConditionally(obj, prop2, tagName, where, recurse = false) {
  const val2 = fetch2(tagName, where, recurse);
  if (val2)
    obj[prop2] = val2;
}
function isValidFeed(value) {
  return value === "rss" || value === "feed" || value === "rdf:RDF";
}

// node_modules/cheerio/dist/browser/options.js
var defaultOpts2 = {
  _useHtmlParser2: false
};
function flattenOptions(options, baseOptions) {
  if (!options) {
    return baseOptions !== null && baseOptions !== void 0 ? baseOptions : defaultOpts2;
  }
  const opts = {
    _useHtmlParser2: !!options.xmlMode,
    ...baseOptions,
    ...options
  };
  if (options.xml) {
    opts._useHtmlParser2 = true;
    opts.xmlMode = true;
    if (options.xml !== true) {
      Object.assign(opts, options.xml);
    }
  } else if (options.xmlMode) {
    opts._useHtmlParser2 = true;
  }
  return opts;
}

// node_modules/cheerio/dist/browser/static.js
function render2(that, dom, options) {
  if (!that)
    return "";
  return that(dom !== null && dom !== void 0 ? dom : that._root.children, null, void 0, options).toString();
}
function isOptions(dom, options) {
  return !options && typeof dom === "object" && dom != null && !("length" in dom) && !("type" in dom);
}
function html(dom, options) {
  const toRender = isOptions(dom) ? (options = dom, void 0) : dom;
  const opts = {
    ...this === null || this === void 0 ? void 0 : this._options,
    ...flattenOptions(options)
  };
  return render2(this, toRender, opts);
}
function xml(dom) {
  const options = { ...this._options, xmlMode: true };
  return render2(this, dom, options);
}
function text(elements) {
  const elems = elements !== null && elements !== void 0 ? elements : this ? this.root() : [];
  let ret = "";
  for (let i = 0; i < elems.length; i++) {
    ret += textContent(elems[i]);
  }
  return ret;
}
function parseHTML(data2, context, keepScripts = typeof context === "boolean" ? context : false) {
  if (!data2 || typeof data2 !== "string") {
    return null;
  }
  if (typeof context === "boolean") {
    keepScripts = context;
  }
  const parsed = this.load(data2, this._options, false);
  if (!keepScripts) {
    parsed("script").remove();
  }
  return [...parsed.root()[0].children];
}
function root() {
  return this(this._root);
}
function contains(container, contained) {
  if (contained === container) {
    return false;
  }
  let next2 = contained;
  while (next2 && next2 !== next2.parent) {
    next2 = next2.parent;
    if (next2 === container) {
      return true;
    }
  }
  return false;
}
function extract(map2) {
  return this.root().extract(map2);
}
function merge2(arr1, arr2) {
  if (!isArrayLike(arr1) || !isArrayLike(arr2)) {
    return;
  }
  let newLength = arr1.length;
  const len = +arr2.length;
  for (let i = 0; i < len; i++) {
    arr1[newLength++] = arr2[i];
  }
  arr1.length = newLength;
  return arr1;
}
function isArrayLike(item) {
  if (Array.isArray(item)) {
    return true;
  }
  if (typeof item !== "object" || item === null || !("length" in item) || typeof item.length !== "number" || item.length < 0) {
    return false;
  }
  for (let i = 0; i < item.length; i++) {
    if (!(i in item)) {
      return false;
    }
  }
  return true;
}

// node_modules/cheerio/dist/browser/api/attributes.js
var attributes_exports = {};
__export(attributes_exports, {
  addClass: () => addClass,
  attr: () => attr,
  data: () => data,
  hasClass: () => hasClass,
  prop: () => prop,
  removeAttr: () => removeAttr,
  removeClass: () => removeClass,
  toggleClass: () => toggleClass,
  val: () => val
});

// node_modules/cheerio/dist/browser/utils.js
function isCheerio(maybeCheerio) {
  return maybeCheerio.cheerio != null;
}
function camelCase(str) {
  return str.replace(/[._-](\w|$)/g, (_2, x2) => x2.toUpperCase());
}
function cssCase(str) {
  return str.replace(/[A-Z]/g, "-$&").toLowerCase();
}
function domEach(array, fn) {
  const len = array.length;
  for (let i = 0; i < len; i++)
    fn(array[i], i);
  return array;
}
var CharacterCode;
(function(CharacterCode2) {
  CharacterCode2[CharacterCode2["LowerA"] = 97] = "LowerA";
  CharacterCode2[CharacterCode2["LowerZ"] = 122] = "LowerZ";
  CharacterCode2[CharacterCode2["UpperA"] = 65] = "UpperA";
  CharacterCode2[CharacterCode2["UpperZ"] = 90] = "UpperZ";
  CharacterCode2[CharacterCode2["Exclamation"] = 33] = "Exclamation";
})(CharacterCode || (CharacterCode = {}));
function isHtml(str) {
  const tagStart = str.indexOf("<");
  if (tagStart === -1 || tagStart > str.length - 3)
    return false;
  const tagChar = str.charCodeAt(tagStart + 1);
  return (tagChar >= CharacterCode.LowerA && tagChar <= CharacterCode.LowerZ || tagChar >= CharacterCode.UpperA && tagChar <= CharacterCode.UpperZ || tagChar === CharacterCode.Exclamation) && str.includes(">", tagStart + 2);
}

// node_modules/htmlparser2/node_modules/entities/dist/esm/generated/decode-data-html.js
var htmlDecodeTree = /* @__PURE__ */ new Uint16Array(
  // prettier-ignore
  /* @__PURE__ */ '\u1D41<\xD5\u0131\u028A\u049D\u057B\u05D0\u0675\u06DE\u07A2\u07D6\u080F\u0A4A\u0A91\u0DA1\u0E6D\u0F09\u0F26\u10CA\u1228\u12E1\u1415\u149D\u14C3\u14DF\u1525\0\0\0\0\0\0\u156B\u16CD\u198D\u1C12\u1DDD\u1F7E\u2060\u21B0\u228D\u23C0\u23FB\u2442\u2824\u2912\u2D08\u2E48\u2FCE\u3016\u32BA\u3639\u37AC\u38FE\u3A28\u3A71\u3AE0\u3B2E\u0800EMabcfglmnoprstu\\bfms\x7F\x84\x8B\x90\x95\x98\xA6\xB3\xB9\xC8\xCFlig\u803B\xC6\u40C6P\u803B&\u4026cute\u803B\xC1\u40C1reve;\u4102\u0100iyx}rc\u803B\xC2\u40C2;\u4410r;\uC000\u{1D504}rave\u803B\xC0\u40C0pha;\u4391acr;\u4100d;\u6A53\u0100gp\x9D\xA1on;\u4104f;\uC000\u{1D538}plyFunction;\u6061ing\u803B\xC5\u40C5\u0100cs\xBE\xC3r;\uC000\u{1D49C}ign;\u6254ilde\u803B\xC3\u40C3ml\u803B\xC4\u40C4\u0400aceforsu\xE5\xFB\xFE\u0117\u011C\u0122\u0127\u012A\u0100cr\xEA\xF2kslash;\u6216\u0176\xF6\xF8;\u6AE7ed;\u6306y;\u4411\u0180crt\u0105\u010B\u0114ause;\u6235noullis;\u612Ca;\u4392r;\uC000\u{1D505}pf;\uC000\u{1D539}eve;\u42D8c\xF2\u0113mpeq;\u624E\u0700HOacdefhilorsu\u014D\u0151\u0156\u0180\u019E\u01A2\u01B5\u01B7\u01BA\u01DC\u0215\u0273\u0278\u027Ecy;\u4427PY\u803B\xA9\u40A9\u0180cpy\u015D\u0162\u017Aute;\u4106\u0100;i\u0167\u0168\u62D2talDifferentialD;\u6145leys;\u612D\u0200aeio\u0189\u018E\u0194\u0198ron;\u410Cdil\u803B\xC7\u40C7rc;\u4108nint;\u6230ot;\u410A\u0100dn\u01A7\u01ADilla;\u40B8terDot;\u40B7\xF2\u017Fi;\u43A7rcle\u0200DMPT\u01C7\u01CB\u01D1\u01D6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01E2\u01F8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020FoubleQuote;\u601Duote;\u6019\u0200lnpu\u021E\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6A74\u0180git\u022F\u0236\u023Aruent;\u6261nt;\u622FourIntegral;\u622E\u0100fr\u024C\u024E;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6A2Fcr;\uC000\u{1D49E}p\u0100;C\u0284\u0285\u62D3ap;\u624D\u0580DJSZacefios\u02A0\u02AC\u02B0\u02B4\u02B8\u02CB\u02D7\u02E1\u02E6\u0333\u048D\u0100;o\u0179\u02A5trahd;\u6911cy;\u4402cy;\u4405cy;\u440F\u0180grs\u02BF\u02C4\u02C7ger;\u6021r;\u61A1hv;\u6AE4\u0100ay\u02D0\u02D5ron;\u410E;\u4414l\u0100;t\u02DD\u02DE\u6207a;\u4394r;\uC000\u{1D507}\u0100af\u02EB\u0327\u0100cm\u02F0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031Ccute;\u40B4o\u0174\u030B\u030D;\u42D9bleAcute;\u42DDrave;\u4060ilde;\u42DCond;\u62C4ferentialD;\u6146\u0470\u033D\0\0\0\u0342\u0354\0\u0405f;\uC000\u{1D53B}\u0180;DE\u0348\u0349\u034D\u40A8ot;\u60DCqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03CF\u03E2\u03F8ontourIntegra\xEC\u0239o\u0274\u0379\0\0\u037B\xBB\u0349nArrow;\u61D3\u0100eo\u0387\u03A4ft\u0180ART\u0390\u0396\u03A1rrow;\u61D0ightArrow;\u61D4e\xE5\u02CAng\u0100LR\u03AB\u03C4eft\u0100AR\u03B3\u03B9rrow;\u67F8ightArrow;\u67FAightArrow;\u67F9ight\u0100AT\u03D8\u03DErrow;\u61D2ee;\u62A8p\u0241\u03E9\0\0\u03EFrrow;\u61D1ownArrow;\u61D5erticalBar;\u6225n\u0300ABLRTa\u0412\u042A\u0430\u045E\u047F\u037Crrow\u0180;BU\u041D\u041E\u0422\u6193ar;\u6913pArrow;\u61F5reve;\u4311eft\u02D2\u043A\0\u0446\0\u0450ightVector;\u6950eeVector;\u695Eector\u0100;B\u0459\u045A\u61BDar;\u6956ight\u01D4\u0467\0\u0471eeVector;\u695Fector\u0100;B\u047A\u047B\u61C1ar;\u6957ee\u0100;A\u0486\u0487\u62A4rrow;\u61A7\u0100ct\u0492\u0497r;\uC000\u{1D49F}rok;\u4110\u0800NTacdfglmopqstux\u04BD\u04C0\u04C4\u04CB\u04DE\u04E2\u04E7\u04EE\u04F5\u0521\u052F\u0536\u0552\u055D\u0560\u0565G;\u414AH\u803B\xD0\u40D0cute\u803B\xC9\u40C9\u0180aiy\u04D2\u04D7\u04DCron;\u411Arc\u803B\xCA\u40CA;\u442Dot;\u4116r;\uC000\u{1D508}rave\u803B\xC8\u40C8ement;\u6208\u0100ap\u04FA\u04FEcr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65FBerySmallSquare;\u65AB\u0100gp\u0526\u052Aon;\u4118f;\uC000\u{1D53C}silon;\u4395u\u0100ai\u053C\u0549l\u0100;T\u0542\u0543\u6A75ilde;\u6242librium;\u61CC\u0100ci\u0557\u055Ar;\u6130m;\u6A73a;\u4397ml\u803B\xCB\u40CB\u0100ip\u056A\u056Fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058D\u05B2\u05CCy;\u4424r;\uC000\u{1D509}lled\u0253\u0597\0\0\u05A3mallSquare;\u65FCerySmallSquare;\u65AA\u0370\u05BA\0\u05BF\0\0\u05C4f;\uC000\u{1D53D}All;\u6200riertrf;\u6131c\xF2\u05CB\u0600JTabcdfgorst\u05E8\u05EC\u05EF\u05FA\u0600\u0612\u0616\u061B\u061D\u0623\u066C\u0672cy;\u4403\u803B>\u403Emma\u0100;d\u05F7\u05F8\u4393;\u43DCreve;\u411E\u0180eiy\u0607\u060C\u0610dil;\u4122rc;\u411C;\u4413ot;\u4120r;\uC000\u{1D50A};\u62D9pf;\uC000\u{1D53E}eater\u0300EFGLST\u0635\u0644\u064E\u0656\u065B\u0666qual\u0100;L\u063E\u063F\u6265ess;\u62DBullEqual;\u6267reater;\u6AA2ess;\u6277lantEqual;\u6A7Eilde;\u6273cr;\uC000\u{1D4A2};\u626B\u0400Aacfiosu\u0685\u068B\u0696\u069B\u069E\u06AA\u06BE\u06CARDcy;\u442A\u0100ct\u0690\u0694ek;\u42C7;\u405Eirc;\u4124r;\u610ClbertSpace;\u610B\u01F0\u06AF\0\u06B2f;\u610DizontalLine;\u6500\u0100ct\u06C3\u06C5\xF2\u06A9rok;\u4126mp\u0144\u06D0\u06D8ownHum\xF0\u012Fqual;\u624F\u0700EJOacdfgmnostu\u06FA\u06FE\u0703\u0707\u070E\u071A\u071E\u0721\u0728\u0744\u0778\u078B\u078F\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803B\xCD\u40CD\u0100iy\u0713\u0718rc\u803B\xCE\u40CE;\u4418ot;\u4130r;\u6111rave\u803B\xCC\u40CC\u0180;ap\u0720\u072F\u073F\u0100cg\u0734\u0737r;\u412AinaryI;\u6148lie\xF3\u03DD\u01F4\u0749\0\u0762\u0100;e\u074D\u074E\u622C\u0100gr\u0753\u0758ral;\u622Bsection;\u62C2isible\u0100CT\u076C\u0772omma;\u6063imes;\u6062\u0180gpt\u077F\u0783\u0788on;\u412Ef;\uC000\u{1D540}a;\u4399cr;\u6110ilde;\u4128\u01EB\u079A\0\u079Ecy;\u4406l\u803B\xCF\u40CF\u0280cfosu\u07AC\u07B7\u07BC\u07C2\u07D0\u0100iy\u07B1\u07B5rc;\u4134;\u4419r;\uC000\u{1D50D}pf;\uC000\u{1D541}\u01E3\u07C7\0\u07CCr;\uC000\u{1D4A5}rcy;\u4408kcy;\u4404\u0380HJacfos\u07E4\u07E8\u07EC\u07F1\u07FD\u0802\u0808cy;\u4425cy;\u440Cppa;\u439A\u0100ey\u07F6\u07FBdil;\u4136;\u441Ar;\uC000\u{1D50E}pf;\uC000\u{1D542}cr;\uC000\u{1D4A6}\u0580JTaceflmost\u0825\u0829\u082C\u0850\u0863\u09B3\u09B8\u09C7\u09CD\u0A37\u0A47cy;\u4409\u803B<\u403C\u0280cmnpr\u0837\u083C\u0841\u0844\u084Dute;\u4139bda;\u439Bg;\u67EAlacetrf;\u6112r;\u619E\u0180aey\u0857\u085C\u0861ron;\u413Ddil;\u413B;\u441B\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087E\u08A9\u08B1\u08E0\u08E6\u08FC\u092F\u095B\u0390\u096A\u0100nr\u0883\u088FgleBracket;\u67E8row\u0180;BR\u0899\u089A\u089E\u6190ar;\u61E4ightArrow;\u61C6eiling;\u6308o\u01F5\u08B7\0\u08C3bleBracket;\u67E6n\u01D4\u08C8\0\u08D2eeVector;\u6961ector\u0100;B\u08DB\u08DC\u61C3ar;\u6959loor;\u630Aight\u0100AV\u08EF\u08F5rrow;\u6194ector;\u694E\u0100er\u0901\u0917e\u0180;AV\u0909\u090A\u0910\u62A3rrow;\u61A4ector;\u695Aiangle\u0180;BE\u0924\u0925\u0929\u62B2ar;\u69CFqual;\u62B4p\u0180DTV\u0937\u0942\u094CownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61BFar;\u6958ector\u0100;B\u0965\u0966\u61BCar;\u6952ight\xE1\u039Cs\u0300EFGLST\u097E\u098B\u0995\u099D\u09A2\u09ADqualGreater;\u62DAullEqual;\u6266reater;\u6276ess;\u6AA1lantEqual;\u6A7Dilde;\u6272r;\uC000\u{1D50F}\u0100;e\u09BD\u09BE\u62D8ftarrow;\u61DAidot;\u413F\u0180npw\u09D4\u0A16\u0A1Bg\u0200LRlr\u09DE\u09F7\u0A02\u0A10eft\u0100AR\u09E6\u09ECrrow;\u67F5ightArrow;\u67F7ightArrow;\u67F6eft\u0100ar\u03B3\u0A0Aight\xE1\u03BFight\xE1\u03CAf;\uC000\u{1D543}er\u0100LR\u0A22\u0A2CeftArrow;\u6199ightArrow;\u6198\u0180cht\u0A3E\u0A40\u0A42\xF2\u084C;\u61B0rok;\u4141;\u626A\u0400acefiosu\u0A5A\u0A5D\u0A60\u0A77\u0A7C\u0A85\u0A8B\u0A8Ep;\u6905y;\u441C\u0100dl\u0A65\u0A6FiumSpace;\u605Flintrf;\u6133r;\uC000\u{1D510}nusPlus;\u6213pf;\uC000\u{1D544}c\xF2\u0A76;\u439C\u0480Jacefostu\u0AA3\u0AA7\u0AAD\u0AC0\u0B14\u0B19\u0D91\u0D97\u0D9Ecy;\u440Acute;\u4143\u0180aey\u0AB4\u0AB9\u0ABEron;\u4147dil;\u4145;\u441D\u0180gsw\u0AC7\u0AF0\u0B0Eative\u0180MTV\u0AD3\u0ADF\u0AE8ediumSpace;\u600Bhi\u0100cn\u0AE6\u0AD8\xEB\u0AD9eryThi\xEE\u0AD9ted\u0100GL\u0AF8\u0B06reaterGreate\xF2\u0673essLes\xF3\u0A48Line;\u400Ar;\uC000\u{1D511}\u0200Bnpt\u0B22\u0B28\u0B37\u0B3Areak;\u6060BreakingSpace;\u40A0f;\u6115\u0680;CDEGHLNPRSTV\u0B55\u0B56\u0B6A\u0B7C\u0BA1\u0BEB\u0C04\u0C5E\u0C84\u0CA6\u0CD8\u0D61\u0D85\u6AEC\u0100ou\u0B5B\u0B64ngruent;\u6262pCap;\u626DoubleVerticalBar;\u6226\u0180lqx\u0B83\u0B8A\u0B9Bement;\u6209ual\u0100;T\u0B92\u0B93\u6260ilde;\uC000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0BB6\u0BB7\u0BBD\u0BC9\u0BD3\u0BD8\u0BE5\u626Fqual;\u6271ullEqual;\uC000\u2267\u0338reater;\uC000\u226B\u0338ess;\u6279lantEqual;\uC000\u2A7E\u0338ilde;\u6275ump\u0144\u0BF2\u0BFDownHump;\uC000\u224E\u0338qual;\uC000\u224F\u0338e\u0100fs\u0C0A\u0C27tTriangle\u0180;BE\u0C1A\u0C1B\u0C21\u62EAar;\uC000\u29CF\u0338qual;\u62ECs\u0300;EGLST\u0C35\u0C36\u0C3C\u0C44\u0C4B\u0C58\u626Equal;\u6270reater;\u6278ess;\uC000\u226A\u0338lantEqual;\uC000\u2A7D\u0338ilde;\u6274ested\u0100GL\u0C68\u0C79reaterGreater;\uC000\u2AA2\u0338essLess;\uC000\u2AA1\u0338recedes\u0180;ES\u0C92\u0C93\u0C9B\u6280qual;\uC000\u2AAF\u0338lantEqual;\u62E0\u0100ei\u0CAB\u0CB9verseElement;\u620CghtTriangle\u0180;BE\u0CCB\u0CCC\u0CD2\u62EBar;\uC000\u29D0\u0338qual;\u62ED\u0100qu\u0CDD\u0D0CuareSu\u0100bp\u0CE8\u0CF9set\u0100;E\u0CF0\u0CF3\uC000\u228F\u0338qual;\u62E2erset\u0100;E\u0D03\u0D06\uC000\u2290\u0338qual;\u62E3\u0180bcp\u0D13\u0D24\u0D4Eset\u0100;E\u0D1B\u0D1E\uC000\u2282\u20D2qual;\u6288ceeds\u0200;EST\u0D32\u0D33\u0D3B\u0D46\u6281qual;\uC000\u2AB0\u0338lantEqual;\u62E1ilde;\uC000\u227F\u0338erset\u0100;E\u0D58\u0D5B\uC000\u2283\u20D2qual;\u6289ilde\u0200;EFT\u0D6E\u0D6F\u0D75\u0D7F\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uC000\u{1D4A9}ilde\u803B\xD1\u40D1;\u439D\u0700Eacdfgmoprstuv\u0DBD\u0DC2\u0DC9\u0DD5\u0DDB\u0DE0\u0DE7\u0DFC\u0E02\u0E20\u0E22\u0E32\u0E3F\u0E44lig;\u4152cute\u803B\xD3\u40D3\u0100iy\u0DCE\u0DD3rc\u803B\xD4\u40D4;\u441Eblac;\u4150r;\uC000\u{1D512}rave\u803B\xD2\u40D2\u0180aei\u0DEE\u0DF2\u0DF6cr;\u414Cga;\u43A9cron;\u439Fpf;\uC000\u{1D546}enCurly\u0100DQ\u0E0E\u0E1AoubleQuote;\u601Cuote;\u6018;\u6A54\u0100cl\u0E27\u0E2Cr;\uC000\u{1D4AA}ash\u803B\xD8\u40D8i\u016C\u0E37\u0E3Cde\u803B\xD5\u40D5es;\u6A37ml\u803B\xD6\u40D6er\u0100BP\u0E4B\u0E60\u0100ar\u0E50\u0E53r;\u603Eac\u0100ek\u0E5A\u0E5C;\u63DEet;\u63B4arenthesis;\u63DC\u0480acfhilors\u0E7F\u0E87\u0E8A\u0E8F\u0E92\u0E94\u0E9D\u0EB0\u0EFCrtialD;\u6202y;\u441Fr;\uC000\u{1D513}i;\u43A6;\u43A0usMinus;\u40B1\u0100ip\u0EA2\u0EADncareplan\xE5\u069Df;\u6119\u0200;eio\u0EB9\u0EBA\u0EE0\u0EE4\u6ABBcedes\u0200;EST\u0EC8\u0EC9\u0ECF\u0EDA\u627Aqual;\u6AAFlantEqual;\u627Cilde;\u627Eme;\u6033\u0100dp\u0EE9\u0EEEuct;\u620Fortion\u0100;a\u0225\u0EF9l;\u621D\u0100ci\u0F01\u0F06r;\uC000\u{1D4AB};\u43A8\u0200Ufos\u0F11\u0F16\u0F1B\u0F1FOT\u803B"\u4022r;\uC000\u{1D514}pf;\u611Acr;\uC000\u{1D4AC}\u0600BEacefhiorsu\u0F3E\u0F43\u0F47\u0F60\u0F73\u0FA7\u0FAA\u0FAD\u1096\u10A9\u10B4\u10BEarr;\u6910G\u803B\xAE\u40AE\u0180cnr\u0F4E\u0F53\u0F56ute;\u4154g;\u67EBr\u0100;t\u0F5C\u0F5D\u61A0l;\u6916\u0180aey\u0F67\u0F6C\u0F71ron;\u4158dil;\u4156;\u4420\u0100;v\u0F78\u0F79\u611Cerse\u0100EU\u0F82\u0F99\u0100lq\u0F87\u0F8Eement;\u620Builibrium;\u61CBpEquilibrium;\u696Fr\xBB\u0F79o;\u43A1ght\u0400ACDFTUVa\u0FC1\u0FEB\u0FF3\u1022\u1028\u105B\u1087\u03D8\u0100nr\u0FC6\u0FD2gleBracket;\u67E9row\u0180;BL\u0FDC\u0FDD\u0FE1\u6192ar;\u61E5eftArrow;\u61C4eiling;\u6309o\u01F5\u0FF9\0\u1005bleBracket;\u67E7n\u01D4\u100A\0\u1014eeVector;\u695Dector\u0100;B\u101D\u101E\u61C2ar;\u6955loor;\u630B\u0100er\u102D\u1043e\u0180;AV\u1035\u1036\u103C\u62A2rrow;\u61A6ector;\u695Biangle\u0180;BE\u1050\u1051\u1055\u62B3ar;\u69D0qual;\u62B5p\u0180DTV\u1063\u106E\u1078ownVector;\u694FeeVector;\u695Cector\u0100;B\u1082\u1083\u61BEar;\u6954ector\u0100;B\u1091\u1092\u61C0ar;\u6953\u0100pu\u109B\u109Ef;\u611DndImplies;\u6970ightarrow;\u61DB\u0100ch\u10B9\u10BCr;\u611B;\u61B1leDelayed;\u69F4\u0680HOacfhimoqstu\u10E4\u10F1\u10F7\u10FD\u1119\u111E\u1151\u1156\u1161\u1167\u11B5\u11BB\u11BF\u0100Cc\u10E9\u10EEHcy;\u4429y;\u4428FTcy;\u442Ccute;\u415A\u0280;aeiy\u1108\u1109\u110E\u1113\u1117\u6ABCron;\u4160dil;\u415Erc;\u415C;\u4421r;\uC000\u{1D516}ort\u0200DLRU\u112A\u1134\u113E\u1149ownArrow\xBB\u041EeftArrow\xBB\u089AightArrow\xBB\u0FDDpArrow;\u6191gma;\u43A3allCircle;\u6218pf;\uC000\u{1D54A}\u0272\u116D\0\0\u1170t;\u621Aare\u0200;ISU\u117B\u117C\u1189\u11AF\u65A1ntersection;\u6293u\u0100bp\u118F\u119Eset\u0100;E\u1197\u1198\u628Fqual;\u6291erset\u0100;E\u11A8\u11A9\u6290qual;\u6292nion;\u6294cr;\uC000\u{1D4AE}ar;\u62C6\u0200bcmp\u11C8\u11DB\u1209\u120B\u0100;s\u11CD\u11CE\u62D0et\u0100;E\u11CD\u11D5qual;\u6286\u0100ch\u11E0\u1205eeds\u0200;EST\u11ED\u11EE\u11F4\u11FF\u627Bqual;\u6AB0lantEqual;\u627Dilde;\u627FTh\xE1\u0F8C;\u6211\u0180;es\u1212\u1213\u1223\u62D1rset\u0100;E\u121C\u121D\u6283qual;\u6287et\xBB\u1213\u0580HRSacfhiors\u123E\u1244\u1249\u1255\u125E\u1271\u1276\u129F\u12C2\u12C8\u12D1ORN\u803B\xDE\u40DEADE;\u6122\u0100Hc\u124E\u1252cy;\u440By;\u4426\u0100bu\u125A\u125C;\u4009;\u43A4\u0180aey\u1265\u126A\u126Fron;\u4164dil;\u4162;\u4422r;\uC000\u{1D517}\u0100ei\u127B\u1289\u01F2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128E\u1298kSpace;\uC000\u205F\u200ASpace;\u6009lde\u0200;EFT\u12AB\u12AC\u12B2\u12BC\u623Cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uC000\u{1D54B}ipleDot;\u60DB\u0100ct\u12D6\u12DBr;\uC000\u{1D4AF}rok;\u4166\u0AE1\u12F7\u130E\u131A\u1326\0\u132C\u1331\0\0\0\0\0\u1338\u133D\u1377\u1385\0\u13FF\u1404\u140A\u1410\u0100cr\u12FB\u1301ute\u803B\xDA\u40DAr\u0100;o\u1307\u1308\u619Fcir;\u6949r\u01E3\u1313\0\u1316y;\u440Eve;\u416C\u0100iy\u131E\u1323rc\u803B\xDB\u40DB;\u4423blac;\u4170r;\uC000\u{1D518}rave\u803B\xD9\u40D9acr;\u416A\u0100di\u1341\u1369er\u0100BP\u1348\u135D\u0100ar\u134D\u1350r;\u405Fac\u0100ek\u1357\u1359;\u63DFet;\u63B5arenthesis;\u63DDon\u0100;P\u1370\u1371\u62C3lus;\u628E\u0100gp\u137B\u137Fon;\u4172f;\uC000\u{1D54C}\u0400ADETadps\u1395\u13AE\u13B8\u13C4\u03E8\u13D2\u13D7\u13F3rrow\u0180;BD\u1150\u13A0\u13A4ar;\u6912ownArrow;\u61C5ownArrow;\u6195quilibrium;\u696Eee\u0100;A\u13CB\u13CC\u62A5rrow;\u61A5own\xE1\u03F3er\u0100LR\u13DE\u13E8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13F9\u13FA\u43D2on;\u43A5ing;\u416Ecr;\uC000\u{1D4B0}ilde;\u4168ml\u803B\xDC\u40DC\u0480Dbcdefosv\u1427\u142C\u1430\u1433\u143E\u1485\u148A\u1490\u1496ash;\u62ABar;\u6AEBy;\u4412ash\u0100;l\u143B\u143C\u62A9;\u6AE6\u0100er\u1443\u1445;\u62C1\u0180bty\u144C\u1450\u147Aar;\u6016\u0100;i\u144F\u1455cal\u0200BLST\u1461\u1465\u146A\u1474ar;\u6223ine;\u407Ceparator;\u6758ilde;\u6240ThinSpace;\u600Ar;\uC000\u{1D519}pf;\uC000\u{1D54D}cr;\uC000\u{1D4B1}dash;\u62AA\u0280cefos\u14A7\u14AC\u14B1\u14B6\u14BCirc;\u4174dge;\u62C0r;\uC000\u{1D51A}pf;\uC000\u{1D54E}cr;\uC000\u{1D4B2}\u0200fios\u14CB\u14D0\u14D2\u14D8r;\uC000\u{1D51B};\u439Epf;\uC000\u{1D54F}cr;\uC000\u{1D4B3}\u0480AIUacfosu\u14F1\u14F5\u14F9\u14FD\u1504\u150F\u1514\u151A\u1520cy;\u442Fcy;\u4407cy;\u442Ecute\u803B\xDD\u40DD\u0100iy\u1509\u150Drc;\u4176;\u442Br;\uC000\u{1D51C}pf;\uC000\u{1D550}cr;\uC000\u{1D4B4}ml;\u4178\u0400Hacdefos\u1535\u1539\u153F\u154B\u154F\u155D\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417D;\u4417ot;\u417B\u01F2\u1554\0\u155BoWidt\xE8\u0AD9a;\u4396r;\u6128pf;\u6124cr;\uC000\u{1D4B5}\u0BE1\u1583\u158A\u1590\0\u15B0\u15B6\u15BF\0\0\0\0\u15C6\u15DB\u15EB\u165F\u166D\0\u1695\u169B\u16B2\u16B9\0\u16BEcute\u803B\xE1\u40E1reve;\u4103\u0300;Ediuy\u159C\u159D\u15A1\u15A3\u15A8\u15AD\u623E;\uC000\u223E\u0333;\u623Frc\u803B\xE2\u40E2te\u80BB\xB4\u0306;\u4430lig\u803B\xE6\u40E6\u0100;r\xB2\u15BA;\uC000\u{1D51E}rave\u803B\xE0\u40E0\u0100ep\u15CA\u15D6\u0100fp\u15CF\u15D4sym;\u6135\xE8\u15D3ha;\u43B1\u0100ap\u15DFc\u0100cl\u15E4\u15E7r;\u4101g;\u6A3F\u0264\u15F0\0\0\u160A\u0280;adsv\u15FA\u15FB\u15FF\u1601\u1607\u6227nd;\u6A55;\u6A5Clope;\u6A58;\u6A5A\u0380;elmrsz\u1618\u1619\u161B\u161E\u163F\u164F\u1659\u6220;\u69A4e\xBB\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163A\u163C\u163E;\u69A8;\u69A9;\u69AA;\u69AB;\u69AC;\u69AD;\u69AE;\u69AFt\u0100;v\u1645\u1646\u621Fb\u0100;d\u164C\u164D\u62BE;\u699D\u0100pt\u1654\u1657h;\u6222\xBB\xB9arr;\u637C\u0100gp\u1663\u1667on;\u4105f;\uC000\u{1D552}\u0380;Eaeiop\u12C1\u167B\u167D\u1682\u1684\u1687\u168A;\u6A70cir;\u6A6F;\u624Ad;\u624Bs;\u4027rox\u0100;e\u12C1\u1692\xF1\u1683ing\u803B\xE5\u40E5\u0180cty\u16A1\u16A6\u16A8r;\uC000\u{1D4B6};\u402Amp\u0100;e\u12C1\u16AF\xF1\u0288ilde\u803B\xE3\u40E3ml\u803B\xE4\u40E4\u0100ci\u16C2\u16C8onin\xF4\u0272nt;\u6A11\u0800Nabcdefiklnoprsu\u16ED\u16F1\u1730\u173C\u1743\u1748\u1778\u177D\u17E0\u17E6\u1839\u1850\u170D\u193D\u1948\u1970ot;\u6AED\u0100cr\u16F6\u171Ek\u0200ceps\u1700\u1705\u170D\u1713ong;\u624Cpsilon;\u43F6rime;\u6035im\u0100;e\u171A\u171B\u623Dq;\u62CD\u0176\u1722\u1726ee;\u62BDed\u0100;g\u172C\u172D\u6305e\xBB\u172Drk\u0100;t\u135C\u1737brk;\u63B6\u0100oy\u1701\u1741;\u4431quo;\u601E\u0280cmprt\u1753\u175B\u1761\u1764\u1768aus\u0100;e\u010A\u0109ptyv;\u69B0s\xE9\u170Cno\xF5\u0113\u0180ahw\u176F\u1771\u1773;\u43B2;\u6136een;\u626Cr;\uC000\u{1D51F}g\u0380costuvw\u178D\u179D\u17B3\u17C1\u17D5\u17DB\u17DE\u0180aiu\u1794\u1796\u179A\xF0\u0760rc;\u65EFp\xBB\u1371\u0180dpt\u17A4\u17A8\u17ADot;\u6A00lus;\u6A01imes;\u6A02\u0271\u17B9\0\0\u17BEcup;\u6A06ar;\u6605riangle\u0100du\u17CD\u17D2own;\u65BDp;\u65B3plus;\u6A04e\xE5\u1444\xE5\u14ADarow;\u690D\u0180ako\u17ED\u1826\u1835\u0100cn\u17F2\u1823k\u0180lst\u17FA\u05AB\u1802ozenge;\u69EBriangle\u0200;dlr\u1812\u1813\u1818\u181D\u65B4own;\u65BEeft;\u65C2ight;\u65B8k;\u6423\u01B1\u182B\0\u1833\u01B2\u182F\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183E\u184D\u0100;q\u1843\u1846\uC000=\u20E5uiv;\uC000\u2261\u20E5t;\u6310\u0200ptwx\u1859\u185E\u1867\u186Cf;\uC000\u{1D553}\u0100;t\u13CB\u1863om\xBB\u13CCtie;\u62C8\u0600DHUVbdhmptuv\u1885\u1896\u18AA\u18BB\u18D7\u18DB\u18EC\u18FF\u1905\u190A\u1910\u1921\u0200LRlr\u188E\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18A1\u18A2\u18A4\u18A6\u18A8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18B3\u18B5\u18B7\u18B9;\u655D;\u655A;\u655C;\u6559\u0380;HLRhlr\u18CA\u18CB\u18CD\u18CF\u18D1\u18D3\u18D5\u6551;\u656C;\u6563;\u6560;\u656B;\u6562;\u655Fox;\u69C9\u0200LRlr\u18E4\u18E6\u18E8\u18EA;\u6555;\u6552;\u6510;\u650C\u0280;DUdu\u06BD\u18F7\u18F9\u18FB\u18FD;\u6565;\u6568;\u652C;\u6534inus;\u629Flus;\u629Eimes;\u62A0\u0200LRlr\u1919\u191B\u191D\u191F;\u655B;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193B\u6502;\u656A;\u6561;\u655E;\u653C;\u6524;\u651C\u0100ev\u0123\u1942bar\u803B\xA6\u40A6\u0200ceio\u1951\u1956\u195A\u1960r;\uC000\u{1D4B7}mi;\u604Fm\u0100;e\u171A\u171Cl\u0180;bh\u1968\u1969\u196B\u405C;\u69C5sub;\u67C8\u016C\u1974\u197El\u0100;e\u1979\u197A\u6022t\xBB\u197Ap\u0180;Ee\u012F\u1985\u1987;\u6AAE\u0100;q\u06DC\u06DB\u0CE1\u19A7\0\u19E8\u1A11\u1A15\u1A32\0\u1A37\u1A50\0\0\u1AB4\0\0\u1AC1\0\0\u1B21\u1B2E\u1B4D\u1B52\0\u1BFD\0\u1C0C\u0180cpr\u19AD\u19B2\u19DDute;\u4107\u0300;abcds\u19BF\u19C0\u19C4\u19CA\u19D5\u19D9\u6229nd;\u6A44rcup;\u6A49\u0100au\u19CF\u19D2p;\u6A4Bp;\u6A47ot;\u6A40;\uC000\u2229\uFE00\u0100eo\u19E2\u19E5t;\u6041\xEE\u0693\u0200aeiu\u19F0\u19FB\u1A01\u1A05\u01F0\u19F5\0\u19F8s;\u6A4Don;\u410Ddil\u803B\xE7\u40E7rc;\u4109ps\u0100;s\u1A0C\u1A0D\u6A4Cm;\u6A50ot;\u410B\u0180dmn\u1A1B\u1A20\u1A26il\u80BB\xB8\u01ADptyv;\u69B2t\u8100\xA2;e\u1A2D\u1A2E\u40A2r\xE4\u01B2r;\uC000\u{1D520}\u0180cei\u1A3D\u1A40\u1A4Dy;\u4447ck\u0100;m\u1A47\u1A48\u6713ark\xBB\u1A48;\u43C7r\u0380;Ecefms\u1A5F\u1A60\u1A62\u1A6B\u1AA4\u1AAA\u1AAE\u65CB;\u69C3\u0180;el\u1A69\u1A6A\u1A6D\u42C6q;\u6257e\u0261\u1A74\0\0\u1A88rrow\u0100lr\u1A7C\u1A81eft;\u61BAight;\u61BB\u0280RSacd\u1A92\u1A94\u1A96\u1A9A\u1A9F\xBB\u0F47;\u64C8st;\u629Birc;\u629Aash;\u629Dnint;\u6A10id;\u6AEFcir;\u69C2ubs\u0100;u\u1ABB\u1ABC\u6663it\xBB\u1ABC\u02EC\u1AC7\u1AD4\u1AFA\0\u1B0Aon\u0100;e\u1ACD\u1ACE\u403A\u0100;q\xC7\xC6\u026D\u1AD9\0\0\u1AE2a\u0100;t\u1ADE\u1ADF\u402C;\u4040\u0180;fl\u1AE8\u1AE9\u1AEB\u6201\xEE\u1160e\u0100mx\u1AF1\u1AF6ent\xBB\u1AE9e\xF3\u024D\u01E7\u1AFE\0\u1B07\u0100;d\u12BB\u1B02ot;\u6A6Dn\xF4\u0246\u0180fry\u1B10\u1B14\u1B17;\uC000\u{1D554}o\xE4\u0254\u8100\xA9;s\u0155\u1B1Dr;\u6117\u0100ao\u1B25\u1B29rr;\u61B5ss;\u6717\u0100cu\u1B32\u1B37r;\uC000\u{1D4B8}\u0100bp\u1B3C\u1B44\u0100;e\u1B41\u1B42\u6ACF;\u6AD1\u0100;e\u1B49\u1B4A\u6AD0;\u6AD2dot;\u62EF\u0380delprvw\u1B60\u1B6C\u1B77\u1B82\u1BAC\u1BD4\u1BF9arr\u0100lr\u1B68\u1B6A;\u6938;\u6935\u0270\u1B72\0\0\u1B75r;\u62DEc;\u62DFarr\u0100;p\u1B7F\u1B80\u61B6;\u693D\u0300;bcdos\u1B8F\u1B90\u1B96\u1BA1\u1BA5\u1BA8\u622Arcap;\u6A48\u0100au\u1B9B\u1B9Ep;\u6A46p;\u6A4Aot;\u628Dr;\u6A45;\uC000\u222A\uFE00\u0200alrv\u1BB5\u1BBF\u1BDE\u1BE3rr\u0100;m\u1BBC\u1BBD\u61B7;\u693Cy\u0180evw\u1BC7\u1BD4\u1BD8q\u0270\u1BCE\0\0\u1BD2re\xE3\u1B73u\xE3\u1B75ee;\u62CEedge;\u62CFen\u803B\xA4\u40A4earrow\u0100lr\u1BEE\u1BF3eft\xBB\u1B80ight\xBB\u1BBDe\xE4\u1BDD\u0100ci\u1C01\u1C07onin\xF4\u01F7nt;\u6231lcty;\u632D\u0980AHabcdefhijlorstuwz\u1C38\u1C3B\u1C3F\u1C5D\u1C69\u1C75\u1C8A\u1C9E\u1CAC\u1CB7\u1CFB\u1CFF\u1D0D\u1D7B\u1D91\u1DAB\u1DBB\u1DC6\u1DCDr\xF2\u0381ar;\u6965\u0200glrs\u1C48\u1C4D\u1C52\u1C54ger;\u6020eth;\u6138\xF2\u1133h\u0100;v\u1C5A\u1C5B\u6010\xBB\u090A\u016B\u1C61\u1C67arow;\u690Fa\xE3\u0315\u0100ay\u1C6E\u1C73ron;\u410F;\u4434\u0180;ao\u0332\u1C7C\u1C84\u0100gr\u02BF\u1C81r;\u61CAtseq;\u6A77\u0180glm\u1C91\u1C94\u1C98\u803B\xB0\u40B0ta;\u43B4ptyv;\u69B1\u0100ir\u1CA3\u1CA8sht;\u697F;\uC000\u{1D521}ar\u0100lr\u1CB3\u1CB5\xBB\u08DC\xBB\u101E\u0280aegsv\u1CC2\u0378\u1CD6\u1CDC\u1CE0m\u0180;os\u0326\u1CCA\u1CD4nd\u0100;s\u0326\u1CD1uit;\u6666amma;\u43DDin;\u62F2\u0180;io\u1CE7\u1CE8\u1CF8\u40F7de\u8100\xF7;o\u1CE7\u1CF0ntimes;\u62C7n\xF8\u1CF7cy;\u4452c\u026F\u1D06\0\0\u1D0Arn;\u631Eop;\u630D\u0280lptuw\u1D18\u1D1D\u1D22\u1D49\u1D55lar;\u4024f;\uC000\u{1D555}\u0280;emps\u030B\u1D2D\u1D37\u1D3D\u1D42q\u0100;d\u0352\u1D33ot;\u6251inus;\u6238lus;\u6214quare;\u62A1blebarwedg\xE5\xFAn\u0180adh\u112E\u1D5D\u1D67ownarrow\xF3\u1C83arpoon\u0100lr\u1D72\u1D76ef\xF4\u1CB4igh\xF4\u1CB6\u0162\u1D7F\u1D85karo\xF7\u0F42\u026F\u1D8A\0\0\u1D8Ern;\u631Fop;\u630C\u0180cot\u1D98\u1DA3\u1DA6\u0100ry\u1D9D\u1DA1;\uC000\u{1D4B9};\u4455l;\u69F6rok;\u4111\u0100dr\u1DB0\u1DB4ot;\u62F1i\u0100;f\u1DBA\u1816\u65BF\u0100ah\u1DC0\u1DC3r\xF2\u0429a\xF2\u0FA6angle;\u69A6\u0100ci\u1DD2\u1DD5y;\u445Fgrarr;\u67FF\u0900Dacdefglmnopqrstux\u1E01\u1E09\u1E19\u1E38\u0578\u1E3C\u1E49\u1E61\u1E7E\u1EA5\u1EAF\u1EBD\u1EE1\u1F2A\u1F37\u1F44\u1F4E\u1F5A\u0100Do\u1E06\u1D34o\xF4\u1C89\u0100cs\u1E0E\u1E14ute\u803B\xE9\u40E9ter;\u6A6E\u0200aioy\u1E22\u1E27\u1E31\u1E36ron;\u411Br\u0100;c\u1E2D\u1E2E\u6256\u803B\xEA\u40EAlon;\u6255;\u444Dot;\u4117\u0100Dr\u1E41\u1E45ot;\u6252;\uC000\u{1D522}\u0180;rs\u1E50\u1E51\u1E57\u6A9Aave\u803B\xE8\u40E8\u0100;d\u1E5C\u1E5D\u6A96ot;\u6A98\u0200;ils\u1E6A\u1E6B\u1E72\u1E74\u6A99nters;\u63E7;\u6113\u0100;d\u1E79\u1E7A\u6A95ot;\u6A97\u0180aps\u1E85\u1E89\u1E97cr;\u4113ty\u0180;sv\u1E92\u1E93\u1E95\u6205et\xBB\u1E93p\u01001;\u1E9D\u1EA4\u0133\u1EA1\u1EA3;\u6004;\u6005\u6003\u0100gs\u1EAA\u1EAC;\u414Bp;\u6002\u0100gp\u1EB4\u1EB8on;\u4119f;\uC000\u{1D556}\u0180als\u1EC4\u1ECE\u1ED2r\u0100;s\u1ECA\u1ECB\u62D5l;\u69E3us;\u6A71i\u0180;lv\u1EDA\u1EDB\u1EDF\u43B5on\xBB\u1EDB;\u43F5\u0200csuv\u1EEA\u1EF3\u1F0B\u1F23\u0100io\u1EEF\u1E31rc\xBB\u1E2E\u0269\u1EF9\0\0\u1EFB\xED\u0548ant\u0100gl\u1F02\u1F06tr\xBB\u1E5Dess\xBB\u1E7A\u0180aei\u1F12\u1F16\u1F1Als;\u403Dst;\u625Fv\u0100;D\u0235\u1F20D;\u6A78parsl;\u69E5\u0100Da\u1F2F\u1F33ot;\u6253rr;\u6971\u0180cdi\u1F3E\u1F41\u1EF8r;\u612Fo\xF4\u0352\u0100ah\u1F49\u1F4B;\u43B7\u803B\xF0\u40F0\u0100mr\u1F53\u1F57l\u803B\xEB\u40EBo;\u60AC\u0180cip\u1F61\u1F64\u1F67l;\u4021s\xF4\u056E\u0100eo\u1F6C\u1F74ctatio\xEE\u0559nential\xE5\u0579\u09E1\u1F92\0\u1F9E\0\u1FA1\u1FA7\0\0\u1FC6\u1FCC\0\u1FD3\0\u1FE6\u1FEA\u2000\0\u2008\u205Allingdotse\xF1\u1E44y;\u4444male;\u6640\u0180ilr\u1FAD\u1FB3\u1FC1lig;\u8000\uFB03\u0269\u1FB9\0\0\u1FBDg;\u8000\uFB00ig;\u8000\uFB04;\uC000\u{1D523}lig;\u8000\uFB01lig;\uC000fj\u0180alt\u1FD9\u1FDC\u1FE1t;\u666Dig;\u8000\uFB02ns;\u65B1of;\u4192\u01F0\u1FEE\0\u1FF3f;\uC000\u{1D557}\u0100ak\u05BF\u1FF7\u0100;v\u1FFC\u1FFD\u62D4;\u6AD9artint;\u6A0D\u0100ao\u200C\u2055\u0100cs\u2011\u2052\u03B1\u201A\u2030\u2038\u2045\u2048\0\u2050\u03B2\u2022\u2025\u2027\u202A\u202C\0\u202E\u803B\xBD\u40BD;\u6153\u803B\xBC\u40BC;\u6155;\u6159;\u615B\u01B3\u2034\0\u2036;\u6154;\u6156\u02B4\u203E\u2041\0\0\u2043\u803B\xBE\u40BE;\u6157;\u615C5;\u6158\u01B6\u204C\0\u204E;\u615A;\u615D8;\u615El;\u6044wn;\u6322cr;\uC000\u{1D4BB}\u0880Eabcdefgijlnorstv\u2082\u2089\u209F\u20A5\u20B0\u20B4\u20F0\u20F5\u20FA\u20FF\u2103\u2112\u2138\u0317\u213E\u2152\u219E\u0100;l\u064D\u2087;\u6A8C\u0180cmp\u2090\u2095\u209Dute;\u41F5ma\u0100;d\u209C\u1CDA\u43B3;\u6A86reve;\u411F\u0100iy\u20AA\u20AErc;\u411D;\u4433ot;\u4121\u0200;lqs\u063E\u0642\u20BD\u20C9\u0180;qs\u063E\u064C\u20C4lan\xF4\u0665\u0200;cdl\u0665\u20D2\u20D5\u20E5c;\u6AA9ot\u0100;o\u20DC\u20DD\u6A80\u0100;l\u20E2\u20E3\u6A82;\u6A84\u0100;e\u20EA\u20ED\uC000\u22DB\uFE00s;\u6A94r;\uC000\u{1D524}\u0100;g\u0673\u061Bmel;\u6137cy;\u4453\u0200;Eaj\u065A\u210C\u210E\u2110;\u6A92;\u6AA5;\u6AA4\u0200Eaes\u211B\u211D\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6A8Arox\xBB\u2124\u0100;q\u212E\u212F\u6A88\u0100;q\u212E\u211Bim;\u62E7pf;\uC000\u{1D558}\u0100ci\u2143\u2146r;\u610Am\u0180;el\u066B\u214E\u2150;\u6A8E;\u6A90\u8300>;cdlqr\u05EE\u2160\u216A\u216E\u2173\u2179\u0100ci\u2165\u2167;\u6AA7r;\u6A7Aot;\u62D7Par;\u6995uest;\u6A7C\u0280adels\u2184\u216A\u2190\u0656\u219B\u01F0\u2189\0\u218Epro\xF8\u209Er;\u6978q\u0100lq\u063F\u2196les\xF3\u2088i\xED\u066B\u0100en\u21A3\u21ADrtneqq;\uC000\u2269\uFE00\xC5\u21AA\u0500Aabcefkosy\u21C4\u21C7\u21F1\u21F5\u21FA\u2218\u221D\u222F\u2268\u227Dr\xF2\u03A0\u0200ilmr\u21D0\u21D4\u21D7\u21DBrs\xF0\u1484f\xBB\u2024il\xF4\u06A9\u0100dr\u21E0\u21E4cy;\u444A\u0180;cw\u08F4\u21EB\u21EFir;\u6948;\u61ADar;\u610Firc;\u4125\u0180alr\u2201\u220E\u2213rts\u0100;u\u2209\u220A\u6665it\xBB\u220Alip;\u6026con;\u62B9r;\uC000\u{1D525}s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223A\u223E\u2243\u225E\u2263rr;\u61FFtht;\u623Bk\u0100lr\u2249\u2253eftarrow;\u61A9ightarrow;\u61AAf;\uC000\u{1D559}bar;\u6015\u0180clt\u226F\u2274\u2278r;\uC000\u{1D4BD}as\xE8\u21F4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xBB\u1C5B\u0AE1\u22A3\0\u22AA\0\u22B8\u22C5\u22CE\0\u22D5\u22F3\0\0\u22F8\u2322\u2367\u2362\u237F\0\u2386\u23AA\u23B4cute\u803B\xED\u40ED\u0180;iy\u0771\u22B0\u22B5rc\u803B\xEE\u40EE;\u4438\u0100cx\u22BC\u22BFy;\u4435cl\u803B\xA1\u40A1\u0100fr\u039F\u22C9;\uC000\u{1D526}rave\u803B\xEC\u40EC\u0200;ino\u073E\u22DD\u22E9\u22EE\u0100in\u22E2\u22E6nt;\u6A0Ct;\u622Dfin;\u69DCta;\u6129lig;\u4133\u0180aop\u22FE\u231A\u231D\u0180cgt\u2305\u2308\u2317r;\u412B\u0180elp\u071F\u230F\u2313in\xE5\u078Ear\xF4\u0720h;\u4131f;\u62B7ed;\u41B5\u0280;cfot\u04F4\u232C\u2331\u233D\u2341are;\u6105in\u0100;t\u2338\u2339\u621Eie;\u69DDdo\xF4\u2319\u0280;celp\u0757\u234C\u2350\u235B\u2361al;\u62BA\u0100gr\u2355\u2359er\xF3\u1563\xE3\u234Darhk;\u6A17rod;\u6A3C\u0200cgpt\u236F\u2372\u2376\u237By;\u4451on;\u412Ff;\uC000\u{1D55A}a;\u43B9uest\u803B\xBF\u40BF\u0100ci\u238A\u238Fr;\uC000\u{1D4BE}n\u0280;Edsv\u04F4\u239B\u239D\u23A1\u04F3;\u62F9ot;\u62F5\u0100;v\u23A6\u23A7\u62F4;\u62F3\u0100;i\u0777\u23AElde;\u4129\u01EB\u23B8\0\u23BCcy;\u4456l\u803B\xEF\u40EF\u0300cfmosu\u23CC\u23D7\u23DC\u23E1\u23E7\u23F5\u0100iy\u23D1\u23D5rc;\u4135;\u4439r;\uC000\u{1D527}ath;\u4237pf;\uC000\u{1D55B}\u01E3\u23EC\0\u23F1r;\uC000\u{1D4BF}rcy;\u4458kcy;\u4454\u0400acfghjos\u240B\u2416\u2422\u2427\u242D\u2431\u2435\u243Bppa\u0100;v\u2413\u2414\u43BA;\u43F0\u0100ey\u241B\u2420dil;\u4137;\u443Ar;\uC000\u{1D528}reen;\u4138cy;\u4445cy;\u445Cpf;\uC000\u{1D55C}cr;\uC000\u{1D4C0}\u0B80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248D\u2491\u250E\u253D\u255A\u2580\u264E\u265E\u2665\u2679\u267D\u269A\u26B2\u26D8\u275D\u2768\u278B\u27C0\u2801\u2812\u0180art\u2477\u247A\u247Cr\xF2\u09C6\xF2\u0395ail;\u691Barr;\u690E\u0100;g\u0994\u248B;\u6A8Bar;\u6962\u0963\u24A5\0\u24AA\0\u24B1\0\0\0\0\0\u24B5\u24BA\0\u24C6\u24C8\u24CD\0\u24F9ute;\u413Amptyv;\u69B4ra\xEE\u084Cbda;\u43BBg\u0180;dl\u088E\u24C1\u24C3;\u6991\xE5\u088E;\u6A85uo\u803B\xAB\u40ABr\u0400;bfhlpst\u0899\u24DE\u24E6\u24E9\u24EB\u24EE\u24F1\u24F5\u0100;f\u089D\u24E3s;\u691Fs;\u691D\xEB\u2252p;\u61ABl;\u6939im;\u6973l;\u61A2\u0180;ae\u24FF\u2500\u2504\u6AABil;\u6919\u0100;s\u2509\u250A\u6AAD;\uC000\u2AAD\uFE00\u0180abr\u2515\u2519\u251Drr;\u690Crk;\u6772\u0100ak\u2522\u252Cc\u0100ek\u2528\u252A;\u407B;\u405B\u0100es\u2531\u2533;\u698Bl\u0100du\u2539\u253B;\u698F;\u698D\u0200aeuy\u2546\u254B\u2556\u2558ron;\u413E\u0100di\u2550\u2554il;\u413C\xEC\u08B0\xE2\u2529;\u443B\u0200cqrs\u2563\u2566\u256D\u257Da;\u6936uo\u0100;r\u0E19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694Bh;\u61B2\u0280;fgqs\u258B\u258C\u0989\u25F3\u25FF\u6264t\u0280ahlrt\u2598\u25A4\u25B7\u25C2\u25E8rrow\u0100;t\u0899\u25A1a\xE9\u24F6arpoon\u0100du\u25AF\u25B4own\xBB\u045Ap\xBB\u0966eftarrows;\u61C7ight\u0180ahs\u25CD\u25D6\u25DErrow\u0100;s\u08F4\u08A7arpoon\xF3\u0F98quigarro\xF7\u21F0hreetimes;\u62CB\u0180;qs\u258B\u0993\u25FAlan\xF4\u09AC\u0280;cdgs\u09AC\u260A\u260D\u261D\u2628c;\u6AA8ot\u0100;o\u2614\u2615\u6A7F\u0100;r\u261A\u261B\u6A81;\u6A83\u0100;e\u2622\u2625\uC000\u22DA\uFE00s;\u6A93\u0280adegs\u2633\u2639\u263D\u2649\u264Bppro\xF8\u24C6ot;\u62D6q\u0100gq\u2643\u2645\xF4\u0989gt\xF2\u248C\xF4\u099Bi\xED\u09B2\u0180ilr\u2655\u08E1\u265Asht;\u697C;\uC000\u{1D529}\u0100;E\u099C\u2663;\u6A91\u0161\u2669\u2676r\u0100du\u25B2\u266E\u0100;l\u0965\u2673;\u696Alk;\u6584cy;\u4459\u0280;acht\u0A48\u2688\u268B\u2691\u2696r\xF2\u25C1orne\xF2\u1D08ard;\u696Bri;\u65FA\u0100io\u269F\u26A4dot;\u4140ust\u0100;a\u26AC\u26AD\u63B0che\xBB\u26AD\u0200Eaes\u26BB\u26BD\u26C9\u26D4;\u6268p\u0100;p\u26C3\u26C4\u6A89rox\xBB\u26C4\u0100;q\u26CE\u26CF\u6A87\u0100;q\u26CE\u26BBim;\u62E6\u0400abnoptwz\u26E9\u26F4\u26F7\u271A\u272F\u2741\u2747\u2750\u0100nr\u26EE\u26F1g;\u67ECr;\u61FDr\xEB\u08C1g\u0180lmr\u26FF\u270D\u2714eft\u0100ar\u09E6\u2707ight\xE1\u09F2apsto;\u67FCight\xE1\u09FDparrow\u0100lr\u2725\u2729ef\xF4\u24EDight;\u61AC\u0180afl\u2736\u2739\u273Dr;\u6985;\uC000\u{1D55D}us;\u6A2Dimes;\u6A34\u0161\u274B\u274Fst;\u6217\xE1\u134E\u0180;ef\u2757\u2758\u1800\u65CAnge\xBB\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277C\u2785\u2787r\xF2\u08A8orne\xF2\u1D8Car\u0100;d\u0F98\u2783;\u696D;\u600Eri;\u62BF\u0300achiqt\u2798\u279D\u0A40\u27A2\u27AE\u27BBquo;\u6039r;\uC000\u{1D4C1}m\u0180;eg\u09B2\u27AA\u27AC;\u6A8D;\u6A8F\u0100bu\u252A\u27B3o\u0100;r\u0E1F\u27B9;\u601Arok;\u4142\u8400<;cdhilqr\u082B\u27D2\u2639\u27DC\u27E0\u27E5\u27EA\u27F0\u0100ci\u27D7\u27D9;\u6AA6r;\u6A79re\xE5\u25F2mes;\u62C9arr;\u6976uest;\u6A7B\u0100Pi\u27F5\u27F9ar;\u6996\u0180;ef\u2800\u092D\u181B\u65C3r\u0100du\u2807\u280Dshar;\u694Ahar;\u6966\u0100en\u2817\u2821rtneqq;\uC000\u2268\uFE00\xC5\u281E\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288E\u2893\u28A0\u28A5\u28A8\u28DA\u28E2\u28E4\u0A83\u28F3\u2902Dot;\u623A\u0200clpr\u284E\u2852\u2863\u287Dr\u803B\xAF\u40AF\u0100et\u2857\u2859;\u6642\u0100;e\u285E\u285F\u6720se\xBB\u285F\u0100;s\u103B\u2868to\u0200;dlu\u103B\u2873\u2877\u287Bow\xEE\u048Cef\xF4\u090F\xF0\u13D1ker;\u65AE\u0100oy\u2887\u288Cmma;\u6A29;\u443Cash;\u6014asuredangle\xBB\u1626r;\uC000\u{1D52A}o;\u6127\u0180cdn\u28AF\u28B4\u28C9ro\u803B\xB5\u40B5\u0200;acd\u1464\u28BD\u28C0\u28C4s\xF4\u16A7ir;\u6AF0ot\u80BB\xB7\u01B5us\u0180;bd\u28D2\u1903\u28D3\u6212\u0100;u\u1D3C\u28D8;\u6A2A\u0163\u28DE\u28E1p;\u6ADB\xF2\u2212\xF0\u0A81\u0100dp\u28E9\u28EEels;\u62A7f;\uC000\u{1D55E}\u0100ct\u28F8\u28FDr;\uC000\u{1D4C2}pos\xBB\u159D\u0180;lm\u2909\u290A\u290D\u43BCtimap;\u62B8\u0C00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297E\u2989\u2998\u29DA\u29E9\u2A15\u2A1A\u2A58\u2A5D\u2A83\u2A95\u2AA4\u2AA8\u2B04\u2B07\u2B44\u2B7F\u2BAE\u2C34\u2C67\u2C7C\u2CE9\u0100gt\u2947\u294B;\uC000\u22D9\u0338\u0100;v\u2950\u0BCF\uC000\u226B\u20D2\u0180elt\u295A\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61CDightarrow;\u61CE;\uC000\u22D8\u0338\u0100;v\u297B\u0C47\uC000\u226A\u20D2ightarrow;\u61CF\u0100Dd\u298E\u2993ash;\u62AFash;\u62AE\u0280bcnpt\u29A3\u29A7\u29AC\u29B1\u29CCla\xBB\u02DEute;\u4144g;\uC000\u2220\u20D2\u0280;Eiop\u0D84\u29BC\u29C0\u29C5\u29C8;\uC000\u2A70\u0338d;\uC000\u224B\u0338s;\u4149ro\xF8\u0D84ur\u0100;a\u29D3\u29D4\u666El\u0100;s\u29D3\u0B38\u01F3\u29DF\0\u29E3p\u80BB\xA0\u0B37mp\u0100;e\u0BF9\u0C00\u0280aeouy\u29F4\u29FE\u2A03\u2A10\u2A13\u01F0\u29F9\0\u29FB;\u6A43on;\u4148dil;\u4146ng\u0100;d\u0D7E\u2A0Aot;\uC000\u2A6D\u0338p;\u6A42;\u443Dash;\u6013\u0380;Aadqsx\u0B92\u2A29\u2A2D\u2A3B\u2A41\u2A45\u2A50rr;\u61D7r\u0100hr\u2A33\u2A36k;\u6924\u0100;o\u13F2\u13F0ot;\uC000\u2250\u0338ui\xF6\u0B63\u0100ei\u2A4A\u2A4Ear;\u6928\xED\u0B98ist\u0100;s\u0BA0\u0B9Fr;\uC000\u{1D52B}\u0200Eest\u0BC5\u2A66\u2A79\u2A7C\u0180;qs\u0BBC\u2A6D\u0BE1\u0180;qs\u0BBC\u0BC5\u2A74lan\xF4\u0BE2i\xED\u0BEA\u0100;r\u0BB6\u2A81\xBB\u0BB7\u0180Aap\u2A8A\u2A8D\u2A91r\xF2\u2971rr;\u61AEar;\u6AF2\u0180;sv\u0F8D\u2A9C\u0F8C\u0100;d\u2AA1\u2AA2\u62FC;\u62FAcy;\u445A\u0380AEadest\u2AB7\u2ABA\u2ABE\u2AC2\u2AC5\u2AF6\u2AF9r\xF2\u2966;\uC000\u2266\u0338rr;\u619Ar;\u6025\u0200;fqs\u0C3B\u2ACE\u2AE3\u2AEFt\u0100ar\u2AD4\u2AD9rro\xF7\u2AC1ightarro\xF7\u2A90\u0180;qs\u0C3B\u2ABA\u2AEAlan\xF4\u0C55\u0100;s\u0C55\u2AF4\xBB\u0C36i\xED\u0C5D\u0100;r\u0C35\u2AFEi\u0100;e\u0C1A\u0C25i\xE4\u0D90\u0100pt\u2B0C\u2B11f;\uC000\u{1D55F}\u8180\xAC;in\u2B19\u2B1A\u2B36\u40ACn\u0200;Edv\u0B89\u2B24\u2B28\u2B2E;\uC000\u22F9\u0338ot;\uC000\u22F5\u0338\u01E1\u0B89\u2B33\u2B35;\u62F7;\u62F6i\u0100;v\u0CB8\u2B3C\u01E1\u0CB8\u2B41\u2B43;\u62FE;\u62FD\u0180aor\u2B4B\u2B63\u2B69r\u0200;ast\u0B7B\u2B55\u2B5A\u2B5Flle\xEC\u0B7Bl;\uC000\u2AFD\u20E5;\uC000\u2202\u0338lint;\u6A14\u0180;ce\u0C92\u2B70\u2B73u\xE5\u0CA5\u0100;c\u0C98\u2B78\u0100;e\u0C92\u2B7D\xF1\u0C98\u0200Aait\u2B88\u2B8B\u2B9D\u2BA7r\xF2\u2988rr\u0180;cw\u2B94\u2B95\u2B99\u619B;\uC000\u2933\u0338;\uC000\u219D\u0338ghtarrow\xBB\u2B95ri\u0100;e\u0CCB\u0CD6\u0380chimpqu\u2BBD\u2BCD\u2BD9\u2B04\u0B78\u2BE4\u2BEF\u0200;cer\u0D32\u2BC6\u0D37\u2BC9u\xE5\u0D45;\uC000\u{1D4C3}ort\u026D\u2B05\0\0\u2BD6ar\xE1\u2B56m\u0100;e\u0D6E\u2BDF\u0100;q\u0D74\u0D73su\u0100bp\u2BEB\u2BED\xE5\u0CF8\xE5\u0D0B\u0180bcp\u2BF6\u2C11\u2C19\u0200;Ees\u2BFF\u2C00\u0D22\u2C04\u6284;\uC000\u2AC5\u0338et\u0100;e\u0D1B\u2C0Bq\u0100;q\u0D23\u2C00c\u0100;e\u0D32\u2C17\xF1\u0D38\u0200;Ees\u2C22\u2C23\u0D5F\u2C27\u6285;\uC000\u2AC6\u0338et\u0100;e\u0D58\u2C2Eq\u0100;q\u0D60\u2C23\u0200gilr\u2C3D\u2C3F\u2C45\u2C47\xEC\u0BD7lde\u803B\xF1\u40F1\xE7\u0C43iangle\u0100lr\u2C52\u2C5Ceft\u0100;e\u0C1A\u2C5A\xF1\u0C26ight\u0100;e\u0CCB\u2C65\xF1\u0CD7\u0100;m\u2C6C\u2C6D\u43BD\u0180;es\u2C74\u2C75\u2C79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2C8F\u2C94\u2C99\u2C9E\u2CA3\u2CB0\u2CB6\u2CD3\u2CE3ash;\u62ADarr;\u6904p;\uC000\u224D\u20D2ash;\u62AC\u0100et\u2CA8\u2CAC;\uC000\u2265\u20D2;\uC000>\u20D2nfin;\u69DE\u0180Aet\u2CBD\u2CC1\u2CC5rr;\u6902;\uC000\u2264\u20D2\u0100;r\u2CCA\u2CCD\uC000<\u20D2ie;\uC000\u22B4\u20D2\u0100At\u2CD8\u2CDCrr;\u6903rie;\uC000\u22B5\u20D2im;\uC000\u223C\u20D2\u0180Aan\u2CF0\u2CF4\u2D02rr;\u61D6r\u0100hr\u2CFA\u2CFDk;\u6923\u0100;o\u13E7\u13E5ear;\u6927\u1253\u1A95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2D2D\0\u2D38\u2D48\u2D60\u2D65\u2D72\u2D84\u1B07\0\0\u2D8D\u2DAB\0\u2DC8\u2DCE\0\u2DDC\u2E19\u2E2B\u2E3E\u2E43\u0100cs\u2D31\u1A97ute\u803B\xF3\u40F3\u0100iy\u2D3C\u2D45r\u0100;c\u1A9E\u2D42\u803B\xF4\u40F4;\u443E\u0280abios\u1AA0\u2D52\u2D57\u01C8\u2D5Alac;\u4151v;\u6A38old;\u69BClig;\u4153\u0100cr\u2D69\u2D6Dir;\u69BF;\uC000\u{1D52C}\u036F\u2D79\0\0\u2D7C\0\u2D82n;\u42DBave\u803B\xF2\u40F2;\u69C1\u0100bm\u2D88\u0DF4ar;\u69B5\u0200acit\u2D95\u2D98\u2DA5\u2DA8r\xF2\u1A80\u0100ir\u2D9D\u2DA0r;\u69BEoss;\u69BBn\xE5\u0E52;\u69C0\u0180aei\u2DB1\u2DB5\u2DB9cr;\u414Dga;\u43C9\u0180cdn\u2DC0\u2DC5\u01CDron;\u43BF;\u69B6pf;\uC000\u{1D560}\u0180ael\u2DD4\u2DD7\u01D2r;\u69B7rp;\u69B9\u0380;adiosv\u2DEA\u2DEB\u2DEE\u2E08\u2E0D\u2E10\u2E16\u6228r\xF2\u1A86\u0200;efm\u2DF7\u2DF8\u2E02\u2E05\u6A5Dr\u0100;o\u2DFE\u2DFF\u6134f\xBB\u2DFF\u803B\xAA\u40AA\u803B\xBA\u40BAgof;\u62B6r;\u6A56lope;\u6A57;\u6A5B\u0180clo\u2E1F\u2E21\u2E27\xF2\u2E01ash\u803B\xF8\u40F8l;\u6298i\u016C\u2E2F\u2E34de\u803B\xF5\u40F5es\u0100;a\u01DB\u2E3As;\u6A36ml\u803B\xF6\u40F6bar;\u633D\u0AE1\u2E5E\0\u2E7D\0\u2E80\u2E9D\0\u2EA2\u2EB9\0\0\u2ECB\u0E9C\0\u2F13\0\0\u2F2B\u2FBC\0\u2FC8r\u0200;ast\u0403\u2E67\u2E72\u0E85\u8100\xB6;l\u2E6D\u2E6E\u40B6le\xEC\u0403\u0269\u2E78\0\0\u2E7Bm;\u6AF3;\u6AFDy;\u443Fr\u0280cimpt\u2E8B\u2E8F\u2E93\u1865\u2E97nt;\u4025od;\u402Eil;\u6030enk;\u6031r;\uC000\u{1D52D}\u0180imo\u2EA8\u2EB0\u2EB4\u0100;v\u2EAD\u2EAE\u43C6;\u43D5ma\xF4\u0A76ne;\u660E\u0180;tv\u2EBF\u2EC0\u2EC8\u43C0chfork\xBB\u1FFD;\u43D6\u0100au\u2ECF\u2EDFn\u0100ck\u2ED5\u2EDDk\u0100;h\u21F4\u2EDB;\u610E\xF6\u21F4s\u0480;abcdemst\u2EF3\u2EF4\u1908\u2EF9\u2EFD\u2F04\u2F06\u2F0A\u2F0E\u402Bcir;\u6A23ir;\u6A22\u0100ou\u1D40\u2F02;\u6A25;\u6A72n\u80BB\xB1\u0E9Dim;\u6A26wo;\u6A27\u0180ipu\u2F19\u2F20\u2F25ntint;\u6A15f;\uC000\u{1D561}nd\u803B\xA3\u40A3\u0500;Eaceinosu\u0EC8\u2F3F\u2F41\u2F44\u2F47\u2F81\u2F89\u2F92\u2F7E\u2FB6;\u6AB3p;\u6AB7u\xE5\u0ED9\u0100;c\u0ECE\u2F4C\u0300;acens\u0EC8\u2F59\u2F5F\u2F66\u2F68\u2F7Eppro\xF8\u2F43urlye\xF1\u0ED9\xF1\u0ECE\u0180aes\u2F6F\u2F76\u2F7Approx;\u6AB9qq;\u6AB5im;\u62E8i\xED\u0EDFme\u0100;s\u2F88\u0EAE\u6032\u0180Eas\u2F78\u2F90\u2F7A\xF0\u2F75\u0180dfp\u0EEC\u2F99\u2FAF\u0180als\u2FA0\u2FA5\u2FAAlar;\u632Eine;\u6312urf;\u6313\u0100;t\u0EFB\u2FB4\xEF\u0EFBrel;\u62B0\u0100ci\u2FC0\u2FC5r;\uC000\u{1D4C5};\u43C8ncsp;\u6008\u0300fiopsu\u2FDA\u22E2\u2FDF\u2FE5\u2FEB\u2FF1r;\uC000\u{1D52E}pf;\uC000\u{1D562}rime;\u6057cr;\uC000\u{1D4C6}\u0180aeo\u2FF8\u3009\u3013t\u0100ei\u2FFE\u3005rnion\xF3\u06B0nt;\u6A16st\u0100;e\u3010\u3011\u403F\xF1\u1F19\xF4\u0F14\u0A80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30E0\u310E\u312B\u3147\u3162\u3172\u318E\u3206\u3215\u3224\u3229\u3258\u326E\u3272\u3290\u32B0\u32B7\u0180art\u3047\u304A\u304Cr\xF2\u10B3\xF2\u03DDail;\u691Car\xF2\u1C65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307F\u308F\u3094\u30CC\u0100eu\u306D\u3071;\uC000\u223D\u0331te;\u4155i\xE3\u116Emptyv;\u69B3g\u0200;del\u0FD1\u3089\u308B\u308D;\u6992;\u69A5\xE5\u0FD1uo\u803B\xBB\u40BBr\u0580;abcfhlpstw\u0FDC\u30AC\u30AF\u30B7\u30B9\u30BC\u30BE\u30C0\u30C3\u30C7\u30CAp;\u6975\u0100;f\u0FE0\u30B4s;\u6920;\u6933s;\u691E\xEB\u225D\xF0\u272El;\u6945im;\u6974l;\u61A3;\u619D\u0100ai\u30D1\u30D5il;\u691Ao\u0100;n\u30DB\u30DC\u6236al\xF3\u0F1E\u0180abr\u30E7\u30EA\u30EEr\xF2\u17E5rk;\u6773\u0100ak\u30F3\u30FDc\u0100ek\u30F9\u30FB;\u407D;\u405D\u0100es\u3102\u3104;\u698Cl\u0100du\u310A\u310C;\u698E;\u6990\u0200aeuy\u3117\u311C\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xEC\u0FF2\xE2\u30FA;\u4440\u0200clqs\u3134\u3137\u313D\u3144a;\u6937dhar;\u6969uo\u0100;r\u020E\u020Dh;\u61B3\u0180acg\u314E\u315F\u0F44l\u0200;ips\u0F78\u3158\u315B\u109Cn\xE5\u10BBar\xF4\u0FA9t;\u65AD\u0180ilr\u3169\u1023\u316Esht;\u697D;\uC000\u{1D52F}\u0100ao\u3177\u3186r\u0100du\u317D\u317F\xBB\u047B\u0100;l\u1091\u3184;\u696C\u0100;v\u318B\u318C\u43C1;\u43F1\u0180gns\u3195\u31F9\u31FCht\u0300ahlrst\u31A4\u31B0\u31C2\u31D8\u31E4\u31EErrow\u0100;t\u0FDC\u31ADa\xE9\u30C8arpoon\u0100du\u31BB\u31BFow\xEE\u317Ep\xBB\u1092eft\u0100ah\u31CA\u31D0rrow\xF3\u0FEAarpoon\xF3\u0551ightarrows;\u61C9quigarro\xF7\u30CBhreetimes;\u62CCg;\u42DAingdotse\xF1\u1F32\u0180ahm\u320D\u3210\u3213r\xF2\u0FEAa\xF2\u0551;\u600Foust\u0100;a\u321E\u321F\u63B1che\xBB\u321Fmid;\u6AEE\u0200abpt\u3232\u323D\u3240\u3252\u0100nr\u3237\u323Ag;\u67EDr;\u61FEr\xEB\u1003\u0180afl\u3247\u324A\u324Er;\u6986;\uC000\u{1D563}us;\u6A2Eimes;\u6A35\u0100ap\u325D\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6A12ar\xF2\u31E3\u0200achq\u327B\u3280\u10BC\u3285quo;\u603Ar;\uC000\u{1D4C7}\u0100bu\u30FB\u328Ao\u0100;r\u0214\u0213\u0180hir\u3297\u329B\u32A0re\xE5\u31F8mes;\u62CAi\u0200;efl\u32AA\u1059\u1821\u32AB\u65B9tri;\u69CEluhar;\u6968;\u611E\u0D61\u32D5\u32DB\u32DF\u332C\u3338\u3371\0\u337A\u33A4\0\0\u33EC\u33F0\0\u3428\u3448\u345A\u34AD\u34B1\u34CA\u34F1\0\u3616\0\0\u3633cute;\u415Bqu\xEF\u27BA\u0500;Eaceinpsy\u11ED\u32F3\u32F5\u32FF\u3302\u330B\u330F\u331F\u3326\u3329;\u6AB4\u01F0\u32FA\0\u32FC;\u6AB8on;\u4161u\xE5\u11FE\u0100;d\u11F3\u3307il;\u415Frc;\u415D\u0180Eas\u3316\u3318\u331B;\u6AB6p;\u6ABAim;\u62E9olint;\u6A13i\xED\u1204;\u4441ot\u0180;be\u3334\u1D47\u3335\u62C5;\u6A66\u0380Aacmstx\u3346\u334A\u3357\u335B\u335E\u3363\u336Drr;\u61D8r\u0100hr\u3350\u3352\xEB\u2228\u0100;o\u0A36\u0A34t\u803B\xA7\u40A7i;\u403Bwar;\u6929m\u0100in\u3369\xF0nu\xF3\xF1t;\u6736r\u0100;o\u3376\u2055\uC000\u{1D530}\u0200acoy\u3382\u3386\u3391\u33A0rp;\u666F\u0100hy\u338B\u338Fcy;\u4449;\u4448rt\u026D\u3399\0\0\u339Ci\xE4\u1464ara\xEC\u2E6F\u803B\xAD\u40AD\u0100gm\u33A8\u33B4ma\u0180;fv\u33B1\u33B2\u33B2\u43C3;\u43C2\u0400;deglnpr\u12AB\u33C5\u33C9\u33CE\u33D6\u33DE\u33E1\u33E6ot;\u6A6A\u0100;q\u12B1\u12B0\u0100;E\u33D3\u33D4\u6A9E;\u6AA0\u0100;E\u33DB\u33DC\u6A9D;\u6A9Fe;\u6246lus;\u6A24arr;\u6972ar\xF2\u113D\u0200aeit\u33F8\u3408\u340F\u3417\u0100ls\u33FD\u3404lsetm\xE9\u336Ahp;\u6A33parsl;\u69E4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341C\u341D\u6AAA\u0100;s\u3422\u3423\u6AAC;\uC000\u2AAC\uFE00\u0180flp\u342E\u3433\u3442tcy;\u444C\u0100;b\u3438\u3439\u402F\u0100;a\u343E\u343F\u69C4r;\u633Ff;\uC000\u{1D564}a\u0100dr\u344D\u0402es\u0100;u\u3454\u3455\u6660it\xBB\u3455\u0180csu\u3460\u3479\u349F\u0100au\u3465\u346Fp\u0100;s\u1188\u346B;\uC000\u2293\uFE00p\u0100;s\u11B4\u3475;\uC000\u2294\uFE00u\u0100bp\u347F\u348F\u0180;es\u1197\u119C\u3486et\u0100;e\u1197\u348D\xF1\u119D\u0180;es\u11A8\u11AD\u3496et\u0100;e\u11A8\u349D\xF1\u11AE\u0180;af\u117B\u34A6\u05B0r\u0165\u34AB\u05B1\xBB\u117Car\xF2\u1148\u0200cemt\u34B9\u34BE\u34C2\u34C5r;\uC000\u{1D4C8}tm\xEE\xF1i\xEC\u3415ar\xE6\u11BE\u0100ar\u34CE\u34D5r\u0100;f\u34D4\u17BF\u6606\u0100an\u34DA\u34EDight\u0100ep\u34E3\u34EApsilo\xEE\u1EE0h\xE9\u2EAFs\xBB\u2852\u0280bcmnp\u34FB\u355E\u1209\u358B\u358E\u0480;Edemnprs\u350E\u350F\u3511\u3515\u351E\u3523\u352C\u3531\u3536\u6282;\u6AC5ot;\u6ABD\u0100;d\u11DA\u351Aot;\u6AC3ult;\u6AC1\u0100Ee\u3528\u352A;\u6ACB;\u628Alus;\u6ABFarr;\u6979\u0180eiu\u353D\u3552\u3555t\u0180;en\u350E\u3545\u354Bq\u0100;q\u11DA\u350Feq\u0100;q\u352B\u3528m;\u6AC7\u0100bp\u355A\u355C;\u6AD5;\u6AD3c\u0300;acens\u11ED\u356C\u3572\u3579\u357B\u3326ppro\xF8\u32FAurlye\xF1\u11FE\xF1\u11F3\u0180aes\u3582\u3588\u331Bppro\xF8\u331Aq\xF1\u3317g;\u666A\u0680123;Edehlmnps\u35A9\u35AC\u35AF\u121C\u35B2\u35B4\u35C0\u35C9\u35D5\u35DA\u35DF\u35E8\u35ED\u803B\xB9\u40B9\u803B\xB2\u40B2\u803B\xB3\u40B3;\u6AC6\u0100os\u35B9\u35BCt;\u6ABEub;\u6AD8\u0100;d\u1222\u35C5ot;\u6AC4s\u0100ou\u35CF\u35D2l;\u67C9b;\u6AD7arr;\u697Bult;\u6AC2\u0100Ee\u35E4\u35E6;\u6ACC;\u628Blus;\u6AC0\u0180eiu\u35F4\u3609\u360Ct\u0180;en\u121C\u35FC\u3602q\u0100;q\u1222\u35B2eq\u0100;q\u35E7\u35E4m;\u6AC8\u0100bp\u3611\u3613;\u6AD4;\u6AD6\u0180Aan\u361C\u3620\u362Drr;\u61D9r\u0100hr\u3626\u3628\xEB\u222E\u0100;o\u0A2B\u0A29war;\u692Alig\u803B\xDF\u40DF\u0BE1\u3651\u365D\u3660\u12CE\u3673\u3679\0\u367E\u36C2\0\0\0\0\0\u36DB\u3703\0\u3709\u376C\0\0\0\u3787\u0272\u3656\0\0\u365Bget;\u6316;\u43C4r\xEB\u0E5F\u0180aey\u3666\u366B\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uC000\u{1D531}\u0200eiko\u3686\u369D\u36B5\u36BC\u01F2\u368B\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369B\u43B8ym;\u43D1\u0100cn\u36A2\u36B2k\u0100as\u36A8\u36AEppro\xF8\u12C1im\xBB\u12ACs\xF0\u129E\u0100as\u36BA\u36AE\xF0\u12C1rn\u803B\xFE\u40FE\u01EC\u031F\u36C6\u22E7es\u8180\xD7;bd\u36CF\u36D0\u36D8\u40D7\u0100;a\u190F\u36D5r;\u6A31;\u6A30\u0180eps\u36E1\u36E3\u3700\xE1\u2A4D\u0200;bcf\u0486\u36EC\u36F0\u36F4ot;\u6336ir;\u6AF1\u0100;o\u36F9\u36FC\uC000\u{1D565}rk;\u6ADA\xE1\u3362rime;\u6034\u0180aip\u370F\u3712\u3764d\xE5\u1248\u0380adempst\u3721\u374D\u3740\u3751\u3757\u375C\u375Fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65B5own\xBB\u1DBBeft\u0100;e\u2800\u373E\xF1\u092E;\u625Cight\u0100;e\u32AA\u374B\xF1\u105Aot;\u65ECinus;\u6A3Alus;\u6A39b;\u69CDime;\u6A3Bezium;\u63E2\u0180cht\u3772\u377D\u3781\u0100ry\u3777\u377B;\uC000\u{1D4C9};\u4446cy;\u445Brok;\u4167\u0100io\u378B\u378Ex\xF4\u1777head\u0100lr\u3797\u37A0eftarro\xF7\u084Fightarrow\xBB\u0F5D\u0900AHabcdfghlmoprstuw\u37D0\u37D3\u37D7\u37E4\u37F0\u37FC\u380E\u381C\u3823\u3834\u3851\u385D\u386B\u38A9\u38CC\u38D2\u38EA\u38F6r\xF2\u03EDar;\u6963\u0100cr\u37DC\u37E2ute\u803B\xFA\u40FA\xF2\u1150r\u01E3\u37EA\0\u37EDy;\u445Eve;\u416D\u0100iy\u37F5\u37FArc\u803B\xFB\u40FB;\u4443\u0180abh\u3803\u3806\u380Br\xF2\u13ADlac;\u4171a\xF2\u13C3\u0100ir\u3813\u3818sht;\u697E;\uC000\u{1D532}rave\u803B\xF9\u40F9\u0161\u3827\u3831r\u0100lr\u382C\u382E\xBB\u0957\xBB\u1083lk;\u6580\u0100ct\u3839\u384D\u026F\u383F\0\0\u384Arn\u0100;e\u3845\u3846\u631Cr\xBB\u3846op;\u630Fri;\u65F8\u0100al\u3856\u385Acr;\u416B\u80BB\xA8\u0349\u0100gp\u3862\u3866on;\u4173f;\uC000\u{1D566}\u0300adhlsu\u114B\u3878\u387D\u1372\u3891\u38A0own\xE1\u13B3arpoon\u0100lr\u3888\u388Cef\xF4\u382Digh\xF4\u382Fi\u0180;hl\u3899\u389A\u389C\u43C5\xBB\u13FAon\xBB\u389Aparrows;\u61C8\u0180cit\u38B0\u38C4\u38C8\u026F\u38B6\0\0\u38C1rn\u0100;e\u38BC\u38BD\u631Dr\xBB\u38BDop;\u630Eng;\u416Fri;\u65F9cr;\uC000\u{1D4CA}\u0180dir\u38D9\u38DD\u38E2ot;\u62F0lde;\u4169i\u0100;f\u3730\u38E8\xBB\u1813\u0100am\u38EF\u38F2r\xF2\u38A8l\u803B\xFC\u40FCangle;\u69A7\u0780ABDacdeflnoprsz\u391C\u391F\u3929\u392D\u39B5\u39B8\u39BD\u39DF\u39E4\u39E8\u39F3\u39F9\u39FD\u3A01\u3A20r\xF2\u03F7ar\u0100;v\u3926\u3927\u6AE8;\u6AE9as\xE8\u03E1\u0100nr\u3932\u3937grt;\u699C\u0380eknprst\u34E3\u3946\u394B\u3952\u395D\u3964\u3996app\xE1\u2415othin\xE7\u1E96\u0180hir\u34EB\u2EC8\u3959op\xF4\u2FB5\u0100;h\u13B7\u3962\xEF\u318D\u0100iu\u3969\u396Dgm\xE1\u33B3\u0100bp\u3972\u3984setneq\u0100;q\u397D\u3980\uC000\u228A\uFE00;\uC000\u2ACB\uFE00setneq\u0100;q\u398F\u3992\uC000\u228B\uFE00;\uC000\u2ACC\uFE00\u0100hr\u399B\u399Fet\xE1\u369Ciangle\u0100lr\u39AA\u39AFeft\xBB\u0925ight\xBB\u1051y;\u4432ash\xBB\u1036\u0180elr\u39C4\u39D2\u39D7\u0180;be\u2DEA\u39CB\u39CFar;\u62BBq;\u625Alip;\u62EE\u0100bt\u39DC\u1468a\xF2\u1469r;\uC000\u{1D533}tr\xE9\u39AEsu\u0100bp\u39EF\u39F1\xBB\u0D1C\xBB\u0D59pf;\uC000\u{1D567}ro\xF0\u0EFBtr\xE9\u39B4\u0100cu\u3A06\u3A0Br;\uC000\u{1D4CB}\u0100bp\u3A10\u3A18n\u0100Ee\u3980\u3A16\xBB\u397En\u0100Ee\u3992\u3A1E\xBB\u3990igzag;\u699A\u0380cefoprs\u3A36\u3A3B\u3A56\u3A5B\u3A54\u3A61\u3A6Airc;\u4175\u0100di\u3A40\u3A51\u0100bg\u3A45\u3A49ar;\u6A5Fe\u0100;q\u15FA\u3A4F;\u6259erp;\u6118r;\uC000\u{1D534}pf;\uC000\u{1D568}\u0100;e\u1479\u3A66at\xE8\u1479cr;\uC000\u{1D4CC}\u0AE3\u178E\u3A87\0\u3A8B\0\u3A90\u3A9B\0\0\u3A9D\u3AA8\u3AAB\u3AAF\0\0\u3AC3\u3ACE\0\u3AD8\u17DC\u17DFtr\xE9\u17D1r;\uC000\u{1D535}\u0100Aa\u3A94\u3A97r\xF2\u03C3r\xF2\u09F6;\u43BE\u0100Aa\u3AA1\u3AA4r\xF2\u03B8r\xF2\u09EBa\xF0\u2713is;\u62FB\u0180dpt\u17A4\u3AB5\u3ABE\u0100fl\u3ABA\u17A9;\uC000\u{1D569}im\xE5\u17B2\u0100Aa\u3AC7\u3ACAr\xF2\u03CEr\xF2\u0A01\u0100cq\u3AD2\u17B8r;\uC000\u{1D4CD}\u0100pt\u17D6\u3ADCr\xE9\u17D4\u0400acefiosu\u3AF0\u3AFD\u3B08\u3B0C\u3B11\u3B15\u3B1B\u3B21c\u0100uy\u3AF6\u3AFBte\u803B\xFD\u40FD;\u444F\u0100iy\u3B02\u3B06rc;\u4177;\u444Bn\u803B\xA5\u40A5r;\uC000\u{1D536}cy;\u4457pf;\uC000\u{1D56A}cr;\uC000\u{1D4CE}\u0100cm\u3B26\u3B29y;\u444El\u803B\xFF\u40FF\u0500acdefhiosw\u3B42\u3B48\u3B54\u3B58\u3B64\u3B69\u3B6D\u3B74\u3B7A\u3B80cute;\u417A\u0100ay\u3B4D\u3B52ron;\u417E;\u4437ot;\u417C\u0100et\u3B5D\u3B61tr\xE6\u155Fa;\u43B6r;\uC000\u{1D537}cy;\u4436grarr;\u61DDpf;\uC000\u{1D56B}cr;\uC000\u{1D4CF}\u0100jn\u3B85\u3B87;\u600Dj;\u600C'.split("").map((c) => c.charCodeAt(0))
);

// node_modules/htmlparser2/node_modules/entities/dist/esm/generated/decode-data-xml.js
var xmlDecodeTree = /* @__PURE__ */ new Uint16Array(
  // prettier-ignore
  /* @__PURE__ */ "\u0200aglq	\x1B\u026D\0\0p;\u4026os;\u4027t;\u403Et;\u403Cuot;\u4022".split("").map((c) => c.charCodeAt(0))
);

// node_modules/htmlparser2/node_modules/entities/dist/esm/decode-codepoint.js
var _a2;
var decodeMap2 = /* @__PURE__ */ new Map([
  [0, 65533],
  // C1 Unicode control character reference replacements
  [128, 8364],
  [130, 8218],
  [131, 402],
  [132, 8222],
  [133, 8230],
  [134, 8224],
  [135, 8225],
  [136, 710],
  [137, 8240],
  [138, 352],
  [139, 8249],
  [140, 338],
  [142, 381],
  [145, 8216],
  [146, 8217],
  [147, 8220],
  [148, 8221],
  [149, 8226],
  [150, 8211],
  [151, 8212],
  [152, 732],
  [153, 8482],
  [154, 353],
  [155, 8250],
  [156, 339],
  [158, 382],
  [159, 376]
]);
var fromCodePoint2 = (
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, n/no-unsupported-features/es-builtins
  (_a2 = String.fromCodePoint) !== null && _a2 !== void 0 ? _a2 : function(codePoint) {
    let output = "";
    if (codePoint > 65535) {
      codePoint -= 65536;
      output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
      codePoint = 56320 | codePoint & 1023;
    }
    output += String.fromCharCode(codePoint);
    return output;
  }
);
function replaceCodePoint2(codePoint) {
  var _a5;
  if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
    return 65533;
  }
  return (_a5 = decodeMap2.get(codePoint)) !== null && _a5 !== void 0 ? _a5 : codePoint;
}

// node_modules/htmlparser2/node_modules/entities/dist/esm/decode.js
var CharCodes2;
(function(CharCodes5) {
  CharCodes5[CharCodes5["NUM"] = 35] = "NUM";
  CharCodes5[CharCodes5["SEMI"] = 59] = "SEMI";
  CharCodes5[CharCodes5["EQUALS"] = 61] = "EQUALS";
  CharCodes5[CharCodes5["ZERO"] = 48] = "ZERO";
  CharCodes5[CharCodes5["NINE"] = 57] = "NINE";
  CharCodes5[CharCodes5["LOWER_A"] = 97] = "LOWER_A";
  CharCodes5[CharCodes5["LOWER_F"] = 102] = "LOWER_F";
  CharCodes5[CharCodes5["LOWER_X"] = 120] = "LOWER_X";
  CharCodes5[CharCodes5["LOWER_Z"] = 122] = "LOWER_Z";
  CharCodes5[CharCodes5["UPPER_A"] = 65] = "UPPER_A";
  CharCodes5[CharCodes5["UPPER_F"] = 70] = "UPPER_F";
  CharCodes5[CharCodes5["UPPER_Z"] = 90] = "UPPER_Z";
})(CharCodes2 || (CharCodes2 = {}));
var TO_LOWER_BIT2 = 32;
var BinTrieFlags2;
(function(BinTrieFlags4) {
  BinTrieFlags4[BinTrieFlags4["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
  BinTrieFlags4[BinTrieFlags4["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
  BinTrieFlags4[BinTrieFlags4["JUMP_TABLE"] = 127] = "JUMP_TABLE";
})(BinTrieFlags2 || (BinTrieFlags2 = {}));
function isNumber3(code) {
  return code >= CharCodes2.ZERO && code <= CharCodes2.NINE;
}
function isHexadecimalCharacter2(code) {
  return code >= CharCodes2.UPPER_A && code <= CharCodes2.UPPER_F || code >= CharCodes2.LOWER_A && code <= CharCodes2.LOWER_F;
}
function isAsciiAlphaNumeric2(code) {
  return code >= CharCodes2.UPPER_A && code <= CharCodes2.UPPER_Z || code >= CharCodes2.LOWER_A && code <= CharCodes2.LOWER_Z || isNumber3(code);
}
function isEntityInAttributeInvalidEnd2(code) {
  return code === CharCodes2.EQUALS || isAsciiAlphaNumeric2(code);
}
var EntityDecoderState2;
(function(EntityDecoderState4) {
  EntityDecoderState4[EntityDecoderState4["EntityStart"] = 0] = "EntityStart";
  EntityDecoderState4[EntityDecoderState4["NumericStart"] = 1] = "NumericStart";
  EntityDecoderState4[EntityDecoderState4["NumericDecimal"] = 2] = "NumericDecimal";
  EntityDecoderState4[EntityDecoderState4["NumericHex"] = 3] = "NumericHex";
  EntityDecoderState4[EntityDecoderState4["NamedEntity"] = 4] = "NamedEntity";
})(EntityDecoderState2 || (EntityDecoderState2 = {}));
var DecodingMode2;
(function(DecodingMode4) {
  DecodingMode4[DecodingMode4["Legacy"] = 0] = "Legacy";
  DecodingMode4[DecodingMode4["Strict"] = 1] = "Strict";
  DecodingMode4[DecodingMode4["Attribute"] = 2] = "Attribute";
})(DecodingMode2 || (DecodingMode2 = {}));
var EntityDecoder2 = class {
  constructor(decodeTree, emitCodePoint, errors) {
    this.decodeTree = decodeTree;
    this.emitCodePoint = emitCodePoint;
    this.errors = errors;
    this.state = EntityDecoderState2.EntityStart;
    this.consumed = 1;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.decodeMode = DecodingMode2.Strict;
  }
  /** Resets the instance to make it reusable. */
  startEntity(decodeMode) {
    this.decodeMode = decodeMode;
    this.state = EntityDecoderState2.EntityStart;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.consumed = 1;
  }
  /**
   * Write an entity to the decoder. This can be called multiple times with partial entities.
   * If the entity is incomplete, the decoder will return -1.
   *
   * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
   * entity is incomplete, and resume when the next string is written.
   *
   * @param input The string containing the entity (or a continuation of the entity).
   * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  write(input, offset) {
    switch (this.state) {
      case EntityDecoderState2.EntityStart: {
        if (input.charCodeAt(offset) === CharCodes2.NUM) {
          this.state = EntityDecoderState2.NumericStart;
          this.consumed += 1;
          return this.stateNumericStart(input, offset + 1);
        }
        this.state = EntityDecoderState2.NamedEntity;
        return this.stateNamedEntity(input, offset);
      }
      case EntityDecoderState2.NumericStart: {
        return this.stateNumericStart(input, offset);
      }
      case EntityDecoderState2.NumericDecimal: {
        return this.stateNumericDecimal(input, offset);
      }
      case EntityDecoderState2.NumericHex: {
        return this.stateNumericHex(input, offset);
      }
      case EntityDecoderState2.NamedEntity: {
        return this.stateNamedEntity(input, offset);
      }
    }
  }
  /**
   * Switches between the numeric decimal and hexadecimal states.
   *
   * Equivalent to the `Numeric character reference state` in the HTML spec.
   *
   * @param input The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericStart(input, offset) {
    if (offset >= input.length) {
      return -1;
    }
    if ((input.charCodeAt(offset) | TO_LOWER_BIT2) === CharCodes2.LOWER_X) {
      this.state = EntityDecoderState2.NumericHex;
      this.consumed += 1;
      return this.stateNumericHex(input, offset + 1);
    }
    this.state = EntityDecoderState2.NumericDecimal;
    return this.stateNumericDecimal(input, offset);
  }
  addToNumericResult(input, start, end2, base) {
    if (start !== end2) {
      const digitCount = end2 - start;
      this.result = this.result * Math.pow(base, digitCount) + Number.parseInt(input.substr(start, digitCount), base);
      this.consumed += digitCount;
    }
  }
  /**
   * Parses a hexadecimal numeric entity.
   *
   * Equivalent to the `Hexademical character reference state` in the HTML spec.
   *
   * @param input The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericHex(input, offset) {
    const startIndex = offset;
    while (offset < input.length) {
      const char = input.charCodeAt(offset);
      if (isNumber3(char) || isHexadecimalCharacter2(char)) {
        offset += 1;
      } else {
        this.addToNumericResult(input, startIndex, offset, 16);
        return this.emitNumericEntity(char, 3);
      }
    }
    this.addToNumericResult(input, startIndex, offset, 16);
    return -1;
  }
  /**
   * Parses a decimal numeric entity.
   *
   * Equivalent to the `Decimal character reference state` in the HTML spec.
   *
   * @param input The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericDecimal(input, offset) {
    const startIndex = offset;
    while (offset < input.length) {
      const char = input.charCodeAt(offset);
      if (isNumber3(char)) {
        offset += 1;
      } else {
        this.addToNumericResult(input, startIndex, offset, 10);
        return this.emitNumericEntity(char, 2);
      }
    }
    this.addToNumericResult(input, startIndex, offset, 10);
    return -1;
  }
  /**
   * Validate and emit a numeric entity.
   *
   * Implements the logic from the `Hexademical character reference start
   * state` and `Numeric character reference end state` in the HTML spec.
   *
   * @param lastCp The last code point of the entity. Used to see if the
   *               entity was terminated with a semicolon.
   * @param expectedLength The minimum number of characters that should be
   *                       consumed. Used to validate that at least one digit
   *                       was consumed.
   * @returns The number of characters that were consumed.
   */
  emitNumericEntity(lastCp, expectedLength) {
    var _a5;
    if (this.consumed <= expectedLength) {
      (_a5 = this.errors) === null || _a5 === void 0 ? void 0 : _a5.absenceOfDigitsInNumericCharacterReference(this.consumed);
      return 0;
    }
    if (lastCp === CharCodes2.SEMI) {
      this.consumed += 1;
    } else if (this.decodeMode === DecodingMode2.Strict) {
      return 0;
    }
    this.emitCodePoint(replaceCodePoint2(this.result), this.consumed);
    if (this.errors) {
      if (lastCp !== CharCodes2.SEMI) {
        this.errors.missingSemicolonAfterCharacterReference();
      }
      this.errors.validateNumericCharacterReference(this.result);
    }
    return this.consumed;
  }
  /**
   * Parses a named entity.
   *
   * Equivalent to the `Named character reference state` in the HTML spec.
   *
   * @param input The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNamedEntity(input, offset) {
    const { decodeTree } = this;
    let current = decodeTree[this.treeIndex];
    let valueLength = (current & BinTrieFlags2.VALUE_LENGTH) >> 14;
    for (; offset < input.length; offset++, this.excess++) {
      const char = input.charCodeAt(offset);
      this.treeIndex = determineBranch2(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
      if (this.treeIndex < 0) {
        return this.result === 0 || // If we are parsing an attribute
        this.decodeMode === DecodingMode2.Attribute && // We shouldn't have consumed any characters after the entity,
        (valueLength === 0 || // And there should be no invalid characters.
        isEntityInAttributeInvalidEnd2(char)) ? 0 : this.emitNotTerminatedNamedEntity();
      }
      current = decodeTree[this.treeIndex];
      valueLength = (current & BinTrieFlags2.VALUE_LENGTH) >> 14;
      if (valueLength !== 0) {
        if (char === CharCodes2.SEMI) {
          return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
        }
        if (this.decodeMode !== DecodingMode2.Strict) {
          this.result = this.treeIndex;
          this.consumed += this.excess;
          this.excess = 0;
        }
      }
    }
    return -1;
  }
  /**
   * Emit a named entity that was not terminated with a semicolon.
   *
   * @returns The number of characters consumed.
   */
  emitNotTerminatedNamedEntity() {
    var _a5;
    const { result, decodeTree } = this;
    const valueLength = (decodeTree[result] & BinTrieFlags2.VALUE_LENGTH) >> 14;
    this.emitNamedEntityData(result, valueLength, this.consumed);
    (_a5 = this.errors) === null || _a5 === void 0 ? void 0 : _a5.missingSemicolonAfterCharacterReference();
    return this.consumed;
  }
  /**
   * Emit a named entity.
   *
   * @param result The index of the entity in the decode tree.
   * @param valueLength The number of bytes in the entity.
   * @param consumed The number of characters consumed.
   *
   * @returns The number of characters consumed.
   */
  emitNamedEntityData(result, valueLength, consumed) {
    const { decodeTree } = this;
    this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags2.VALUE_LENGTH : decodeTree[result + 1], consumed);
    if (valueLength === 3) {
      this.emitCodePoint(decodeTree[result + 2], consumed);
    }
    return consumed;
  }
  /**
   * Signal to the parser that the end of the input was reached.
   *
   * Remaining data will be emitted and relevant errors will be produced.
   *
   * @returns The number of characters consumed.
   */
  end() {
    var _a5;
    switch (this.state) {
      case EntityDecoderState2.NamedEntity: {
        return this.result !== 0 && (this.decodeMode !== DecodingMode2.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
      }
      case EntityDecoderState2.NumericDecimal: {
        return this.emitNumericEntity(0, 2);
      }
      case EntityDecoderState2.NumericHex: {
        return this.emitNumericEntity(0, 3);
      }
      case EntityDecoderState2.NumericStart: {
        (_a5 = this.errors) === null || _a5 === void 0 ? void 0 : _a5.absenceOfDigitsInNumericCharacterReference(this.consumed);
        return 0;
      }
      case EntityDecoderState2.EntityStart: {
        return 0;
      }
    }
  }
};
function determineBranch2(decodeTree, current, nodeIndex, char) {
  const branchCount = (current & BinTrieFlags2.BRANCH_LENGTH) >> 7;
  const jumpOffset = current & BinTrieFlags2.JUMP_TABLE;
  if (branchCount === 0) {
    return jumpOffset !== 0 && char === jumpOffset ? nodeIndex : -1;
  }
  if (jumpOffset) {
    const value = char - jumpOffset;
    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIndex + value] - 1;
  }
  let lo = nodeIndex;
  let hi = lo + branchCount - 1;
  while (lo <= hi) {
    const mid = lo + hi >>> 1;
    const midValue = decodeTree[mid];
    if (midValue < char) {
      lo = mid + 1;
    } else if (midValue > char) {
      hi = mid - 1;
    } else {
      return decodeTree[mid + branchCount];
    }
  }
  return -1;
}

// node_modules/htmlparser2/dist/esm/Tokenizer.js
var CharCodes3;
(function(CharCodes5) {
  CharCodes5[CharCodes5["Tab"] = 9] = "Tab";
  CharCodes5[CharCodes5["NewLine"] = 10] = "NewLine";
  CharCodes5[CharCodes5["FormFeed"] = 12] = "FormFeed";
  CharCodes5[CharCodes5["CarriageReturn"] = 13] = "CarriageReturn";
  CharCodes5[CharCodes5["Space"] = 32] = "Space";
  CharCodes5[CharCodes5["ExclamationMark"] = 33] = "ExclamationMark";
  CharCodes5[CharCodes5["Number"] = 35] = "Number";
  CharCodes5[CharCodes5["Amp"] = 38] = "Amp";
  CharCodes5[CharCodes5["SingleQuote"] = 39] = "SingleQuote";
  CharCodes5[CharCodes5["DoubleQuote"] = 34] = "DoubleQuote";
  CharCodes5[CharCodes5["Dash"] = 45] = "Dash";
  CharCodes5[CharCodes5["Slash"] = 47] = "Slash";
  CharCodes5[CharCodes5["Zero"] = 48] = "Zero";
  CharCodes5[CharCodes5["Nine"] = 57] = "Nine";
  CharCodes5[CharCodes5["Semi"] = 59] = "Semi";
  CharCodes5[CharCodes5["Lt"] = 60] = "Lt";
  CharCodes5[CharCodes5["Eq"] = 61] = "Eq";
  CharCodes5[CharCodes5["Gt"] = 62] = "Gt";
  CharCodes5[CharCodes5["Questionmark"] = 63] = "Questionmark";
  CharCodes5[CharCodes5["UpperA"] = 65] = "UpperA";
  CharCodes5[CharCodes5["LowerA"] = 97] = "LowerA";
  CharCodes5[CharCodes5["UpperF"] = 70] = "UpperF";
  CharCodes5[CharCodes5["LowerF"] = 102] = "LowerF";
  CharCodes5[CharCodes5["UpperZ"] = 90] = "UpperZ";
  CharCodes5[CharCodes5["LowerZ"] = 122] = "LowerZ";
  CharCodes5[CharCodes5["LowerX"] = 120] = "LowerX";
  CharCodes5[CharCodes5["OpeningSquareBracket"] = 91] = "OpeningSquareBracket";
})(CharCodes3 || (CharCodes3 = {}));
var State;
(function(State3) {
  State3[State3["Text"] = 1] = "Text";
  State3[State3["BeforeTagName"] = 2] = "BeforeTagName";
  State3[State3["InTagName"] = 3] = "InTagName";
  State3[State3["InSelfClosingTag"] = 4] = "InSelfClosingTag";
  State3[State3["BeforeClosingTagName"] = 5] = "BeforeClosingTagName";
  State3[State3["InClosingTagName"] = 6] = "InClosingTagName";
  State3[State3["AfterClosingTagName"] = 7] = "AfterClosingTagName";
  State3[State3["BeforeAttributeName"] = 8] = "BeforeAttributeName";
  State3[State3["InAttributeName"] = 9] = "InAttributeName";
  State3[State3["AfterAttributeName"] = 10] = "AfterAttributeName";
  State3[State3["BeforeAttributeValue"] = 11] = "BeforeAttributeValue";
  State3[State3["InAttributeValueDq"] = 12] = "InAttributeValueDq";
  State3[State3["InAttributeValueSq"] = 13] = "InAttributeValueSq";
  State3[State3["InAttributeValueNq"] = 14] = "InAttributeValueNq";
  State3[State3["BeforeDeclaration"] = 15] = "BeforeDeclaration";
  State3[State3["InDeclaration"] = 16] = "InDeclaration";
  State3[State3["InProcessingInstruction"] = 17] = "InProcessingInstruction";
  State3[State3["BeforeComment"] = 18] = "BeforeComment";
  State3[State3["CDATASequence"] = 19] = "CDATASequence";
  State3[State3["InSpecialComment"] = 20] = "InSpecialComment";
  State3[State3["InCommentLike"] = 21] = "InCommentLike";
  State3[State3["BeforeSpecialS"] = 22] = "BeforeSpecialS";
  State3[State3["BeforeSpecialT"] = 23] = "BeforeSpecialT";
  State3[State3["SpecialStartSequence"] = 24] = "SpecialStartSequence";
  State3[State3["InSpecialTag"] = 25] = "InSpecialTag";
  State3[State3["InEntity"] = 26] = "InEntity";
})(State || (State = {}));
function isWhitespace(c) {
  return c === CharCodes3.Space || c === CharCodes3.NewLine || c === CharCodes3.Tab || c === CharCodes3.FormFeed || c === CharCodes3.CarriageReturn;
}
function isEndOfTagSection(c) {
  return c === CharCodes3.Slash || c === CharCodes3.Gt || isWhitespace(c);
}
function isASCIIAlpha(c) {
  return c >= CharCodes3.LowerA && c <= CharCodes3.LowerZ || c >= CharCodes3.UpperA && c <= CharCodes3.UpperZ;
}
var QuoteType;
(function(QuoteType2) {
  QuoteType2[QuoteType2["NoValue"] = 0] = "NoValue";
  QuoteType2[QuoteType2["Unquoted"] = 1] = "Unquoted";
  QuoteType2[QuoteType2["Single"] = 2] = "Single";
  QuoteType2[QuoteType2["Double"] = 3] = "Double";
})(QuoteType || (QuoteType = {}));
var Sequences = {
  Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
  // CDATA[
  CdataEnd: new Uint8Array([93, 93, 62]),
  // ]]>
  CommentEnd: new Uint8Array([45, 45, 62]),
  // `-->`
  ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
  // `<\/script`
  StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
  // `</style`
  TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101]),
  // `</title`
  TextareaEnd: new Uint8Array([
    60,
    47,
    116,
    101,
    120,
    116,
    97,
    114,
    101,
    97
  ]),
  // `</textarea`
  XmpEnd: new Uint8Array([60, 47, 120, 109, 112])
  // `</xmp`
};
var Tokenizer = class {
  constructor({ xmlMode = false, decodeEntities = true }, cbs) {
    this.cbs = cbs;
    this.state = State.Text;
    this.buffer = "";
    this.sectionStart = 0;
    this.index = 0;
    this.entityStart = 0;
    this.baseState = State.Text;
    this.isSpecial = false;
    this.running = true;
    this.offset = 0;
    this.currentSequence = void 0;
    this.sequenceIndex = 0;
    this.xmlMode = xmlMode;
    this.decodeEntities = decodeEntities;
    this.entityDecoder = new EntityDecoder2(xmlMode ? xmlDecodeTree : htmlDecodeTree, (cp, consumed) => this.emitCodePoint(cp, consumed));
  }
  reset() {
    this.state = State.Text;
    this.buffer = "";
    this.sectionStart = 0;
    this.index = 0;
    this.baseState = State.Text;
    this.currentSequence = void 0;
    this.running = true;
    this.offset = 0;
  }
  write(chunk) {
    this.offset += this.buffer.length;
    this.buffer = chunk;
    this.parse();
  }
  end() {
    if (this.running)
      this.finish();
  }
  pause() {
    this.running = false;
  }
  resume() {
    this.running = true;
    if (this.index < this.buffer.length + this.offset) {
      this.parse();
    }
  }
  stateText(c) {
    if (c === CharCodes3.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes3.Lt)) {
      if (this.index > this.sectionStart) {
        this.cbs.ontext(this.sectionStart, this.index);
      }
      this.state = State.BeforeTagName;
      this.sectionStart = this.index;
    } else if (this.decodeEntities && c === CharCodes3.Amp) {
      this.startEntity();
    }
  }
  stateSpecialStartSequence(c) {
    const isEnd = this.sequenceIndex === this.currentSequence.length;
    const isMatch = isEnd ? (
      // If we are at the end of the sequence, make sure the tag name has ended
      isEndOfTagSection(c)
    ) : (
      // Otherwise, do a case-insensitive comparison
      (c | 32) === this.currentSequence[this.sequenceIndex]
    );
    if (!isMatch) {
      this.isSpecial = false;
    } else if (!isEnd) {
      this.sequenceIndex++;
      return;
    }
    this.sequenceIndex = 0;
    this.state = State.InTagName;
    this.stateInTagName(c);
  }
  /** Look for an end tag. For <title> tags, also decode entities. */
  stateInSpecialTag(c) {
    if (this.sequenceIndex === this.currentSequence.length) {
      if (c === CharCodes3.Gt || isWhitespace(c)) {
        const endOfText = this.index - this.currentSequence.length;
        if (this.sectionStart < endOfText) {
          const actualIndex = this.index;
          this.index = endOfText;
          this.cbs.ontext(this.sectionStart, endOfText);
          this.index = actualIndex;
        }
        this.isSpecial = false;
        this.sectionStart = endOfText + 2;
        this.stateInClosingTagName(c);
        return;
      }
      this.sequenceIndex = 0;
    }
    if ((c | 32) === this.currentSequence[this.sequenceIndex]) {
      this.sequenceIndex += 1;
    } else if (this.sequenceIndex === 0) {
      if (this.currentSequence === Sequences.TitleEnd) {
        if (this.decodeEntities && c === CharCodes3.Amp) {
          this.startEntity();
        }
      } else if (this.fastForwardTo(CharCodes3.Lt)) {
        this.sequenceIndex = 1;
      }
    } else {
      this.sequenceIndex = Number(c === CharCodes3.Lt);
    }
  }
  stateCDATASequence(c) {
    if (c === Sequences.Cdata[this.sequenceIndex]) {
      if (++this.sequenceIndex === Sequences.Cdata.length) {
        this.state = State.InCommentLike;
        this.currentSequence = Sequences.CdataEnd;
        this.sequenceIndex = 0;
        this.sectionStart = this.index + 1;
      }
    } else {
      this.sequenceIndex = 0;
      this.state = State.InDeclaration;
      this.stateInDeclaration(c);
    }
  }
  /**
   * When we wait for one specific character, we can speed things up
   * by skipping through the buffer until we find it.
   *
   * @returns Whether the character was found.
   */
  fastForwardTo(c) {
    while (++this.index < this.buffer.length + this.offset) {
      if (this.buffer.charCodeAt(this.index - this.offset) === c) {
        return true;
      }
    }
    this.index = this.buffer.length + this.offset - 1;
    return false;
  }
  /**
   * Comments and CDATA end with `-->` and `]]>`.
   *
   * Their common qualities are:
   * - Their end sequences have a distinct character they start with.
   * - That character is then repeated, so we have to check multiple repeats.
   * - All characters but the start character of the sequence can be skipped.
   */
  stateInCommentLike(c) {
    if (c === this.currentSequence[this.sequenceIndex]) {
      if (++this.sequenceIndex === this.currentSequence.length) {
        if (this.currentSequence === Sequences.CdataEnd) {
          this.cbs.oncdata(this.sectionStart, this.index, 2);
        } else {
          this.cbs.oncomment(this.sectionStart, this.index, 2);
        }
        this.sequenceIndex = 0;
        this.sectionStart = this.index + 1;
        this.state = State.Text;
      }
    } else if (this.sequenceIndex === 0) {
      if (this.fastForwardTo(this.currentSequence[0])) {
        this.sequenceIndex = 1;
      }
    } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {
      this.sequenceIndex = 0;
    }
  }
  /**
   * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.
   *
   * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).
   * We allow anything that wouldn't end the tag.
   */
  isTagStartChar(c) {
    return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);
  }
  startSpecial(sequence, offset) {
    this.isSpecial = true;
    this.currentSequence = sequence;
    this.sequenceIndex = offset;
    this.state = State.SpecialStartSequence;
  }
  stateBeforeTagName(c) {
    if (c === CharCodes3.ExclamationMark) {
      this.state = State.BeforeDeclaration;
      this.sectionStart = this.index + 1;
    } else if (c === CharCodes3.Questionmark) {
      this.state = State.InProcessingInstruction;
      this.sectionStart = this.index + 1;
    } else if (this.isTagStartChar(c)) {
      const lower = c | 32;
      this.sectionStart = this.index;
      if (this.xmlMode) {
        this.state = State.InTagName;
      } else if (lower === Sequences.ScriptEnd[2]) {
        this.state = State.BeforeSpecialS;
      } else if (lower === Sequences.TitleEnd[2] || lower === Sequences.XmpEnd[2]) {
        this.state = State.BeforeSpecialT;
      } else {
        this.state = State.InTagName;
      }
    } else if (c === CharCodes3.Slash) {
      this.state = State.BeforeClosingTagName;
    } else {
      this.state = State.Text;
      this.stateText(c);
    }
  }
  stateInTagName(c) {
    if (isEndOfTagSection(c)) {
      this.cbs.onopentagname(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.state = State.BeforeAttributeName;
      this.stateBeforeAttributeName(c);
    }
  }
  stateBeforeClosingTagName(c) {
    if (isWhitespace(c)) {
    } else if (c === CharCodes3.Gt) {
      this.state = State.Text;
    } else {
      this.state = this.isTagStartChar(c) ? State.InClosingTagName : State.InSpecialComment;
      this.sectionStart = this.index;
    }
  }
  stateInClosingTagName(c) {
    if (c === CharCodes3.Gt || isWhitespace(c)) {
      this.cbs.onclosetag(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.state = State.AfterClosingTagName;
      this.stateAfterClosingTagName(c);
    }
  }
  stateAfterClosingTagName(c) {
    if (c === CharCodes3.Gt || this.fastForwardTo(CharCodes3.Gt)) {
      this.state = State.Text;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeAttributeName(c) {
    if (c === CharCodes3.Gt) {
      this.cbs.onopentagend(this.index);
      if (this.isSpecial) {
        this.state = State.InSpecialTag;
        this.sequenceIndex = 0;
      } else {
        this.state = State.Text;
      }
      this.sectionStart = this.index + 1;
    } else if (c === CharCodes3.Slash) {
      this.state = State.InSelfClosingTag;
    } else if (!isWhitespace(c)) {
      this.state = State.InAttributeName;
      this.sectionStart = this.index;
    }
  }
  stateInSelfClosingTag(c) {
    if (c === CharCodes3.Gt) {
      this.cbs.onselfclosingtag(this.index);
      this.state = State.Text;
      this.sectionStart = this.index + 1;
      this.isSpecial = false;
    } else if (!isWhitespace(c)) {
      this.state = State.BeforeAttributeName;
      this.stateBeforeAttributeName(c);
    }
  }
  stateInAttributeName(c) {
    if (c === CharCodes3.Eq || isEndOfTagSection(c)) {
      this.cbs.onattribname(this.sectionStart, this.index);
      this.sectionStart = this.index;
      this.state = State.AfterAttributeName;
      this.stateAfterAttributeName(c);
    }
  }
  stateAfterAttributeName(c) {
    if (c === CharCodes3.Eq) {
      this.state = State.BeforeAttributeValue;
    } else if (c === CharCodes3.Slash || c === CharCodes3.Gt) {
      this.cbs.onattribend(QuoteType.NoValue, this.sectionStart);
      this.sectionStart = -1;
      this.state = State.BeforeAttributeName;
      this.stateBeforeAttributeName(c);
    } else if (!isWhitespace(c)) {
      this.cbs.onattribend(QuoteType.NoValue, this.sectionStart);
      this.state = State.InAttributeName;
      this.sectionStart = this.index;
    }
  }
  stateBeforeAttributeValue(c) {
    if (c === CharCodes3.DoubleQuote) {
      this.state = State.InAttributeValueDq;
      this.sectionStart = this.index + 1;
    } else if (c === CharCodes3.SingleQuote) {
      this.state = State.InAttributeValueSq;
      this.sectionStart = this.index + 1;
    } else if (!isWhitespace(c)) {
      this.sectionStart = this.index;
      this.state = State.InAttributeValueNq;
      this.stateInAttributeValueNoQuotes(c);
    }
  }
  handleInAttributeValue(c, quote) {
    if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {
      this.cbs.onattribdata(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.cbs.onattribend(quote === CharCodes3.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index + 1);
      this.state = State.BeforeAttributeName;
    } else if (this.decodeEntities && c === CharCodes3.Amp) {
      this.startEntity();
    }
  }
  stateInAttributeValueDoubleQuotes(c) {
    this.handleInAttributeValue(c, CharCodes3.DoubleQuote);
  }
  stateInAttributeValueSingleQuotes(c) {
    this.handleInAttributeValue(c, CharCodes3.SingleQuote);
  }
  stateInAttributeValueNoQuotes(c) {
    if (isWhitespace(c) || c === CharCodes3.Gt) {
      this.cbs.onattribdata(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.cbs.onattribend(QuoteType.Unquoted, this.index);
      this.state = State.BeforeAttributeName;
      this.stateBeforeAttributeName(c);
    } else if (this.decodeEntities && c === CharCodes3.Amp) {
      this.startEntity();
    }
  }
  stateBeforeDeclaration(c) {
    if (c === CharCodes3.OpeningSquareBracket) {
      this.state = State.CDATASequence;
      this.sequenceIndex = 0;
    } else {
      this.state = c === CharCodes3.Dash ? State.BeforeComment : State.InDeclaration;
    }
  }
  stateInDeclaration(c) {
    if (c === CharCodes3.Gt || this.fastForwardTo(CharCodes3.Gt)) {
      this.cbs.ondeclaration(this.sectionStart, this.index);
      this.state = State.Text;
      this.sectionStart = this.index + 1;
    }
  }
  stateInProcessingInstruction(c) {
    if (c === CharCodes3.Gt || this.fastForwardTo(CharCodes3.Gt)) {
      this.cbs.onprocessinginstruction(this.sectionStart, this.index);
      this.state = State.Text;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeComment(c) {
    if (c === CharCodes3.Dash) {
      this.state = State.InCommentLike;
      this.currentSequence = Sequences.CommentEnd;
      this.sequenceIndex = 2;
      this.sectionStart = this.index + 1;
    } else {
      this.state = State.InDeclaration;
    }
  }
  stateInSpecialComment(c) {
    if (c === CharCodes3.Gt || this.fastForwardTo(CharCodes3.Gt)) {
      this.cbs.oncomment(this.sectionStart, this.index, 0);
      this.state = State.Text;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeSpecialS(c) {
    const lower = c | 32;
    if (lower === Sequences.ScriptEnd[3]) {
      this.startSpecial(Sequences.ScriptEnd, 4);
    } else if (lower === Sequences.StyleEnd[3]) {
      this.startSpecial(Sequences.StyleEnd, 4);
    } else {
      this.state = State.InTagName;
      this.stateInTagName(c);
    }
  }
  stateBeforeSpecialT(c) {
    const lower = c | 32;
    switch (lower) {
      case Sequences.TitleEnd[3]: {
        this.startSpecial(Sequences.TitleEnd, 4);
        break;
      }
      case Sequences.TextareaEnd[3]: {
        this.startSpecial(Sequences.TextareaEnd, 4);
        break;
      }
      case Sequences.XmpEnd[3]: {
        this.startSpecial(Sequences.XmpEnd, 4);
        break;
      }
      default: {
        this.state = State.InTagName;
        this.stateInTagName(c);
      }
    }
  }
  startEntity() {
    this.baseState = this.state;
    this.state = State.InEntity;
    this.entityStart = this.index;
    this.entityDecoder.startEntity(this.xmlMode ? DecodingMode2.Strict : this.baseState === State.Text || this.baseState === State.InSpecialTag ? DecodingMode2.Legacy : DecodingMode2.Attribute);
  }
  stateInEntity() {
    const length = this.entityDecoder.write(this.buffer, this.index - this.offset);
    if (length >= 0) {
      this.state = this.baseState;
      if (length === 0) {
        this.index = this.entityStart;
      }
    } else {
      this.index = this.offset + this.buffer.length - 1;
    }
  }
  /**
   * Remove data that has already been consumed from the buffer.
   */
  cleanup() {
    if (this.running && this.sectionStart !== this.index) {
      if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {
        this.cbs.ontext(this.sectionStart, this.index);
        this.sectionStart = this.index;
      } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {
        this.cbs.onattribdata(this.sectionStart, this.index);
        this.sectionStart = this.index;
      }
    }
  }
  shouldContinue() {
    return this.index < this.buffer.length + this.offset && this.running;
  }
  /**
   * Iterates through the buffer, calling the function corresponding to the current state.
   *
   * States that are more likely to be hit are higher up, as a performance improvement.
   */
  parse() {
    while (this.shouldContinue()) {
      const c = this.buffer.charCodeAt(this.index - this.offset);
      switch (this.state) {
        case State.Text: {
          this.stateText(c);
          break;
        }
        case State.SpecialStartSequence: {
          this.stateSpecialStartSequence(c);
          break;
        }
        case State.InSpecialTag: {
          this.stateInSpecialTag(c);
          break;
        }
        case State.CDATASequence: {
          this.stateCDATASequence(c);
          break;
        }
        case State.InAttributeValueDq: {
          this.stateInAttributeValueDoubleQuotes(c);
          break;
        }
        case State.InAttributeName: {
          this.stateInAttributeName(c);
          break;
        }
        case State.InCommentLike: {
          this.stateInCommentLike(c);
          break;
        }
        case State.InSpecialComment: {
          this.stateInSpecialComment(c);
          break;
        }
        case State.BeforeAttributeName: {
          this.stateBeforeAttributeName(c);
          break;
        }
        case State.InTagName: {
          this.stateInTagName(c);
          break;
        }
        case State.InClosingTagName: {
          this.stateInClosingTagName(c);
          break;
        }
        case State.BeforeTagName: {
          this.stateBeforeTagName(c);
          break;
        }
        case State.AfterAttributeName: {
          this.stateAfterAttributeName(c);
          break;
        }
        case State.InAttributeValueSq: {
          this.stateInAttributeValueSingleQuotes(c);
          break;
        }
        case State.BeforeAttributeValue: {
          this.stateBeforeAttributeValue(c);
          break;
        }
        case State.BeforeClosingTagName: {
          this.stateBeforeClosingTagName(c);
          break;
        }
        case State.AfterClosingTagName: {
          this.stateAfterClosingTagName(c);
          break;
        }
        case State.BeforeSpecialS: {
          this.stateBeforeSpecialS(c);
          break;
        }
        case State.BeforeSpecialT: {
          this.stateBeforeSpecialT(c);
          break;
        }
        case State.InAttributeValueNq: {
          this.stateInAttributeValueNoQuotes(c);
          break;
        }
        case State.InSelfClosingTag: {
          this.stateInSelfClosingTag(c);
          break;
        }
        case State.InDeclaration: {
          this.stateInDeclaration(c);
          break;
        }
        case State.BeforeDeclaration: {
          this.stateBeforeDeclaration(c);
          break;
        }
        case State.BeforeComment: {
          this.stateBeforeComment(c);
          break;
        }
        case State.InProcessingInstruction: {
          this.stateInProcessingInstruction(c);
          break;
        }
        case State.InEntity: {
          this.stateInEntity();
          break;
        }
      }
      this.index++;
    }
    this.cleanup();
  }
  finish() {
    if (this.state === State.InEntity) {
      this.entityDecoder.end();
      this.state = this.baseState;
    }
    this.handleTrailingData();
    this.cbs.onend();
  }
  /** Handle any trailing data. */
  handleTrailingData() {
    const endIndex = this.buffer.length + this.offset;
    if (this.sectionStart >= endIndex) {
      return;
    }
    if (this.state === State.InCommentLike) {
      if (this.currentSequence === Sequences.CdataEnd) {
        this.cbs.oncdata(this.sectionStart, endIndex, 0);
      } else {
        this.cbs.oncomment(this.sectionStart, endIndex, 0);
      }
    } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName) {
    } else {
      this.cbs.ontext(this.sectionStart, endIndex);
    }
  }
  emitCodePoint(cp, consumed) {
    if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {
      if (this.sectionStart < this.entityStart) {
        this.cbs.onattribdata(this.sectionStart, this.entityStart);
      }
      this.sectionStart = this.entityStart + consumed;
      this.index = this.sectionStart - 1;
      this.cbs.onattribentity(cp);
    } else {
      if (this.sectionStart < this.entityStart) {
        this.cbs.ontext(this.sectionStart, this.entityStart);
      }
      this.sectionStart = this.entityStart + consumed;
      this.index = this.sectionStart - 1;
      this.cbs.ontextentity(cp, this.sectionStart);
    }
  }
};

// node_modules/htmlparser2/dist/esm/Parser.js
var formTags = /* @__PURE__ */ new Set([
  "input",
  "option",
  "optgroup",
  "select",
  "button",
  "datalist",
  "textarea"
]);
var pTag = /* @__PURE__ */ new Set(["p"]);
var tableSectionTags = /* @__PURE__ */ new Set(["thead", "tbody"]);
var ddtTags = /* @__PURE__ */ new Set(["dd", "dt"]);
var rtpTags = /* @__PURE__ */ new Set(["rt", "rp"]);
var openImpliesClose = /* @__PURE__ */ new Map([
  ["tr", /* @__PURE__ */ new Set(["tr", "th", "td"])],
  ["th", /* @__PURE__ */ new Set(["th"])],
  ["td", /* @__PURE__ */ new Set(["thead", "th", "td"])],
  ["body", /* @__PURE__ */ new Set(["head", "link", "script"])],
  ["li", /* @__PURE__ */ new Set(["li"])],
  ["p", pTag],
  ["h1", pTag],
  ["h2", pTag],
  ["h3", pTag],
  ["h4", pTag],
  ["h5", pTag],
  ["h6", pTag],
  ["select", formTags],
  ["input", formTags],
  ["output", formTags],
  ["button", formTags],
  ["datalist", formTags],
  ["textarea", formTags],
  ["option", /* @__PURE__ */ new Set(["option"])],
  ["optgroup", /* @__PURE__ */ new Set(["optgroup", "option"])],
  ["dd", ddtTags],
  ["dt", ddtTags],
  ["address", pTag],
  ["article", pTag],
  ["aside", pTag],
  ["blockquote", pTag],
  ["details", pTag],
  ["div", pTag],
  ["dl", pTag],
  ["fieldset", pTag],
  ["figcaption", pTag],
  ["figure", pTag],
  ["footer", pTag],
  ["form", pTag],
  ["header", pTag],
  ["hr", pTag],
  ["main", pTag],
  ["nav", pTag],
  ["ol", pTag],
  ["pre", pTag],
  ["section", pTag],
  ["table", pTag],
  ["ul", pTag],
  ["rt", rtpTags],
  ["rp", rtpTags],
  ["tbody", tableSectionTags],
  ["tfoot", tableSectionTags]
]);
var voidElements = /* @__PURE__ */ new Set([
  "area",
  "base",
  "basefont",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "img",
  "input",
  "isindex",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
var foreignContextElements = /* @__PURE__ */ new Set(["math", "svg"]);
var htmlIntegrationElements = /* @__PURE__ */ new Set([
  "mi",
  "mo",
  "mn",
  "ms",
  "mtext",
  "annotation-xml",
  "foreignobject",
  "desc",
  "title"
]);
var reNameEnd = /\s|\//;
var Parser = class {
  constructor(cbs, options = {}) {
    var _a5, _b, _c, _d, _e2, _f;
    this.options = options;
    this.startIndex = 0;
    this.endIndex = 0;
    this.openTagStart = 0;
    this.tagname = "";
    this.attribname = "";
    this.attribvalue = "";
    this.attribs = null;
    this.stack = [];
    this.buffers = [];
    this.bufferOffset = 0;
    this.writeIndex = 0;
    this.ended = false;
    this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
    this.htmlMode = !this.options.xmlMode;
    this.lowerCaseTagNames = (_a5 = options.lowerCaseTags) !== null && _a5 !== void 0 ? _a5 : this.htmlMode;
    this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : this.htmlMode;
    this.recognizeSelfClosing = (_c = options.recognizeSelfClosing) !== null && _c !== void 0 ? _c : !this.htmlMode;
    this.tokenizer = new ((_d = options.Tokenizer) !== null && _d !== void 0 ? _d : Tokenizer)(this.options, this);
    this.foreignContext = [!this.htmlMode];
    (_f = (_e2 = this.cbs).onparserinit) === null || _f === void 0 ? void 0 : _f.call(_e2, this);
  }
  // Tokenizer event handlers
  /** @internal */
  ontext(start, endIndex) {
    var _a5, _b;
    const data2 = this.getSlice(start, endIndex);
    this.endIndex = endIndex - 1;
    (_b = (_a5 = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a5, data2);
    this.startIndex = endIndex;
  }
  /** @internal */
  ontextentity(cp, endIndex) {
    var _a5, _b;
    this.endIndex = endIndex - 1;
    (_b = (_a5 = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a5, fromCodePoint2(cp));
    this.startIndex = endIndex;
  }
  /**
   * Checks if the current tag is a void element. Override this if you want
   * to specify your own additional void elements.
   */
  isVoidElement(name) {
    return this.htmlMode && voidElements.has(name);
  }
  /** @internal */
  onopentagname(start, endIndex) {
    this.endIndex = endIndex;
    let name = this.getSlice(start, endIndex);
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    this.emitOpenTag(name);
  }
  emitOpenTag(name) {
    var _a5, _b, _c, _d;
    this.openTagStart = this.startIndex;
    this.tagname = name;
    const impliesClose = this.htmlMode && openImpliesClose.get(name);
    if (impliesClose) {
      while (this.stack.length > 0 && impliesClose.has(this.stack[0])) {
        const element = this.stack.shift();
        (_b = (_a5 = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a5, element, true);
      }
    }
    if (!this.isVoidElement(name)) {
      this.stack.unshift(name);
      if (this.htmlMode) {
        if (foreignContextElements.has(name)) {
          this.foreignContext.unshift(true);
        } else if (htmlIntegrationElements.has(name)) {
          this.foreignContext.unshift(false);
        }
      }
    }
    (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);
    if (this.cbs.onopentag)
      this.attribs = {};
  }
  endOpenTag(isImplied) {
    var _a5, _b;
    this.startIndex = this.openTagStart;
    if (this.attribs) {
      (_b = (_a5 = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a5, this.tagname, this.attribs, isImplied);
      this.attribs = null;
    }
    if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {
      this.cbs.onclosetag(this.tagname, true);
    }
    this.tagname = "";
  }
  /** @internal */
  onopentagend(endIndex) {
    this.endIndex = endIndex;
    this.endOpenTag(false);
    this.startIndex = endIndex + 1;
  }
  /** @internal */
  onclosetag(start, endIndex) {
    var _a5, _b, _c, _d, _e2, _f, _g, _h;
    this.endIndex = endIndex;
    let name = this.getSlice(start, endIndex);
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    if (this.htmlMode && (foreignContextElements.has(name) || htmlIntegrationElements.has(name))) {
      this.foreignContext.shift();
    }
    if (!this.isVoidElement(name)) {
      const pos = this.stack.indexOf(name);
      if (pos !== -1) {
        for (let index2 = 0; index2 <= pos; index2++) {
          const element = this.stack.shift();
          (_b = (_a5 = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a5, element, index2 !== pos);
        }
      } else if (this.htmlMode && name === "p") {
        this.emitOpenTag("p");
        this.closeCurrentTag(true);
      }
    } else if (this.htmlMode && name === "br") {
      (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, "br");
      (_f = (_e2 = this.cbs).onopentag) === null || _f === void 0 ? void 0 : _f.call(_e2, "br", {}, true);
      (_h = (_g = this.cbs).onclosetag) === null || _h === void 0 ? void 0 : _h.call(_g, "br", false);
    }
    this.startIndex = endIndex + 1;
  }
  /** @internal */
  onselfclosingtag(endIndex) {
    this.endIndex = endIndex;
    if (this.recognizeSelfClosing || this.foreignContext[0]) {
      this.closeCurrentTag(false);
      this.startIndex = endIndex + 1;
    } else {
      this.onopentagend(endIndex);
    }
  }
  closeCurrentTag(isOpenImplied) {
    var _a5, _b;
    const name = this.tagname;
    this.endOpenTag(isOpenImplied);
    if (this.stack[0] === name) {
      (_b = (_a5 = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a5, name, !isOpenImplied);
      this.stack.shift();
    }
  }
  /** @internal */
  onattribname(start, endIndex) {
    this.startIndex = start;
    const name = this.getSlice(start, endIndex);
    this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;
  }
  /** @internal */
  onattribdata(start, endIndex) {
    this.attribvalue += this.getSlice(start, endIndex);
  }
  /** @internal */
  onattribentity(cp) {
    this.attribvalue += fromCodePoint2(cp);
  }
  /** @internal */
  onattribend(quote, endIndex) {
    var _a5, _b;
    this.endIndex = endIndex;
    (_b = (_a5 = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a5, this.attribname, this.attribvalue, quote === QuoteType.Double ? '"' : quote === QuoteType.Single ? "'" : quote === QuoteType.NoValue ? void 0 : null);
    if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
      this.attribs[this.attribname] = this.attribvalue;
    }
    this.attribvalue = "";
  }
  getInstructionName(value) {
    const index2 = value.search(reNameEnd);
    let name = index2 < 0 ? value : value.substr(0, index2);
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    return name;
  }
  /** @internal */
  ondeclaration(start, endIndex) {
    this.endIndex = endIndex;
    const value = this.getSlice(start, endIndex);
    if (this.cbs.onprocessinginstruction) {
      const name = this.getInstructionName(value);
      this.cbs.onprocessinginstruction(`!${name}`, `!${value}`);
    }
    this.startIndex = endIndex + 1;
  }
  /** @internal */
  onprocessinginstruction(start, endIndex) {
    this.endIndex = endIndex;
    const value = this.getSlice(start, endIndex);
    if (this.cbs.onprocessinginstruction) {
      const name = this.getInstructionName(value);
      this.cbs.onprocessinginstruction(`?${name}`, `?${value}`);
    }
    this.startIndex = endIndex + 1;
  }
  /** @internal */
  oncomment(start, endIndex, offset) {
    var _a5, _b, _c, _d;
    this.endIndex = endIndex;
    (_b = (_a5 = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a5, this.getSlice(start, endIndex - offset));
    (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
    this.startIndex = endIndex + 1;
  }
  /** @internal */
  oncdata(start, endIndex, offset) {
    var _a5, _b, _c, _d, _e2, _f, _g, _h, _j, _k;
    this.endIndex = endIndex;
    const value = this.getSlice(start, endIndex - offset);
    if (!this.htmlMode || this.options.recognizeCDATA) {
      (_b = (_a5 = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a5);
      (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
      (_f = (_e2 = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e2);
    } else {
      (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, `[CDATA[${value}]]`);
      (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);
    }
    this.startIndex = endIndex + 1;
  }
  /** @internal */
  onend() {
    var _a5, _b;
    if (this.cbs.onclosetag) {
      this.endIndex = this.startIndex;
      for (let index2 = 0; index2 < this.stack.length; index2++) {
        this.cbs.onclosetag(this.stack[index2], true);
      }
    }
    (_b = (_a5 = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a5);
  }
  /**
   * Resets the parser to a blank state, ready to parse a new HTML document
   */
  reset() {
    var _a5, _b, _c, _d;
    (_b = (_a5 = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a5);
    this.tokenizer.reset();
    this.tagname = "";
    this.attribname = "";
    this.attribs = null;
    this.stack.length = 0;
    this.startIndex = 0;
    this.endIndex = 0;
    (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
    this.buffers.length = 0;
    this.foreignContext.length = 0;
    this.foreignContext.unshift(!this.htmlMode);
    this.bufferOffset = 0;
    this.writeIndex = 0;
    this.ended = false;
  }
  /**
   * Resets the parser, then parses a complete document and
   * pushes it to the handler.
   *
   * @param data Document to parse.
   */
  parseComplete(data2) {
    this.reset();
    this.end(data2);
  }
  getSlice(start, end2) {
    while (start - this.bufferOffset >= this.buffers[0].length) {
      this.shiftBuffer();
    }
    let slice2 = this.buffers[0].slice(start - this.bufferOffset, end2 - this.bufferOffset);
    while (end2 - this.bufferOffset > this.buffers[0].length) {
      this.shiftBuffer();
      slice2 += this.buffers[0].slice(0, end2 - this.bufferOffset);
    }
    return slice2;
  }
  shiftBuffer() {
    this.bufferOffset += this.buffers[0].length;
    this.writeIndex--;
    this.buffers.shift();
  }
  /**
   * Parses a chunk of data and calls the corresponding callbacks.
   *
   * @param chunk Chunk to parse.
   */
  write(chunk) {
    var _a5, _b;
    if (this.ended) {
      (_b = (_a5 = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a5, new Error(".write() after done!"));
      return;
    }
    this.buffers.push(chunk);
    if (this.tokenizer.running) {
      this.tokenizer.write(chunk);
      this.writeIndex++;
    }
  }
  /**
   * Parses the end of the buffer and clears the stack, calls onend.
   *
   * @param chunk Optional final chunk to parse.
   */
  end(chunk) {
    var _a5, _b;
    if (this.ended) {
      (_b = (_a5 = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a5, new Error(".end() after done!"));
      return;
    }
    if (chunk)
      this.write(chunk);
    this.ended = true;
    this.tokenizer.end();
  }
  /**
   * Pauses parsing. The parser won't emit events until `resume` is called.
   */
  pause() {
    this.tokenizer.pause();
  }
  /**
   * Resumes parsing after `pause` was called.
   */
  resume() {
    this.tokenizer.resume();
    while (this.tokenizer.running && this.writeIndex < this.buffers.length) {
      this.tokenizer.write(this.buffers[this.writeIndex++]);
    }
    if (this.ended)
      this.tokenizer.end();
  }
  /**
   * Alias of `write`, for backwards compatibility.
   *
   * @param chunk Chunk to parse.
   * @deprecated
   */
  parseChunk(chunk) {
    this.write(chunk);
  }
  /**
   * Alias of `end`, for backwards compatibility.
   *
   * @param chunk Optional final chunk to parse.
   * @deprecated
   */
  done(chunk) {
    this.end(chunk);
  }
};

// node_modules/htmlparser2/dist/esm/index.js
function parseDocument(data2, options) {
  const handler = new DomHandler(void 0, options);
  new Parser(handler, options).end(data2);
  return handler.root;
}

// node_modules/cheerio/dist/browser/api/attributes.js
var _a3;
var hasOwn = (
  // @ts-expect-error `hasOwn` is a standard object method
  (_a3 = Object.hasOwn) !== null && _a3 !== void 0 ? _a3 : (object, prop2) => Object.prototype.hasOwnProperty.call(object, prop2)
);
var rspace = /\s+/;
var dataAttrPrefix = "data-";
var rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;
var rbrace = /^{[^]*}$|^\[[^]*]$/;
function getAttr(elem, name, xmlMode) {
  var _a5;
  if (!elem || !isTag2(elem))
    return void 0;
  (_a5 = elem.attribs) !== null && _a5 !== void 0 ? _a5 : elem.attribs = {};
  if (!name) {
    return elem.attribs;
  }
  if (hasOwn(elem.attribs, name)) {
    return !xmlMode && rboolean.test(name) ? name : elem.attribs[name];
  }
  if (elem.name === "option" && name === "value") {
    return text(elem.children);
  }
  if (elem.name === "input" && (elem.attribs["type"] === "radio" || elem.attribs["type"] === "checkbox") && name === "value") {
    return "on";
  }
  return void 0;
}
function setAttr(el, name, value) {
  if (value === null) {
    removeAttribute(el, name);
  } else {
    el.attribs[name] = `${value}`;
  }
}
function attr(name, value) {
  if (typeof name === "object" || value !== void 0) {
    if (typeof value === "function") {
      if (typeof name !== "string") {
        {
          throw new Error("Bad combination of arguments.");
        }
      }
      return domEach(this, (el, i) => {
        if (isTag2(el))
          setAttr(el, name, value.call(el, i, el.attribs[name]));
      });
    }
    return domEach(this, (el) => {
      if (!isTag2(el))
        return;
      if (typeof name === "object") {
        for (const objName of Object.keys(name)) {
          const objValue = name[objName];
          setAttr(el, objName, objValue);
        }
      } else {
        setAttr(el, name, value);
      }
    });
  }
  return arguments.length > 1 ? this : getAttr(this[0], name, this.options.xmlMode);
}
function getProp(el, name, xmlMode) {
  return name in el ? (
    // @ts-expect-error TS doesn't like us accessing the value directly here.
    el[name]
  ) : !xmlMode && rboolean.test(name) ? getAttr(el, name, false) !== void 0 : getAttr(el, name, xmlMode);
}
function setProp(el, name, value, xmlMode) {
  if (name in el) {
    el[name] = value;
  } else {
    setAttr(el, name, !xmlMode && rboolean.test(name) ? value ? "" : null : `${value}`);
  }
}
function prop(name, value) {
  var _a5;
  if (typeof name === "string" && value === void 0) {
    const el = this[0];
    if (!el)
      return void 0;
    switch (name) {
      case "style": {
        const property = this.css();
        const keys = Object.keys(property);
        for (let i = 0; i < keys.length; i++) {
          property[i] = keys[i];
        }
        property.length = keys.length;
        return property;
      }
      case "tagName":
      case "nodeName": {
        if (!isTag2(el))
          return void 0;
        return el.name.toUpperCase();
      }
      case "href":
      case "src": {
        if (!isTag2(el))
          return void 0;
        const prop2 = (_a5 = el.attribs) === null || _a5 === void 0 ? void 0 : _a5[name];
        if (typeof URL !== "undefined" && (name === "href" && (el.tagName === "a" || el.tagName === "link") || name === "src" && (el.tagName === "img" || el.tagName === "iframe" || el.tagName === "audio" || el.tagName === "video" || el.tagName === "source")) && prop2 !== void 0 && this.options.baseURI) {
          return new URL(prop2, this.options.baseURI).href;
        }
        return prop2;
      }
      case "innerText": {
        return innerText(el);
      }
      case "textContent": {
        return textContent(el);
      }
      case "outerHTML": {
        if (el.type === esm_exports.Root)
          return this.html();
        return this.clone().wrap("<container />").parent().html();
      }
      case "innerHTML": {
        return this.html();
      }
      default: {
        if (!isTag2(el))
          return void 0;
        return getProp(el, name, this.options.xmlMode);
      }
    }
  }
  if (typeof name === "object" || value !== void 0) {
    if (typeof value === "function") {
      if (typeof name === "object") {
        throw new TypeError("Bad combination of arguments.");
      }
      return domEach(this, (el, i) => {
        if (isTag2(el)) {
          setProp(el, name, value.call(el, i, getProp(el, name, this.options.xmlMode)), this.options.xmlMode);
        }
      });
    }
    return domEach(this, (el) => {
      if (!isTag2(el))
        return;
      if (typeof name === "object") {
        for (const key of Object.keys(name)) {
          const val2 = name[key];
          setProp(el, key, val2, this.options.xmlMode);
        }
      } else {
        setProp(el, name, value, this.options.xmlMode);
      }
    });
  }
  return void 0;
}
function setData(elem, name, value) {
  var _a5;
  (_a5 = elem.data) !== null && _a5 !== void 0 ? _a5 : elem.data = {};
  if (typeof name === "object")
    Object.assign(elem.data, name);
  else if (typeof name === "string" && value !== void 0) {
    elem.data[name] = value;
  }
}
function readAllData(el) {
  for (const domName of Object.keys(el.attribs)) {
    if (!domName.startsWith(dataAttrPrefix)) {
      continue;
    }
    const jsName = camelCase(domName.slice(dataAttrPrefix.length));
    if (!hasOwn(el.data, jsName)) {
      el.data[jsName] = parseDataValue(el.attribs[domName]);
    }
  }
  return el.data;
}
function readData(el, name) {
  const domName = dataAttrPrefix + cssCase(name);
  const data2 = el.data;
  if (hasOwn(data2, name)) {
    return data2[name];
  }
  if (hasOwn(el.attribs, domName)) {
    return data2[name] = parseDataValue(el.attribs[domName]);
  }
  return void 0;
}
function parseDataValue(value) {
  if (value === "null")
    return null;
  if (value === "true")
    return true;
  if (value === "false")
    return false;
  const num = Number(value);
  if (value === String(num))
    return num;
  if (rbrace.test(value)) {
    try {
      return JSON.parse(value);
    } catch {
    }
  }
  return value;
}
function data(name, value) {
  var _a5;
  const elem = this[0];
  if (!elem || !isTag2(elem))
    return;
  const dataEl = elem;
  (_a5 = dataEl.data) !== null && _a5 !== void 0 ? _a5 : dataEl.data = {};
  if (name == null) {
    return readAllData(dataEl);
  }
  if (typeof name === "object" || value !== void 0) {
    domEach(this, (el) => {
      if (isTag2(el)) {
        if (typeof name === "object")
          setData(el, name);
        else
          setData(el, name, value);
      }
    });
    return this;
  }
  return readData(dataEl, name);
}
function val(value) {
  const querying = arguments.length === 0;
  const element = this[0];
  if (!element || !isTag2(element))
    return querying ? void 0 : this;
  switch (element.name) {
    case "textarea": {
      return this.text(value);
    }
    case "select": {
      const option = this.find("option:selected");
      if (!querying) {
        if (this.attr("multiple") == null && typeof value === "object") {
          return this;
        }
        this.find("option").removeAttr("selected");
        const values = typeof value === "object" ? value : [value];
        for (const val2 of values) {
          this.find(`option[value="${val2}"]`).attr("selected", "");
        }
        return this;
      }
      return this.attr("multiple") ? option.toArray().map((el) => text(el.children)) : option.attr("value");
    }
    case "input":
    case "option": {
      return querying ? this.attr("value") : this.attr("value", value);
    }
  }
  return void 0;
}
function removeAttribute(elem, name) {
  if (!elem.attribs || !hasOwn(elem.attribs, name))
    return;
  delete elem.attribs[name];
}
function splitNames(names) {
  return names ? names.trim().split(rspace) : [];
}
function removeAttr(name) {
  const attrNames = splitNames(name);
  for (const attrName of attrNames) {
    domEach(this, (elem) => {
      if (isTag2(elem))
        removeAttribute(elem, attrName);
    });
  }
  return this;
}
function hasClass(className) {
  return this.toArray().some((elem) => {
    const clazz = isTag2(elem) && elem.attribs["class"];
    let idx = -1;
    if (clazz && className.length > 0) {
      while ((idx = clazz.indexOf(className, idx + 1)) > -1) {
        const end2 = idx + className.length;
        if ((idx === 0 || rspace.test(clazz[idx - 1])) && (end2 === clazz.length || rspace.test(clazz[end2]))) {
          return true;
        }
      }
    }
    return false;
  });
}
function addClass(value) {
  if (typeof value === "function") {
    return domEach(this, (el, i) => {
      if (isTag2(el)) {
        const className = el.attribs["class"] || "";
        addClass.call([el], value.call(el, i, className));
      }
    });
  }
  if (!value || typeof value !== "string")
    return this;
  const classNames = value.split(rspace);
  const numElements = this.length;
  for (let i = 0; i < numElements; i++) {
    const el = this[i];
    if (!isTag2(el))
      continue;
    const className = getAttr(el, "class", false);
    if (className) {
      let setClass = ` ${className} `;
      for (const cn of classNames) {
        const appendClass = `${cn} `;
        if (!setClass.includes(` ${appendClass}`))
          setClass += appendClass;
      }
      setAttr(el, "class", setClass.trim());
    } else {
      setAttr(el, "class", classNames.join(" ").trim());
    }
  }
  return this;
}
function removeClass(name) {
  if (typeof name === "function") {
    return domEach(this, (el, i) => {
      if (isTag2(el)) {
        removeClass.call([el], name.call(el, i, el.attribs["class"] || ""));
      }
    });
  }
  const classes = splitNames(name);
  const numClasses = classes.length;
  const removeAll = arguments.length === 0;
  return domEach(this, (el) => {
    if (!isTag2(el))
      return;
    if (removeAll) {
      el.attribs["class"] = "";
    } else {
      const elClasses = splitNames(el.attribs["class"]);
      let changed = false;
      for (let j2 = 0; j2 < numClasses; j2++) {
        const index2 = elClasses.indexOf(classes[j2]);
        if (index2 !== -1) {
          elClasses.splice(index2, 1);
          changed = true;
          j2--;
        }
      }
      if (changed) {
        el.attribs["class"] = elClasses.join(" ");
      }
    }
  });
}
function toggleClass(value, stateVal) {
  if (typeof value === "function") {
    return domEach(this, (el, i) => {
      if (isTag2(el)) {
        toggleClass.call([el], value.call(el, i, el.attribs["class"] || "", stateVal), stateVal);
      }
    });
  }
  if (!value || typeof value !== "string")
    return this;
  const classNames = value.split(rspace);
  const numClasses = classNames.length;
  const state = typeof stateVal === "boolean" ? stateVal ? 1 : -1 : 0;
  const numElements = this.length;
  for (let i = 0; i < numElements; i++) {
    const el = this[i];
    if (!isTag2(el))
      continue;
    const elementClasses = splitNames(el.attribs["class"]);
    for (let j2 = 0; j2 < numClasses; j2++) {
      const index2 = elementClasses.indexOf(classNames[j2]);
      if (state >= 0 && index2 === -1) {
        elementClasses.push(classNames[j2]);
      } else if (state <= 0 && index2 !== -1) {
        elementClasses.splice(index2, 1);
      }
    }
    el.attribs["class"] = elementClasses.join(" ");
  }
  return this;
}

// node_modules/cheerio/dist/browser/api/traversing.js
var traversing_exports = {};
__export(traversing_exports, {
  _findBySelector: () => _findBySelector,
  add: () => add,
  addBack: () => addBack,
  children: () => children,
  closest: () => closest,
  contents: () => contents,
  each: () => each,
  end: () => end,
  eq: () => eq,
  filter: () => filter4,
  filterArray: () => filterArray,
  find: () => find3,
  first: () => first,
  get: () => get,
  has: () => has,
  index: () => index,
  is: () => is3,
  last: () => last,
  map: () => map,
  next: () => next,
  nextAll: () => nextAll,
  nextUntil: () => nextUntil,
  not: () => not,
  parent: () => parent,
  parents: () => parents,
  parentsUntil: () => parentsUntil,
  prev: () => prev,
  prevAll: () => prevAll,
  prevUntil: () => prevUntil,
  siblings: () => siblings,
  slice: () => slice,
  toArray: () => toArray2
});

// node_modules/css-what/lib/es/types.js
var SelectorType;
(function(SelectorType2) {
  SelectorType2["Attribute"] = "attribute";
  SelectorType2["Pseudo"] = "pseudo";
  SelectorType2["PseudoElement"] = "pseudo-element";
  SelectorType2["Tag"] = "tag";
  SelectorType2["Universal"] = "universal";
  SelectorType2["Adjacent"] = "adjacent";
  SelectorType2["Child"] = "child";
  SelectorType2["Descendant"] = "descendant";
  SelectorType2["Parent"] = "parent";
  SelectorType2["Sibling"] = "sibling";
  SelectorType2["ColumnCombinator"] = "column-combinator";
})(SelectorType || (SelectorType = {}));
var AttributeAction;
(function(AttributeAction2) {
  AttributeAction2["Any"] = "any";
  AttributeAction2["Element"] = "element";
  AttributeAction2["End"] = "end";
  AttributeAction2["Equals"] = "equals";
  AttributeAction2["Exists"] = "exists";
  AttributeAction2["Hyphen"] = "hyphen";
  AttributeAction2["Not"] = "not";
  AttributeAction2["Start"] = "start";
})(AttributeAction || (AttributeAction = {}));

// node_modules/css-what/lib/es/parse.js
var reName = /^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/;
var reEscape = /\\([\da-f]{1,6}\s?|(\s)|.)/gi;
var actionTypes = /* @__PURE__ */ new Map([
  [126, AttributeAction.Element],
  [94, AttributeAction.Start],
  [36, AttributeAction.End],
  [42, AttributeAction.Any],
  [33, AttributeAction.Not],
  [124, AttributeAction.Hyphen]
]);
var unpackPseudos = /* @__PURE__ */ new Set([
  "has",
  "not",
  "matches",
  "is",
  "where",
  "host",
  "host-context"
]);
function isTraversal(selector) {
  switch (selector.type) {
    case SelectorType.Adjacent:
    case SelectorType.Child:
    case SelectorType.Descendant:
    case SelectorType.Parent:
    case SelectorType.Sibling:
    case SelectorType.ColumnCombinator:
      return true;
    default:
      return false;
  }
}
var stripQuotesFromPseudos = /* @__PURE__ */ new Set(["contains", "icontains"]);
function funescape(_2, escaped, escapedWhitespace) {
  const high = parseInt(escaped, 16) - 65536;
  return high !== high || escapedWhitespace ? escaped : high < 0 ? (
    // BMP codepoint
    String.fromCharCode(high + 65536)
  ) : (
    // Supplemental Plane codepoint (surrogate pair)
    String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
  );
}
function unescapeCSS(str) {
  return str.replace(reEscape, funescape);
}
function isQuote(c) {
  return c === 39 || c === 34;
}
function isWhitespace2(c) {
  return c === 32 || c === 9 || c === 10 || c === 12 || c === 13;
}
function parse(selector) {
  const subselects2 = [];
  const endIndex = parseSelector(subselects2, `${selector}`, 0);
  if (endIndex < selector.length) {
    throw new Error(`Unmatched selector: ${selector.slice(endIndex)}`);
  }
  return subselects2;
}
function parseSelector(subselects2, selector, selectorIndex) {
  let tokens = [];
  function getName2(offset) {
    const match = selector.slice(selectorIndex + offset).match(reName);
    if (!match) {
      throw new Error(`Expected name, found ${selector.slice(selectorIndex)}`);
    }
    const [name] = match;
    selectorIndex += offset + name.length;
    return unescapeCSS(name);
  }
  function stripWhitespace(offset) {
    selectorIndex += offset;
    while (selectorIndex < selector.length && isWhitespace2(selector.charCodeAt(selectorIndex))) {
      selectorIndex++;
    }
  }
  function readValueWithParenthesis() {
    selectorIndex += 1;
    const start = selectorIndex;
    let counter = 1;
    for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {
      if (selector.charCodeAt(selectorIndex) === 40 && !isEscaped(selectorIndex)) {
        counter++;
      } else if (selector.charCodeAt(selectorIndex) === 41 && !isEscaped(selectorIndex)) {
        counter--;
      }
    }
    if (counter) {
      throw new Error("Parenthesis not matched");
    }
    return unescapeCSS(selector.slice(start, selectorIndex - 1));
  }
  function isEscaped(pos) {
    let slashCount = 0;
    while (selector.charCodeAt(--pos) === 92)
      slashCount++;
    return (slashCount & 1) === 1;
  }
  function ensureNotTraversal() {
    if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {
      throw new Error("Did not expect successive traversals.");
    }
  }
  function addTraversal(type) {
    if (tokens.length > 0 && tokens[tokens.length - 1].type === SelectorType.Descendant) {
      tokens[tokens.length - 1].type = type;
      return;
    }
    ensureNotTraversal();
    tokens.push({ type });
  }
  function addSpecialAttribute(name, action) {
    tokens.push({
      type: SelectorType.Attribute,
      name,
      action,
      value: getName2(1),
      namespace: null,
      ignoreCase: "quirks"
    });
  }
  function finalizeSubselector() {
    if (tokens.length && tokens[tokens.length - 1].type === SelectorType.Descendant) {
      tokens.pop();
    }
    if (tokens.length === 0) {
      throw new Error("Empty sub-selector");
    }
    subselects2.push(tokens);
  }
  stripWhitespace(0);
  if (selector.length === selectorIndex) {
    return selectorIndex;
  }
  loop: while (selectorIndex < selector.length) {
    const firstChar = selector.charCodeAt(selectorIndex);
    switch (firstChar) {
      case 32:
      case 9:
      case 10:
      case 12:
      case 13: {
        if (tokens.length === 0 || tokens[0].type !== SelectorType.Descendant) {
          ensureNotTraversal();
          tokens.push({ type: SelectorType.Descendant });
        }
        stripWhitespace(1);
        break;
      }
      case 62: {
        addTraversal(SelectorType.Child);
        stripWhitespace(1);
        break;
      }
      case 60: {
        addTraversal(SelectorType.Parent);
        stripWhitespace(1);
        break;
      }
      case 126: {
        addTraversal(SelectorType.Sibling);
        stripWhitespace(1);
        break;
      }
      case 43: {
        addTraversal(SelectorType.Adjacent);
        stripWhitespace(1);
        break;
      }
      case 46: {
        addSpecialAttribute("class", AttributeAction.Element);
        break;
      }
      case 35: {
        addSpecialAttribute("id", AttributeAction.Equals);
        break;
      }
      case 91: {
        stripWhitespace(1);
        let name;
        let namespace = null;
        if (selector.charCodeAt(selectorIndex) === 124) {
          name = getName2(1);
        } else if (selector.startsWith("*|", selectorIndex)) {
          namespace = "*";
          name = getName2(2);
        } else {
          name = getName2(0);
          if (selector.charCodeAt(selectorIndex) === 124 && selector.charCodeAt(selectorIndex + 1) !== 61) {
            namespace = name;
            name = getName2(1);
          }
        }
        stripWhitespace(0);
        let action = AttributeAction.Exists;
        const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));
        if (possibleAction) {
          action = possibleAction;
          if (selector.charCodeAt(selectorIndex + 1) !== 61) {
            throw new Error("Expected `=`");
          }
          stripWhitespace(2);
        } else if (selector.charCodeAt(selectorIndex) === 61) {
          action = AttributeAction.Equals;
          stripWhitespace(1);
        }
        let value = "";
        let ignoreCase = null;
        if (action !== "exists") {
          if (isQuote(selector.charCodeAt(selectorIndex))) {
            const quote = selector.charCodeAt(selectorIndex);
            let sectionEnd = selectorIndex + 1;
            while (sectionEnd < selector.length && (selector.charCodeAt(sectionEnd) !== quote || isEscaped(sectionEnd))) {
              sectionEnd += 1;
            }
            if (selector.charCodeAt(sectionEnd) !== quote) {
              throw new Error("Attribute value didn't end");
            }
            value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));
            selectorIndex = sectionEnd + 1;
          } else {
            const valueStart = selectorIndex;
            while (selectorIndex < selector.length && (!isWhitespace2(selector.charCodeAt(selectorIndex)) && selector.charCodeAt(selectorIndex) !== 93 || isEscaped(selectorIndex))) {
              selectorIndex += 1;
            }
            value = unescapeCSS(selector.slice(valueStart, selectorIndex));
          }
          stripWhitespace(0);
          const forceIgnore = selector.charCodeAt(selectorIndex) | 32;
          if (forceIgnore === 115) {
            ignoreCase = false;
            stripWhitespace(1);
          } else if (forceIgnore === 105) {
            ignoreCase = true;
            stripWhitespace(1);
          }
        }
        if (selector.charCodeAt(selectorIndex) !== 93) {
          throw new Error("Attribute selector didn't terminate");
        }
        selectorIndex += 1;
        const attributeSelector = {
          type: SelectorType.Attribute,
          name,
          action,
          value,
          namespace,
          ignoreCase
        };
        tokens.push(attributeSelector);
        break;
      }
      case 58: {
        if (selector.charCodeAt(selectorIndex + 1) === 58) {
          tokens.push({
            type: SelectorType.PseudoElement,
            name: getName2(2).toLowerCase(),
            data: selector.charCodeAt(selectorIndex) === 40 ? readValueWithParenthesis() : null
          });
          continue;
        }
        const name = getName2(1).toLowerCase();
        let data2 = null;
        if (selector.charCodeAt(selectorIndex) === 40) {
          if (unpackPseudos.has(name)) {
            if (isQuote(selector.charCodeAt(selectorIndex + 1))) {
              throw new Error(`Pseudo-selector ${name} cannot be quoted`);
            }
            data2 = [];
            selectorIndex = parseSelector(data2, selector, selectorIndex + 1);
            if (selector.charCodeAt(selectorIndex) !== 41) {
              throw new Error(`Missing closing parenthesis in :${name} (${selector})`);
            }
            selectorIndex += 1;
          } else {
            data2 = readValueWithParenthesis();
            if (stripQuotesFromPseudos.has(name)) {
              const quot = data2.charCodeAt(0);
              if (quot === data2.charCodeAt(data2.length - 1) && isQuote(quot)) {
                data2 = data2.slice(1, -1);
              }
            }
            data2 = unescapeCSS(data2);
          }
        }
        tokens.push({ type: SelectorType.Pseudo, name, data: data2 });
        break;
      }
      case 44: {
        finalizeSubselector();
        tokens = [];
        stripWhitespace(1);
        break;
      }
      default: {
        if (selector.startsWith("/*", selectorIndex)) {
          const endIndex = selector.indexOf("*/", selectorIndex + 2);
          if (endIndex < 0) {
            throw new Error("Comment was not terminated");
          }
          selectorIndex = endIndex + 2;
          if (tokens.length === 0) {
            stripWhitespace(0);
          }
          break;
        }
        let namespace = null;
        let name;
        if (firstChar === 42) {
          selectorIndex += 1;
          name = "*";
        } else if (firstChar === 124) {
          name = "";
          if (selector.charCodeAt(selectorIndex + 1) === 124) {
            addTraversal(SelectorType.ColumnCombinator);
            stripWhitespace(2);
            break;
          }
        } else if (reName.test(selector.slice(selectorIndex))) {
          name = getName2(0);
        } else {
          break loop;
        }
        if (selector.charCodeAt(selectorIndex) === 124 && selector.charCodeAt(selectorIndex + 1) !== 124) {
          namespace = name;
          if (selector.charCodeAt(selectorIndex + 1) === 42) {
            name = "*";
            selectorIndex += 2;
          } else {
            name = getName2(1);
          }
        }
        tokens.push(name === "*" ? { type: SelectorType.Universal, namespace } : { type: SelectorType.Tag, name, namespace });
      }
    }
  }
  finalizeSubselector();
  return selectorIndex;
}

// node_modules/css-select/lib/esm/index.js
var import_boolbase6 = __toESM(require_boolbase(), 1);

// node_modules/css-select/lib/esm/compile.js
var import_boolbase5 = __toESM(require_boolbase(), 1);

// node_modules/css-select/lib/esm/sort.js
var procedure = /* @__PURE__ */ new Map([
  [SelectorType.Universal, 50],
  [SelectorType.Tag, 30],
  [SelectorType.Attribute, 1],
  [SelectorType.Pseudo, 0]
]);
function isTraversal2(token) {
  return !procedure.has(token.type);
}
var attributes = /* @__PURE__ */ new Map([
  [AttributeAction.Exists, 10],
  [AttributeAction.Equals, 8],
  [AttributeAction.Not, 7],
  [AttributeAction.Start, 6],
  [AttributeAction.End, 6],
  [AttributeAction.Any, 5]
]);
function sortByProcedure(arr) {
  const procs = arr.map(getProcedure);
  for (let i = 1; i < arr.length; i++) {
    const procNew = procs[i];
    if (procNew < 0)
      continue;
    for (let j2 = i - 1; j2 >= 0 && procNew < procs[j2]; j2--) {
      const token = arr[j2 + 1];
      arr[j2 + 1] = arr[j2];
      arr[j2] = token;
      procs[j2 + 1] = procs[j2];
      procs[j2] = procNew;
    }
  }
}
function getProcedure(token) {
  var _a5, _b;
  let proc = (_a5 = procedure.get(token.type)) !== null && _a5 !== void 0 ? _a5 : -1;
  if (token.type === SelectorType.Attribute) {
    proc = (_b = attributes.get(token.action)) !== null && _b !== void 0 ? _b : 4;
    if (token.action === AttributeAction.Equals && token.name === "id") {
      proc = 9;
    }
    if (token.ignoreCase) {
      proc >>= 1;
    }
  } else if (token.type === SelectorType.Pseudo) {
    if (!token.data) {
      proc = 3;
    } else if (token.name === "has" || token.name === "contains") {
      proc = 0;
    } else if (Array.isArray(token.data)) {
      proc = Math.min(...token.data.map((d) => Math.min(...d.map(getProcedure))));
      if (proc < 0) {
        proc = 0;
      }
    } else {
      proc = 2;
    }
  }
  return proc;
}

// node_modules/css-select/lib/esm/attributes.js
var import_boolbase = __toESM(require_boolbase(), 1);
var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;
function escapeRegex(value) {
  return value.replace(reChars, "\\$&");
}
var caseInsensitiveAttributes = /* @__PURE__ */ new Set([
  "accept",
  "accept-charset",
  "align",
  "alink",
  "axis",
  "bgcolor",
  "charset",
  "checked",
  "clear",
  "codetype",
  "color",
  "compact",
  "declare",
  "defer",
  "dir",
  "direction",
  "disabled",
  "enctype",
  "face",
  "frame",
  "hreflang",
  "http-equiv",
  "lang",
  "language",
  "link",
  "media",
  "method",
  "multiple",
  "nohref",
  "noresize",
  "noshade",
  "nowrap",
  "readonly",
  "rel",
  "rev",
  "rules",
  "scope",
  "scrolling",
  "selected",
  "shape",
  "target",
  "text",
  "type",
  "valign",
  "valuetype",
  "vlink"
]);
function shouldIgnoreCase(selector, options) {
  return typeof selector.ignoreCase === "boolean" ? selector.ignoreCase : selector.ignoreCase === "quirks" ? !!options.quirksMode : !options.xmlMode && caseInsensitiveAttributes.has(selector.name);
}
var attributeRules = {
  equals(next2, data2, options) {
    const { adapter: adapter3 } = options;
    const { name } = data2;
    let { value } = data2;
    if (shouldIgnoreCase(data2, options)) {
      value = value.toLowerCase();
      return (elem) => {
        const attr2 = adapter3.getAttributeValue(elem, name);
        return attr2 != null && attr2.length === value.length && attr2.toLowerCase() === value && next2(elem);
      };
    }
    return (elem) => adapter3.getAttributeValue(elem, name) === value && next2(elem);
  },
  hyphen(next2, data2, options) {
    const { adapter: adapter3 } = options;
    const { name } = data2;
    let { value } = data2;
    const len = value.length;
    if (shouldIgnoreCase(data2, options)) {
      value = value.toLowerCase();
      return function hyphenIC(elem) {
        const attr2 = adapter3.getAttributeValue(elem, name);
        return attr2 != null && (attr2.length === len || attr2.charAt(len) === "-") && attr2.substr(0, len).toLowerCase() === value && next2(elem);
      };
    }
    return function hyphen(elem) {
      const attr2 = adapter3.getAttributeValue(elem, name);
      return attr2 != null && (attr2.length === len || attr2.charAt(len) === "-") && attr2.substr(0, len) === value && next2(elem);
    };
  },
  element(next2, data2, options) {
    const { adapter: adapter3 } = options;
    const { name, value } = data2;
    if (/\s/.test(value)) {
      return import_boolbase.default.falseFunc;
    }
    const regex = new RegExp(`(?:^|\\s)${escapeRegex(value)}(?:$|\\s)`, shouldIgnoreCase(data2, options) ? "i" : "");
    return function element(elem) {
      const attr2 = adapter3.getAttributeValue(elem, name);
      return attr2 != null && attr2.length >= value.length && regex.test(attr2) && next2(elem);
    };
  },
  exists(next2, { name }, { adapter: adapter3 }) {
    return (elem) => adapter3.hasAttrib(elem, name) && next2(elem);
  },
  start(next2, data2, options) {
    const { adapter: adapter3 } = options;
    const { name } = data2;
    let { value } = data2;
    const len = value.length;
    if (len === 0) {
      return import_boolbase.default.falseFunc;
    }
    if (shouldIgnoreCase(data2, options)) {
      value = value.toLowerCase();
      return (elem) => {
        const attr2 = adapter3.getAttributeValue(elem, name);
        return attr2 != null && attr2.length >= len && attr2.substr(0, len).toLowerCase() === value && next2(elem);
      };
    }
    return (elem) => {
      var _a5;
      return !!((_a5 = adapter3.getAttributeValue(elem, name)) === null || _a5 === void 0 ? void 0 : _a5.startsWith(value)) && next2(elem);
    };
  },
  end(next2, data2, options) {
    const { adapter: adapter3 } = options;
    const { name } = data2;
    let { value } = data2;
    const len = -value.length;
    if (len === 0) {
      return import_boolbase.default.falseFunc;
    }
    if (shouldIgnoreCase(data2, options)) {
      value = value.toLowerCase();
      return (elem) => {
        var _a5;
        return ((_a5 = adapter3.getAttributeValue(elem, name)) === null || _a5 === void 0 ? void 0 : _a5.substr(len).toLowerCase()) === value && next2(elem);
      };
    }
    return (elem) => {
      var _a5;
      return !!((_a5 = adapter3.getAttributeValue(elem, name)) === null || _a5 === void 0 ? void 0 : _a5.endsWith(value)) && next2(elem);
    };
  },
  any(next2, data2, options) {
    const { adapter: adapter3 } = options;
    const { name, value } = data2;
    if (value === "") {
      return import_boolbase.default.falseFunc;
    }
    if (shouldIgnoreCase(data2, options)) {
      const regex = new RegExp(escapeRegex(value), "i");
      return function anyIC(elem) {
        const attr2 = adapter3.getAttributeValue(elem, name);
        return attr2 != null && attr2.length >= value.length && regex.test(attr2) && next2(elem);
      };
    }
    return (elem) => {
      var _a5;
      return !!((_a5 = adapter3.getAttributeValue(elem, name)) === null || _a5 === void 0 ? void 0 : _a5.includes(value)) && next2(elem);
    };
  },
  not(next2, data2, options) {
    const { adapter: adapter3 } = options;
    const { name } = data2;
    let { value } = data2;
    if (value === "") {
      return (elem) => !!adapter3.getAttributeValue(elem, name) && next2(elem);
    } else if (shouldIgnoreCase(data2, options)) {
      value = value.toLowerCase();
      return (elem) => {
        const attr2 = adapter3.getAttributeValue(elem, name);
        return (attr2 == null || attr2.length !== value.length || attr2.toLowerCase() !== value) && next2(elem);
      };
    }
    return (elem) => adapter3.getAttributeValue(elem, name) !== value && next2(elem);
  }
};

// node_modules/nth-check/lib/esm/parse.js
var whitespace = /* @__PURE__ */ new Set([9, 10, 12, 13, 32]);
var ZERO = "0".charCodeAt(0);
var NINE = "9".charCodeAt(0);
function parse2(formula) {
  formula = formula.trim().toLowerCase();
  if (formula === "even") {
    return [2, 0];
  } else if (formula === "odd") {
    return [2, 1];
  }
  let idx = 0;
  let a = 0;
  let sign = readSign();
  let number = readNumber();
  if (idx < formula.length && formula.charAt(idx) === "n") {
    idx++;
    a = sign * (number !== null && number !== void 0 ? number : 1);
    skipWhitespace();
    if (idx < formula.length) {
      sign = readSign();
      skipWhitespace();
      number = readNumber();
    } else {
      sign = number = 0;
    }
  }
  if (number === null || idx < formula.length) {
    throw new Error(`n-th rule couldn't be parsed ('${formula}')`);
  }
  return [a, sign * number];
  function readSign() {
    if (formula.charAt(idx) === "-") {
      idx++;
      return -1;
    }
    if (formula.charAt(idx) === "+") {
      idx++;
    }
    return 1;
  }
  function readNumber() {
    const start = idx;
    let value = 0;
    while (idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE) {
      value = value * 10 + (formula.charCodeAt(idx) - ZERO);
      idx++;
    }
    return idx === start ? null : value;
  }
  function skipWhitespace() {
    while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {
      idx++;
    }
  }
}

// node_modules/nth-check/lib/esm/compile.js
var import_boolbase2 = __toESM(require_boolbase(), 1);
function compile(parsed) {
  const a = parsed[0];
  const b2 = parsed[1] - 1;
  if (b2 < 0 && a <= 0)
    return import_boolbase2.default.falseFunc;
  if (a === -1)
    return (index2) => index2 <= b2;
  if (a === 0)
    return (index2) => index2 === b2;
  if (a === 1)
    return b2 < 0 ? import_boolbase2.default.trueFunc : (index2) => index2 >= b2;
  const absA = Math.abs(a);
  const bMod = (b2 % absA + absA) % absA;
  return a > 1 ? (index2) => index2 >= b2 && index2 % absA === bMod : (index2) => index2 <= b2 && index2 % absA === bMod;
}

// node_modules/nth-check/lib/esm/index.js
function nthCheck(formula) {
  return compile(parse2(formula));
}

// node_modules/css-select/lib/esm/pseudo-selectors/filters.js
var import_boolbase3 = __toESM(require_boolbase(), 1);
function getChildFunc(next2, adapter3) {
  return (elem) => {
    const parent2 = adapter3.getParent(elem);
    return parent2 != null && adapter3.isTag(parent2) && next2(elem);
  };
}
var filters = {
  contains(next2, text3, { adapter: adapter3 }) {
    return function contains2(elem) {
      return next2(elem) && adapter3.getText(elem).includes(text3);
    };
  },
  icontains(next2, text3, { adapter: adapter3 }) {
    const itext = text3.toLowerCase();
    return function icontains(elem) {
      return next2(elem) && adapter3.getText(elem).toLowerCase().includes(itext);
    };
  },
  // Location specific methods
  "nth-child"(next2, rule, { adapter: adapter3, equals }) {
    const func = nthCheck(rule);
    if (func === import_boolbase3.default.falseFunc)
      return import_boolbase3.default.falseFunc;
    if (func === import_boolbase3.default.trueFunc)
      return getChildFunc(next2, adapter3);
    return function nthChild(elem) {
      const siblings2 = adapter3.getSiblings(elem);
      let pos = 0;
      for (let i = 0; i < siblings2.length; i++) {
        if (equals(elem, siblings2[i]))
          break;
        if (adapter3.isTag(siblings2[i])) {
          pos++;
        }
      }
      return func(pos) && next2(elem);
    };
  },
  "nth-last-child"(next2, rule, { adapter: adapter3, equals }) {
    const func = nthCheck(rule);
    if (func === import_boolbase3.default.falseFunc)
      return import_boolbase3.default.falseFunc;
    if (func === import_boolbase3.default.trueFunc)
      return getChildFunc(next2, adapter3);
    return function nthLastChild(elem) {
      const siblings2 = adapter3.getSiblings(elem);
      let pos = 0;
      for (let i = siblings2.length - 1; i >= 0; i--) {
        if (equals(elem, siblings2[i]))
          break;
        if (adapter3.isTag(siblings2[i])) {
          pos++;
        }
      }
      return func(pos) && next2(elem);
    };
  },
  "nth-of-type"(next2, rule, { adapter: adapter3, equals }) {
    const func = nthCheck(rule);
    if (func === import_boolbase3.default.falseFunc)
      return import_boolbase3.default.falseFunc;
    if (func === import_boolbase3.default.trueFunc)
      return getChildFunc(next2, adapter3);
    return function nthOfType(elem) {
      const siblings2 = adapter3.getSiblings(elem);
      let pos = 0;
      for (let i = 0; i < siblings2.length; i++) {
        const currentSibling = siblings2[i];
        if (equals(elem, currentSibling))
          break;
        if (adapter3.isTag(currentSibling) && adapter3.getName(currentSibling) === adapter3.getName(elem)) {
          pos++;
        }
      }
      return func(pos) && next2(elem);
    };
  },
  "nth-last-of-type"(next2, rule, { adapter: adapter3, equals }) {
    const func = nthCheck(rule);
    if (func === import_boolbase3.default.falseFunc)
      return import_boolbase3.default.falseFunc;
    if (func === import_boolbase3.default.trueFunc)
      return getChildFunc(next2, adapter3);
    return function nthLastOfType(elem) {
      const siblings2 = adapter3.getSiblings(elem);
      let pos = 0;
      for (let i = siblings2.length - 1; i >= 0; i--) {
        const currentSibling = siblings2[i];
        if (equals(elem, currentSibling))
          break;
        if (adapter3.isTag(currentSibling) && adapter3.getName(currentSibling) === adapter3.getName(elem)) {
          pos++;
        }
      }
      return func(pos) && next2(elem);
    };
  },
  // TODO determine the actual root element
  root(next2, _rule, { adapter: adapter3 }) {
    return (elem) => {
      const parent2 = adapter3.getParent(elem);
      return (parent2 == null || !adapter3.isTag(parent2)) && next2(elem);
    };
  },
  scope(next2, rule, options, context) {
    const { equals } = options;
    if (!context || context.length === 0) {
      return filters["root"](next2, rule, options);
    }
    if (context.length === 1) {
      return (elem) => equals(context[0], elem) && next2(elem);
    }
    return (elem) => context.includes(elem) && next2(elem);
  },
  hover: dynamicStatePseudo("isHovered"),
  visited: dynamicStatePseudo("isVisited"),
  active: dynamicStatePseudo("isActive")
};
function dynamicStatePseudo(name) {
  return function dynamicPseudo(next2, _rule, { adapter: adapter3 }) {
    const func = adapter3[name];
    if (typeof func !== "function") {
      return import_boolbase3.default.falseFunc;
    }
    return function active(elem) {
      return func(elem) && next2(elem);
    };
  };
}

// node_modules/css-select/lib/esm/pseudo-selectors/pseudos.js
var pseudos = {
  empty(elem, { adapter: adapter3 }) {
    return !adapter3.getChildren(elem).some((elem2) => (
      // FIXME: `getText` call is potentially expensive.
      adapter3.isTag(elem2) || adapter3.getText(elem2) !== ""
    ));
  },
  "first-child"(elem, { adapter: adapter3, equals }) {
    if (adapter3.prevElementSibling) {
      return adapter3.prevElementSibling(elem) == null;
    }
    const firstChild = adapter3.getSiblings(elem).find((elem2) => adapter3.isTag(elem2));
    return firstChild != null && equals(elem, firstChild);
  },
  "last-child"(elem, { adapter: adapter3, equals }) {
    const siblings2 = adapter3.getSiblings(elem);
    for (let i = siblings2.length - 1; i >= 0; i--) {
      if (equals(elem, siblings2[i]))
        return true;
      if (adapter3.isTag(siblings2[i]))
        break;
    }
    return false;
  },
  "first-of-type"(elem, { adapter: adapter3, equals }) {
    const siblings2 = adapter3.getSiblings(elem);
    const elemName = adapter3.getName(elem);
    for (let i = 0; i < siblings2.length; i++) {
      const currentSibling = siblings2[i];
      if (equals(elem, currentSibling))
        return true;
      if (adapter3.isTag(currentSibling) && adapter3.getName(currentSibling) === elemName) {
        break;
      }
    }
    return false;
  },
  "last-of-type"(elem, { adapter: adapter3, equals }) {
    const siblings2 = adapter3.getSiblings(elem);
    const elemName = adapter3.getName(elem);
    for (let i = siblings2.length - 1; i >= 0; i--) {
      const currentSibling = siblings2[i];
      if (equals(elem, currentSibling))
        return true;
      if (adapter3.isTag(currentSibling) && adapter3.getName(currentSibling) === elemName) {
        break;
      }
    }
    return false;
  },
  "only-of-type"(elem, { adapter: adapter3, equals }) {
    const elemName = adapter3.getName(elem);
    return adapter3.getSiblings(elem).every((sibling) => equals(elem, sibling) || !adapter3.isTag(sibling) || adapter3.getName(sibling) !== elemName);
  },
  "only-child"(elem, { adapter: adapter3, equals }) {
    return adapter3.getSiblings(elem).every((sibling) => equals(elem, sibling) || !adapter3.isTag(sibling));
  }
};
function verifyPseudoArgs(func, name, subselect, argIndex) {
  if (subselect === null) {
    if (func.length > argIndex) {
      throw new Error(`Pseudo-class :${name} requires an argument`);
    }
  } else if (func.length === argIndex) {
    throw new Error(`Pseudo-class :${name} doesn't have any arguments`);
  }
}

// node_modules/css-select/lib/esm/pseudo-selectors/aliases.js
var aliases = {
  // Links
  "any-link": ":is(a, area, link)[href]",
  link: ":any-link:not(:visited)",
  // Forms
  // https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements
  disabled: `:is(
        :is(button, input, select, textarea, optgroup, option)[disabled],
        optgroup[disabled] > option,
        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)
    )`,
  enabled: ":not(:disabled)",
  checked: ":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",
  required: ":is(input, select, textarea)[required]",
  optional: ":is(input, select, textarea):not([required])",
  // JQuery extensions
  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-selectedness
  selected: "option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",
  checkbox: "[type=checkbox]",
  file: "[type=file]",
  password: "[type=password]",
  radio: "[type=radio]",
  reset: "[type=reset]",
  image: "[type=image]",
  submit: "[type=submit]",
  parent: ":not(:empty)",
  header: ":is(h1, h2, h3, h4, h5, h6)",
  button: ":is(button, input[type=button])",
  input: ":is(input, textarea, select, button)",
  text: "input:is(:not([type!='']), [type=text])"
};

// node_modules/css-select/lib/esm/pseudo-selectors/subselects.js
var import_boolbase4 = __toESM(require_boolbase(), 1);
var PLACEHOLDER_ELEMENT = {};
function ensureIsTag(next2, adapter3) {
  if (next2 === import_boolbase4.default.falseFunc)
    return import_boolbase4.default.falseFunc;
  return (elem) => adapter3.isTag(elem) && next2(elem);
}
function getNextSiblings(elem, adapter3) {
  const siblings2 = adapter3.getSiblings(elem);
  if (siblings2.length <= 1)
    return [];
  const elemIndex = siblings2.indexOf(elem);
  if (elemIndex < 0 || elemIndex === siblings2.length - 1)
    return [];
  return siblings2.slice(elemIndex + 1).filter(adapter3.isTag);
}
function copyOptions(options) {
  return {
    xmlMode: !!options.xmlMode,
    lowerCaseAttributeNames: !!options.lowerCaseAttributeNames,
    lowerCaseTags: !!options.lowerCaseTags,
    quirksMode: !!options.quirksMode,
    cacheResults: !!options.cacheResults,
    pseudos: options.pseudos,
    adapter: options.adapter,
    equals: options.equals
  };
}
var is = (next2, token, options, context, compileToken2) => {
  const func = compileToken2(token, copyOptions(options), context);
  return func === import_boolbase4.default.trueFunc ? next2 : func === import_boolbase4.default.falseFunc ? import_boolbase4.default.falseFunc : (elem) => func(elem) && next2(elem);
};
var subselects = {
  is,
  /**
   * `:matches` and `:where` are aliases for `:is`.
   */
  matches: is,
  where: is,
  not(next2, token, options, context, compileToken2) {
    const func = compileToken2(token, copyOptions(options), context);
    return func === import_boolbase4.default.falseFunc ? next2 : func === import_boolbase4.default.trueFunc ? import_boolbase4.default.falseFunc : (elem) => !func(elem) && next2(elem);
  },
  has(next2, subselect, options, _context, compileToken2) {
    const { adapter: adapter3 } = options;
    const opts = copyOptions(options);
    opts.relativeSelector = true;
    const context = subselect.some((s) => s.some(isTraversal2)) ? (
      // Used as a placeholder. Will be replaced with the actual element.
      [PLACEHOLDER_ELEMENT]
    ) : void 0;
    const compiled = compileToken2(subselect, opts, context);
    if (compiled === import_boolbase4.default.falseFunc)
      return import_boolbase4.default.falseFunc;
    const hasElement = ensureIsTag(compiled, adapter3);
    if (context && compiled !== import_boolbase4.default.trueFunc) {
      const { shouldTestNextSiblings = false } = compiled;
      return (elem) => {
        if (!next2(elem))
          return false;
        context[0] = elem;
        const childs = adapter3.getChildren(elem);
        const nextElements = shouldTestNextSiblings ? [...childs, ...getNextSiblings(elem, adapter3)] : childs;
        return adapter3.existsOne(hasElement, nextElements);
      };
    }
    return (elem) => next2(elem) && adapter3.existsOne(hasElement, adapter3.getChildren(elem));
  }
};

// node_modules/css-select/lib/esm/pseudo-selectors/index.js
function compilePseudoSelector(next2, selector, options, context, compileToken2) {
  var _a5;
  const { name, data: data2 } = selector;
  if (Array.isArray(data2)) {
    if (!(name in subselects)) {
      throw new Error(`Unknown pseudo-class :${name}(${data2})`);
    }
    return subselects[name](next2, data2, options, context, compileToken2);
  }
  const userPseudo = (_a5 = options.pseudos) === null || _a5 === void 0 ? void 0 : _a5[name];
  const stringPseudo = typeof userPseudo === "string" ? userPseudo : aliases[name];
  if (typeof stringPseudo === "string") {
    if (data2 != null) {
      throw new Error(`Pseudo ${name} doesn't have any arguments`);
    }
    const alias = parse(stringPseudo);
    return subselects["is"](next2, alias, options, context, compileToken2);
  }
  if (typeof userPseudo === "function") {
    verifyPseudoArgs(userPseudo, name, data2, 1);
    return (elem) => userPseudo(elem, data2) && next2(elem);
  }
  if (name in filters) {
    return filters[name](next2, data2, options, context);
  }
  if (name in pseudos) {
    const pseudo = pseudos[name];
    verifyPseudoArgs(pseudo, name, data2, 2);
    return (elem) => pseudo(elem, options, data2) && next2(elem);
  }
  throw new Error(`Unknown pseudo-class :${name}`);
}

// node_modules/css-select/lib/esm/general.js
function getElementParent(node, adapter3) {
  const parent2 = adapter3.getParent(node);
  if (parent2 && adapter3.isTag(parent2)) {
    return parent2;
  }
  return null;
}
function compileGeneralSelector(next2, selector, options, context, compileToken2) {
  const { adapter: adapter3, equals } = options;
  switch (selector.type) {
    case SelectorType.PseudoElement: {
      throw new Error("Pseudo-elements are not supported by css-select");
    }
    case SelectorType.ColumnCombinator: {
      throw new Error("Column combinators are not yet supported by css-select");
    }
    case SelectorType.Attribute: {
      if (selector.namespace != null) {
        throw new Error("Namespaced attributes are not yet supported by css-select");
      }
      if (!options.xmlMode || options.lowerCaseAttributeNames) {
        selector.name = selector.name.toLowerCase();
      }
      return attributeRules[selector.action](next2, selector, options);
    }
    case SelectorType.Pseudo: {
      return compilePseudoSelector(next2, selector, options, context, compileToken2);
    }
    case SelectorType.Tag: {
      if (selector.namespace != null) {
        throw new Error("Namespaced tag names are not yet supported by css-select");
      }
      let { name } = selector;
      if (!options.xmlMode || options.lowerCaseTags) {
        name = name.toLowerCase();
      }
      return function tag(elem) {
        return adapter3.getName(elem) === name && next2(elem);
      };
    }
    case SelectorType.Descendant: {
      if (options.cacheResults === false || typeof WeakSet === "undefined") {
        return function descendant(elem) {
          let current = elem;
          while (current = getElementParent(current, adapter3)) {
            if (next2(current)) {
              return true;
            }
          }
          return false;
        };
      }
      const isFalseCache = /* @__PURE__ */ new WeakSet();
      return function cachedDescendant(elem) {
        let current = elem;
        while (current = getElementParent(current, adapter3)) {
          if (!isFalseCache.has(current)) {
            if (adapter3.isTag(current) && next2(current)) {
              return true;
            }
            isFalseCache.add(current);
          }
        }
        return false;
      };
    }
    case "_flexibleDescendant": {
      return function flexibleDescendant(elem) {
        let current = elem;
        do {
          if (next2(current))
            return true;
        } while (current = getElementParent(current, adapter3));
        return false;
      };
    }
    case SelectorType.Parent: {
      return function parent2(elem) {
        return adapter3.getChildren(elem).some((elem2) => adapter3.isTag(elem2) && next2(elem2));
      };
    }
    case SelectorType.Child: {
      return function child(elem) {
        const parent2 = adapter3.getParent(elem);
        return parent2 != null && adapter3.isTag(parent2) && next2(parent2);
      };
    }
    case SelectorType.Sibling: {
      return function sibling(elem) {
        const siblings2 = adapter3.getSiblings(elem);
        for (let i = 0; i < siblings2.length; i++) {
          const currentSibling = siblings2[i];
          if (equals(elem, currentSibling))
            break;
          if (adapter3.isTag(currentSibling) && next2(currentSibling)) {
            return true;
          }
        }
        return false;
      };
    }
    case SelectorType.Adjacent: {
      if (adapter3.prevElementSibling) {
        return function adjacent(elem) {
          const previous = adapter3.prevElementSibling(elem);
          return previous != null && next2(previous);
        };
      }
      return function adjacent(elem) {
        const siblings2 = adapter3.getSiblings(elem);
        let lastElement;
        for (let i = 0; i < siblings2.length; i++) {
          const currentSibling = siblings2[i];
          if (equals(elem, currentSibling))
            break;
          if (adapter3.isTag(currentSibling)) {
            lastElement = currentSibling;
          }
        }
        return !!lastElement && next2(lastElement);
      };
    }
    case SelectorType.Universal: {
      if (selector.namespace != null && selector.namespace !== "*") {
        throw new Error("Namespaced universal selectors are not yet supported by css-select");
      }
      return next2;
    }
  }
}

// node_modules/css-select/lib/esm/compile.js
function compile2(selector, options, context) {
  const next2 = compileUnsafe(selector, options, context);
  return ensureIsTag(next2, options.adapter);
}
function compileUnsafe(selector, options, context) {
  const token = typeof selector === "string" ? parse(selector) : selector;
  return compileToken(token, options, context);
}
function includesScopePseudo(t) {
  return t.type === SelectorType.Pseudo && (t.name === "scope" || Array.isArray(t.data) && t.data.some((data2) => data2.some(includesScopePseudo)));
}
var DESCENDANT_TOKEN = { type: SelectorType.Descendant };
var FLEXIBLE_DESCENDANT_TOKEN = {
  type: "_flexibleDescendant"
};
var SCOPE_TOKEN = {
  type: SelectorType.Pseudo,
  name: "scope",
  data: null
};
function absolutize(token, { adapter: adapter3 }, context) {
  const hasContext = !!(context === null || context === void 0 ? void 0 : context.every((e) => {
    const parent2 = adapter3.isTag(e) && adapter3.getParent(e);
    return e === PLACEHOLDER_ELEMENT || parent2 && adapter3.isTag(parent2);
  }));
  for (const t of token) {
    if (t.length > 0 && isTraversal2(t[0]) && t[0].type !== SelectorType.Descendant) {
    } else if (hasContext && !t.some(includesScopePseudo)) {
      t.unshift(DESCENDANT_TOKEN);
    } else {
      continue;
    }
    t.unshift(SCOPE_TOKEN);
  }
}
function compileToken(token, options, context) {
  var _a5;
  token.forEach(sortByProcedure);
  context = (_a5 = options.context) !== null && _a5 !== void 0 ? _a5 : context;
  const isArrayContext = Array.isArray(context);
  const finalContext = context && (Array.isArray(context) ? context : [context]);
  if (options.relativeSelector !== false) {
    absolutize(token, options, finalContext);
  } else if (token.some((t) => t.length > 0 && isTraversal2(t[0]))) {
    throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");
  }
  let shouldTestNextSiblings = false;
  const query = token.map((rules) => {
    if (rules.length >= 2) {
      const [first2, second] = rules;
      if (first2.type !== SelectorType.Pseudo || first2.name !== "scope") {
      } else if (isArrayContext && second.type === SelectorType.Descendant) {
        rules[1] = FLEXIBLE_DESCENDANT_TOKEN;
      } else if (second.type === SelectorType.Adjacent || second.type === SelectorType.Sibling) {
        shouldTestNextSiblings = true;
      }
    }
    return compileRules(rules, options, finalContext);
  }).reduce(reduceRules, import_boolbase5.default.falseFunc);
  query.shouldTestNextSiblings = shouldTestNextSiblings;
  return query;
}
function compileRules(rules, options, context) {
  var _a5;
  return rules.reduce((previous, rule) => previous === import_boolbase5.default.falseFunc ? import_boolbase5.default.falseFunc : compileGeneralSelector(previous, rule, options, context, compileToken), (_a5 = options.rootFunc) !== null && _a5 !== void 0 ? _a5 : import_boolbase5.default.trueFunc);
}
function reduceRules(a, b2) {
  if (b2 === import_boolbase5.default.falseFunc || a === import_boolbase5.default.trueFunc) {
    return a;
  }
  if (a === import_boolbase5.default.falseFunc || b2 === import_boolbase5.default.trueFunc) {
    return b2;
  }
  return function combine(elem) {
    return a(elem) || b2(elem);
  };
}

// node_modules/css-select/lib/esm/index.js
var defaultEquals = (a, b2) => a === b2;
var defaultOptions = {
  adapter: esm_exports2,
  equals: defaultEquals
};
function convertOptionFormats(options) {
  var _a5, _b, _c, _d;
  const opts = options !== null && options !== void 0 ? options : defaultOptions;
  (_a5 = opts.adapter) !== null && _a5 !== void 0 ? _a5 : opts.adapter = esm_exports2;
  (_b = opts.equals) !== null && _b !== void 0 ? _b : opts.equals = (_d = (_c = opts.adapter) === null || _c === void 0 ? void 0 : _c.equals) !== null && _d !== void 0 ? _d : defaultEquals;
  return opts;
}
function wrapCompile(func) {
  return function addAdapter(selector, options, context) {
    const opts = convertOptionFormats(options);
    return func(selector, opts, context);
  };
}
var compile3 = wrapCompile(compile2);
var _compileUnsafe = wrapCompile(compileUnsafe);
var _compileToken = wrapCompile(compileToken);
function getSelectorFunc(searchFunc) {
  return function select2(query, elements, options) {
    const opts = convertOptionFormats(options);
    if (typeof query !== "function") {
      query = compileUnsafe(query, opts, elements);
    }
    const filteredElements = prepareContext(elements, opts.adapter, query.shouldTestNextSiblings);
    return searchFunc(query, filteredElements, opts);
  };
}
function prepareContext(elems, adapter3, shouldTestNextSiblings = false) {
  if (shouldTestNextSiblings) {
    elems = appendNextSiblings(elems, adapter3);
  }
  return Array.isArray(elems) ? adapter3.removeSubsets(elems) : adapter3.getChildren(elems);
}
function appendNextSiblings(elem, adapter3) {
  const elems = Array.isArray(elem) ? elem.slice(0) : [elem];
  const elemsLength = elems.length;
  for (let i = 0; i < elemsLength; i++) {
    const nextSiblings = getNextSiblings(elems[i], adapter3);
    elems.push(...nextSiblings);
  }
  return elems;
}
var selectAll = getSelectorFunc((query, elems, options) => query === import_boolbase6.default.falseFunc || !elems || elems.length === 0 ? [] : options.adapter.findAll(query, elems));
var selectOne = getSelectorFunc((query, elems, options) => query === import_boolbase6.default.falseFunc || !elems || elems.length === 0 ? null : options.adapter.findOne(query, elems));

// node_modules/cheerio-select/lib/esm/index.js
var boolbase7 = __toESM(require_boolbase(), 1);

// node_modules/cheerio-select/lib/esm/positionals.js
var filterNames = /* @__PURE__ */ new Set([
  "first",
  "last",
  "eq",
  "gt",
  "nth",
  "lt",
  "even",
  "odd"
]);
function isFilter(s) {
  if (s.type !== "pseudo")
    return false;
  if (filterNames.has(s.name))
    return true;
  if (s.name === "not" && Array.isArray(s.data)) {
    return s.data.some((s2) => s2.some(isFilter));
  }
  return false;
}
function getLimit(filter5, data2, partLimit) {
  const num = data2 != null ? parseInt(data2, 10) : NaN;
  switch (filter5) {
    case "first":
      return 1;
    case "nth":
    case "eq":
      return isFinite(num) ? num >= 0 ? num + 1 : Infinity : 0;
    case "lt":
      return isFinite(num) ? num >= 0 ? Math.min(num, partLimit) : Infinity : 0;
    case "gt":
      return isFinite(num) ? Infinity : 0;
    case "odd":
      return 2 * partLimit;
    case "even":
      return 2 * partLimit - 1;
    case "last":
    case "not":
      return Infinity;
  }
}

// node_modules/cheerio-select/lib/esm/helpers.js
function getDocumentRoot(node) {
  while (node.parent)
    node = node.parent;
  return node;
}
function groupSelectors(selectors) {
  const filteredSelectors = [];
  const plainSelectors = [];
  for (const selector of selectors) {
    if (selector.some(isFilter)) {
      filteredSelectors.push(selector);
    } else {
      plainSelectors.push(selector);
    }
  }
  return [plainSelectors, filteredSelectors];
}

// node_modules/cheerio-select/lib/esm/index.js
var UNIVERSAL_SELECTOR = {
  type: SelectorType.Universal,
  namespace: null
};
var SCOPE_PSEUDO = {
  type: SelectorType.Pseudo,
  name: "scope",
  data: null
};
function is2(element, selector, options = {}) {
  return some([element], selector, options);
}
function some(elements, selector, options = {}) {
  if (typeof selector === "function")
    return elements.some(selector);
  const [plain, filtered] = groupSelectors(parse(selector));
  return plain.length > 0 && elements.some(_compileToken(plain, options)) || filtered.some((sel) => filterBySelector(sel, elements, options).length > 0);
}
function filterByPosition(filter5, elems, data2, options) {
  const num = typeof data2 === "string" ? parseInt(data2, 10) : NaN;
  switch (filter5) {
    case "first":
    case "lt":
      return elems;
    case "last":
      return elems.length > 0 ? [elems[elems.length - 1]] : elems;
    case "nth":
    case "eq":
      return isFinite(num) && Math.abs(num) < elems.length ? [num < 0 ? elems[elems.length + num] : elems[num]] : [];
    case "gt":
      return isFinite(num) ? elems.slice(num + 1) : [];
    case "even":
      return elems.filter((_2, i) => i % 2 === 0);
    case "odd":
      return elems.filter((_2, i) => i % 2 === 1);
    case "not": {
      const filtered = new Set(filterParsed(data2, elems, options));
      return elems.filter((e) => !filtered.has(e));
    }
  }
}
function filter3(selector, elements, options = {}) {
  return filterParsed(parse(selector), elements, options);
}
function filterParsed(selector, elements, options) {
  if (elements.length === 0)
    return [];
  const [plainSelectors, filteredSelectors] = groupSelectors(selector);
  let found;
  if (plainSelectors.length) {
    const filtered = filterElements(elements, plainSelectors, options);
    if (filteredSelectors.length === 0) {
      return filtered;
    }
    if (filtered.length) {
      found = new Set(filtered);
    }
  }
  for (let i = 0; i < filteredSelectors.length && (found === null || found === void 0 ? void 0 : found.size) !== elements.length; i++) {
    const filteredSelector = filteredSelectors[i];
    const missing = found ? elements.filter((e) => isTag2(e) && !found.has(e)) : elements;
    if (missing.length === 0)
      break;
    const filtered = filterBySelector(filteredSelector, elements, options);
    if (filtered.length) {
      if (!found) {
        if (i === filteredSelectors.length - 1) {
          return filtered;
        }
        found = new Set(filtered);
      } else {
        filtered.forEach((el) => found.add(el));
      }
    }
  }
  return typeof found !== "undefined" ? found.size === elements.length ? elements : (
    // Filter elements to preserve order
    elements.filter((el) => found.has(el))
  ) : [];
}
function filterBySelector(selector, elements, options) {
  var _a5;
  if (selector.some(isTraversal)) {
    const root2 = (_a5 = options.root) !== null && _a5 !== void 0 ? _a5 : getDocumentRoot(elements[0]);
    const opts = { ...options, context: elements, relativeSelector: false };
    selector.push(SCOPE_PSEUDO);
    return findFilterElements(root2, selector, opts, true, elements.length);
  }
  return findFilterElements(elements, selector, options, false, elements.length);
}
function select(selector, root2, options = {}, limit = Infinity) {
  if (typeof selector === "function") {
    return find2(root2, selector);
  }
  const [plain, filtered] = groupSelectors(parse(selector));
  const results = filtered.map((sel) => findFilterElements(root2, sel, options, true, limit));
  if (plain.length) {
    results.push(findElements(root2, plain, options, limit));
  }
  if (results.length === 0) {
    return [];
  }
  if (results.length === 1) {
    return results[0];
  }
  return uniqueSort(results.reduce((a, b2) => [...a, ...b2]));
}
function findFilterElements(root2, selector, options, queryForSelector, totalLimit) {
  const filterIndex = selector.findIndex(isFilter);
  const sub = selector.slice(0, filterIndex);
  const filter5 = selector[filterIndex];
  const partLimit = selector.length - 1 === filterIndex ? totalLimit : Infinity;
  const limit = getLimit(filter5.name, filter5.data, partLimit);
  if (limit === 0)
    return [];
  const elemsNoLimit = sub.length === 0 && !Array.isArray(root2) ? getChildren(root2).filter(isTag2) : sub.length === 0 ? (Array.isArray(root2) ? root2 : [root2]).filter(isTag2) : queryForSelector || sub.some(isTraversal) ? findElements(root2, [sub], options, limit) : filterElements(root2, [sub], options);
  const elems = elemsNoLimit.slice(0, limit);
  let result = filterByPosition(filter5.name, elems, filter5.data, options);
  if (result.length === 0 || selector.length === filterIndex + 1) {
    return result;
  }
  const remainingSelector = selector.slice(filterIndex + 1);
  const remainingHasTraversal = remainingSelector.some(isTraversal);
  if (remainingHasTraversal) {
    if (isTraversal(remainingSelector[0])) {
      const { type } = remainingSelector[0];
      if (type === SelectorType.Sibling || type === SelectorType.Adjacent) {
        result = prepareContext(result, esm_exports2, true);
      }
      remainingSelector.unshift(UNIVERSAL_SELECTOR);
    }
    options = {
      ...options,
      // Avoid absolutizing the selector
      relativeSelector: false,
      /*
       * Add a custom root func, to make sure traversals don't match elements
       * that aren't a part of the considered tree.
       */
      rootFunc: (el) => result.includes(el)
    };
  } else if (options.rootFunc && options.rootFunc !== boolbase7.trueFunc) {
    options = { ...options, rootFunc: boolbase7.trueFunc };
  }
  return remainingSelector.some(isFilter) ? findFilterElements(result, remainingSelector, options, false, totalLimit) : remainingHasTraversal ? (
    // Query existing elements to resolve traversal.
    findElements(result, [remainingSelector], options, totalLimit)
  ) : (
    // If we don't have any more traversals, simply filter elements.
    filterElements(result, [remainingSelector], options)
  );
}
function findElements(root2, sel, options, limit) {
  const query = _compileToken(sel, options, root2);
  return find2(root2, query, limit);
}
function find2(root2, query, limit = Infinity) {
  const elems = prepareContext(root2, esm_exports2, query.shouldTestNextSiblings);
  return find((node) => isTag2(node) && query(node), elems, true, limit);
}
function filterElements(elements, sel, options) {
  const els = (Array.isArray(elements) ? elements : [elements]).filter(isTag2);
  if (els.length === 0)
    return els;
  const query = _compileToken(sel, options);
  return query === boolbase7.trueFunc ? els : els.filter(query);
}

// node_modules/cheerio/dist/browser/api/traversing.js
var reSiblingSelector = /^\s*[+~]/;
function find3(selectorOrHaystack) {
  if (!selectorOrHaystack) {
    return this._make([]);
  }
  if (typeof selectorOrHaystack !== "string") {
    const haystack = isCheerio(selectorOrHaystack) ? selectorOrHaystack.toArray() : [selectorOrHaystack];
    const context = this.toArray();
    return this._make(haystack.filter((elem) => context.some((node) => contains(node, elem))));
  }
  return this._findBySelector(selectorOrHaystack, Number.POSITIVE_INFINITY);
}
function _findBySelector(selector, limit) {
  var _a5;
  const context = this.toArray();
  const elems = reSiblingSelector.test(selector) ? context : this.children().toArray();
  const options = {
    context,
    root: (_a5 = this._root) === null || _a5 === void 0 ? void 0 : _a5[0],
    // Pass options that are recognized by `cheerio-select`
    xmlMode: this.options.xmlMode,
    lowerCaseTags: this.options.lowerCaseTags,
    lowerCaseAttributeNames: this.options.lowerCaseAttributeNames,
    pseudos: this.options.pseudos,
    quirksMode: this.options.quirksMode
  };
  return this._make(select(selector, elems, options, limit));
}
function _getMatcher(matchMap) {
  return function(fn, ...postFns) {
    return function(selector) {
      var _a5;
      let matched = matchMap(fn, this);
      if (selector) {
        matched = filterArray(matched, selector, this.options.xmlMode, (_a5 = this._root) === null || _a5 === void 0 ? void 0 : _a5[0]);
      }
      return this._make(
        // Post processing is only necessary if there is more than one element.
        this.length > 1 && matched.length > 1 ? postFns.reduce((elems, fn2) => fn2(elems), matched) : matched
      );
    };
  };
}
var _matcher = _getMatcher((fn, elems) => {
  let ret = [];
  for (let i = 0; i < elems.length; i++) {
    const value = fn(elems[i]);
    if (value.length > 0)
      ret = ret.concat(value);
  }
  return ret;
});
var _singleMatcher = _getMatcher((fn, elems) => {
  const ret = [];
  for (let i = 0; i < elems.length; i++) {
    const value = fn(elems[i]);
    if (value !== null) {
      ret.push(value);
    }
  }
  return ret;
});
function _matchUntil(nextElem, ...postFns) {
  let matches = null;
  const innerMatcher = _getMatcher((nextElem2, elems) => {
    const matched = [];
    domEach(elems, (elem) => {
      for (let next2; next2 = nextElem2(elem); elem = next2) {
        if (matches === null || matches === void 0 ? void 0 : matches(next2, matched.length))
          break;
        matched.push(next2);
      }
    });
    return matched;
  })(nextElem, ...postFns);
  return function(selector, filterSelector) {
    matches = typeof selector === "string" ? (elem) => is2(elem, selector, this.options) : selector ? getFilterFn(selector) : null;
    const ret = innerMatcher.call(this, filterSelector);
    matches = null;
    return ret;
  };
}
function _removeDuplicates(elems) {
  return elems.length > 1 ? Array.from(new Set(elems)) : elems;
}
var parent = _singleMatcher(({ parent: parent2 }) => parent2 && !isDocument(parent2) ? parent2 : null, _removeDuplicates);
var parents = _matcher((elem) => {
  const matched = [];
  while (elem.parent && !isDocument(elem.parent)) {
    matched.push(elem.parent);
    elem = elem.parent;
  }
  return matched;
}, uniqueSort, (elems) => elems.reverse());
var parentsUntil = _matchUntil(({ parent: parent2 }) => parent2 && !isDocument(parent2) ? parent2 : null, uniqueSort, (elems) => elems.reverse());
function closest(selector) {
  var _a5;
  const set = [];
  if (!selector) {
    return this._make(set);
  }
  const selectOpts = {
    xmlMode: this.options.xmlMode,
    root: (_a5 = this._root) === null || _a5 === void 0 ? void 0 : _a5[0]
  };
  const selectFn = typeof selector === "string" ? (elem) => is2(elem, selector, selectOpts) : getFilterFn(selector);
  domEach(this, (elem) => {
    if (elem && !isDocument(elem) && !isTag2(elem)) {
      elem = elem.parent;
    }
    while (elem && isTag2(elem)) {
      if (selectFn(elem, 0)) {
        if (!set.includes(elem)) {
          set.push(elem);
        }
        break;
      }
      elem = elem.parent;
    }
  });
  return this._make(set);
}
var next = _singleMatcher((elem) => nextElementSibling(elem));
var nextAll = _matcher((elem) => {
  const matched = [];
  while (elem.next) {
    elem = elem.next;
    if (isTag2(elem))
      matched.push(elem);
  }
  return matched;
}, _removeDuplicates);
var nextUntil = _matchUntil((el) => nextElementSibling(el), _removeDuplicates);
var prev = _singleMatcher((elem) => prevElementSibling(elem));
var prevAll = _matcher((elem) => {
  const matched = [];
  while (elem.prev) {
    elem = elem.prev;
    if (isTag2(elem))
      matched.push(elem);
  }
  return matched;
}, _removeDuplicates);
var prevUntil = _matchUntil((el) => prevElementSibling(el), _removeDuplicates);
var siblings = _matcher((elem) => getSiblings(elem).filter((el) => isTag2(el) && el !== elem), uniqueSort);
var children = _matcher((elem) => getChildren(elem).filter(isTag2), _removeDuplicates);
function contents() {
  const elems = this.toArray().reduce((newElems, elem) => hasChildren(elem) ? newElems.concat(elem.children) : newElems, []);
  return this._make(elems);
}
function each(fn) {
  let i = 0;
  const len = this.length;
  while (i < len && fn.call(this[i], i, this[i]) !== false)
    ++i;
  return this;
}
function map(fn) {
  let elems = [];
  for (let i = 0; i < this.length; i++) {
    const el = this[i];
    const val2 = fn.call(el, i, el);
    if (val2 != null) {
      elems = elems.concat(val2);
    }
  }
  return this._make(elems);
}
function getFilterFn(match) {
  if (typeof match === "function") {
    return (el, i) => match.call(el, i, el);
  }
  if (isCheerio(match)) {
    return (el) => Array.prototype.includes.call(match, el);
  }
  return function(el) {
    return match === el;
  };
}
function filter4(match) {
  var _a5;
  return this._make(filterArray(this.toArray(), match, this.options.xmlMode, (_a5 = this._root) === null || _a5 === void 0 ? void 0 : _a5[0]));
}
function filterArray(nodes, match, xmlMode, root2) {
  return typeof match === "string" ? filter3(match, nodes, { xmlMode, root: root2 }) : nodes.filter(getFilterFn(match));
}
function is3(selector) {
  const nodes = this.toArray();
  return typeof selector === "string" ? some(nodes.filter(isTag2), selector, this.options) : selector ? nodes.some(getFilterFn(selector)) : false;
}
function not(match) {
  let nodes = this.toArray();
  if (typeof match === "string") {
    const matches = new Set(filter3(match, nodes, this.options));
    nodes = nodes.filter((el) => !matches.has(el));
  } else {
    const filterFn = getFilterFn(match);
    nodes = nodes.filter((el, i) => !filterFn(el, i));
  }
  return this._make(nodes);
}
function has(selectorOrHaystack) {
  return this.filter(typeof selectorOrHaystack === "string" ? (
    // Using the `:has` selector here short-circuits searches.
    `:has(${selectorOrHaystack})`
  ) : (_2, el) => this._make(el).find(selectorOrHaystack).length > 0);
}
function first() {
  return this.length > 1 ? this._make(this[0]) : this;
}
function last() {
  return this.length > 0 ? this._make(this[this.length - 1]) : this;
}
function eq(i) {
  var _a5;
  i = +i;
  if (i === 0 && this.length <= 1)
    return this;
  if (i < 0)
    i = this.length + i;
  return this._make((_a5 = this[i]) !== null && _a5 !== void 0 ? _a5 : []);
}
function get(i) {
  if (i == null) {
    return this.toArray();
  }
  return this[i < 0 ? this.length + i : i];
}
function toArray2() {
  return Array.prototype.slice.call(this);
}
function index(selectorOrNeedle) {
  let $haystack;
  let needle;
  if (selectorOrNeedle == null) {
    $haystack = this.parent().children();
    needle = this[0];
  } else if (typeof selectorOrNeedle === "string") {
    $haystack = this._make(selectorOrNeedle);
    needle = this[0];
  } else {
    $haystack = this;
    needle = isCheerio(selectorOrNeedle) ? selectorOrNeedle[0] : selectorOrNeedle;
  }
  return Array.prototype.indexOf.call($haystack, needle);
}
function slice(start, end2) {
  return this._make(Array.prototype.slice.call(this, start, end2));
}
function end() {
  var _a5;
  return (_a5 = this.prevObject) !== null && _a5 !== void 0 ? _a5 : this._make([]);
}
function add(other, context) {
  const selection = this._make(other, context);
  const contents2 = uniqueSort([...this.get(), ...selection.get()]);
  return this._make(contents2);
}
function addBack(selector) {
  return this.prevObject ? this.add(selector ? this.prevObject.filter(selector) : this.prevObject) : this;
}

// node_modules/cheerio/dist/browser/api/manipulation.js
var manipulation_exports = {};
__export(manipulation_exports, {
  _makeDomArray: () => _makeDomArray,
  after: () => after,
  append: () => append3,
  appendTo: () => appendTo,
  before: () => before,
  clone: () => clone,
  empty: () => empty,
  html: () => html2,
  insertAfter: () => insertAfter,
  insertBefore: () => insertBefore,
  prepend: () => prepend2,
  prependTo: () => prependTo,
  remove: () => remove,
  replaceWith: () => replaceWith,
  text: () => text2,
  toString: () => toString3,
  unwrap: () => unwrap,
  wrap: () => wrap,
  wrapAll: () => wrapAll,
  wrapInner: () => wrapInner
});

// node_modules/cheerio/dist/browser/parse.js
function getParse(parser) {
  return function parse6(content, options, isDocument2, context) {
    if (typeof Buffer !== "undefined" && Buffer.isBuffer(content)) {
      content = content.toString();
    }
    if (typeof content === "string") {
      return parser(content, options, isDocument2, context);
    }
    const doc = content;
    if (!Array.isArray(doc) && isDocument(doc)) {
      return doc;
    }
    const root2 = new Document([]);
    update(doc, root2);
    return root2;
  };
}
function update(newChilds, parent2) {
  const arr = Array.isArray(newChilds) ? newChilds : [newChilds];
  if (parent2) {
    parent2.children = arr;
  } else {
    parent2 = null;
  }
  for (let i = 0; i < arr.length; i++) {
    const node = arr[i];
    if (node.parent && node.parent.children !== arr) {
      removeElement(node);
    }
    if (parent2) {
      node.prev = arr[i - 1] || null;
      node.next = arr[i + 1] || null;
    } else {
      node.prev = node.next = null;
    }
    node.parent = parent2;
  }
  return parent2;
}

// node_modules/cheerio/dist/browser/api/manipulation.js
function _makeDomArray(elem, clone2) {
  if (elem == null) {
    return [];
  }
  if (typeof elem === "string") {
    return this._parse(elem, this.options, false, null).children.slice(0);
  }
  if ("length" in elem) {
    if (elem.length === 1) {
      return this._makeDomArray(elem[0], clone2);
    }
    const result = [];
    for (let i = 0; i < elem.length; i++) {
      const el = elem[i];
      if (typeof el === "object") {
        if (el == null) {
          continue;
        }
        if (!("length" in el)) {
          result.push(clone2 ? cloneNode(el, true) : el);
          continue;
        }
      }
      result.push(...this._makeDomArray(el, clone2));
    }
    return result;
  }
  return [clone2 ? cloneNode(elem, true) : elem];
}
function _insert(concatenator) {
  return function(...elems) {
    const lastIdx = this.length - 1;
    return domEach(this, (el, i) => {
      if (!hasChildren(el))
        return;
      const domSrc = typeof elems[0] === "function" ? elems[0].call(el, i, this._render(el.children)) : elems;
      const dom = this._makeDomArray(domSrc, i < lastIdx);
      concatenator(dom, el.children, el);
    });
  };
}
function uniqueSplice(array, spliceIdx, spliceCount, newElems, parent2) {
  var _a5, _b;
  const spliceArgs = [
    spliceIdx,
    spliceCount,
    ...newElems
  ];
  const prev2 = spliceIdx === 0 ? null : array[spliceIdx - 1];
  const next2 = spliceIdx + spliceCount >= array.length ? null : array[spliceIdx + spliceCount];
  for (let idx = 0; idx < newElems.length; ++idx) {
    const node = newElems[idx];
    const oldParent = node.parent;
    if (oldParent) {
      const oldSiblings = oldParent.children;
      const prevIdx = oldSiblings.indexOf(node);
      if (prevIdx !== -1) {
        oldParent.children.splice(prevIdx, 1);
        if (parent2 === oldParent && spliceIdx > prevIdx) {
          spliceArgs[0]--;
        }
      }
    }
    node.parent = parent2;
    if (node.prev) {
      node.prev.next = (_a5 = node.next) !== null && _a5 !== void 0 ? _a5 : null;
    }
    if (node.next) {
      node.next.prev = (_b = node.prev) !== null && _b !== void 0 ? _b : null;
    }
    node.prev = idx === 0 ? prev2 : newElems[idx - 1];
    node.next = idx === newElems.length - 1 ? next2 : newElems[idx + 1];
  }
  if (prev2) {
    prev2.next = newElems[0];
  }
  if (next2) {
    next2.prev = newElems[newElems.length - 1];
  }
  return array.splice(...spliceArgs);
}
function appendTo(target) {
  const appendTarget = isCheerio(target) ? target : this._make(target);
  appendTarget.append(this);
  return this;
}
function prependTo(target) {
  const prependTarget = isCheerio(target) ? target : this._make(target);
  prependTarget.prepend(this);
  return this;
}
var append3 = _insert((dom, children2, parent2) => {
  uniqueSplice(children2, children2.length, 0, dom, parent2);
});
var prepend2 = _insert((dom, children2, parent2) => {
  uniqueSplice(children2, 0, 0, dom, parent2);
});
function _wrap(insert) {
  return function(wrapper) {
    const lastIdx = this.length - 1;
    const lastParent = this.parents().last();
    for (let i = 0; i < this.length; i++) {
      const el = this[i];
      const wrap2 = typeof wrapper === "function" ? wrapper.call(el, i, el) : typeof wrapper === "string" && !isHtml(wrapper) ? lastParent.find(wrapper).clone() : wrapper;
      const [wrapperDom] = this._makeDomArray(wrap2, i < lastIdx);
      if (!wrapperDom || !hasChildren(wrapperDom))
        continue;
      let elInsertLocation = wrapperDom;
      let j2 = 0;
      while (j2 < elInsertLocation.children.length) {
        const child = elInsertLocation.children[j2];
        if (isTag2(child)) {
          elInsertLocation = child;
          j2 = 0;
        } else {
          j2++;
        }
      }
      insert(el, elInsertLocation, [wrapperDom]);
    }
    return this;
  };
}
var wrap = _wrap((el, elInsertLocation, wrapperDom) => {
  const { parent: parent2 } = el;
  if (!parent2)
    return;
  const siblings2 = parent2.children;
  const index2 = siblings2.indexOf(el);
  update([el], elInsertLocation);
  uniqueSplice(siblings2, index2, 0, wrapperDom, parent2);
});
var wrapInner = _wrap((el, elInsertLocation, wrapperDom) => {
  if (!hasChildren(el))
    return;
  update(el.children, elInsertLocation);
  update(wrapperDom, el);
});
function unwrap(selector) {
  this.parent(selector).not("body").each((_2, el) => {
    this._make(el).replaceWith(el.children);
  });
  return this;
}
function wrapAll(wrapper) {
  const el = this[0];
  if (el) {
    const wrap2 = this._make(typeof wrapper === "function" ? wrapper.call(el, 0, el) : wrapper).insertBefore(el);
    let elInsertLocation;
    for (let i = 0; i < wrap2.length; i++) {
      if (wrap2[i].type === esm_exports.Tag) {
        elInsertLocation = wrap2[i];
      }
    }
    let j2 = 0;
    while (elInsertLocation && j2 < elInsertLocation.children.length) {
      const child = elInsertLocation.children[j2];
      if (child.type === esm_exports.Tag) {
        elInsertLocation = child;
        j2 = 0;
      } else {
        j2++;
      }
    }
    if (elInsertLocation)
      this._make(elInsertLocation).append(this);
  }
  return this;
}
function after(...elems) {
  const lastIdx = this.length - 1;
  return domEach(this, (el, i) => {
    if (!hasChildren(el) || !el.parent) {
      return;
    }
    const siblings2 = el.parent.children;
    const index2 = siblings2.indexOf(el);
    if (index2 === -1)
      return;
    const domSrc = typeof elems[0] === "function" ? elems[0].call(el, i, this._render(el.children)) : elems;
    const dom = this._makeDomArray(domSrc, i < lastIdx);
    uniqueSplice(siblings2, index2 + 1, 0, dom, el.parent);
  });
}
function insertAfter(target) {
  if (typeof target === "string") {
    target = this._make(target);
  }
  this.remove();
  const clones = [];
  for (const el of this._makeDomArray(target)) {
    const clonedSelf = this.clone().toArray();
    const { parent: parent2 } = el;
    if (!parent2) {
      continue;
    }
    const siblings2 = parent2.children;
    const index2 = siblings2.indexOf(el);
    if (index2 === -1)
      continue;
    uniqueSplice(siblings2, index2 + 1, 0, clonedSelf, parent2);
    clones.push(...clonedSelf);
  }
  return this._make(clones);
}
function before(...elems) {
  const lastIdx = this.length - 1;
  return domEach(this, (el, i) => {
    if (!hasChildren(el) || !el.parent) {
      return;
    }
    const siblings2 = el.parent.children;
    const index2 = siblings2.indexOf(el);
    if (index2 === -1)
      return;
    const domSrc = typeof elems[0] === "function" ? elems[0].call(el, i, this._render(el.children)) : elems;
    const dom = this._makeDomArray(domSrc, i < lastIdx);
    uniqueSplice(siblings2, index2, 0, dom, el.parent);
  });
}
function insertBefore(target) {
  const targetArr = this._make(target);
  this.remove();
  const clones = [];
  domEach(targetArr, (el) => {
    const clonedSelf = this.clone().toArray();
    const { parent: parent2 } = el;
    if (!parent2) {
      return;
    }
    const siblings2 = parent2.children;
    const index2 = siblings2.indexOf(el);
    if (index2 === -1)
      return;
    uniqueSplice(siblings2, index2, 0, clonedSelf, parent2);
    clones.push(...clonedSelf);
  });
  return this._make(clones);
}
function remove(selector) {
  const elems = selector ? this.filter(selector) : this;
  domEach(elems, (el) => {
    removeElement(el);
    el.prev = el.next = el.parent = null;
  });
  return this;
}
function replaceWith(content) {
  return domEach(this, (el, i) => {
    const { parent: parent2 } = el;
    if (!parent2) {
      return;
    }
    const siblings2 = parent2.children;
    const cont = typeof content === "function" ? content.call(el, i, el) : content;
    const dom = this._makeDomArray(cont);
    update(dom, null);
    const index2 = siblings2.indexOf(el);
    uniqueSplice(siblings2, index2, 1, dom, parent2);
    if (!dom.includes(el)) {
      el.parent = el.prev = el.next = null;
    }
  });
}
function empty() {
  return domEach(this, (el) => {
    if (!hasChildren(el))
      return;
    for (const child of el.children) {
      child.next = child.prev = child.parent = null;
    }
    el.children.length = 0;
  });
}
function html2(str) {
  if (str === void 0) {
    const el = this[0];
    if (!el || !hasChildren(el))
      return null;
    return this._render(el.children);
  }
  return domEach(this, (el) => {
    if (!hasChildren(el))
      return;
    for (const child of el.children) {
      child.next = child.prev = child.parent = null;
    }
    const content = isCheerio(str) ? str.toArray() : this._parse(`${str}`, this.options, false, el).children;
    update(content, el);
  });
}
function toString3() {
  return this._render(this);
}
function text2(str) {
  if (str === void 0) {
    return text(this);
  }
  if (typeof str === "function") {
    return domEach(this, (el, i) => this._make(el).text(str.call(el, i, text([el]))));
  }
  return domEach(this, (el) => {
    if (!hasChildren(el))
      return;
    for (const child of el.children) {
      child.next = child.prev = child.parent = null;
    }
    const textNode = new Text2(`${str}`);
    update(textNode, el);
  });
}
function clone() {
  const clone2 = Array.prototype.map.call(this.get(), (el) => cloneNode(el, true));
  const root2 = new Document(clone2);
  for (const node of clone2) {
    node.parent = root2;
  }
  return this._make(clone2);
}

// node_modules/cheerio/dist/browser/api/css.js
var css_exports = {};
__export(css_exports, {
  css: () => css
});
function css(prop2, val2) {
  if (prop2 != null && val2 != null || // When `prop` is a "plain" object
  typeof prop2 === "object" && !Array.isArray(prop2)) {
    return domEach(this, (el, i) => {
      if (isTag2(el)) {
        setCss(el, prop2, val2, i);
      }
    });
  }
  if (this.length === 0) {
    return void 0;
  }
  return getCss(this[0], prop2);
}
function setCss(el, prop2, value, idx) {
  if (typeof prop2 === "string") {
    const styles2 = getCss(el);
    const val2 = typeof value === "function" ? value.call(el, idx, styles2[prop2]) : value;
    if (val2 === "") {
      delete styles2[prop2];
    } else if (val2 != null) {
      styles2[prop2] = val2;
    }
    el.attribs["style"] = stringify(styles2);
  } else if (typeof prop2 === "object") {
    const keys = Object.keys(prop2);
    for (let i = 0; i < keys.length; i++) {
      const k2 = keys[i];
      setCss(el, k2, prop2[k2], i);
    }
  }
}
function getCss(el, prop2) {
  if (!el || !isTag2(el))
    return;
  const styles2 = parse3(el.attribs["style"]);
  if (typeof prop2 === "string") {
    return styles2[prop2];
  }
  if (Array.isArray(prop2)) {
    const newStyles = {};
    for (const item of prop2) {
      if (styles2[item] != null) {
        newStyles[item] = styles2[item];
      }
    }
    return newStyles;
  }
  return styles2;
}
function stringify(obj) {
  return Object.keys(obj).reduce((str, prop2) => `${str}${str ? " " : ""}${prop2}: ${obj[prop2]};`, "");
}
function parse3(styles2) {
  styles2 = (styles2 || "").trim();
  if (!styles2)
    return {};
  const obj = {};
  let key;
  for (const str of styles2.split(";")) {
    const n = str.indexOf(":");
    if (n < 1 || n === str.length - 1) {
      const trimmed = str.trimEnd();
      if (trimmed.length > 0 && key !== void 0) {
        obj[key] += `;${trimmed}`;
      }
    } else {
      key = str.slice(0, n).trim();
      obj[key] = str.slice(n + 1).trim();
    }
  }
  return obj;
}

// node_modules/cheerio/dist/browser/api/forms.js
var forms_exports = {};
__export(forms_exports, {
  serialize: () => serialize,
  serializeArray: () => serializeArray
});
var submittableSelector = "input,select,textarea,keygen";
var r20 = /%20/g;
var rCRLF = /\r?\n/g;
function serialize() {
  const arr = this.serializeArray();
  const retArr = arr.map((data2) => `${encodeURIComponent(data2.name)}=${encodeURIComponent(data2.value)}`);
  return retArr.join("&").replace(r20, "+");
}
function serializeArray() {
  return this.map((_2, elem) => {
    const $elem = this._make(elem);
    if (isTag2(elem) && elem.name === "form") {
      return $elem.find(submittableSelector).toArray();
    }
    return $elem.filter(submittableSelector).toArray();
  }).filter(
    // Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)
    '[name!=""]:enabled:not(:submit, :button, :image, :reset, :file):matches([checked], :not(:checkbox, :radio))'
  ).map((_2, elem) => {
    var _a5;
    const $elem = this._make(elem);
    const name = $elem.attr("name");
    const value = (_a5 = $elem.val()) !== null && _a5 !== void 0 ? _a5 : "";
    if (Array.isArray(value)) {
      return value.map((val2) => (
        /*
         * We trim replace any line endings (e.g. `\r` or `\r\n` with `\r\n`) to guarantee consistency across platforms
         * These can occur inside of `<textarea>'s`
         */
        { name, value: val2.replace(rCRLF, "\r\n") }
      ));
    }
    return { name, value: value.replace(rCRLF, "\r\n") };
  }).toArray();
}

// node_modules/cheerio/dist/browser/api/extract.js
var extract_exports = {};
__export(extract_exports, {
  extract: () => extract2
});
function getExtractDescr(descr) {
  var _a5;
  if (typeof descr === "string") {
    return { selector: descr, value: "textContent" };
  }
  return {
    selector: descr.selector,
    value: (_a5 = descr.value) !== null && _a5 !== void 0 ? _a5 : "textContent"
  };
}
function extract2(map2) {
  const ret = {};
  for (const key in map2) {
    const descr = map2[key];
    const isArray2 = Array.isArray(descr);
    const { selector, value } = getExtractDescr(isArray2 ? descr[0] : descr);
    const fn = typeof value === "function" ? value : typeof value === "string" ? (el) => this._make(el).prop(value) : (el) => this._make(el).extract(value);
    if (isArray2) {
      ret[key] = this._findBySelector(selector, Number.POSITIVE_INFINITY).map((_2, el) => fn(el, key, ret)).get();
    } else {
      const $3 = this._findBySelector(selector, 1);
      ret[key] = $3.length > 0 ? fn($3[0], key, ret) : void 0;
    }
  }
  return ret;
}

// node_modules/cheerio/dist/browser/cheerio.js
var Cheerio = class {
  /**
   * Instance of cheerio. Methods are specified in the modules. Usage of this
   * constructor is not recommended. Please use `$.load` instead.
   *
   * @private
   * @param elements - The new selection.
   * @param root - Sets the root node.
   * @param options - Options for the instance.
   */
  constructor(elements, root2, options) {
    this.length = 0;
    this.options = options;
    this._root = root2;
    if (elements) {
      for (let idx = 0; idx < elements.length; idx++) {
        this[idx] = elements[idx];
      }
      this.length = elements.length;
    }
  }
};
Cheerio.prototype.cheerio = "[cheerio object]";
Cheerio.prototype.splice = Array.prototype.splice;
Cheerio.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];
Object.assign(Cheerio.prototype, attributes_exports, traversing_exports, manipulation_exports, css_exports, forms_exports, extract_exports);

// node_modules/cheerio/dist/browser/load.js
function getLoad(parse6, render3) {
  return function load2(content, options, isDocument2 = true) {
    if (content == null) {
      throw new Error("cheerio.load() expects a string");
    }
    const internalOpts = flattenOptions(options);
    const initialRoot = parse6(content, internalOpts, isDocument2, null);
    class LoadedCheerio extends Cheerio {
      _make(selector, context) {
        const cheerio = initialize(selector, context);
        cheerio.prevObject = this;
        return cheerio;
      }
      _parse(content2, options2, isDocument3, context) {
        return parse6(content2, options2, isDocument3, context);
      }
      _render(dom) {
        return render3(dom, this.options);
      }
    }
    function initialize(selector, context, root2 = initialRoot, opts) {
      if (selector && isCheerio(selector))
        return selector;
      const options2 = flattenOptions(opts, internalOpts);
      const r = typeof root2 === "string" ? [parse6(root2, options2, false, null)] : "length" in root2 ? root2 : [root2];
      const rootInstance = isCheerio(r) ? r : new LoadedCheerio(r, null, options2);
      rootInstance._root = rootInstance;
      if (!selector) {
        return new LoadedCheerio(void 0, rootInstance, options2);
      }
      const elements = typeof selector === "string" && isHtml(selector) ? (
        // $(<html>)
        parse6(selector, options2, false, null).children
      ) : isNode(selector) ? (
        // $(dom)
        [selector]
      ) : Array.isArray(selector) ? (
        // $([dom])
        selector
      ) : void 0;
      const instance = new LoadedCheerio(elements, rootInstance, options2);
      if (elements) {
        return instance;
      }
      if (typeof selector !== "string") {
        throw new TypeError("Unexpected type of selector");
      }
      let search = selector;
      const searchContext = context ? (
        // If we don't have a context, maybe we have a root, from loading
        typeof context === "string" ? isHtml(context) ? (
          // $('li', '<ul>...</ul>')
          new LoadedCheerio([parse6(context, options2, false, null)], rootInstance, options2)
        ) : (
          // $('li', 'ul')
          (search = `${context} ${search}`, rootInstance)
        ) : isCheerio(context) ? (
          // $('li', $)
          context
        ) : (
          // $('li', node), $('li', [nodes])
          new LoadedCheerio(Array.isArray(context) ? context : [context], rootInstance, options2)
        )
      ) : rootInstance;
      if (!searchContext)
        return instance;
      return searchContext.find(search);
    }
    Object.assign(initialize, static_exports, {
      load: load2,
      // `_root` and `_options` are used in static methods.
      _root: initialRoot,
      _options: internalOpts,
      // Add `fn` for plugins
      fn: LoadedCheerio.prototype,
      // Add the prototype here to maintain `instanceof` behavior.
      prototype: LoadedCheerio.prototype
    });
    return initialize;
  };
}
function isNode(obj) {
  return (
    // @ts-expect-error: TS doesn't know about the `name` property.
    !!obj.name || // @ts-expect-error: TS doesn't know about the `type` property.
    obj.type === esm_exports.Root || // @ts-expect-error: TS doesn't know about the `type` property.
    obj.type === esm_exports.Text || // @ts-expect-error: TS doesn't know about the `type` property.
    obj.type === esm_exports.Comment
  );
}

// node_modules/parse5/dist/common/unicode.js
var UNDEFINED_CODE_POINTS = /* @__PURE__ */ new Set([
  65534,
  65535,
  131070,
  131071,
  196606,
  196607,
  262142,
  262143,
  327678,
  327679,
  393214,
  393215,
  458750,
  458751,
  524286,
  524287,
  589822,
  589823,
  655358,
  655359,
  720894,
  720895,
  786430,
  786431,
  851966,
  851967,
  917502,
  917503,
  983038,
  983039,
  1048574,
  1048575,
  1114110,
  1114111
]);
var REPLACEMENT_CHARACTER = "\uFFFD";
var CODE_POINTS;
(function(CODE_POINTS2) {
  CODE_POINTS2[CODE_POINTS2["EOF"] = -1] = "EOF";
  CODE_POINTS2[CODE_POINTS2["NULL"] = 0] = "NULL";
  CODE_POINTS2[CODE_POINTS2["TABULATION"] = 9] = "TABULATION";
  CODE_POINTS2[CODE_POINTS2["CARRIAGE_RETURN"] = 13] = "CARRIAGE_RETURN";
  CODE_POINTS2[CODE_POINTS2["LINE_FEED"] = 10] = "LINE_FEED";
  CODE_POINTS2[CODE_POINTS2["FORM_FEED"] = 12] = "FORM_FEED";
  CODE_POINTS2[CODE_POINTS2["SPACE"] = 32] = "SPACE";
  CODE_POINTS2[CODE_POINTS2["EXCLAMATION_MARK"] = 33] = "EXCLAMATION_MARK";
  CODE_POINTS2[CODE_POINTS2["QUOTATION_MARK"] = 34] = "QUOTATION_MARK";
  CODE_POINTS2[CODE_POINTS2["AMPERSAND"] = 38] = "AMPERSAND";
  CODE_POINTS2[CODE_POINTS2["APOSTROPHE"] = 39] = "APOSTROPHE";
  CODE_POINTS2[CODE_POINTS2["HYPHEN_MINUS"] = 45] = "HYPHEN_MINUS";
  CODE_POINTS2[CODE_POINTS2["SOLIDUS"] = 47] = "SOLIDUS";
  CODE_POINTS2[CODE_POINTS2["DIGIT_0"] = 48] = "DIGIT_0";
  CODE_POINTS2[CODE_POINTS2["DIGIT_9"] = 57] = "DIGIT_9";
  CODE_POINTS2[CODE_POINTS2["SEMICOLON"] = 59] = "SEMICOLON";
  CODE_POINTS2[CODE_POINTS2["LESS_THAN_SIGN"] = 60] = "LESS_THAN_SIGN";
  CODE_POINTS2[CODE_POINTS2["EQUALS_SIGN"] = 61] = "EQUALS_SIGN";
  CODE_POINTS2[CODE_POINTS2["GREATER_THAN_SIGN"] = 62] = "GREATER_THAN_SIGN";
  CODE_POINTS2[CODE_POINTS2["QUESTION_MARK"] = 63] = "QUESTION_MARK";
  CODE_POINTS2[CODE_POINTS2["LATIN_CAPITAL_A"] = 65] = "LATIN_CAPITAL_A";
  CODE_POINTS2[CODE_POINTS2["LATIN_CAPITAL_Z"] = 90] = "LATIN_CAPITAL_Z";
  CODE_POINTS2[CODE_POINTS2["RIGHT_SQUARE_BRACKET"] = 93] = "RIGHT_SQUARE_BRACKET";
  CODE_POINTS2[CODE_POINTS2["GRAVE_ACCENT"] = 96] = "GRAVE_ACCENT";
  CODE_POINTS2[CODE_POINTS2["LATIN_SMALL_A"] = 97] = "LATIN_SMALL_A";
  CODE_POINTS2[CODE_POINTS2["LATIN_SMALL_Z"] = 122] = "LATIN_SMALL_Z";
})(CODE_POINTS || (CODE_POINTS = {}));
var SEQUENCES = {
  DASH_DASH: "--",
  CDATA_START: "[CDATA[",
  DOCTYPE: "doctype",
  SCRIPT: "script",
  PUBLIC: "public",
  SYSTEM: "system"
};
function isSurrogate(cp) {
  return cp >= 55296 && cp <= 57343;
}
function isSurrogatePair(cp) {
  return cp >= 56320 && cp <= 57343;
}
function getSurrogatePairCodePoint(cp1, cp2) {
  return (cp1 - 55296) * 1024 + 9216 + cp2;
}
function isControlCodePoint(cp) {
  return cp !== 32 && cp !== 10 && cp !== 13 && cp !== 9 && cp !== 12 && cp >= 1 && cp <= 31 || cp >= 127 && cp <= 159;
}
function isUndefinedCodePoint(cp) {
  return cp >= 64976 && cp <= 65007 || UNDEFINED_CODE_POINTS.has(cp);
}

// node_modules/parse5/dist/common/error-codes.js
var ERR;
(function(ERR2) {
  ERR2["controlCharacterInInputStream"] = "control-character-in-input-stream";
  ERR2["noncharacterInInputStream"] = "noncharacter-in-input-stream";
  ERR2["surrogateInInputStream"] = "surrogate-in-input-stream";
  ERR2["nonVoidHtmlElementStartTagWithTrailingSolidus"] = "non-void-html-element-start-tag-with-trailing-solidus";
  ERR2["endTagWithAttributes"] = "end-tag-with-attributes";
  ERR2["endTagWithTrailingSolidus"] = "end-tag-with-trailing-solidus";
  ERR2["unexpectedSolidusInTag"] = "unexpected-solidus-in-tag";
  ERR2["unexpectedNullCharacter"] = "unexpected-null-character";
  ERR2["unexpectedQuestionMarkInsteadOfTagName"] = "unexpected-question-mark-instead-of-tag-name";
  ERR2["invalidFirstCharacterOfTagName"] = "invalid-first-character-of-tag-name";
  ERR2["unexpectedEqualsSignBeforeAttributeName"] = "unexpected-equals-sign-before-attribute-name";
  ERR2["missingEndTagName"] = "missing-end-tag-name";
  ERR2["unexpectedCharacterInAttributeName"] = "unexpected-character-in-attribute-name";
  ERR2["unknownNamedCharacterReference"] = "unknown-named-character-reference";
  ERR2["missingSemicolonAfterCharacterReference"] = "missing-semicolon-after-character-reference";
  ERR2["unexpectedCharacterAfterDoctypeSystemIdentifier"] = "unexpected-character-after-doctype-system-identifier";
  ERR2["unexpectedCharacterInUnquotedAttributeValue"] = "unexpected-character-in-unquoted-attribute-value";
  ERR2["eofBeforeTagName"] = "eof-before-tag-name";
  ERR2["eofInTag"] = "eof-in-tag";
  ERR2["missingAttributeValue"] = "missing-attribute-value";
  ERR2["missingWhitespaceBetweenAttributes"] = "missing-whitespace-between-attributes";
  ERR2["missingWhitespaceAfterDoctypePublicKeyword"] = "missing-whitespace-after-doctype-public-keyword";
  ERR2["missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers"] = "missing-whitespace-between-doctype-public-and-system-identifiers";
  ERR2["missingWhitespaceAfterDoctypeSystemKeyword"] = "missing-whitespace-after-doctype-system-keyword";
  ERR2["missingQuoteBeforeDoctypePublicIdentifier"] = "missing-quote-before-doctype-public-identifier";
  ERR2["missingQuoteBeforeDoctypeSystemIdentifier"] = "missing-quote-before-doctype-system-identifier";
  ERR2["missingDoctypePublicIdentifier"] = "missing-doctype-public-identifier";
  ERR2["missingDoctypeSystemIdentifier"] = "missing-doctype-system-identifier";
  ERR2["abruptDoctypePublicIdentifier"] = "abrupt-doctype-public-identifier";
  ERR2["abruptDoctypeSystemIdentifier"] = "abrupt-doctype-system-identifier";
  ERR2["cdataInHtmlContent"] = "cdata-in-html-content";
  ERR2["incorrectlyOpenedComment"] = "incorrectly-opened-comment";
  ERR2["eofInScriptHtmlCommentLikeText"] = "eof-in-script-html-comment-like-text";
  ERR2["eofInDoctype"] = "eof-in-doctype";
  ERR2["nestedComment"] = "nested-comment";
  ERR2["abruptClosingOfEmptyComment"] = "abrupt-closing-of-empty-comment";
  ERR2["eofInComment"] = "eof-in-comment";
  ERR2["incorrectlyClosedComment"] = "incorrectly-closed-comment";
  ERR2["eofInCdata"] = "eof-in-cdata";
  ERR2["absenceOfDigitsInNumericCharacterReference"] = "absence-of-digits-in-numeric-character-reference";
  ERR2["nullCharacterReference"] = "null-character-reference";
  ERR2["surrogateCharacterReference"] = "surrogate-character-reference";
  ERR2["characterReferenceOutsideUnicodeRange"] = "character-reference-outside-unicode-range";
  ERR2["controlCharacterReference"] = "control-character-reference";
  ERR2["noncharacterCharacterReference"] = "noncharacter-character-reference";
  ERR2["missingWhitespaceBeforeDoctypeName"] = "missing-whitespace-before-doctype-name";
  ERR2["missingDoctypeName"] = "missing-doctype-name";
  ERR2["invalidCharacterSequenceAfterDoctypeName"] = "invalid-character-sequence-after-doctype-name";
  ERR2["duplicateAttribute"] = "duplicate-attribute";
  ERR2["nonConformingDoctype"] = "non-conforming-doctype";
  ERR2["missingDoctype"] = "missing-doctype";
  ERR2["misplacedDoctype"] = "misplaced-doctype";
  ERR2["endTagWithoutMatchingOpenElement"] = "end-tag-without-matching-open-element";
  ERR2["closingOfElementWithOpenChildElements"] = "closing-of-element-with-open-child-elements";
  ERR2["disallowedContentInNoscriptInHead"] = "disallowed-content-in-noscript-in-head";
  ERR2["openElementsLeftAfterEof"] = "open-elements-left-after-eof";
  ERR2["abandonedHeadElementChild"] = "abandoned-head-element-child";
  ERR2["misplacedStartTagForHeadElement"] = "misplaced-start-tag-for-head-element";
  ERR2["nestedNoscriptInHead"] = "nested-noscript-in-head";
  ERR2["eofInElementThatCanContainOnlyText"] = "eof-in-element-that-can-contain-only-text";
})(ERR || (ERR = {}));

// node_modules/parse5/dist/tokenizer/preprocessor.js
var DEFAULT_BUFFER_WATERLINE = 1 << 16;
var Preprocessor = class {
  constructor(handler) {
    this.handler = handler;
    this.html = "";
    this.pos = -1;
    this.lastGapPos = -2;
    this.gapStack = [];
    this.skipNextNewLine = false;
    this.lastChunkWritten = false;
    this.endOfChunkHit = false;
    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
    this.isEol = false;
    this.lineStartPos = 0;
    this.droppedBufferSize = 0;
    this.line = 1;
    this.lastErrOffset = -1;
  }
  /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */
  get col() {
    return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);
  }
  get offset() {
    return this.droppedBufferSize + this.pos;
  }
  getError(code, cpOffset) {
    const { line, col, offset } = this;
    const startCol = col + cpOffset;
    const startOffset = offset + cpOffset;
    return {
      code,
      startLine: line,
      endLine: line,
      startCol,
      endCol: startCol,
      startOffset,
      endOffset: startOffset
    };
  }
  _err(code) {
    if (this.handler.onParseError && this.lastErrOffset !== this.offset) {
      this.lastErrOffset = this.offset;
      this.handler.onParseError(this.getError(code, 0));
    }
  }
  _addGap() {
    this.gapStack.push(this.lastGapPos);
    this.lastGapPos = this.pos;
  }
  _processSurrogate(cp) {
    if (this.pos !== this.html.length - 1) {
      const nextCp = this.html.charCodeAt(this.pos + 1);
      if (isSurrogatePair(nextCp)) {
        this.pos++;
        this._addGap();
        return getSurrogatePairCodePoint(cp, nextCp);
      }
    } else if (!this.lastChunkWritten) {
      this.endOfChunkHit = true;
      return CODE_POINTS.EOF;
    }
    this._err(ERR.surrogateInInputStream);
    return cp;
  }
  willDropParsedChunk() {
    return this.pos > this.bufferWaterline;
  }
  dropParsedChunk() {
    if (this.willDropParsedChunk()) {
      this.html = this.html.substring(this.pos);
      this.lineStartPos -= this.pos;
      this.droppedBufferSize += this.pos;
      this.pos = 0;
      this.lastGapPos = -2;
      this.gapStack.length = 0;
    }
  }
  write(chunk, isLastChunk) {
    if (this.html.length > 0) {
      this.html += chunk;
    } else {
      this.html = chunk;
    }
    this.endOfChunkHit = false;
    this.lastChunkWritten = isLastChunk;
  }
  insertHtmlAtCurrentPos(chunk) {
    this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);
    this.endOfChunkHit = false;
  }
  startsWith(pattern, caseSensitive) {
    if (this.pos + pattern.length > this.html.length) {
      this.endOfChunkHit = !this.lastChunkWritten;
      return false;
    }
    if (caseSensitive) {
      return this.html.startsWith(pattern, this.pos);
    }
    for (let i = 0; i < pattern.length; i++) {
      const cp = this.html.charCodeAt(this.pos + i) | 32;
      if (cp !== pattern.charCodeAt(i)) {
        return false;
      }
    }
    return true;
  }
  peek(offset) {
    const pos = this.pos + offset;
    if (pos >= this.html.length) {
      this.endOfChunkHit = !this.lastChunkWritten;
      return CODE_POINTS.EOF;
    }
    const code = this.html.charCodeAt(pos);
    return code === CODE_POINTS.CARRIAGE_RETURN ? CODE_POINTS.LINE_FEED : code;
  }
  advance() {
    this.pos++;
    if (this.isEol) {
      this.isEol = false;
      this.line++;
      this.lineStartPos = this.pos;
    }
    if (this.pos >= this.html.length) {
      this.endOfChunkHit = !this.lastChunkWritten;
      return CODE_POINTS.EOF;
    }
    let cp = this.html.charCodeAt(this.pos);
    if (cp === CODE_POINTS.CARRIAGE_RETURN) {
      this.isEol = true;
      this.skipNextNewLine = true;
      return CODE_POINTS.LINE_FEED;
    }
    if (cp === CODE_POINTS.LINE_FEED) {
      this.isEol = true;
      if (this.skipNextNewLine) {
        this.line--;
        this.skipNextNewLine = false;
        this._addGap();
        return this.advance();
      }
    }
    this.skipNextNewLine = false;
    if (isSurrogate(cp)) {
      cp = this._processSurrogate(cp);
    }
    const isCommonValidRange = this.handler.onParseError === null || cp > 31 && cp < 127 || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.CARRIAGE_RETURN || cp > 159 && cp < 64976;
    if (!isCommonValidRange) {
      this._checkForProblematicCharacters(cp);
    }
    return cp;
  }
  _checkForProblematicCharacters(cp) {
    if (isControlCodePoint(cp)) {
      this._err(ERR.controlCharacterInInputStream);
    } else if (isUndefinedCodePoint(cp)) {
      this._err(ERR.noncharacterInInputStream);
    }
  }
  retreat(count) {
    this.pos -= count;
    while (this.pos < this.lastGapPos) {
      this.lastGapPos = this.gapStack.pop();
      this.pos--;
    }
    this.isEol = false;
  }
};

// node_modules/parse5/dist/common/token.js
var TokenType;
(function(TokenType2) {
  TokenType2[TokenType2["CHARACTER"] = 0] = "CHARACTER";
  TokenType2[TokenType2["NULL_CHARACTER"] = 1] = "NULL_CHARACTER";
  TokenType2[TokenType2["WHITESPACE_CHARACTER"] = 2] = "WHITESPACE_CHARACTER";
  TokenType2[TokenType2["START_TAG"] = 3] = "START_TAG";
  TokenType2[TokenType2["END_TAG"] = 4] = "END_TAG";
  TokenType2[TokenType2["COMMENT"] = 5] = "COMMENT";
  TokenType2[TokenType2["DOCTYPE"] = 6] = "DOCTYPE";
  TokenType2[TokenType2["EOF"] = 7] = "EOF";
  TokenType2[TokenType2["HIBERNATION"] = 8] = "HIBERNATION";
})(TokenType || (TokenType = {}));
function getTokenAttr(token, attrName) {
  for (let i = token.attrs.length - 1; i >= 0; i--) {
    if (token.attrs[i].name === attrName) {
      return token.attrs[i].value;
    }
  }
  return null;
}

// node_modules/parse5/node_modules/entities/dist/esm/generated/decode-data-html.js
var htmlDecodeTree2 = /* @__PURE__ */ new Uint16Array(
  // prettier-ignore
  /* @__PURE__ */ '\u1D41<\xD5\u0131\u028A\u049D\u057B\u05D0\u0675\u06DE\u07A2\u07D6\u080F\u0A4A\u0A91\u0DA1\u0E6D\u0F09\u0F26\u10CA\u1228\u12E1\u1415\u149D\u14C3\u14DF\u1525\0\0\0\0\0\0\u156B\u16CD\u198D\u1C12\u1DDD\u1F7E\u2060\u21B0\u228D\u23C0\u23FB\u2442\u2824\u2912\u2D08\u2E48\u2FCE\u3016\u32BA\u3639\u37AC\u38FE\u3A28\u3A71\u3AE0\u3B2E\u0800EMabcfglmnoprstu\\bfms\x7F\x84\x8B\x90\x95\x98\xA6\xB3\xB9\xC8\xCFlig\u803B\xC6\u40C6P\u803B&\u4026cute\u803B\xC1\u40C1reve;\u4102\u0100iyx}rc\u803B\xC2\u40C2;\u4410r;\uC000\u{1D504}rave\u803B\xC0\u40C0pha;\u4391acr;\u4100d;\u6A53\u0100gp\x9D\xA1on;\u4104f;\uC000\u{1D538}plyFunction;\u6061ing\u803B\xC5\u40C5\u0100cs\xBE\xC3r;\uC000\u{1D49C}ign;\u6254ilde\u803B\xC3\u40C3ml\u803B\xC4\u40C4\u0400aceforsu\xE5\xFB\xFE\u0117\u011C\u0122\u0127\u012A\u0100cr\xEA\xF2kslash;\u6216\u0176\xF6\xF8;\u6AE7ed;\u6306y;\u4411\u0180crt\u0105\u010B\u0114ause;\u6235noullis;\u612Ca;\u4392r;\uC000\u{1D505}pf;\uC000\u{1D539}eve;\u42D8c\xF2\u0113mpeq;\u624E\u0700HOacdefhilorsu\u014D\u0151\u0156\u0180\u019E\u01A2\u01B5\u01B7\u01BA\u01DC\u0215\u0273\u0278\u027Ecy;\u4427PY\u803B\xA9\u40A9\u0180cpy\u015D\u0162\u017Aute;\u4106\u0100;i\u0167\u0168\u62D2talDifferentialD;\u6145leys;\u612D\u0200aeio\u0189\u018E\u0194\u0198ron;\u410Cdil\u803B\xC7\u40C7rc;\u4108nint;\u6230ot;\u410A\u0100dn\u01A7\u01ADilla;\u40B8terDot;\u40B7\xF2\u017Fi;\u43A7rcle\u0200DMPT\u01C7\u01CB\u01D1\u01D6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01E2\u01F8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020FoubleQuote;\u601Duote;\u6019\u0200lnpu\u021E\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6A74\u0180git\u022F\u0236\u023Aruent;\u6261nt;\u622FourIntegral;\u622E\u0100fr\u024C\u024E;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6A2Fcr;\uC000\u{1D49E}p\u0100;C\u0284\u0285\u62D3ap;\u624D\u0580DJSZacefios\u02A0\u02AC\u02B0\u02B4\u02B8\u02CB\u02D7\u02E1\u02E6\u0333\u048D\u0100;o\u0179\u02A5trahd;\u6911cy;\u4402cy;\u4405cy;\u440F\u0180grs\u02BF\u02C4\u02C7ger;\u6021r;\u61A1hv;\u6AE4\u0100ay\u02D0\u02D5ron;\u410E;\u4414l\u0100;t\u02DD\u02DE\u6207a;\u4394r;\uC000\u{1D507}\u0100af\u02EB\u0327\u0100cm\u02F0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031Ccute;\u40B4o\u0174\u030B\u030D;\u42D9bleAcute;\u42DDrave;\u4060ilde;\u42DCond;\u62C4ferentialD;\u6146\u0470\u033D\0\0\0\u0342\u0354\0\u0405f;\uC000\u{1D53B}\u0180;DE\u0348\u0349\u034D\u40A8ot;\u60DCqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03CF\u03E2\u03F8ontourIntegra\xEC\u0239o\u0274\u0379\0\0\u037B\xBB\u0349nArrow;\u61D3\u0100eo\u0387\u03A4ft\u0180ART\u0390\u0396\u03A1rrow;\u61D0ightArrow;\u61D4e\xE5\u02CAng\u0100LR\u03AB\u03C4eft\u0100AR\u03B3\u03B9rrow;\u67F8ightArrow;\u67FAightArrow;\u67F9ight\u0100AT\u03D8\u03DErrow;\u61D2ee;\u62A8p\u0241\u03E9\0\0\u03EFrrow;\u61D1ownArrow;\u61D5erticalBar;\u6225n\u0300ABLRTa\u0412\u042A\u0430\u045E\u047F\u037Crrow\u0180;BU\u041D\u041E\u0422\u6193ar;\u6913pArrow;\u61F5reve;\u4311eft\u02D2\u043A\0\u0446\0\u0450ightVector;\u6950eeVector;\u695Eector\u0100;B\u0459\u045A\u61BDar;\u6956ight\u01D4\u0467\0\u0471eeVector;\u695Fector\u0100;B\u047A\u047B\u61C1ar;\u6957ee\u0100;A\u0486\u0487\u62A4rrow;\u61A7\u0100ct\u0492\u0497r;\uC000\u{1D49F}rok;\u4110\u0800NTacdfglmopqstux\u04BD\u04C0\u04C4\u04CB\u04DE\u04E2\u04E7\u04EE\u04F5\u0521\u052F\u0536\u0552\u055D\u0560\u0565G;\u414AH\u803B\xD0\u40D0cute\u803B\xC9\u40C9\u0180aiy\u04D2\u04D7\u04DCron;\u411Arc\u803B\xCA\u40CA;\u442Dot;\u4116r;\uC000\u{1D508}rave\u803B\xC8\u40C8ement;\u6208\u0100ap\u04FA\u04FEcr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65FBerySmallSquare;\u65AB\u0100gp\u0526\u052Aon;\u4118f;\uC000\u{1D53C}silon;\u4395u\u0100ai\u053C\u0549l\u0100;T\u0542\u0543\u6A75ilde;\u6242librium;\u61CC\u0100ci\u0557\u055Ar;\u6130m;\u6A73a;\u4397ml\u803B\xCB\u40CB\u0100ip\u056A\u056Fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058D\u05B2\u05CCy;\u4424r;\uC000\u{1D509}lled\u0253\u0597\0\0\u05A3mallSquare;\u65FCerySmallSquare;\u65AA\u0370\u05BA\0\u05BF\0\0\u05C4f;\uC000\u{1D53D}All;\u6200riertrf;\u6131c\xF2\u05CB\u0600JTabcdfgorst\u05E8\u05EC\u05EF\u05FA\u0600\u0612\u0616\u061B\u061D\u0623\u066C\u0672cy;\u4403\u803B>\u403Emma\u0100;d\u05F7\u05F8\u4393;\u43DCreve;\u411E\u0180eiy\u0607\u060C\u0610dil;\u4122rc;\u411C;\u4413ot;\u4120r;\uC000\u{1D50A};\u62D9pf;\uC000\u{1D53E}eater\u0300EFGLST\u0635\u0644\u064E\u0656\u065B\u0666qual\u0100;L\u063E\u063F\u6265ess;\u62DBullEqual;\u6267reater;\u6AA2ess;\u6277lantEqual;\u6A7Eilde;\u6273cr;\uC000\u{1D4A2};\u626B\u0400Aacfiosu\u0685\u068B\u0696\u069B\u069E\u06AA\u06BE\u06CARDcy;\u442A\u0100ct\u0690\u0694ek;\u42C7;\u405Eirc;\u4124r;\u610ClbertSpace;\u610B\u01F0\u06AF\0\u06B2f;\u610DizontalLine;\u6500\u0100ct\u06C3\u06C5\xF2\u06A9rok;\u4126mp\u0144\u06D0\u06D8ownHum\xF0\u012Fqual;\u624F\u0700EJOacdfgmnostu\u06FA\u06FE\u0703\u0707\u070E\u071A\u071E\u0721\u0728\u0744\u0778\u078B\u078F\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803B\xCD\u40CD\u0100iy\u0713\u0718rc\u803B\xCE\u40CE;\u4418ot;\u4130r;\u6111rave\u803B\xCC\u40CC\u0180;ap\u0720\u072F\u073F\u0100cg\u0734\u0737r;\u412AinaryI;\u6148lie\xF3\u03DD\u01F4\u0749\0\u0762\u0100;e\u074D\u074E\u622C\u0100gr\u0753\u0758ral;\u622Bsection;\u62C2isible\u0100CT\u076C\u0772omma;\u6063imes;\u6062\u0180gpt\u077F\u0783\u0788on;\u412Ef;\uC000\u{1D540}a;\u4399cr;\u6110ilde;\u4128\u01EB\u079A\0\u079Ecy;\u4406l\u803B\xCF\u40CF\u0280cfosu\u07AC\u07B7\u07BC\u07C2\u07D0\u0100iy\u07B1\u07B5rc;\u4134;\u4419r;\uC000\u{1D50D}pf;\uC000\u{1D541}\u01E3\u07C7\0\u07CCr;\uC000\u{1D4A5}rcy;\u4408kcy;\u4404\u0380HJacfos\u07E4\u07E8\u07EC\u07F1\u07FD\u0802\u0808cy;\u4425cy;\u440Cppa;\u439A\u0100ey\u07F6\u07FBdil;\u4136;\u441Ar;\uC000\u{1D50E}pf;\uC000\u{1D542}cr;\uC000\u{1D4A6}\u0580JTaceflmost\u0825\u0829\u082C\u0850\u0863\u09B3\u09B8\u09C7\u09CD\u0A37\u0A47cy;\u4409\u803B<\u403C\u0280cmnpr\u0837\u083C\u0841\u0844\u084Dute;\u4139bda;\u439Bg;\u67EAlacetrf;\u6112r;\u619E\u0180aey\u0857\u085C\u0861ron;\u413Ddil;\u413B;\u441B\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087E\u08A9\u08B1\u08E0\u08E6\u08FC\u092F\u095B\u0390\u096A\u0100nr\u0883\u088FgleBracket;\u67E8row\u0180;BR\u0899\u089A\u089E\u6190ar;\u61E4ightArrow;\u61C6eiling;\u6308o\u01F5\u08B7\0\u08C3bleBracket;\u67E6n\u01D4\u08C8\0\u08D2eeVector;\u6961ector\u0100;B\u08DB\u08DC\u61C3ar;\u6959loor;\u630Aight\u0100AV\u08EF\u08F5rrow;\u6194ector;\u694E\u0100er\u0901\u0917e\u0180;AV\u0909\u090A\u0910\u62A3rrow;\u61A4ector;\u695Aiangle\u0180;BE\u0924\u0925\u0929\u62B2ar;\u69CFqual;\u62B4p\u0180DTV\u0937\u0942\u094CownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61BFar;\u6958ector\u0100;B\u0965\u0966\u61BCar;\u6952ight\xE1\u039Cs\u0300EFGLST\u097E\u098B\u0995\u099D\u09A2\u09ADqualGreater;\u62DAullEqual;\u6266reater;\u6276ess;\u6AA1lantEqual;\u6A7Dilde;\u6272r;\uC000\u{1D50F}\u0100;e\u09BD\u09BE\u62D8ftarrow;\u61DAidot;\u413F\u0180npw\u09D4\u0A16\u0A1Bg\u0200LRlr\u09DE\u09F7\u0A02\u0A10eft\u0100AR\u09E6\u09ECrrow;\u67F5ightArrow;\u67F7ightArrow;\u67F6eft\u0100ar\u03B3\u0A0Aight\xE1\u03BFight\xE1\u03CAf;\uC000\u{1D543}er\u0100LR\u0A22\u0A2CeftArrow;\u6199ightArrow;\u6198\u0180cht\u0A3E\u0A40\u0A42\xF2\u084C;\u61B0rok;\u4141;\u626A\u0400acefiosu\u0A5A\u0A5D\u0A60\u0A77\u0A7C\u0A85\u0A8B\u0A8Ep;\u6905y;\u441C\u0100dl\u0A65\u0A6FiumSpace;\u605Flintrf;\u6133r;\uC000\u{1D510}nusPlus;\u6213pf;\uC000\u{1D544}c\xF2\u0A76;\u439C\u0480Jacefostu\u0AA3\u0AA7\u0AAD\u0AC0\u0B14\u0B19\u0D91\u0D97\u0D9Ecy;\u440Acute;\u4143\u0180aey\u0AB4\u0AB9\u0ABEron;\u4147dil;\u4145;\u441D\u0180gsw\u0AC7\u0AF0\u0B0Eative\u0180MTV\u0AD3\u0ADF\u0AE8ediumSpace;\u600Bhi\u0100cn\u0AE6\u0AD8\xEB\u0AD9eryThi\xEE\u0AD9ted\u0100GL\u0AF8\u0B06reaterGreate\xF2\u0673essLes\xF3\u0A48Line;\u400Ar;\uC000\u{1D511}\u0200Bnpt\u0B22\u0B28\u0B37\u0B3Areak;\u6060BreakingSpace;\u40A0f;\u6115\u0680;CDEGHLNPRSTV\u0B55\u0B56\u0B6A\u0B7C\u0BA1\u0BEB\u0C04\u0C5E\u0C84\u0CA6\u0CD8\u0D61\u0D85\u6AEC\u0100ou\u0B5B\u0B64ngruent;\u6262pCap;\u626DoubleVerticalBar;\u6226\u0180lqx\u0B83\u0B8A\u0B9Bement;\u6209ual\u0100;T\u0B92\u0B93\u6260ilde;\uC000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0BB6\u0BB7\u0BBD\u0BC9\u0BD3\u0BD8\u0BE5\u626Fqual;\u6271ullEqual;\uC000\u2267\u0338reater;\uC000\u226B\u0338ess;\u6279lantEqual;\uC000\u2A7E\u0338ilde;\u6275ump\u0144\u0BF2\u0BFDownHump;\uC000\u224E\u0338qual;\uC000\u224F\u0338e\u0100fs\u0C0A\u0C27tTriangle\u0180;BE\u0C1A\u0C1B\u0C21\u62EAar;\uC000\u29CF\u0338qual;\u62ECs\u0300;EGLST\u0C35\u0C36\u0C3C\u0C44\u0C4B\u0C58\u626Equal;\u6270reater;\u6278ess;\uC000\u226A\u0338lantEqual;\uC000\u2A7D\u0338ilde;\u6274ested\u0100GL\u0C68\u0C79reaterGreater;\uC000\u2AA2\u0338essLess;\uC000\u2AA1\u0338recedes\u0180;ES\u0C92\u0C93\u0C9B\u6280qual;\uC000\u2AAF\u0338lantEqual;\u62E0\u0100ei\u0CAB\u0CB9verseElement;\u620CghtTriangle\u0180;BE\u0CCB\u0CCC\u0CD2\u62EBar;\uC000\u29D0\u0338qual;\u62ED\u0100qu\u0CDD\u0D0CuareSu\u0100bp\u0CE8\u0CF9set\u0100;E\u0CF0\u0CF3\uC000\u228F\u0338qual;\u62E2erset\u0100;E\u0D03\u0D06\uC000\u2290\u0338qual;\u62E3\u0180bcp\u0D13\u0D24\u0D4Eset\u0100;E\u0D1B\u0D1E\uC000\u2282\u20D2qual;\u6288ceeds\u0200;EST\u0D32\u0D33\u0D3B\u0D46\u6281qual;\uC000\u2AB0\u0338lantEqual;\u62E1ilde;\uC000\u227F\u0338erset\u0100;E\u0D58\u0D5B\uC000\u2283\u20D2qual;\u6289ilde\u0200;EFT\u0D6E\u0D6F\u0D75\u0D7F\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uC000\u{1D4A9}ilde\u803B\xD1\u40D1;\u439D\u0700Eacdfgmoprstuv\u0DBD\u0DC2\u0DC9\u0DD5\u0DDB\u0DE0\u0DE7\u0DFC\u0E02\u0E20\u0E22\u0E32\u0E3F\u0E44lig;\u4152cute\u803B\xD3\u40D3\u0100iy\u0DCE\u0DD3rc\u803B\xD4\u40D4;\u441Eblac;\u4150r;\uC000\u{1D512}rave\u803B\xD2\u40D2\u0180aei\u0DEE\u0DF2\u0DF6cr;\u414Cga;\u43A9cron;\u439Fpf;\uC000\u{1D546}enCurly\u0100DQ\u0E0E\u0E1AoubleQuote;\u601Cuote;\u6018;\u6A54\u0100cl\u0E27\u0E2Cr;\uC000\u{1D4AA}ash\u803B\xD8\u40D8i\u016C\u0E37\u0E3Cde\u803B\xD5\u40D5es;\u6A37ml\u803B\xD6\u40D6er\u0100BP\u0E4B\u0E60\u0100ar\u0E50\u0E53r;\u603Eac\u0100ek\u0E5A\u0E5C;\u63DEet;\u63B4arenthesis;\u63DC\u0480acfhilors\u0E7F\u0E87\u0E8A\u0E8F\u0E92\u0E94\u0E9D\u0EB0\u0EFCrtialD;\u6202y;\u441Fr;\uC000\u{1D513}i;\u43A6;\u43A0usMinus;\u40B1\u0100ip\u0EA2\u0EADncareplan\xE5\u069Df;\u6119\u0200;eio\u0EB9\u0EBA\u0EE0\u0EE4\u6ABBcedes\u0200;EST\u0EC8\u0EC9\u0ECF\u0EDA\u627Aqual;\u6AAFlantEqual;\u627Cilde;\u627Eme;\u6033\u0100dp\u0EE9\u0EEEuct;\u620Fortion\u0100;a\u0225\u0EF9l;\u621D\u0100ci\u0F01\u0F06r;\uC000\u{1D4AB};\u43A8\u0200Ufos\u0F11\u0F16\u0F1B\u0F1FOT\u803B"\u4022r;\uC000\u{1D514}pf;\u611Acr;\uC000\u{1D4AC}\u0600BEacefhiorsu\u0F3E\u0F43\u0F47\u0F60\u0F73\u0FA7\u0FAA\u0FAD\u1096\u10A9\u10B4\u10BEarr;\u6910G\u803B\xAE\u40AE\u0180cnr\u0F4E\u0F53\u0F56ute;\u4154g;\u67EBr\u0100;t\u0F5C\u0F5D\u61A0l;\u6916\u0180aey\u0F67\u0F6C\u0F71ron;\u4158dil;\u4156;\u4420\u0100;v\u0F78\u0F79\u611Cerse\u0100EU\u0F82\u0F99\u0100lq\u0F87\u0F8Eement;\u620Builibrium;\u61CBpEquilibrium;\u696Fr\xBB\u0F79o;\u43A1ght\u0400ACDFTUVa\u0FC1\u0FEB\u0FF3\u1022\u1028\u105B\u1087\u03D8\u0100nr\u0FC6\u0FD2gleBracket;\u67E9row\u0180;BL\u0FDC\u0FDD\u0FE1\u6192ar;\u61E5eftArrow;\u61C4eiling;\u6309o\u01F5\u0FF9\0\u1005bleBracket;\u67E7n\u01D4\u100A\0\u1014eeVector;\u695Dector\u0100;B\u101D\u101E\u61C2ar;\u6955loor;\u630B\u0100er\u102D\u1043e\u0180;AV\u1035\u1036\u103C\u62A2rrow;\u61A6ector;\u695Biangle\u0180;BE\u1050\u1051\u1055\u62B3ar;\u69D0qual;\u62B5p\u0180DTV\u1063\u106E\u1078ownVector;\u694FeeVector;\u695Cector\u0100;B\u1082\u1083\u61BEar;\u6954ector\u0100;B\u1091\u1092\u61C0ar;\u6953\u0100pu\u109B\u109Ef;\u611DndImplies;\u6970ightarrow;\u61DB\u0100ch\u10B9\u10BCr;\u611B;\u61B1leDelayed;\u69F4\u0680HOacfhimoqstu\u10E4\u10F1\u10F7\u10FD\u1119\u111E\u1151\u1156\u1161\u1167\u11B5\u11BB\u11BF\u0100Cc\u10E9\u10EEHcy;\u4429y;\u4428FTcy;\u442Ccute;\u415A\u0280;aeiy\u1108\u1109\u110E\u1113\u1117\u6ABCron;\u4160dil;\u415Erc;\u415C;\u4421r;\uC000\u{1D516}ort\u0200DLRU\u112A\u1134\u113E\u1149ownArrow\xBB\u041EeftArrow\xBB\u089AightArrow\xBB\u0FDDpArrow;\u6191gma;\u43A3allCircle;\u6218pf;\uC000\u{1D54A}\u0272\u116D\0\0\u1170t;\u621Aare\u0200;ISU\u117B\u117C\u1189\u11AF\u65A1ntersection;\u6293u\u0100bp\u118F\u119Eset\u0100;E\u1197\u1198\u628Fqual;\u6291erset\u0100;E\u11A8\u11A9\u6290qual;\u6292nion;\u6294cr;\uC000\u{1D4AE}ar;\u62C6\u0200bcmp\u11C8\u11DB\u1209\u120B\u0100;s\u11CD\u11CE\u62D0et\u0100;E\u11CD\u11D5qual;\u6286\u0100ch\u11E0\u1205eeds\u0200;EST\u11ED\u11EE\u11F4\u11FF\u627Bqual;\u6AB0lantEqual;\u627Dilde;\u627FTh\xE1\u0F8C;\u6211\u0180;es\u1212\u1213\u1223\u62D1rset\u0100;E\u121C\u121D\u6283qual;\u6287et\xBB\u1213\u0580HRSacfhiors\u123E\u1244\u1249\u1255\u125E\u1271\u1276\u129F\u12C2\u12C8\u12D1ORN\u803B\xDE\u40DEADE;\u6122\u0100Hc\u124E\u1252cy;\u440By;\u4426\u0100bu\u125A\u125C;\u4009;\u43A4\u0180aey\u1265\u126A\u126Fron;\u4164dil;\u4162;\u4422r;\uC000\u{1D517}\u0100ei\u127B\u1289\u01F2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128E\u1298kSpace;\uC000\u205F\u200ASpace;\u6009lde\u0200;EFT\u12AB\u12AC\u12B2\u12BC\u623Cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uC000\u{1D54B}ipleDot;\u60DB\u0100ct\u12D6\u12DBr;\uC000\u{1D4AF}rok;\u4166\u0AE1\u12F7\u130E\u131A\u1326\0\u132C\u1331\0\0\0\0\0\u1338\u133D\u1377\u1385\0\u13FF\u1404\u140A\u1410\u0100cr\u12FB\u1301ute\u803B\xDA\u40DAr\u0100;o\u1307\u1308\u619Fcir;\u6949r\u01E3\u1313\0\u1316y;\u440Eve;\u416C\u0100iy\u131E\u1323rc\u803B\xDB\u40DB;\u4423blac;\u4170r;\uC000\u{1D518}rave\u803B\xD9\u40D9acr;\u416A\u0100di\u1341\u1369er\u0100BP\u1348\u135D\u0100ar\u134D\u1350r;\u405Fac\u0100ek\u1357\u1359;\u63DFet;\u63B5arenthesis;\u63DDon\u0100;P\u1370\u1371\u62C3lus;\u628E\u0100gp\u137B\u137Fon;\u4172f;\uC000\u{1D54C}\u0400ADETadps\u1395\u13AE\u13B8\u13C4\u03E8\u13D2\u13D7\u13F3rrow\u0180;BD\u1150\u13A0\u13A4ar;\u6912ownArrow;\u61C5ownArrow;\u6195quilibrium;\u696Eee\u0100;A\u13CB\u13CC\u62A5rrow;\u61A5own\xE1\u03F3er\u0100LR\u13DE\u13E8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13F9\u13FA\u43D2on;\u43A5ing;\u416Ecr;\uC000\u{1D4B0}ilde;\u4168ml\u803B\xDC\u40DC\u0480Dbcdefosv\u1427\u142C\u1430\u1433\u143E\u1485\u148A\u1490\u1496ash;\u62ABar;\u6AEBy;\u4412ash\u0100;l\u143B\u143C\u62A9;\u6AE6\u0100er\u1443\u1445;\u62C1\u0180bty\u144C\u1450\u147Aar;\u6016\u0100;i\u144F\u1455cal\u0200BLST\u1461\u1465\u146A\u1474ar;\u6223ine;\u407Ceparator;\u6758ilde;\u6240ThinSpace;\u600Ar;\uC000\u{1D519}pf;\uC000\u{1D54D}cr;\uC000\u{1D4B1}dash;\u62AA\u0280cefos\u14A7\u14AC\u14B1\u14B6\u14BCirc;\u4174dge;\u62C0r;\uC000\u{1D51A}pf;\uC000\u{1D54E}cr;\uC000\u{1D4B2}\u0200fios\u14CB\u14D0\u14D2\u14D8r;\uC000\u{1D51B};\u439Epf;\uC000\u{1D54F}cr;\uC000\u{1D4B3}\u0480AIUacfosu\u14F1\u14F5\u14F9\u14FD\u1504\u150F\u1514\u151A\u1520cy;\u442Fcy;\u4407cy;\u442Ecute\u803B\xDD\u40DD\u0100iy\u1509\u150Drc;\u4176;\u442Br;\uC000\u{1D51C}pf;\uC000\u{1D550}cr;\uC000\u{1D4B4}ml;\u4178\u0400Hacdefos\u1535\u1539\u153F\u154B\u154F\u155D\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417D;\u4417ot;\u417B\u01F2\u1554\0\u155BoWidt\xE8\u0AD9a;\u4396r;\u6128pf;\u6124cr;\uC000\u{1D4B5}\u0BE1\u1583\u158A\u1590\0\u15B0\u15B6\u15BF\0\0\0\0\u15C6\u15DB\u15EB\u165F\u166D\0\u1695\u169B\u16B2\u16B9\0\u16BEcute\u803B\xE1\u40E1reve;\u4103\u0300;Ediuy\u159C\u159D\u15A1\u15A3\u15A8\u15AD\u623E;\uC000\u223E\u0333;\u623Frc\u803B\xE2\u40E2te\u80BB\xB4\u0306;\u4430lig\u803B\xE6\u40E6\u0100;r\xB2\u15BA;\uC000\u{1D51E}rave\u803B\xE0\u40E0\u0100ep\u15CA\u15D6\u0100fp\u15CF\u15D4sym;\u6135\xE8\u15D3ha;\u43B1\u0100ap\u15DFc\u0100cl\u15E4\u15E7r;\u4101g;\u6A3F\u0264\u15F0\0\0\u160A\u0280;adsv\u15FA\u15FB\u15FF\u1601\u1607\u6227nd;\u6A55;\u6A5Clope;\u6A58;\u6A5A\u0380;elmrsz\u1618\u1619\u161B\u161E\u163F\u164F\u1659\u6220;\u69A4e\xBB\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163A\u163C\u163E;\u69A8;\u69A9;\u69AA;\u69AB;\u69AC;\u69AD;\u69AE;\u69AFt\u0100;v\u1645\u1646\u621Fb\u0100;d\u164C\u164D\u62BE;\u699D\u0100pt\u1654\u1657h;\u6222\xBB\xB9arr;\u637C\u0100gp\u1663\u1667on;\u4105f;\uC000\u{1D552}\u0380;Eaeiop\u12C1\u167B\u167D\u1682\u1684\u1687\u168A;\u6A70cir;\u6A6F;\u624Ad;\u624Bs;\u4027rox\u0100;e\u12C1\u1692\xF1\u1683ing\u803B\xE5\u40E5\u0180cty\u16A1\u16A6\u16A8r;\uC000\u{1D4B6};\u402Amp\u0100;e\u12C1\u16AF\xF1\u0288ilde\u803B\xE3\u40E3ml\u803B\xE4\u40E4\u0100ci\u16C2\u16C8onin\xF4\u0272nt;\u6A11\u0800Nabcdefiklnoprsu\u16ED\u16F1\u1730\u173C\u1743\u1748\u1778\u177D\u17E0\u17E6\u1839\u1850\u170D\u193D\u1948\u1970ot;\u6AED\u0100cr\u16F6\u171Ek\u0200ceps\u1700\u1705\u170D\u1713ong;\u624Cpsilon;\u43F6rime;\u6035im\u0100;e\u171A\u171B\u623Dq;\u62CD\u0176\u1722\u1726ee;\u62BDed\u0100;g\u172C\u172D\u6305e\xBB\u172Drk\u0100;t\u135C\u1737brk;\u63B6\u0100oy\u1701\u1741;\u4431quo;\u601E\u0280cmprt\u1753\u175B\u1761\u1764\u1768aus\u0100;e\u010A\u0109ptyv;\u69B0s\xE9\u170Cno\xF5\u0113\u0180ahw\u176F\u1771\u1773;\u43B2;\u6136een;\u626Cr;\uC000\u{1D51F}g\u0380costuvw\u178D\u179D\u17B3\u17C1\u17D5\u17DB\u17DE\u0180aiu\u1794\u1796\u179A\xF0\u0760rc;\u65EFp\xBB\u1371\u0180dpt\u17A4\u17A8\u17ADot;\u6A00lus;\u6A01imes;\u6A02\u0271\u17B9\0\0\u17BEcup;\u6A06ar;\u6605riangle\u0100du\u17CD\u17D2own;\u65BDp;\u65B3plus;\u6A04e\xE5\u1444\xE5\u14ADarow;\u690D\u0180ako\u17ED\u1826\u1835\u0100cn\u17F2\u1823k\u0180lst\u17FA\u05AB\u1802ozenge;\u69EBriangle\u0200;dlr\u1812\u1813\u1818\u181D\u65B4own;\u65BEeft;\u65C2ight;\u65B8k;\u6423\u01B1\u182B\0\u1833\u01B2\u182F\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183E\u184D\u0100;q\u1843\u1846\uC000=\u20E5uiv;\uC000\u2261\u20E5t;\u6310\u0200ptwx\u1859\u185E\u1867\u186Cf;\uC000\u{1D553}\u0100;t\u13CB\u1863om\xBB\u13CCtie;\u62C8\u0600DHUVbdhmptuv\u1885\u1896\u18AA\u18BB\u18D7\u18DB\u18EC\u18FF\u1905\u190A\u1910\u1921\u0200LRlr\u188E\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18A1\u18A2\u18A4\u18A6\u18A8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18B3\u18B5\u18B7\u18B9;\u655D;\u655A;\u655C;\u6559\u0380;HLRhlr\u18CA\u18CB\u18CD\u18CF\u18D1\u18D3\u18D5\u6551;\u656C;\u6563;\u6560;\u656B;\u6562;\u655Fox;\u69C9\u0200LRlr\u18E4\u18E6\u18E8\u18EA;\u6555;\u6552;\u6510;\u650C\u0280;DUdu\u06BD\u18F7\u18F9\u18FB\u18FD;\u6565;\u6568;\u652C;\u6534inus;\u629Flus;\u629Eimes;\u62A0\u0200LRlr\u1919\u191B\u191D\u191F;\u655B;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193B\u6502;\u656A;\u6561;\u655E;\u653C;\u6524;\u651C\u0100ev\u0123\u1942bar\u803B\xA6\u40A6\u0200ceio\u1951\u1956\u195A\u1960r;\uC000\u{1D4B7}mi;\u604Fm\u0100;e\u171A\u171Cl\u0180;bh\u1968\u1969\u196B\u405C;\u69C5sub;\u67C8\u016C\u1974\u197El\u0100;e\u1979\u197A\u6022t\xBB\u197Ap\u0180;Ee\u012F\u1985\u1987;\u6AAE\u0100;q\u06DC\u06DB\u0CE1\u19A7\0\u19E8\u1A11\u1A15\u1A32\0\u1A37\u1A50\0\0\u1AB4\0\0\u1AC1\0\0\u1B21\u1B2E\u1B4D\u1B52\0\u1BFD\0\u1C0C\u0180cpr\u19AD\u19B2\u19DDute;\u4107\u0300;abcds\u19BF\u19C0\u19C4\u19CA\u19D5\u19D9\u6229nd;\u6A44rcup;\u6A49\u0100au\u19CF\u19D2p;\u6A4Bp;\u6A47ot;\u6A40;\uC000\u2229\uFE00\u0100eo\u19E2\u19E5t;\u6041\xEE\u0693\u0200aeiu\u19F0\u19FB\u1A01\u1A05\u01F0\u19F5\0\u19F8s;\u6A4Don;\u410Ddil\u803B\xE7\u40E7rc;\u4109ps\u0100;s\u1A0C\u1A0D\u6A4Cm;\u6A50ot;\u410B\u0180dmn\u1A1B\u1A20\u1A26il\u80BB\xB8\u01ADptyv;\u69B2t\u8100\xA2;e\u1A2D\u1A2E\u40A2r\xE4\u01B2r;\uC000\u{1D520}\u0180cei\u1A3D\u1A40\u1A4Dy;\u4447ck\u0100;m\u1A47\u1A48\u6713ark\xBB\u1A48;\u43C7r\u0380;Ecefms\u1A5F\u1A60\u1A62\u1A6B\u1AA4\u1AAA\u1AAE\u65CB;\u69C3\u0180;el\u1A69\u1A6A\u1A6D\u42C6q;\u6257e\u0261\u1A74\0\0\u1A88rrow\u0100lr\u1A7C\u1A81eft;\u61BAight;\u61BB\u0280RSacd\u1A92\u1A94\u1A96\u1A9A\u1A9F\xBB\u0F47;\u64C8st;\u629Birc;\u629Aash;\u629Dnint;\u6A10id;\u6AEFcir;\u69C2ubs\u0100;u\u1ABB\u1ABC\u6663it\xBB\u1ABC\u02EC\u1AC7\u1AD4\u1AFA\0\u1B0Aon\u0100;e\u1ACD\u1ACE\u403A\u0100;q\xC7\xC6\u026D\u1AD9\0\0\u1AE2a\u0100;t\u1ADE\u1ADF\u402C;\u4040\u0180;fl\u1AE8\u1AE9\u1AEB\u6201\xEE\u1160e\u0100mx\u1AF1\u1AF6ent\xBB\u1AE9e\xF3\u024D\u01E7\u1AFE\0\u1B07\u0100;d\u12BB\u1B02ot;\u6A6Dn\xF4\u0246\u0180fry\u1B10\u1B14\u1B17;\uC000\u{1D554}o\xE4\u0254\u8100\xA9;s\u0155\u1B1Dr;\u6117\u0100ao\u1B25\u1B29rr;\u61B5ss;\u6717\u0100cu\u1B32\u1B37r;\uC000\u{1D4B8}\u0100bp\u1B3C\u1B44\u0100;e\u1B41\u1B42\u6ACF;\u6AD1\u0100;e\u1B49\u1B4A\u6AD0;\u6AD2dot;\u62EF\u0380delprvw\u1B60\u1B6C\u1B77\u1B82\u1BAC\u1BD4\u1BF9arr\u0100lr\u1B68\u1B6A;\u6938;\u6935\u0270\u1B72\0\0\u1B75r;\u62DEc;\u62DFarr\u0100;p\u1B7F\u1B80\u61B6;\u693D\u0300;bcdos\u1B8F\u1B90\u1B96\u1BA1\u1BA5\u1BA8\u622Arcap;\u6A48\u0100au\u1B9B\u1B9Ep;\u6A46p;\u6A4Aot;\u628Dr;\u6A45;\uC000\u222A\uFE00\u0200alrv\u1BB5\u1BBF\u1BDE\u1BE3rr\u0100;m\u1BBC\u1BBD\u61B7;\u693Cy\u0180evw\u1BC7\u1BD4\u1BD8q\u0270\u1BCE\0\0\u1BD2re\xE3\u1B73u\xE3\u1B75ee;\u62CEedge;\u62CFen\u803B\xA4\u40A4earrow\u0100lr\u1BEE\u1BF3eft\xBB\u1B80ight\xBB\u1BBDe\xE4\u1BDD\u0100ci\u1C01\u1C07onin\xF4\u01F7nt;\u6231lcty;\u632D\u0980AHabcdefhijlorstuwz\u1C38\u1C3B\u1C3F\u1C5D\u1C69\u1C75\u1C8A\u1C9E\u1CAC\u1CB7\u1CFB\u1CFF\u1D0D\u1D7B\u1D91\u1DAB\u1DBB\u1DC6\u1DCDr\xF2\u0381ar;\u6965\u0200glrs\u1C48\u1C4D\u1C52\u1C54ger;\u6020eth;\u6138\xF2\u1133h\u0100;v\u1C5A\u1C5B\u6010\xBB\u090A\u016B\u1C61\u1C67arow;\u690Fa\xE3\u0315\u0100ay\u1C6E\u1C73ron;\u410F;\u4434\u0180;ao\u0332\u1C7C\u1C84\u0100gr\u02BF\u1C81r;\u61CAtseq;\u6A77\u0180glm\u1C91\u1C94\u1C98\u803B\xB0\u40B0ta;\u43B4ptyv;\u69B1\u0100ir\u1CA3\u1CA8sht;\u697F;\uC000\u{1D521}ar\u0100lr\u1CB3\u1CB5\xBB\u08DC\xBB\u101E\u0280aegsv\u1CC2\u0378\u1CD6\u1CDC\u1CE0m\u0180;os\u0326\u1CCA\u1CD4nd\u0100;s\u0326\u1CD1uit;\u6666amma;\u43DDin;\u62F2\u0180;io\u1CE7\u1CE8\u1CF8\u40F7de\u8100\xF7;o\u1CE7\u1CF0ntimes;\u62C7n\xF8\u1CF7cy;\u4452c\u026F\u1D06\0\0\u1D0Arn;\u631Eop;\u630D\u0280lptuw\u1D18\u1D1D\u1D22\u1D49\u1D55lar;\u4024f;\uC000\u{1D555}\u0280;emps\u030B\u1D2D\u1D37\u1D3D\u1D42q\u0100;d\u0352\u1D33ot;\u6251inus;\u6238lus;\u6214quare;\u62A1blebarwedg\xE5\xFAn\u0180adh\u112E\u1D5D\u1D67ownarrow\xF3\u1C83arpoon\u0100lr\u1D72\u1D76ef\xF4\u1CB4igh\xF4\u1CB6\u0162\u1D7F\u1D85karo\xF7\u0F42\u026F\u1D8A\0\0\u1D8Ern;\u631Fop;\u630C\u0180cot\u1D98\u1DA3\u1DA6\u0100ry\u1D9D\u1DA1;\uC000\u{1D4B9};\u4455l;\u69F6rok;\u4111\u0100dr\u1DB0\u1DB4ot;\u62F1i\u0100;f\u1DBA\u1816\u65BF\u0100ah\u1DC0\u1DC3r\xF2\u0429a\xF2\u0FA6angle;\u69A6\u0100ci\u1DD2\u1DD5y;\u445Fgrarr;\u67FF\u0900Dacdefglmnopqrstux\u1E01\u1E09\u1E19\u1E38\u0578\u1E3C\u1E49\u1E61\u1E7E\u1EA5\u1EAF\u1EBD\u1EE1\u1F2A\u1F37\u1F44\u1F4E\u1F5A\u0100Do\u1E06\u1D34o\xF4\u1C89\u0100cs\u1E0E\u1E14ute\u803B\xE9\u40E9ter;\u6A6E\u0200aioy\u1E22\u1E27\u1E31\u1E36ron;\u411Br\u0100;c\u1E2D\u1E2E\u6256\u803B\xEA\u40EAlon;\u6255;\u444Dot;\u4117\u0100Dr\u1E41\u1E45ot;\u6252;\uC000\u{1D522}\u0180;rs\u1E50\u1E51\u1E57\u6A9Aave\u803B\xE8\u40E8\u0100;d\u1E5C\u1E5D\u6A96ot;\u6A98\u0200;ils\u1E6A\u1E6B\u1E72\u1E74\u6A99nters;\u63E7;\u6113\u0100;d\u1E79\u1E7A\u6A95ot;\u6A97\u0180aps\u1E85\u1E89\u1E97cr;\u4113ty\u0180;sv\u1E92\u1E93\u1E95\u6205et\xBB\u1E93p\u01001;\u1E9D\u1EA4\u0133\u1EA1\u1EA3;\u6004;\u6005\u6003\u0100gs\u1EAA\u1EAC;\u414Bp;\u6002\u0100gp\u1EB4\u1EB8on;\u4119f;\uC000\u{1D556}\u0180als\u1EC4\u1ECE\u1ED2r\u0100;s\u1ECA\u1ECB\u62D5l;\u69E3us;\u6A71i\u0180;lv\u1EDA\u1EDB\u1EDF\u43B5on\xBB\u1EDB;\u43F5\u0200csuv\u1EEA\u1EF3\u1F0B\u1F23\u0100io\u1EEF\u1E31rc\xBB\u1E2E\u0269\u1EF9\0\0\u1EFB\xED\u0548ant\u0100gl\u1F02\u1F06tr\xBB\u1E5Dess\xBB\u1E7A\u0180aei\u1F12\u1F16\u1F1Als;\u403Dst;\u625Fv\u0100;D\u0235\u1F20D;\u6A78parsl;\u69E5\u0100Da\u1F2F\u1F33ot;\u6253rr;\u6971\u0180cdi\u1F3E\u1F41\u1EF8r;\u612Fo\xF4\u0352\u0100ah\u1F49\u1F4B;\u43B7\u803B\xF0\u40F0\u0100mr\u1F53\u1F57l\u803B\xEB\u40EBo;\u60AC\u0180cip\u1F61\u1F64\u1F67l;\u4021s\xF4\u056E\u0100eo\u1F6C\u1F74ctatio\xEE\u0559nential\xE5\u0579\u09E1\u1F92\0\u1F9E\0\u1FA1\u1FA7\0\0\u1FC6\u1FCC\0\u1FD3\0\u1FE6\u1FEA\u2000\0\u2008\u205Allingdotse\xF1\u1E44y;\u4444male;\u6640\u0180ilr\u1FAD\u1FB3\u1FC1lig;\u8000\uFB03\u0269\u1FB9\0\0\u1FBDg;\u8000\uFB00ig;\u8000\uFB04;\uC000\u{1D523}lig;\u8000\uFB01lig;\uC000fj\u0180alt\u1FD9\u1FDC\u1FE1t;\u666Dig;\u8000\uFB02ns;\u65B1of;\u4192\u01F0\u1FEE\0\u1FF3f;\uC000\u{1D557}\u0100ak\u05BF\u1FF7\u0100;v\u1FFC\u1FFD\u62D4;\u6AD9artint;\u6A0D\u0100ao\u200C\u2055\u0100cs\u2011\u2052\u03B1\u201A\u2030\u2038\u2045\u2048\0\u2050\u03B2\u2022\u2025\u2027\u202A\u202C\0\u202E\u803B\xBD\u40BD;\u6153\u803B\xBC\u40BC;\u6155;\u6159;\u615B\u01B3\u2034\0\u2036;\u6154;\u6156\u02B4\u203E\u2041\0\0\u2043\u803B\xBE\u40BE;\u6157;\u615C5;\u6158\u01B6\u204C\0\u204E;\u615A;\u615D8;\u615El;\u6044wn;\u6322cr;\uC000\u{1D4BB}\u0880Eabcdefgijlnorstv\u2082\u2089\u209F\u20A5\u20B0\u20B4\u20F0\u20F5\u20FA\u20FF\u2103\u2112\u2138\u0317\u213E\u2152\u219E\u0100;l\u064D\u2087;\u6A8C\u0180cmp\u2090\u2095\u209Dute;\u41F5ma\u0100;d\u209C\u1CDA\u43B3;\u6A86reve;\u411F\u0100iy\u20AA\u20AErc;\u411D;\u4433ot;\u4121\u0200;lqs\u063E\u0642\u20BD\u20C9\u0180;qs\u063E\u064C\u20C4lan\xF4\u0665\u0200;cdl\u0665\u20D2\u20D5\u20E5c;\u6AA9ot\u0100;o\u20DC\u20DD\u6A80\u0100;l\u20E2\u20E3\u6A82;\u6A84\u0100;e\u20EA\u20ED\uC000\u22DB\uFE00s;\u6A94r;\uC000\u{1D524}\u0100;g\u0673\u061Bmel;\u6137cy;\u4453\u0200;Eaj\u065A\u210C\u210E\u2110;\u6A92;\u6AA5;\u6AA4\u0200Eaes\u211B\u211D\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6A8Arox\xBB\u2124\u0100;q\u212E\u212F\u6A88\u0100;q\u212E\u211Bim;\u62E7pf;\uC000\u{1D558}\u0100ci\u2143\u2146r;\u610Am\u0180;el\u066B\u214E\u2150;\u6A8E;\u6A90\u8300>;cdlqr\u05EE\u2160\u216A\u216E\u2173\u2179\u0100ci\u2165\u2167;\u6AA7r;\u6A7Aot;\u62D7Par;\u6995uest;\u6A7C\u0280adels\u2184\u216A\u2190\u0656\u219B\u01F0\u2189\0\u218Epro\xF8\u209Er;\u6978q\u0100lq\u063F\u2196les\xF3\u2088i\xED\u066B\u0100en\u21A3\u21ADrtneqq;\uC000\u2269\uFE00\xC5\u21AA\u0500Aabcefkosy\u21C4\u21C7\u21F1\u21F5\u21FA\u2218\u221D\u222F\u2268\u227Dr\xF2\u03A0\u0200ilmr\u21D0\u21D4\u21D7\u21DBrs\xF0\u1484f\xBB\u2024il\xF4\u06A9\u0100dr\u21E0\u21E4cy;\u444A\u0180;cw\u08F4\u21EB\u21EFir;\u6948;\u61ADar;\u610Firc;\u4125\u0180alr\u2201\u220E\u2213rts\u0100;u\u2209\u220A\u6665it\xBB\u220Alip;\u6026con;\u62B9r;\uC000\u{1D525}s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223A\u223E\u2243\u225E\u2263rr;\u61FFtht;\u623Bk\u0100lr\u2249\u2253eftarrow;\u61A9ightarrow;\u61AAf;\uC000\u{1D559}bar;\u6015\u0180clt\u226F\u2274\u2278r;\uC000\u{1D4BD}as\xE8\u21F4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xBB\u1C5B\u0AE1\u22A3\0\u22AA\0\u22B8\u22C5\u22CE\0\u22D5\u22F3\0\0\u22F8\u2322\u2367\u2362\u237F\0\u2386\u23AA\u23B4cute\u803B\xED\u40ED\u0180;iy\u0771\u22B0\u22B5rc\u803B\xEE\u40EE;\u4438\u0100cx\u22BC\u22BFy;\u4435cl\u803B\xA1\u40A1\u0100fr\u039F\u22C9;\uC000\u{1D526}rave\u803B\xEC\u40EC\u0200;ino\u073E\u22DD\u22E9\u22EE\u0100in\u22E2\u22E6nt;\u6A0Ct;\u622Dfin;\u69DCta;\u6129lig;\u4133\u0180aop\u22FE\u231A\u231D\u0180cgt\u2305\u2308\u2317r;\u412B\u0180elp\u071F\u230F\u2313in\xE5\u078Ear\xF4\u0720h;\u4131f;\u62B7ed;\u41B5\u0280;cfot\u04F4\u232C\u2331\u233D\u2341are;\u6105in\u0100;t\u2338\u2339\u621Eie;\u69DDdo\xF4\u2319\u0280;celp\u0757\u234C\u2350\u235B\u2361al;\u62BA\u0100gr\u2355\u2359er\xF3\u1563\xE3\u234Darhk;\u6A17rod;\u6A3C\u0200cgpt\u236F\u2372\u2376\u237By;\u4451on;\u412Ff;\uC000\u{1D55A}a;\u43B9uest\u803B\xBF\u40BF\u0100ci\u238A\u238Fr;\uC000\u{1D4BE}n\u0280;Edsv\u04F4\u239B\u239D\u23A1\u04F3;\u62F9ot;\u62F5\u0100;v\u23A6\u23A7\u62F4;\u62F3\u0100;i\u0777\u23AElde;\u4129\u01EB\u23B8\0\u23BCcy;\u4456l\u803B\xEF\u40EF\u0300cfmosu\u23CC\u23D7\u23DC\u23E1\u23E7\u23F5\u0100iy\u23D1\u23D5rc;\u4135;\u4439r;\uC000\u{1D527}ath;\u4237pf;\uC000\u{1D55B}\u01E3\u23EC\0\u23F1r;\uC000\u{1D4BF}rcy;\u4458kcy;\u4454\u0400acfghjos\u240B\u2416\u2422\u2427\u242D\u2431\u2435\u243Bppa\u0100;v\u2413\u2414\u43BA;\u43F0\u0100ey\u241B\u2420dil;\u4137;\u443Ar;\uC000\u{1D528}reen;\u4138cy;\u4445cy;\u445Cpf;\uC000\u{1D55C}cr;\uC000\u{1D4C0}\u0B80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248D\u2491\u250E\u253D\u255A\u2580\u264E\u265E\u2665\u2679\u267D\u269A\u26B2\u26D8\u275D\u2768\u278B\u27C0\u2801\u2812\u0180art\u2477\u247A\u247Cr\xF2\u09C6\xF2\u0395ail;\u691Barr;\u690E\u0100;g\u0994\u248B;\u6A8Bar;\u6962\u0963\u24A5\0\u24AA\0\u24B1\0\0\0\0\0\u24B5\u24BA\0\u24C6\u24C8\u24CD\0\u24F9ute;\u413Amptyv;\u69B4ra\xEE\u084Cbda;\u43BBg\u0180;dl\u088E\u24C1\u24C3;\u6991\xE5\u088E;\u6A85uo\u803B\xAB\u40ABr\u0400;bfhlpst\u0899\u24DE\u24E6\u24E9\u24EB\u24EE\u24F1\u24F5\u0100;f\u089D\u24E3s;\u691Fs;\u691D\xEB\u2252p;\u61ABl;\u6939im;\u6973l;\u61A2\u0180;ae\u24FF\u2500\u2504\u6AABil;\u6919\u0100;s\u2509\u250A\u6AAD;\uC000\u2AAD\uFE00\u0180abr\u2515\u2519\u251Drr;\u690Crk;\u6772\u0100ak\u2522\u252Cc\u0100ek\u2528\u252A;\u407B;\u405B\u0100es\u2531\u2533;\u698Bl\u0100du\u2539\u253B;\u698F;\u698D\u0200aeuy\u2546\u254B\u2556\u2558ron;\u413E\u0100di\u2550\u2554il;\u413C\xEC\u08B0\xE2\u2529;\u443B\u0200cqrs\u2563\u2566\u256D\u257Da;\u6936uo\u0100;r\u0E19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694Bh;\u61B2\u0280;fgqs\u258B\u258C\u0989\u25F3\u25FF\u6264t\u0280ahlrt\u2598\u25A4\u25B7\u25C2\u25E8rrow\u0100;t\u0899\u25A1a\xE9\u24F6arpoon\u0100du\u25AF\u25B4own\xBB\u045Ap\xBB\u0966eftarrows;\u61C7ight\u0180ahs\u25CD\u25D6\u25DErrow\u0100;s\u08F4\u08A7arpoon\xF3\u0F98quigarro\xF7\u21F0hreetimes;\u62CB\u0180;qs\u258B\u0993\u25FAlan\xF4\u09AC\u0280;cdgs\u09AC\u260A\u260D\u261D\u2628c;\u6AA8ot\u0100;o\u2614\u2615\u6A7F\u0100;r\u261A\u261B\u6A81;\u6A83\u0100;e\u2622\u2625\uC000\u22DA\uFE00s;\u6A93\u0280adegs\u2633\u2639\u263D\u2649\u264Bppro\xF8\u24C6ot;\u62D6q\u0100gq\u2643\u2645\xF4\u0989gt\xF2\u248C\xF4\u099Bi\xED\u09B2\u0180ilr\u2655\u08E1\u265Asht;\u697C;\uC000\u{1D529}\u0100;E\u099C\u2663;\u6A91\u0161\u2669\u2676r\u0100du\u25B2\u266E\u0100;l\u0965\u2673;\u696Alk;\u6584cy;\u4459\u0280;acht\u0A48\u2688\u268B\u2691\u2696r\xF2\u25C1orne\xF2\u1D08ard;\u696Bri;\u65FA\u0100io\u269F\u26A4dot;\u4140ust\u0100;a\u26AC\u26AD\u63B0che\xBB\u26AD\u0200Eaes\u26BB\u26BD\u26C9\u26D4;\u6268p\u0100;p\u26C3\u26C4\u6A89rox\xBB\u26C4\u0100;q\u26CE\u26CF\u6A87\u0100;q\u26CE\u26BBim;\u62E6\u0400abnoptwz\u26E9\u26F4\u26F7\u271A\u272F\u2741\u2747\u2750\u0100nr\u26EE\u26F1g;\u67ECr;\u61FDr\xEB\u08C1g\u0180lmr\u26FF\u270D\u2714eft\u0100ar\u09E6\u2707ight\xE1\u09F2apsto;\u67FCight\xE1\u09FDparrow\u0100lr\u2725\u2729ef\xF4\u24EDight;\u61AC\u0180afl\u2736\u2739\u273Dr;\u6985;\uC000\u{1D55D}us;\u6A2Dimes;\u6A34\u0161\u274B\u274Fst;\u6217\xE1\u134E\u0180;ef\u2757\u2758\u1800\u65CAnge\xBB\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277C\u2785\u2787r\xF2\u08A8orne\xF2\u1D8Car\u0100;d\u0F98\u2783;\u696D;\u600Eri;\u62BF\u0300achiqt\u2798\u279D\u0A40\u27A2\u27AE\u27BBquo;\u6039r;\uC000\u{1D4C1}m\u0180;eg\u09B2\u27AA\u27AC;\u6A8D;\u6A8F\u0100bu\u252A\u27B3o\u0100;r\u0E1F\u27B9;\u601Arok;\u4142\u8400<;cdhilqr\u082B\u27D2\u2639\u27DC\u27E0\u27E5\u27EA\u27F0\u0100ci\u27D7\u27D9;\u6AA6r;\u6A79re\xE5\u25F2mes;\u62C9arr;\u6976uest;\u6A7B\u0100Pi\u27F5\u27F9ar;\u6996\u0180;ef\u2800\u092D\u181B\u65C3r\u0100du\u2807\u280Dshar;\u694Ahar;\u6966\u0100en\u2817\u2821rtneqq;\uC000\u2268\uFE00\xC5\u281E\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288E\u2893\u28A0\u28A5\u28A8\u28DA\u28E2\u28E4\u0A83\u28F3\u2902Dot;\u623A\u0200clpr\u284E\u2852\u2863\u287Dr\u803B\xAF\u40AF\u0100et\u2857\u2859;\u6642\u0100;e\u285E\u285F\u6720se\xBB\u285F\u0100;s\u103B\u2868to\u0200;dlu\u103B\u2873\u2877\u287Bow\xEE\u048Cef\xF4\u090F\xF0\u13D1ker;\u65AE\u0100oy\u2887\u288Cmma;\u6A29;\u443Cash;\u6014asuredangle\xBB\u1626r;\uC000\u{1D52A}o;\u6127\u0180cdn\u28AF\u28B4\u28C9ro\u803B\xB5\u40B5\u0200;acd\u1464\u28BD\u28C0\u28C4s\xF4\u16A7ir;\u6AF0ot\u80BB\xB7\u01B5us\u0180;bd\u28D2\u1903\u28D3\u6212\u0100;u\u1D3C\u28D8;\u6A2A\u0163\u28DE\u28E1p;\u6ADB\xF2\u2212\xF0\u0A81\u0100dp\u28E9\u28EEels;\u62A7f;\uC000\u{1D55E}\u0100ct\u28F8\u28FDr;\uC000\u{1D4C2}pos\xBB\u159D\u0180;lm\u2909\u290A\u290D\u43BCtimap;\u62B8\u0C00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297E\u2989\u2998\u29DA\u29E9\u2A15\u2A1A\u2A58\u2A5D\u2A83\u2A95\u2AA4\u2AA8\u2B04\u2B07\u2B44\u2B7F\u2BAE\u2C34\u2C67\u2C7C\u2CE9\u0100gt\u2947\u294B;\uC000\u22D9\u0338\u0100;v\u2950\u0BCF\uC000\u226B\u20D2\u0180elt\u295A\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61CDightarrow;\u61CE;\uC000\u22D8\u0338\u0100;v\u297B\u0C47\uC000\u226A\u20D2ightarrow;\u61CF\u0100Dd\u298E\u2993ash;\u62AFash;\u62AE\u0280bcnpt\u29A3\u29A7\u29AC\u29B1\u29CCla\xBB\u02DEute;\u4144g;\uC000\u2220\u20D2\u0280;Eiop\u0D84\u29BC\u29C0\u29C5\u29C8;\uC000\u2A70\u0338d;\uC000\u224B\u0338s;\u4149ro\xF8\u0D84ur\u0100;a\u29D3\u29D4\u666El\u0100;s\u29D3\u0B38\u01F3\u29DF\0\u29E3p\u80BB\xA0\u0B37mp\u0100;e\u0BF9\u0C00\u0280aeouy\u29F4\u29FE\u2A03\u2A10\u2A13\u01F0\u29F9\0\u29FB;\u6A43on;\u4148dil;\u4146ng\u0100;d\u0D7E\u2A0Aot;\uC000\u2A6D\u0338p;\u6A42;\u443Dash;\u6013\u0380;Aadqsx\u0B92\u2A29\u2A2D\u2A3B\u2A41\u2A45\u2A50rr;\u61D7r\u0100hr\u2A33\u2A36k;\u6924\u0100;o\u13F2\u13F0ot;\uC000\u2250\u0338ui\xF6\u0B63\u0100ei\u2A4A\u2A4Ear;\u6928\xED\u0B98ist\u0100;s\u0BA0\u0B9Fr;\uC000\u{1D52B}\u0200Eest\u0BC5\u2A66\u2A79\u2A7C\u0180;qs\u0BBC\u2A6D\u0BE1\u0180;qs\u0BBC\u0BC5\u2A74lan\xF4\u0BE2i\xED\u0BEA\u0100;r\u0BB6\u2A81\xBB\u0BB7\u0180Aap\u2A8A\u2A8D\u2A91r\xF2\u2971rr;\u61AEar;\u6AF2\u0180;sv\u0F8D\u2A9C\u0F8C\u0100;d\u2AA1\u2AA2\u62FC;\u62FAcy;\u445A\u0380AEadest\u2AB7\u2ABA\u2ABE\u2AC2\u2AC5\u2AF6\u2AF9r\xF2\u2966;\uC000\u2266\u0338rr;\u619Ar;\u6025\u0200;fqs\u0C3B\u2ACE\u2AE3\u2AEFt\u0100ar\u2AD4\u2AD9rro\xF7\u2AC1ightarro\xF7\u2A90\u0180;qs\u0C3B\u2ABA\u2AEAlan\xF4\u0C55\u0100;s\u0C55\u2AF4\xBB\u0C36i\xED\u0C5D\u0100;r\u0C35\u2AFEi\u0100;e\u0C1A\u0C25i\xE4\u0D90\u0100pt\u2B0C\u2B11f;\uC000\u{1D55F}\u8180\xAC;in\u2B19\u2B1A\u2B36\u40ACn\u0200;Edv\u0B89\u2B24\u2B28\u2B2E;\uC000\u22F9\u0338ot;\uC000\u22F5\u0338\u01E1\u0B89\u2B33\u2B35;\u62F7;\u62F6i\u0100;v\u0CB8\u2B3C\u01E1\u0CB8\u2B41\u2B43;\u62FE;\u62FD\u0180aor\u2B4B\u2B63\u2B69r\u0200;ast\u0B7B\u2B55\u2B5A\u2B5Flle\xEC\u0B7Bl;\uC000\u2AFD\u20E5;\uC000\u2202\u0338lint;\u6A14\u0180;ce\u0C92\u2B70\u2B73u\xE5\u0CA5\u0100;c\u0C98\u2B78\u0100;e\u0C92\u2B7D\xF1\u0C98\u0200Aait\u2B88\u2B8B\u2B9D\u2BA7r\xF2\u2988rr\u0180;cw\u2B94\u2B95\u2B99\u619B;\uC000\u2933\u0338;\uC000\u219D\u0338ghtarrow\xBB\u2B95ri\u0100;e\u0CCB\u0CD6\u0380chimpqu\u2BBD\u2BCD\u2BD9\u2B04\u0B78\u2BE4\u2BEF\u0200;cer\u0D32\u2BC6\u0D37\u2BC9u\xE5\u0D45;\uC000\u{1D4C3}ort\u026D\u2B05\0\0\u2BD6ar\xE1\u2B56m\u0100;e\u0D6E\u2BDF\u0100;q\u0D74\u0D73su\u0100bp\u2BEB\u2BED\xE5\u0CF8\xE5\u0D0B\u0180bcp\u2BF6\u2C11\u2C19\u0200;Ees\u2BFF\u2C00\u0D22\u2C04\u6284;\uC000\u2AC5\u0338et\u0100;e\u0D1B\u2C0Bq\u0100;q\u0D23\u2C00c\u0100;e\u0D32\u2C17\xF1\u0D38\u0200;Ees\u2C22\u2C23\u0D5F\u2C27\u6285;\uC000\u2AC6\u0338et\u0100;e\u0D58\u2C2Eq\u0100;q\u0D60\u2C23\u0200gilr\u2C3D\u2C3F\u2C45\u2C47\xEC\u0BD7lde\u803B\xF1\u40F1\xE7\u0C43iangle\u0100lr\u2C52\u2C5Ceft\u0100;e\u0C1A\u2C5A\xF1\u0C26ight\u0100;e\u0CCB\u2C65\xF1\u0CD7\u0100;m\u2C6C\u2C6D\u43BD\u0180;es\u2C74\u2C75\u2C79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2C8F\u2C94\u2C99\u2C9E\u2CA3\u2CB0\u2CB6\u2CD3\u2CE3ash;\u62ADarr;\u6904p;\uC000\u224D\u20D2ash;\u62AC\u0100et\u2CA8\u2CAC;\uC000\u2265\u20D2;\uC000>\u20D2nfin;\u69DE\u0180Aet\u2CBD\u2CC1\u2CC5rr;\u6902;\uC000\u2264\u20D2\u0100;r\u2CCA\u2CCD\uC000<\u20D2ie;\uC000\u22B4\u20D2\u0100At\u2CD8\u2CDCrr;\u6903rie;\uC000\u22B5\u20D2im;\uC000\u223C\u20D2\u0180Aan\u2CF0\u2CF4\u2D02rr;\u61D6r\u0100hr\u2CFA\u2CFDk;\u6923\u0100;o\u13E7\u13E5ear;\u6927\u1253\u1A95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2D2D\0\u2D38\u2D48\u2D60\u2D65\u2D72\u2D84\u1B07\0\0\u2D8D\u2DAB\0\u2DC8\u2DCE\0\u2DDC\u2E19\u2E2B\u2E3E\u2E43\u0100cs\u2D31\u1A97ute\u803B\xF3\u40F3\u0100iy\u2D3C\u2D45r\u0100;c\u1A9E\u2D42\u803B\xF4\u40F4;\u443E\u0280abios\u1AA0\u2D52\u2D57\u01C8\u2D5Alac;\u4151v;\u6A38old;\u69BClig;\u4153\u0100cr\u2D69\u2D6Dir;\u69BF;\uC000\u{1D52C}\u036F\u2D79\0\0\u2D7C\0\u2D82n;\u42DBave\u803B\xF2\u40F2;\u69C1\u0100bm\u2D88\u0DF4ar;\u69B5\u0200acit\u2D95\u2D98\u2DA5\u2DA8r\xF2\u1A80\u0100ir\u2D9D\u2DA0r;\u69BEoss;\u69BBn\xE5\u0E52;\u69C0\u0180aei\u2DB1\u2DB5\u2DB9cr;\u414Dga;\u43C9\u0180cdn\u2DC0\u2DC5\u01CDron;\u43BF;\u69B6pf;\uC000\u{1D560}\u0180ael\u2DD4\u2DD7\u01D2r;\u69B7rp;\u69B9\u0380;adiosv\u2DEA\u2DEB\u2DEE\u2E08\u2E0D\u2E10\u2E16\u6228r\xF2\u1A86\u0200;efm\u2DF7\u2DF8\u2E02\u2E05\u6A5Dr\u0100;o\u2DFE\u2DFF\u6134f\xBB\u2DFF\u803B\xAA\u40AA\u803B\xBA\u40BAgof;\u62B6r;\u6A56lope;\u6A57;\u6A5B\u0180clo\u2E1F\u2E21\u2E27\xF2\u2E01ash\u803B\xF8\u40F8l;\u6298i\u016C\u2E2F\u2E34de\u803B\xF5\u40F5es\u0100;a\u01DB\u2E3As;\u6A36ml\u803B\xF6\u40F6bar;\u633D\u0AE1\u2E5E\0\u2E7D\0\u2E80\u2E9D\0\u2EA2\u2EB9\0\0\u2ECB\u0E9C\0\u2F13\0\0\u2F2B\u2FBC\0\u2FC8r\u0200;ast\u0403\u2E67\u2E72\u0E85\u8100\xB6;l\u2E6D\u2E6E\u40B6le\xEC\u0403\u0269\u2E78\0\0\u2E7Bm;\u6AF3;\u6AFDy;\u443Fr\u0280cimpt\u2E8B\u2E8F\u2E93\u1865\u2E97nt;\u4025od;\u402Eil;\u6030enk;\u6031r;\uC000\u{1D52D}\u0180imo\u2EA8\u2EB0\u2EB4\u0100;v\u2EAD\u2EAE\u43C6;\u43D5ma\xF4\u0A76ne;\u660E\u0180;tv\u2EBF\u2EC0\u2EC8\u43C0chfork\xBB\u1FFD;\u43D6\u0100au\u2ECF\u2EDFn\u0100ck\u2ED5\u2EDDk\u0100;h\u21F4\u2EDB;\u610E\xF6\u21F4s\u0480;abcdemst\u2EF3\u2EF4\u1908\u2EF9\u2EFD\u2F04\u2F06\u2F0A\u2F0E\u402Bcir;\u6A23ir;\u6A22\u0100ou\u1D40\u2F02;\u6A25;\u6A72n\u80BB\xB1\u0E9Dim;\u6A26wo;\u6A27\u0180ipu\u2F19\u2F20\u2F25ntint;\u6A15f;\uC000\u{1D561}nd\u803B\xA3\u40A3\u0500;Eaceinosu\u0EC8\u2F3F\u2F41\u2F44\u2F47\u2F81\u2F89\u2F92\u2F7E\u2FB6;\u6AB3p;\u6AB7u\xE5\u0ED9\u0100;c\u0ECE\u2F4C\u0300;acens\u0EC8\u2F59\u2F5F\u2F66\u2F68\u2F7Eppro\xF8\u2F43urlye\xF1\u0ED9\xF1\u0ECE\u0180aes\u2F6F\u2F76\u2F7Approx;\u6AB9qq;\u6AB5im;\u62E8i\xED\u0EDFme\u0100;s\u2F88\u0EAE\u6032\u0180Eas\u2F78\u2F90\u2F7A\xF0\u2F75\u0180dfp\u0EEC\u2F99\u2FAF\u0180als\u2FA0\u2FA5\u2FAAlar;\u632Eine;\u6312urf;\u6313\u0100;t\u0EFB\u2FB4\xEF\u0EFBrel;\u62B0\u0100ci\u2FC0\u2FC5r;\uC000\u{1D4C5};\u43C8ncsp;\u6008\u0300fiopsu\u2FDA\u22E2\u2FDF\u2FE5\u2FEB\u2FF1r;\uC000\u{1D52E}pf;\uC000\u{1D562}rime;\u6057cr;\uC000\u{1D4C6}\u0180aeo\u2FF8\u3009\u3013t\u0100ei\u2FFE\u3005rnion\xF3\u06B0nt;\u6A16st\u0100;e\u3010\u3011\u403F\xF1\u1F19\xF4\u0F14\u0A80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30E0\u310E\u312B\u3147\u3162\u3172\u318E\u3206\u3215\u3224\u3229\u3258\u326E\u3272\u3290\u32B0\u32B7\u0180art\u3047\u304A\u304Cr\xF2\u10B3\xF2\u03DDail;\u691Car\xF2\u1C65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307F\u308F\u3094\u30CC\u0100eu\u306D\u3071;\uC000\u223D\u0331te;\u4155i\xE3\u116Emptyv;\u69B3g\u0200;del\u0FD1\u3089\u308B\u308D;\u6992;\u69A5\xE5\u0FD1uo\u803B\xBB\u40BBr\u0580;abcfhlpstw\u0FDC\u30AC\u30AF\u30B7\u30B9\u30BC\u30BE\u30C0\u30C3\u30C7\u30CAp;\u6975\u0100;f\u0FE0\u30B4s;\u6920;\u6933s;\u691E\xEB\u225D\xF0\u272El;\u6945im;\u6974l;\u61A3;\u619D\u0100ai\u30D1\u30D5il;\u691Ao\u0100;n\u30DB\u30DC\u6236al\xF3\u0F1E\u0180abr\u30E7\u30EA\u30EEr\xF2\u17E5rk;\u6773\u0100ak\u30F3\u30FDc\u0100ek\u30F9\u30FB;\u407D;\u405D\u0100es\u3102\u3104;\u698Cl\u0100du\u310A\u310C;\u698E;\u6990\u0200aeuy\u3117\u311C\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xEC\u0FF2\xE2\u30FA;\u4440\u0200clqs\u3134\u3137\u313D\u3144a;\u6937dhar;\u6969uo\u0100;r\u020E\u020Dh;\u61B3\u0180acg\u314E\u315F\u0F44l\u0200;ips\u0F78\u3158\u315B\u109Cn\xE5\u10BBar\xF4\u0FA9t;\u65AD\u0180ilr\u3169\u1023\u316Esht;\u697D;\uC000\u{1D52F}\u0100ao\u3177\u3186r\u0100du\u317D\u317F\xBB\u047B\u0100;l\u1091\u3184;\u696C\u0100;v\u318B\u318C\u43C1;\u43F1\u0180gns\u3195\u31F9\u31FCht\u0300ahlrst\u31A4\u31B0\u31C2\u31D8\u31E4\u31EErrow\u0100;t\u0FDC\u31ADa\xE9\u30C8arpoon\u0100du\u31BB\u31BFow\xEE\u317Ep\xBB\u1092eft\u0100ah\u31CA\u31D0rrow\xF3\u0FEAarpoon\xF3\u0551ightarrows;\u61C9quigarro\xF7\u30CBhreetimes;\u62CCg;\u42DAingdotse\xF1\u1F32\u0180ahm\u320D\u3210\u3213r\xF2\u0FEAa\xF2\u0551;\u600Foust\u0100;a\u321E\u321F\u63B1che\xBB\u321Fmid;\u6AEE\u0200abpt\u3232\u323D\u3240\u3252\u0100nr\u3237\u323Ag;\u67EDr;\u61FEr\xEB\u1003\u0180afl\u3247\u324A\u324Er;\u6986;\uC000\u{1D563}us;\u6A2Eimes;\u6A35\u0100ap\u325D\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6A12ar\xF2\u31E3\u0200achq\u327B\u3280\u10BC\u3285quo;\u603Ar;\uC000\u{1D4C7}\u0100bu\u30FB\u328Ao\u0100;r\u0214\u0213\u0180hir\u3297\u329B\u32A0re\xE5\u31F8mes;\u62CAi\u0200;efl\u32AA\u1059\u1821\u32AB\u65B9tri;\u69CEluhar;\u6968;\u611E\u0D61\u32D5\u32DB\u32DF\u332C\u3338\u3371\0\u337A\u33A4\0\0\u33EC\u33F0\0\u3428\u3448\u345A\u34AD\u34B1\u34CA\u34F1\0\u3616\0\0\u3633cute;\u415Bqu\xEF\u27BA\u0500;Eaceinpsy\u11ED\u32F3\u32F5\u32FF\u3302\u330B\u330F\u331F\u3326\u3329;\u6AB4\u01F0\u32FA\0\u32FC;\u6AB8on;\u4161u\xE5\u11FE\u0100;d\u11F3\u3307il;\u415Frc;\u415D\u0180Eas\u3316\u3318\u331B;\u6AB6p;\u6ABAim;\u62E9olint;\u6A13i\xED\u1204;\u4441ot\u0180;be\u3334\u1D47\u3335\u62C5;\u6A66\u0380Aacmstx\u3346\u334A\u3357\u335B\u335E\u3363\u336Drr;\u61D8r\u0100hr\u3350\u3352\xEB\u2228\u0100;o\u0A36\u0A34t\u803B\xA7\u40A7i;\u403Bwar;\u6929m\u0100in\u3369\xF0nu\xF3\xF1t;\u6736r\u0100;o\u3376\u2055\uC000\u{1D530}\u0200acoy\u3382\u3386\u3391\u33A0rp;\u666F\u0100hy\u338B\u338Fcy;\u4449;\u4448rt\u026D\u3399\0\0\u339Ci\xE4\u1464ara\xEC\u2E6F\u803B\xAD\u40AD\u0100gm\u33A8\u33B4ma\u0180;fv\u33B1\u33B2\u33B2\u43C3;\u43C2\u0400;deglnpr\u12AB\u33C5\u33C9\u33CE\u33D6\u33DE\u33E1\u33E6ot;\u6A6A\u0100;q\u12B1\u12B0\u0100;E\u33D3\u33D4\u6A9E;\u6AA0\u0100;E\u33DB\u33DC\u6A9D;\u6A9Fe;\u6246lus;\u6A24arr;\u6972ar\xF2\u113D\u0200aeit\u33F8\u3408\u340F\u3417\u0100ls\u33FD\u3404lsetm\xE9\u336Ahp;\u6A33parsl;\u69E4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341C\u341D\u6AAA\u0100;s\u3422\u3423\u6AAC;\uC000\u2AAC\uFE00\u0180flp\u342E\u3433\u3442tcy;\u444C\u0100;b\u3438\u3439\u402F\u0100;a\u343E\u343F\u69C4r;\u633Ff;\uC000\u{1D564}a\u0100dr\u344D\u0402es\u0100;u\u3454\u3455\u6660it\xBB\u3455\u0180csu\u3460\u3479\u349F\u0100au\u3465\u346Fp\u0100;s\u1188\u346B;\uC000\u2293\uFE00p\u0100;s\u11B4\u3475;\uC000\u2294\uFE00u\u0100bp\u347F\u348F\u0180;es\u1197\u119C\u3486et\u0100;e\u1197\u348D\xF1\u119D\u0180;es\u11A8\u11AD\u3496et\u0100;e\u11A8\u349D\xF1\u11AE\u0180;af\u117B\u34A6\u05B0r\u0165\u34AB\u05B1\xBB\u117Car\xF2\u1148\u0200cemt\u34B9\u34BE\u34C2\u34C5r;\uC000\u{1D4C8}tm\xEE\xF1i\xEC\u3415ar\xE6\u11BE\u0100ar\u34CE\u34D5r\u0100;f\u34D4\u17BF\u6606\u0100an\u34DA\u34EDight\u0100ep\u34E3\u34EApsilo\xEE\u1EE0h\xE9\u2EAFs\xBB\u2852\u0280bcmnp\u34FB\u355E\u1209\u358B\u358E\u0480;Edemnprs\u350E\u350F\u3511\u3515\u351E\u3523\u352C\u3531\u3536\u6282;\u6AC5ot;\u6ABD\u0100;d\u11DA\u351Aot;\u6AC3ult;\u6AC1\u0100Ee\u3528\u352A;\u6ACB;\u628Alus;\u6ABFarr;\u6979\u0180eiu\u353D\u3552\u3555t\u0180;en\u350E\u3545\u354Bq\u0100;q\u11DA\u350Feq\u0100;q\u352B\u3528m;\u6AC7\u0100bp\u355A\u355C;\u6AD5;\u6AD3c\u0300;acens\u11ED\u356C\u3572\u3579\u357B\u3326ppro\xF8\u32FAurlye\xF1\u11FE\xF1\u11F3\u0180aes\u3582\u3588\u331Bppro\xF8\u331Aq\xF1\u3317g;\u666A\u0680123;Edehlmnps\u35A9\u35AC\u35AF\u121C\u35B2\u35B4\u35C0\u35C9\u35D5\u35DA\u35DF\u35E8\u35ED\u803B\xB9\u40B9\u803B\xB2\u40B2\u803B\xB3\u40B3;\u6AC6\u0100os\u35B9\u35BCt;\u6ABEub;\u6AD8\u0100;d\u1222\u35C5ot;\u6AC4s\u0100ou\u35CF\u35D2l;\u67C9b;\u6AD7arr;\u697Bult;\u6AC2\u0100Ee\u35E4\u35E6;\u6ACC;\u628Blus;\u6AC0\u0180eiu\u35F4\u3609\u360Ct\u0180;en\u121C\u35FC\u3602q\u0100;q\u1222\u35B2eq\u0100;q\u35E7\u35E4m;\u6AC8\u0100bp\u3611\u3613;\u6AD4;\u6AD6\u0180Aan\u361C\u3620\u362Drr;\u61D9r\u0100hr\u3626\u3628\xEB\u222E\u0100;o\u0A2B\u0A29war;\u692Alig\u803B\xDF\u40DF\u0BE1\u3651\u365D\u3660\u12CE\u3673\u3679\0\u367E\u36C2\0\0\0\0\0\u36DB\u3703\0\u3709\u376C\0\0\0\u3787\u0272\u3656\0\0\u365Bget;\u6316;\u43C4r\xEB\u0E5F\u0180aey\u3666\u366B\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uC000\u{1D531}\u0200eiko\u3686\u369D\u36B5\u36BC\u01F2\u368B\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369B\u43B8ym;\u43D1\u0100cn\u36A2\u36B2k\u0100as\u36A8\u36AEppro\xF8\u12C1im\xBB\u12ACs\xF0\u129E\u0100as\u36BA\u36AE\xF0\u12C1rn\u803B\xFE\u40FE\u01EC\u031F\u36C6\u22E7es\u8180\xD7;bd\u36CF\u36D0\u36D8\u40D7\u0100;a\u190F\u36D5r;\u6A31;\u6A30\u0180eps\u36E1\u36E3\u3700\xE1\u2A4D\u0200;bcf\u0486\u36EC\u36F0\u36F4ot;\u6336ir;\u6AF1\u0100;o\u36F9\u36FC\uC000\u{1D565}rk;\u6ADA\xE1\u3362rime;\u6034\u0180aip\u370F\u3712\u3764d\xE5\u1248\u0380adempst\u3721\u374D\u3740\u3751\u3757\u375C\u375Fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65B5own\xBB\u1DBBeft\u0100;e\u2800\u373E\xF1\u092E;\u625Cight\u0100;e\u32AA\u374B\xF1\u105Aot;\u65ECinus;\u6A3Alus;\u6A39b;\u69CDime;\u6A3Bezium;\u63E2\u0180cht\u3772\u377D\u3781\u0100ry\u3777\u377B;\uC000\u{1D4C9};\u4446cy;\u445Brok;\u4167\u0100io\u378B\u378Ex\xF4\u1777head\u0100lr\u3797\u37A0eftarro\xF7\u084Fightarrow\xBB\u0F5D\u0900AHabcdfghlmoprstuw\u37D0\u37D3\u37D7\u37E4\u37F0\u37FC\u380E\u381C\u3823\u3834\u3851\u385D\u386B\u38A9\u38CC\u38D2\u38EA\u38F6r\xF2\u03EDar;\u6963\u0100cr\u37DC\u37E2ute\u803B\xFA\u40FA\xF2\u1150r\u01E3\u37EA\0\u37EDy;\u445Eve;\u416D\u0100iy\u37F5\u37FArc\u803B\xFB\u40FB;\u4443\u0180abh\u3803\u3806\u380Br\xF2\u13ADlac;\u4171a\xF2\u13C3\u0100ir\u3813\u3818sht;\u697E;\uC000\u{1D532}rave\u803B\xF9\u40F9\u0161\u3827\u3831r\u0100lr\u382C\u382E\xBB\u0957\xBB\u1083lk;\u6580\u0100ct\u3839\u384D\u026F\u383F\0\0\u384Arn\u0100;e\u3845\u3846\u631Cr\xBB\u3846op;\u630Fri;\u65F8\u0100al\u3856\u385Acr;\u416B\u80BB\xA8\u0349\u0100gp\u3862\u3866on;\u4173f;\uC000\u{1D566}\u0300adhlsu\u114B\u3878\u387D\u1372\u3891\u38A0own\xE1\u13B3arpoon\u0100lr\u3888\u388Cef\xF4\u382Digh\xF4\u382Fi\u0180;hl\u3899\u389A\u389C\u43C5\xBB\u13FAon\xBB\u389Aparrows;\u61C8\u0180cit\u38B0\u38C4\u38C8\u026F\u38B6\0\0\u38C1rn\u0100;e\u38BC\u38BD\u631Dr\xBB\u38BDop;\u630Eng;\u416Fri;\u65F9cr;\uC000\u{1D4CA}\u0180dir\u38D9\u38DD\u38E2ot;\u62F0lde;\u4169i\u0100;f\u3730\u38E8\xBB\u1813\u0100am\u38EF\u38F2r\xF2\u38A8l\u803B\xFC\u40FCangle;\u69A7\u0780ABDacdeflnoprsz\u391C\u391F\u3929\u392D\u39B5\u39B8\u39BD\u39DF\u39E4\u39E8\u39F3\u39F9\u39FD\u3A01\u3A20r\xF2\u03F7ar\u0100;v\u3926\u3927\u6AE8;\u6AE9as\xE8\u03E1\u0100nr\u3932\u3937grt;\u699C\u0380eknprst\u34E3\u3946\u394B\u3952\u395D\u3964\u3996app\xE1\u2415othin\xE7\u1E96\u0180hir\u34EB\u2EC8\u3959op\xF4\u2FB5\u0100;h\u13B7\u3962\xEF\u318D\u0100iu\u3969\u396Dgm\xE1\u33B3\u0100bp\u3972\u3984setneq\u0100;q\u397D\u3980\uC000\u228A\uFE00;\uC000\u2ACB\uFE00setneq\u0100;q\u398F\u3992\uC000\u228B\uFE00;\uC000\u2ACC\uFE00\u0100hr\u399B\u399Fet\xE1\u369Ciangle\u0100lr\u39AA\u39AFeft\xBB\u0925ight\xBB\u1051y;\u4432ash\xBB\u1036\u0180elr\u39C4\u39D2\u39D7\u0180;be\u2DEA\u39CB\u39CFar;\u62BBq;\u625Alip;\u62EE\u0100bt\u39DC\u1468a\xF2\u1469r;\uC000\u{1D533}tr\xE9\u39AEsu\u0100bp\u39EF\u39F1\xBB\u0D1C\xBB\u0D59pf;\uC000\u{1D567}ro\xF0\u0EFBtr\xE9\u39B4\u0100cu\u3A06\u3A0Br;\uC000\u{1D4CB}\u0100bp\u3A10\u3A18n\u0100Ee\u3980\u3A16\xBB\u397En\u0100Ee\u3992\u3A1E\xBB\u3990igzag;\u699A\u0380cefoprs\u3A36\u3A3B\u3A56\u3A5B\u3A54\u3A61\u3A6Airc;\u4175\u0100di\u3A40\u3A51\u0100bg\u3A45\u3A49ar;\u6A5Fe\u0100;q\u15FA\u3A4F;\u6259erp;\u6118r;\uC000\u{1D534}pf;\uC000\u{1D568}\u0100;e\u1479\u3A66at\xE8\u1479cr;\uC000\u{1D4CC}\u0AE3\u178E\u3A87\0\u3A8B\0\u3A90\u3A9B\0\0\u3A9D\u3AA8\u3AAB\u3AAF\0\0\u3AC3\u3ACE\0\u3AD8\u17DC\u17DFtr\xE9\u17D1r;\uC000\u{1D535}\u0100Aa\u3A94\u3A97r\xF2\u03C3r\xF2\u09F6;\u43BE\u0100Aa\u3AA1\u3AA4r\xF2\u03B8r\xF2\u09EBa\xF0\u2713is;\u62FB\u0180dpt\u17A4\u3AB5\u3ABE\u0100fl\u3ABA\u17A9;\uC000\u{1D569}im\xE5\u17B2\u0100Aa\u3AC7\u3ACAr\xF2\u03CEr\xF2\u0A01\u0100cq\u3AD2\u17B8r;\uC000\u{1D4CD}\u0100pt\u17D6\u3ADCr\xE9\u17D4\u0400acefiosu\u3AF0\u3AFD\u3B08\u3B0C\u3B11\u3B15\u3B1B\u3B21c\u0100uy\u3AF6\u3AFBte\u803B\xFD\u40FD;\u444F\u0100iy\u3B02\u3B06rc;\u4177;\u444Bn\u803B\xA5\u40A5r;\uC000\u{1D536}cy;\u4457pf;\uC000\u{1D56A}cr;\uC000\u{1D4CE}\u0100cm\u3B26\u3B29y;\u444El\u803B\xFF\u40FF\u0500acdefhiosw\u3B42\u3B48\u3B54\u3B58\u3B64\u3B69\u3B6D\u3B74\u3B7A\u3B80cute;\u417A\u0100ay\u3B4D\u3B52ron;\u417E;\u4437ot;\u417C\u0100et\u3B5D\u3B61tr\xE6\u155Fa;\u43B6r;\uC000\u{1D537}cy;\u4436grarr;\u61DDpf;\uC000\u{1D56B}cr;\uC000\u{1D4CF}\u0100jn\u3B85\u3B87;\u600Dj;\u600C'.split("").map((c) => c.charCodeAt(0))
);

// node_modules/parse5/node_modules/entities/dist/esm/decode-codepoint.js
var _a4;
var decodeMap3 = /* @__PURE__ */ new Map([
  [0, 65533],
  // C1 Unicode control character reference replacements
  [128, 8364],
  [130, 8218],
  [131, 402],
  [132, 8222],
  [133, 8230],
  [134, 8224],
  [135, 8225],
  [136, 710],
  [137, 8240],
  [138, 352],
  [139, 8249],
  [140, 338],
  [142, 381],
  [145, 8216],
  [146, 8217],
  [147, 8220],
  [148, 8221],
  [149, 8226],
  [150, 8211],
  [151, 8212],
  [152, 732],
  [153, 8482],
  [154, 353],
  [155, 8250],
  [156, 339],
  [158, 382],
  [159, 376]
]);
var fromCodePoint3 = (
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, n/no-unsupported-features/es-builtins
  (_a4 = String.fromCodePoint) !== null && _a4 !== void 0 ? _a4 : function(codePoint) {
    let output = "";
    if (codePoint > 65535) {
      codePoint -= 65536;
      output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
      codePoint = 56320 | codePoint & 1023;
    }
    output += String.fromCharCode(codePoint);
    return output;
  }
);
function replaceCodePoint3(codePoint) {
  var _a5;
  if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
    return 65533;
  }
  return (_a5 = decodeMap3.get(codePoint)) !== null && _a5 !== void 0 ? _a5 : codePoint;
}

// node_modules/parse5/node_modules/entities/dist/esm/decode.js
var CharCodes4;
(function(CharCodes5) {
  CharCodes5[CharCodes5["NUM"] = 35] = "NUM";
  CharCodes5[CharCodes5["SEMI"] = 59] = "SEMI";
  CharCodes5[CharCodes5["EQUALS"] = 61] = "EQUALS";
  CharCodes5[CharCodes5["ZERO"] = 48] = "ZERO";
  CharCodes5[CharCodes5["NINE"] = 57] = "NINE";
  CharCodes5[CharCodes5["LOWER_A"] = 97] = "LOWER_A";
  CharCodes5[CharCodes5["LOWER_F"] = 102] = "LOWER_F";
  CharCodes5[CharCodes5["LOWER_X"] = 120] = "LOWER_X";
  CharCodes5[CharCodes5["LOWER_Z"] = 122] = "LOWER_Z";
  CharCodes5[CharCodes5["UPPER_A"] = 65] = "UPPER_A";
  CharCodes5[CharCodes5["UPPER_F"] = 70] = "UPPER_F";
  CharCodes5[CharCodes5["UPPER_Z"] = 90] = "UPPER_Z";
})(CharCodes4 || (CharCodes4 = {}));
var TO_LOWER_BIT3 = 32;
var BinTrieFlags3;
(function(BinTrieFlags4) {
  BinTrieFlags4[BinTrieFlags4["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
  BinTrieFlags4[BinTrieFlags4["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
  BinTrieFlags4[BinTrieFlags4["JUMP_TABLE"] = 127] = "JUMP_TABLE";
})(BinTrieFlags3 || (BinTrieFlags3 = {}));
function isNumber4(code) {
  return code >= CharCodes4.ZERO && code <= CharCodes4.NINE;
}
function isHexadecimalCharacter3(code) {
  return code >= CharCodes4.UPPER_A && code <= CharCodes4.UPPER_F || code >= CharCodes4.LOWER_A && code <= CharCodes4.LOWER_F;
}
function isAsciiAlphaNumeric3(code) {
  return code >= CharCodes4.UPPER_A && code <= CharCodes4.UPPER_Z || code >= CharCodes4.LOWER_A && code <= CharCodes4.LOWER_Z || isNumber4(code);
}
function isEntityInAttributeInvalidEnd3(code) {
  return code === CharCodes4.EQUALS || isAsciiAlphaNumeric3(code);
}
var EntityDecoderState3;
(function(EntityDecoderState4) {
  EntityDecoderState4[EntityDecoderState4["EntityStart"] = 0] = "EntityStart";
  EntityDecoderState4[EntityDecoderState4["NumericStart"] = 1] = "NumericStart";
  EntityDecoderState4[EntityDecoderState4["NumericDecimal"] = 2] = "NumericDecimal";
  EntityDecoderState4[EntityDecoderState4["NumericHex"] = 3] = "NumericHex";
  EntityDecoderState4[EntityDecoderState4["NamedEntity"] = 4] = "NamedEntity";
})(EntityDecoderState3 || (EntityDecoderState3 = {}));
var DecodingMode3;
(function(DecodingMode4) {
  DecodingMode4[DecodingMode4["Legacy"] = 0] = "Legacy";
  DecodingMode4[DecodingMode4["Strict"] = 1] = "Strict";
  DecodingMode4[DecodingMode4["Attribute"] = 2] = "Attribute";
})(DecodingMode3 || (DecodingMode3 = {}));
var EntityDecoder3 = class {
  constructor(decodeTree, emitCodePoint, errors) {
    this.decodeTree = decodeTree;
    this.emitCodePoint = emitCodePoint;
    this.errors = errors;
    this.state = EntityDecoderState3.EntityStart;
    this.consumed = 1;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.decodeMode = DecodingMode3.Strict;
  }
  /** Resets the instance to make it reusable. */
  startEntity(decodeMode) {
    this.decodeMode = decodeMode;
    this.state = EntityDecoderState3.EntityStart;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.consumed = 1;
  }
  /**
   * Write an entity to the decoder. This can be called multiple times with partial entities.
   * If the entity is incomplete, the decoder will return -1.
   *
   * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
   * entity is incomplete, and resume when the next string is written.
   *
   * @param input The string containing the entity (or a continuation of the entity).
   * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  write(input, offset) {
    switch (this.state) {
      case EntityDecoderState3.EntityStart: {
        if (input.charCodeAt(offset) === CharCodes4.NUM) {
          this.state = EntityDecoderState3.NumericStart;
          this.consumed += 1;
          return this.stateNumericStart(input, offset + 1);
        }
        this.state = EntityDecoderState3.NamedEntity;
        return this.stateNamedEntity(input, offset);
      }
      case EntityDecoderState3.NumericStart: {
        return this.stateNumericStart(input, offset);
      }
      case EntityDecoderState3.NumericDecimal: {
        return this.stateNumericDecimal(input, offset);
      }
      case EntityDecoderState3.NumericHex: {
        return this.stateNumericHex(input, offset);
      }
      case EntityDecoderState3.NamedEntity: {
        return this.stateNamedEntity(input, offset);
      }
    }
  }
  /**
   * Switches between the numeric decimal and hexadecimal states.
   *
   * Equivalent to the `Numeric character reference state` in the HTML spec.
   *
   * @param input The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericStart(input, offset) {
    if (offset >= input.length) {
      return -1;
    }
    if ((input.charCodeAt(offset) | TO_LOWER_BIT3) === CharCodes4.LOWER_X) {
      this.state = EntityDecoderState3.NumericHex;
      this.consumed += 1;
      return this.stateNumericHex(input, offset + 1);
    }
    this.state = EntityDecoderState3.NumericDecimal;
    return this.stateNumericDecimal(input, offset);
  }
  addToNumericResult(input, start, end2, base) {
    if (start !== end2) {
      const digitCount = end2 - start;
      this.result = this.result * Math.pow(base, digitCount) + Number.parseInt(input.substr(start, digitCount), base);
      this.consumed += digitCount;
    }
  }
  /**
   * Parses a hexadecimal numeric entity.
   *
   * Equivalent to the `Hexademical character reference state` in the HTML spec.
   *
   * @param input The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericHex(input, offset) {
    const startIndex = offset;
    while (offset < input.length) {
      const char = input.charCodeAt(offset);
      if (isNumber4(char) || isHexadecimalCharacter3(char)) {
        offset += 1;
      } else {
        this.addToNumericResult(input, startIndex, offset, 16);
        return this.emitNumericEntity(char, 3);
      }
    }
    this.addToNumericResult(input, startIndex, offset, 16);
    return -1;
  }
  /**
   * Parses a decimal numeric entity.
   *
   * Equivalent to the `Decimal character reference state` in the HTML spec.
   *
   * @param input The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericDecimal(input, offset) {
    const startIndex = offset;
    while (offset < input.length) {
      const char = input.charCodeAt(offset);
      if (isNumber4(char)) {
        offset += 1;
      } else {
        this.addToNumericResult(input, startIndex, offset, 10);
        return this.emitNumericEntity(char, 2);
      }
    }
    this.addToNumericResult(input, startIndex, offset, 10);
    return -1;
  }
  /**
   * Validate and emit a numeric entity.
   *
   * Implements the logic from the `Hexademical character reference start
   * state` and `Numeric character reference end state` in the HTML spec.
   *
   * @param lastCp The last code point of the entity. Used to see if the
   *               entity was terminated with a semicolon.
   * @param expectedLength The minimum number of characters that should be
   *                       consumed. Used to validate that at least one digit
   *                       was consumed.
   * @returns The number of characters that were consumed.
   */
  emitNumericEntity(lastCp, expectedLength) {
    var _a5;
    if (this.consumed <= expectedLength) {
      (_a5 = this.errors) === null || _a5 === void 0 ? void 0 : _a5.absenceOfDigitsInNumericCharacterReference(this.consumed);
      return 0;
    }
    if (lastCp === CharCodes4.SEMI) {
      this.consumed += 1;
    } else if (this.decodeMode === DecodingMode3.Strict) {
      return 0;
    }
    this.emitCodePoint(replaceCodePoint3(this.result), this.consumed);
    if (this.errors) {
      if (lastCp !== CharCodes4.SEMI) {
        this.errors.missingSemicolonAfterCharacterReference();
      }
      this.errors.validateNumericCharacterReference(this.result);
    }
    return this.consumed;
  }
  /**
   * Parses a named entity.
   *
   * Equivalent to the `Named character reference state` in the HTML spec.
   *
   * @param input The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNamedEntity(input, offset) {
    const { decodeTree } = this;
    let current = decodeTree[this.treeIndex];
    let valueLength = (current & BinTrieFlags3.VALUE_LENGTH) >> 14;
    for (; offset < input.length; offset++, this.excess++) {
      const char = input.charCodeAt(offset);
      this.treeIndex = determineBranch3(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
      if (this.treeIndex < 0) {
        return this.result === 0 || // If we are parsing an attribute
        this.decodeMode === DecodingMode3.Attribute && // We shouldn't have consumed any characters after the entity,
        (valueLength === 0 || // And there should be no invalid characters.
        isEntityInAttributeInvalidEnd3(char)) ? 0 : this.emitNotTerminatedNamedEntity();
      }
      current = decodeTree[this.treeIndex];
      valueLength = (current & BinTrieFlags3.VALUE_LENGTH) >> 14;
      if (valueLength !== 0) {
        if (char === CharCodes4.SEMI) {
          return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
        }
        if (this.decodeMode !== DecodingMode3.Strict) {
          this.result = this.treeIndex;
          this.consumed += this.excess;
          this.excess = 0;
        }
      }
    }
    return -1;
  }
  /**
   * Emit a named entity that was not terminated with a semicolon.
   *
   * @returns The number of characters consumed.
   */
  emitNotTerminatedNamedEntity() {
    var _a5;
    const { result, decodeTree } = this;
    const valueLength = (decodeTree[result] & BinTrieFlags3.VALUE_LENGTH) >> 14;
    this.emitNamedEntityData(result, valueLength, this.consumed);
    (_a5 = this.errors) === null || _a5 === void 0 ? void 0 : _a5.missingSemicolonAfterCharacterReference();
    return this.consumed;
  }
  /**
   * Emit a named entity.
   *
   * @param result The index of the entity in the decode tree.
   * @param valueLength The number of bytes in the entity.
   * @param consumed The number of characters consumed.
   *
   * @returns The number of characters consumed.
   */
  emitNamedEntityData(result, valueLength, consumed) {
    const { decodeTree } = this;
    this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags3.VALUE_LENGTH : decodeTree[result + 1], consumed);
    if (valueLength === 3) {
      this.emitCodePoint(decodeTree[result + 2], consumed);
    }
    return consumed;
  }
  /**
   * Signal to the parser that the end of the input was reached.
   *
   * Remaining data will be emitted and relevant errors will be produced.
   *
   * @returns The number of characters consumed.
   */
  end() {
    var _a5;
    switch (this.state) {
      case EntityDecoderState3.NamedEntity: {
        return this.result !== 0 && (this.decodeMode !== DecodingMode3.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
      }
      case EntityDecoderState3.NumericDecimal: {
        return this.emitNumericEntity(0, 2);
      }
      case EntityDecoderState3.NumericHex: {
        return this.emitNumericEntity(0, 3);
      }
      case EntityDecoderState3.NumericStart: {
        (_a5 = this.errors) === null || _a5 === void 0 ? void 0 : _a5.absenceOfDigitsInNumericCharacterReference(this.consumed);
        return 0;
      }
      case EntityDecoderState3.EntityStart: {
        return 0;
      }
    }
  }
};
function determineBranch3(decodeTree, current, nodeIndex, char) {
  const branchCount = (current & BinTrieFlags3.BRANCH_LENGTH) >> 7;
  const jumpOffset = current & BinTrieFlags3.JUMP_TABLE;
  if (branchCount === 0) {
    return jumpOffset !== 0 && char === jumpOffset ? nodeIndex : -1;
  }
  if (jumpOffset) {
    const value = char - jumpOffset;
    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIndex + value] - 1;
  }
  let lo = nodeIndex;
  let hi = lo + branchCount - 1;
  while (lo <= hi) {
    const mid = lo + hi >>> 1;
    const midValue = decodeTree[mid];
    if (midValue < char) {
      lo = mid + 1;
    } else if (midValue > char) {
      hi = mid - 1;
    } else {
      return decodeTree[mid + branchCount];
    }
  }
  return -1;
}

// node_modules/parse5/dist/common/html.js
var html_exports = {};
__export(html_exports, {
  ATTRS: () => ATTRS,
  DOCUMENT_MODE: () => DOCUMENT_MODE,
  NS: () => NS,
  NUMBERED_HEADERS: () => NUMBERED_HEADERS,
  SPECIAL_ELEMENTS: () => SPECIAL_ELEMENTS,
  TAG_ID: () => TAG_ID,
  TAG_NAMES: () => TAG_NAMES,
  getTagID: () => getTagID,
  hasUnescapedText: () => hasUnescapedText
});
var NS;
(function(NS2) {
  NS2["HTML"] = "http://www.w3.org/1999/xhtml";
  NS2["MATHML"] = "http://www.w3.org/1998/Math/MathML";
  NS2["SVG"] = "http://www.w3.org/2000/svg";
  NS2["XLINK"] = "http://www.w3.org/1999/xlink";
  NS2["XML"] = "http://www.w3.org/XML/1998/namespace";
  NS2["XMLNS"] = "http://www.w3.org/2000/xmlns/";
})(NS || (NS = {}));
var ATTRS;
(function(ATTRS2) {
  ATTRS2["TYPE"] = "type";
  ATTRS2["ACTION"] = "action";
  ATTRS2["ENCODING"] = "encoding";
  ATTRS2["PROMPT"] = "prompt";
  ATTRS2["NAME"] = "name";
  ATTRS2["COLOR"] = "color";
  ATTRS2["FACE"] = "face";
  ATTRS2["SIZE"] = "size";
})(ATTRS || (ATTRS = {}));
var DOCUMENT_MODE;
(function(DOCUMENT_MODE2) {
  DOCUMENT_MODE2["NO_QUIRKS"] = "no-quirks";
  DOCUMENT_MODE2["QUIRKS"] = "quirks";
  DOCUMENT_MODE2["LIMITED_QUIRKS"] = "limited-quirks";
})(DOCUMENT_MODE || (DOCUMENT_MODE = {}));
var TAG_NAMES;
(function(TAG_NAMES2) {
  TAG_NAMES2["A"] = "a";
  TAG_NAMES2["ADDRESS"] = "address";
  TAG_NAMES2["ANNOTATION_XML"] = "annotation-xml";
  TAG_NAMES2["APPLET"] = "applet";
  TAG_NAMES2["AREA"] = "area";
  TAG_NAMES2["ARTICLE"] = "article";
  TAG_NAMES2["ASIDE"] = "aside";
  TAG_NAMES2["B"] = "b";
  TAG_NAMES2["BASE"] = "base";
  TAG_NAMES2["BASEFONT"] = "basefont";
  TAG_NAMES2["BGSOUND"] = "bgsound";
  TAG_NAMES2["BIG"] = "big";
  TAG_NAMES2["BLOCKQUOTE"] = "blockquote";
  TAG_NAMES2["BODY"] = "body";
  TAG_NAMES2["BR"] = "br";
  TAG_NAMES2["BUTTON"] = "button";
  TAG_NAMES2["CAPTION"] = "caption";
  TAG_NAMES2["CENTER"] = "center";
  TAG_NAMES2["CODE"] = "code";
  TAG_NAMES2["COL"] = "col";
  TAG_NAMES2["COLGROUP"] = "colgroup";
  TAG_NAMES2["DD"] = "dd";
  TAG_NAMES2["DESC"] = "desc";
  TAG_NAMES2["DETAILS"] = "details";
  TAG_NAMES2["DIALOG"] = "dialog";
  TAG_NAMES2["DIR"] = "dir";
  TAG_NAMES2["DIV"] = "div";
  TAG_NAMES2["DL"] = "dl";
  TAG_NAMES2["DT"] = "dt";
  TAG_NAMES2["EM"] = "em";
  TAG_NAMES2["EMBED"] = "embed";
  TAG_NAMES2["FIELDSET"] = "fieldset";
  TAG_NAMES2["FIGCAPTION"] = "figcaption";
  TAG_NAMES2["FIGURE"] = "figure";
  TAG_NAMES2["FONT"] = "font";
  TAG_NAMES2["FOOTER"] = "footer";
  TAG_NAMES2["FOREIGN_OBJECT"] = "foreignObject";
  TAG_NAMES2["FORM"] = "form";
  TAG_NAMES2["FRAME"] = "frame";
  TAG_NAMES2["FRAMESET"] = "frameset";
  TAG_NAMES2["H1"] = "h1";
  TAG_NAMES2["H2"] = "h2";
  TAG_NAMES2["H3"] = "h3";
  TAG_NAMES2["H4"] = "h4";
  TAG_NAMES2["H5"] = "h5";
  TAG_NAMES2["H6"] = "h6";
  TAG_NAMES2["HEAD"] = "head";
  TAG_NAMES2["HEADER"] = "header";
  TAG_NAMES2["HGROUP"] = "hgroup";
  TAG_NAMES2["HR"] = "hr";
  TAG_NAMES2["HTML"] = "html";
  TAG_NAMES2["I"] = "i";
  TAG_NAMES2["IMG"] = "img";
  TAG_NAMES2["IMAGE"] = "image";
  TAG_NAMES2["INPUT"] = "input";
  TAG_NAMES2["IFRAME"] = "iframe";
  TAG_NAMES2["KEYGEN"] = "keygen";
  TAG_NAMES2["LABEL"] = "label";
  TAG_NAMES2["LI"] = "li";
  TAG_NAMES2["LINK"] = "link";
  TAG_NAMES2["LISTING"] = "listing";
  TAG_NAMES2["MAIN"] = "main";
  TAG_NAMES2["MALIGNMARK"] = "malignmark";
  TAG_NAMES2["MARQUEE"] = "marquee";
  TAG_NAMES2["MATH"] = "math";
  TAG_NAMES2["MENU"] = "menu";
  TAG_NAMES2["META"] = "meta";
  TAG_NAMES2["MGLYPH"] = "mglyph";
  TAG_NAMES2["MI"] = "mi";
  TAG_NAMES2["MO"] = "mo";
  TAG_NAMES2["MN"] = "mn";
  TAG_NAMES2["MS"] = "ms";
  TAG_NAMES2["MTEXT"] = "mtext";
  TAG_NAMES2["NAV"] = "nav";
  TAG_NAMES2["NOBR"] = "nobr";
  TAG_NAMES2["NOFRAMES"] = "noframes";
  TAG_NAMES2["NOEMBED"] = "noembed";
  TAG_NAMES2["NOSCRIPT"] = "noscript";
  TAG_NAMES2["OBJECT"] = "object";
  TAG_NAMES2["OL"] = "ol";
  TAG_NAMES2["OPTGROUP"] = "optgroup";
  TAG_NAMES2["OPTION"] = "option";
  TAG_NAMES2["P"] = "p";
  TAG_NAMES2["PARAM"] = "param";
  TAG_NAMES2["PLAINTEXT"] = "plaintext";
  TAG_NAMES2["PRE"] = "pre";
  TAG_NAMES2["RB"] = "rb";
  TAG_NAMES2["RP"] = "rp";
  TAG_NAMES2["RT"] = "rt";
  TAG_NAMES2["RTC"] = "rtc";
  TAG_NAMES2["RUBY"] = "ruby";
  TAG_NAMES2["S"] = "s";
  TAG_NAMES2["SCRIPT"] = "script";
  TAG_NAMES2["SEARCH"] = "search";
  TAG_NAMES2["SECTION"] = "section";
  TAG_NAMES2["SELECT"] = "select";
  TAG_NAMES2["SOURCE"] = "source";
  TAG_NAMES2["SMALL"] = "small";
  TAG_NAMES2["SPAN"] = "span";
  TAG_NAMES2["STRIKE"] = "strike";
  TAG_NAMES2["STRONG"] = "strong";
  TAG_NAMES2["STYLE"] = "style";
  TAG_NAMES2["SUB"] = "sub";
  TAG_NAMES2["SUMMARY"] = "summary";
  TAG_NAMES2["SUP"] = "sup";
  TAG_NAMES2["TABLE"] = "table";
  TAG_NAMES2["TBODY"] = "tbody";
  TAG_NAMES2["TEMPLATE"] = "template";
  TAG_NAMES2["TEXTAREA"] = "textarea";
  TAG_NAMES2["TFOOT"] = "tfoot";
  TAG_NAMES2["TD"] = "td";
  TAG_NAMES2["TH"] = "th";
  TAG_NAMES2["THEAD"] = "thead";
  TAG_NAMES2["TITLE"] = "title";
  TAG_NAMES2["TR"] = "tr";
  TAG_NAMES2["TRACK"] = "track";
  TAG_NAMES2["TT"] = "tt";
  TAG_NAMES2["U"] = "u";
  TAG_NAMES2["UL"] = "ul";
  TAG_NAMES2["SVG"] = "svg";
  TAG_NAMES2["VAR"] = "var";
  TAG_NAMES2["WBR"] = "wbr";
  TAG_NAMES2["XMP"] = "xmp";
})(TAG_NAMES || (TAG_NAMES = {}));
var TAG_ID;
(function(TAG_ID2) {
  TAG_ID2[TAG_ID2["UNKNOWN"] = 0] = "UNKNOWN";
  TAG_ID2[TAG_ID2["A"] = 1] = "A";
  TAG_ID2[TAG_ID2["ADDRESS"] = 2] = "ADDRESS";
  TAG_ID2[TAG_ID2["ANNOTATION_XML"] = 3] = "ANNOTATION_XML";
  TAG_ID2[TAG_ID2["APPLET"] = 4] = "APPLET";
  TAG_ID2[TAG_ID2["AREA"] = 5] = "AREA";
  TAG_ID2[TAG_ID2["ARTICLE"] = 6] = "ARTICLE";
  TAG_ID2[TAG_ID2["ASIDE"] = 7] = "ASIDE";
  TAG_ID2[TAG_ID2["B"] = 8] = "B";
  TAG_ID2[TAG_ID2["BASE"] = 9] = "BASE";
  TAG_ID2[TAG_ID2["BASEFONT"] = 10] = "BASEFONT";
  TAG_ID2[TAG_ID2["BGSOUND"] = 11] = "BGSOUND";
  TAG_ID2[TAG_ID2["BIG"] = 12] = "BIG";
  TAG_ID2[TAG_ID2["BLOCKQUOTE"] = 13] = "BLOCKQUOTE";
  TAG_ID2[TAG_ID2["BODY"] = 14] = "BODY";
  TAG_ID2[TAG_ID2["BR"] = 15] = "BR";
  TAG_ID2[TAG_ID2["BUTTON"] = 16] = "BUTTON";
  TAG_ID2[TAG_ID2["CAPTION"] = 17] = "CAPTION";
  TAG_ID2[TAG_ID2["CENTER"] = 18] = "CENTER";
  TAG_ID2[TAG_ID2["CODE"] = 19] = "CODE";
  TAG_ID2[TAG_ID2["COL"] = 20] = "COL";
  TAG_ID2[TAG_ID2["COLGROUP"] = 21] = "COLGROUP";
  TAG_ID2[TAG_ID2["DD"] = 22] = "DD";
  TAG_ID2[TAG_ID2["DESC"] = 23] = "DESC";
  TAG_ID2[TAG_ID2["DETAILS"] = 24] = "DETAILS";
  TAG_ID2[TAG_ID2["DIALOG"] = 25] = "DIALOG";
  TAG_ID2[TAG_ID2["DIR"] = 26] = "DIR";
  TAG_ID2[TAG_ID2["DIV"] = 27] = "DIV";
  TAG_ID2[TAG_ID2["DL"] = 28] = "DL";
  TAG_ID2[TAG_ID2["DT"] = 29] = "DT";
  TAG_ID2[TAG_ID2["EM"] = 30] = "EM";
  TAG_ID2[TAG_ID2["EMBED"] = 31] = "EMBED";
  TAG_ID2[TAG_ID2["FIELDSET"] = 32] = "FIELDSET";
  TAG_ID2[TAG_ID2["FIGCAPTION"] = 33] = "FIGCAPTION";
  TAG_ID2[TAG_ID2["FIGURE"] = 34] = "FIGURE";
  TAG_ID2[TAG_ID2["FONT"] = 35] = "FONT";
  TAG_ID2[TAG_ID2["FOOTER"] = 36] = "FOOTER";
  TAG_ID2[TAG_ID2["FOREIGN_OBJECT"] = 37] = "FOREIGN_OBJECT";
  TAG_ID2[TAG_ID2["FORM"] = 38] = "FORM";
  TAG_ID2[TAG_ID2["FRAME"] = 39] = "FRAME";
  TAG_ID2[TAG_ID2["FRAMESET"] = 40] = "FRAMESET";
  TAG_ID2[TAG_ID2["H1"] = 41] = "H1";
  TAG_ID2[TAG_ID2["H2"] = 42] = "H2";
  TAG_ID2[TAG_ID2["H3"] = 43] = "H3";
  TAG_ID2[TAG_ID2["H4"] = 44] = "H4";
  TAG_ID2[TAG_ID2["H5"] = 45] = "H5";
  TAG_ID2[TAG_ID2["H6"] = 46] = "H6";
  TAG_ID2[TAG_ID2["HEAD"] = 47] = "HEAD";
  TAG_ID2[TAG_ID2["HEADER"] = 48] = "HEADER";
  TAG_ID2[TAG_ID2["HGROUP"] = 49] = "HGROUP";
  TAG_ID2[TAG_ID2["HR"] = 50] = "HR";
  TAG_ID2[TAG_ID2["HTML"] = 51] = "HTML";
  TAG_ID2[TAG_ID2["I"] = 52] = "I";
  TAG_ID2[TAG_ID2["IMG"] = 53] = "IMG";
  TAG_ID2[TAG_ID2["IMAGE"] = 54] = "IMAGE";
  TAG_ID2[TAG_ID2["INPUT"] = 55] = "INPUT";
  TAG_ID2[TAG_ID2["IFRAME"] = 56] = "IFRAME";
  TAG_ID2[TAG_ID2["KEYGEN"] = 57] = "KEYGEN";
  TAG_ID2[TAG_ID2["LABEL"] = 58] = "LABEL";
  TAG_ID2[TAG_ID2["LI"] = 59] = "LI";
  TAG_ID2[TAG_ID2["LINK"] = 60] = "LINK";
  TAG_ID2[TAG_ID2["LISTING"] = 61] = "LISTING";
  TAG_ID2[TAG_ID2["MAIN"] = 62] = "MAIN";
  TAG_ID2[TAG_ID2["MALIGNMARK"] = 63] = "MALIGNMARK";
  TAG_ID2[TAG_ID2["MARQUEE"] = 64] = "MARQUEE";
  TAG_ID2[TAG_ID2["MATH"] = 65] = "MATH";
  TAG_ID2[TAG_ID2["MENU"] = 66] = "MENU";
  TAG_ID2[TAG_ID2["META"] = 67] = "META";
  TAG_ID2[TAG_ID2["MGLYPH"] = 68] = "MGLYPH";
  TAG_ID2[TAG_ID2["MI"] = 69] = "MI";
  TAG_ID2[TAG_ID2["MO"] = 70] = "MO";
  TAG_ID2[TAG_ID2["MN"] = 71] = "MN";
  TAG_ID2[TAG_ID2["MS"] = 72] = "MS";
  TAG_ID2[TAG_ID2["MTEXT"] = 73] = "MTEXT";
  TAG_ID2[TAG_ID2["NAV"] = 74] = "NAV";
  TAG_ID2[TAG_ID2["NOBR"] = 75] = "NOBR";
  TAG_ID2[TAG_ID2["NOFRAMES"] = 76] = "NOFRAMES";
  TAG_ID2[TAG_ID2["NOEMBED"] = 77] = "NOEMBED";
  TAG_ID2[TAG_ID2["NOSCRIPT"] = 78] = "NOSCRIPT";
  TAG_ID2[TAG_ID2["OBJECT"] = 79] = "OBJECT";
  TAG_ID2[TAG_ID2["OL"] = 80] = "OL";
  TAG_ID2[TAG_ID2["OPTGROUP"] = 81] = "OPTGROUP";
  TAG_ID2[TAG_ID2["OPTION"] = 82] = "OPTION";
  TAG_ID2[TAG_ID2["P"] = 83] = "P";
  TAG_ID2[TAG_ID2["PARAM"] = 84] = "PARAM";
  TAG_ID2[TAG_ID2["PLAINTEXT"] = 85] = "PLAINTEXT";
  TAG_ID2[TAG_ID2["PRE"] = 86] = "PRE";
  TAG_ID2[TAG_ID2["RB"] = 87] = "RB";
  TAG_ID2[TAG_ID2["RP"] = 88] = "RP";
  TAG_ID2[TAG_ID2["RT"] = 89] = "RT";
  TAG_ID2[TAG_ID2["RTC"] = 90] = "RTC";
  TAG_ID2[TAG_ID2["RUBY"] = 91] = "RUBY";
  TAG_ID2[TAG_ID2["S"] = 92] = "S";
  TAG_ID2[TAG_ID2["SCRIPT"] = 93] = "SCRIPT";
  TAG_ID2[TAG_ID2["SEARCH"] = 94] = "SEARCH";
  TAG_ID2[TAG_ID2["SECTION"] = 95] = "SECTION";
  TAG_ID2[TAG_ID2["SELECT"] = 96] = "SELECT";
  TAG_ID2[TAG_ID2["SOURCE"] = 97] = "SOURCE";
  TAG_ID2[TAG_ID2["SMALL"] = 98] = "SMALL";
  TAG_ID2[TAG_ID2["SPAN"] = 99] = "SPAN";
  TAG_ID2[TAG_ID2["STRIKE"] = 100] = "STRIKE";
  TAG_ID2[TAG_ID2["STRONG"] = 101] = "STRONG";
  TAG_ID2[TAG_ID2["STYLE"] = 102] = "STYLE";
  TAG_ID2[TAG_ID2["SUB"] = 103] = "SUB";
  TAG_ID2[TAG_ID2["SUMMARY"] = 104] = "SUMMARY";
  TAG_ID2[TAG_ID2["SUP"] = 105] = "SUP";
  TAG_ID2[TAG_ID2["TABLE"] = 106] = "TABLE";
  TAG_ID2[TAG_ID2["TBODY"] = 107] = "TBODY";
  TAG_ID2[TAG_ID2["TEMPLATE"] = 108] = "TEMPLATE";
  TAG_ID2[TAG_ID2["TEXTAREA"] = 109] = "TEXTAREA";
  TAG_ID2[TAG_ID2["TFOOT"] = 110] = "TFOOT";
  TAG_ID2[TAG_ID2["TD"] = 111] = "TD";
  TAG_ID2[TAG_ID2["TH"] = 112] = "TH";
  TAG_ID2[TAG_ID2["THEAD"] = 113] = "THEAD";
  TAG_ID2[TAG_ID2["TITLE"] = 114] = "TITLE";
  TAG_ID2[TAG_ID2["TR"] = 115] = "TR";
  TAG_ID2[TAG_ID2["TRACK"] = 116] = "TRACK";
  TAG_ID2[TAG_ID2["TT"] = 117] = "TT";
  TAG_ID2[TAG_ID2["U"] = 118] = "U";
  TAG_ID2[TAG_ID2["UL"] = 119] = "UL";
  TAG_ID2[TAG_ID2["SVG"] = 120] = "SVG";
  TAG_ID2[TAG_ID2["VAR"] = 121] = "VAR";
  TAG_ID2[TAG_ID2["WBR"] = 122] = "WBR";
  TAG_ID2[TAG_ID2["XMP"] = 123] = "XMP";
})(TAG_ID || (TAG_ID = {}));
var TAG_NAME_TO_ID = /* @__PURE__ */ new Map([
  [TAG_NAMES.A, TAG_ID.A],
  [TAG_NAMES.ADDRESS, TAG_ID.ADDRESS],
  [TAG_NAMES.ANNOTATION_XML, TAG_ID.ANNOTATION_XML],
  [TAG_NAMES.APPLET, TAG_ID.APPLET],
  [TAG_NAMES.AREA, TAG_ID.AREA],
  [TAG_NAMES.ARTICLE, TAG_ID.ARTICLE],
  [TAG_NAMES.ASIDE, TAG_ID.ASIDE],
  [TAG_NAMES.B, TAG_ID.B],
  [TAG_NAMES.BASE, TAG_ID.BASE],
  [TAG_NAMES.BASEFONT, TAG_ID.BASEFONT],
  [TAG_NAMES.BGSOUND, TAG_ID.BGSOUND],
  [TAG_NAMES.BIG, TAG_ID.BIG],
  [TAG_NAMES.BLOCKQUOTE, TAG_ID.BLOCKQUOTE],
  [TAG_NAMES.BODY, TAG_ID.BODY],
  [TAG_NAMES.BR, TAG_ID.BR],
  [TAG_NAMES.BUTTON, TAG_ID.BUTTON],
  [TAG_NAMES.CAPTION, TAG_ID.CAPTION],
  [TAG_NAMES.CENTER, TAG_ID.CENTER],
  [TAG_NAMES.CODE, TAG_ID.CODE],
  [TAG_NAMES.COL, TAG_ID.COL],
  [TAG_NAMES.COLGROUP, TAG_ID.COLGROUP],
  [TAG_NAMES.DD, TAG_ID.DD],
  [TAG_NAMES.DESC, TAG_ID.DESC],
  [TAG_NAMES.DETAILS, TAG_ID.DETAILS],
  [TAG_NAMES.DIALOG, TAG_ID.DIALOG],
  [TAG_NAMES.DIR, TAG_ID.DIR],
  [TAG_NAMES.DIV, TAG_ID.DIV],
  [TAG_NAMES.DL, TAG_ID.DL],
  [TAG_NAMES.DT, TAG_ID.DT],
  [TAG_NAMES.EM, TAG_ID.EM],
  [TAG_NAMES.EMBED, TAG_ID.EMBED],
  [TAG_NAMES.FIELDSET, TAG_ID.FIELDSET],
  [TAG_NAMES.FIGCAPTION, TAG_ID.FIGCAPTION],
  [TAG_NAMES.FIGURE, TAG_ID.FIGURE],
  [TAG_NAMES.FONT, TAG_ID.FONT],
  [TAG_NAMES.FOOTER, TAG_ID.FOOTER],
  [TAG_NAMES.FOREIGN_OBJECT, TAG_ID.FOREIGN_OBJECT],
  [TAG_NAMES.FORM, TAG_ID.FORM],
  [TAG_NAMES.FRAME, TAG_ID.FRAME],
  [TAG_NAMES.FRAMESET, TAG_ID.FRAMESET],
  [TAG_NAMES.H1, TAG_ID.H1],
  [TAG_NAMES.H2, TAG_ID.H2],
  [TAG_NAMES.H3, TAG_ID.H3],
  [TAG_NAMES.H4, TAG_ID.H4],
  [TAG_NAMES.H5, TAG_ID.H5],
  [TAG_NAMES.H6, TAG_ID.H6],
  [TAG_NAMES.HEAD, TAG_ID.HEAD],
  [TAG_NAMES.HEADER, TAG_ID.HEADER],
  [TAG_NAMES.HGROUP, TAG_ID.HGROUP],
  [TAG_NAMES.HR, TAG_ID.HR],
  [TAG_NAMES.HTML, TAG_ID.HTML],
  [TAG_NAMES.I, TAG_ID.I],
  [TAG_NAMES.IMG, TAG_ID.IMG],
  [TAG_NAMES.IMAGE, TAG_ID.IMAGE],
  [TAG_NAMES.INPUT, TAG_ID.INPUT],
  [TAG_NAMES.IFRAME, TAG_ID.IFRAME],
  [TAG_NAMES.KEYGEN, TAG_ID.KEYGEN],
  [TAG_NAMES.LABEL, TAG_ID.LABEL],
  [TAG_NAMES.LI, TAG_ID.LI],
  [TAG_NAMES.LINK, TAG_ID.LINK],
  [TAG_NAMES.LISTING, TAG_ID.LISTING],
  [TAG_NAMES.MAIN, TAG_ID.MAIN],
  [TAG_NAMES.MALIGNMARK, TAG_ID.MALIGNMARK],
  [TAG_NAMES.MARQUEE, TAG_ID.MARQUEE],
  [TAG_NAMES.MATH, TAG_ID.MATH],
  [TAG_NAMES.MENU, TAG_ID.MENU],
  [TAG_NAMES.META, TAG_ID.META],
  [TAG_NAMES.MGLYPH, TAG_ID.MGLYPH],
  [TAG_NAMES.MI, TAG_ID.MI],
  [TAG_NAMES.MO, TAG_ID.MO],
  [TAG_NAMES.MN, TAG_ID.MN],
  [TAG_NAMES.MS, TAG_ID.MS],
  [TAG_NAMES.MTEXT, TAG_ID.MTEXT],
  [TAG_NAMES.NAV, TAG_ID.NAV],
  [TAG_NAMES.NOBR, TAG_ID.NOBR],
  [TAG_NAMES.NOFRAMES, TAG_ID.NOFRAMES],
  [TAG_NAMES.NOEMBED, TAG_ID.NOEMBED],
  [TAG_NAMES.NOSCRIPT, TAG_ID.NOSCRIPT],
  [TAG_NAMES.OBJECT, TAG_ID.OBJECT],
  [TAG_NAMES.OL, TAG_ID.OL],
  [TAG_NAMES.OPTGROUP, TAG_ID.OPTGROUP],
  [TAG_NAMES.OPTION, TAG_ID.OPTION],
  [TAG_NAMES.P, TAG_ID.P],
  [TAG_NAMES.PARAM, TAG_ID.PARAM],
  [TAG_NAMES.PLAINTEXT, TAG_ID.PLAINTEXT],
  [TAG_NAMES.PRE, TAG_ID.PRE],
  [TAG_NAMES.RB, TAG_ID.RB],
  [TAG_NAMES.RP, TAG_ID.RP],
  [TAG_NAMES.RT, TAG_ID.RT],
  [TAG_NAMES.RTC, TAG_ID.RTC],
  [TAG_NAMES.RUBY, TAG_ID.RUBY],
  [TAG_NAMES.S, TAG_ID.S],
  [TAG_NAMES.SCRIPT, TAG_ID.SCRIPT],
  [TAG_NAMES.SEARCH, TAG_ID.SEARCH],
  [TAG_NAMES.SECTION, TAG_ID.SECTION],
  [TAG_NAMES.SELECT, TAG_ID.SELECT],
  [TAG_NAMES.SOURCE, TAG_ID.SOURCE],
  [TAG_NAMES.SMALL, TAG_ID.SMALL],
  [TAG_NAMES.SPAN, TAG_ID.SPAN],
  [TAG_NAMES.STRIKE, TAG_ID.STRIKE],
  [TAG_NAMES.STRONG, TAG_ID.STRONG],
  [TAG_NAMES.STYLE, TAG_ID.STYLE],
  [TAG_NAMES.SUB, TAG_ID.SUB],
  [TAG_NAMES.SUMMARY, TAG_ID.SUMMARY],
  [TAG_NAMES.SUP, TAG_ID.SUP],
  [TAG_NAMES.TABLE, TAG_ID.TABLE],
  [TAG_NAMES.TBODY, TAG_ID.TBODY],
  [TAG_NAMES.TEMPLATE, TAG_ID.TEMPLATE],
  [TAG_NAMES.TEXTAREA, TAG_ID.TEXTAREA],
  [TAG_NAMES.TFOOT, TAG_ID.TFOOT],
  [TAG_NAMES.TD, TAG_ID.TD],
  [TAG_NAMES.TH, TAG_ID.TH],
  [TAG_NAMES.THEAD, TAG_ID.THEAD],
  [TAG_NAMES.TITLE, TAG_ID.TITLE],
  [TAG_NAMES.TR, TAG_ID.TR],
  [TAG_NAMES.TRACK, TAG_ID.TRACK],
  [TAG_NAMES.TT, TAG_ID.TT],
  [TAG_NAMES.U, TAG_ID.U],
  [TAG_NAMES.UL, TAG_ID.UL],
  [TAG_NAMES.SVG, TAG_ID.SVG],
  [TAG_NAMES.VAR, TAG_ID.VAR],
  [TAG_NAMES.WBR, TAG_ID.WBR],
  [TAG_NAMES.XMP, TAG_ID.XMP]
]);
function getTagID(tagName) {
  var _a5;
  return (_a5 = TAG_NAME_TO_ID.get(tagName)) !== null && _a5 !== void 0 ? _a5 : TAG_ID.UNKNOWN;
}
var $2 = TAG_ID;
var SPECIAL_ELEMENTS = {
  [NS.HTML]: /* @__PURE__ */ new Set([
    $2.ADDRESS,
    $2.APPLET,
    $2.AREA,
    $2.ARTICLE,
    $2.ASIDE,
    $2.BASE,
    $2.BASEFONT,
    $2.BGSOUND,
    $2.BLOCKQUOTE,
    $2.BODY,
    $2.BR,
    $2.BUTTON,
    $2.CAPTION,
    $2.CENTER,
    $2.COL,
    $2.COLGROUP,
    $2.DD,
    $2.DETAILS,
    $2.DIR,
    $2.DIV,
    $2.DL,
    $2.DT,
    $2.EMBED,
    $2.FIELDSET,
    $2.FIGCAPTION,
    $2.FIGURE,
    $2.FOOTER,
    $2.FORM,
    $2.FRAME,
    $2.FRAMESET,
    $2.H1,
    $2.H2,
    $2.H3,
    $2.H4,
    $2.H5,
    $2.H6,
    $2.HEAD,
    $2.HEADER,
    $2.HGROUP,
    $2.HR,
    $2.HTML,
    $2.IFRAME,
    $2.IMG,
    $2.INPUT,
    $2.LI,
    $2.LINK,
    $2.LISTING,
    $2.MAIN,
    $2.MARQUEE,
    $2.MENU,
    $2.META,
    $2.NAV,
    $2.NOEMBED,
    $2.NOFRAMES,
    $2.NOSCRIPT,
    $2.OBJECT,
    $2.OL,
    $2.P,
    $2.PARAM,
    $2.PLAINTEXT,
    $2.PRE,
    $2.SCRIPT,
    $2.SECTION,
    $2.SELECT,
    $2.SOURCE,
    $2.STYLE,
    $2.SUMMARY,
    $2.TABLE,
    $2.TBODY,
    $2.TD,
    $2.TEMPLATE,
    $2.TEXTAREA,
    $2.TFOOT,
    $2.TH,
    $2.THEAD,
    $2.TITLE,
    $2.TR,
    $2.TRACK,
    $2.UL,
    $2.WBR,
    $2.XMP
  ]),
  [NS.MATHML]: /* @__PURE__ */ new Set([$2.MI, $2.MO, $2.MN, $2.MS, $2.MTEXT, $2.ANNOTATION_XML]),
  [NS.SVG]: /* @__PURE__ */ new Set([$2.TITLE, $2.FOREIGN_OBJECT, $2.DESC]),
  [NS.XLINK]: /* @__PURE__ */ new Set(),
  [NS.XML]: /* @__PURE__ */ new Set(),
  [NS.XMLNS]: /* @__PURE__ */ new Set()
};
var NUMBERED_HEADERS = /* @__PURE__ */ new Set([$2.H1, $2.H2, $2.H3, $2.H4, $2.H5, $2.H6]);
var UNESCAPED_TEXT = /* @__PURE__ */ new Set([
  TAG_NAMES.STYLE,
  TAG_NAMES.SCRIPT,
  TAG_NAMES.XMP,
  TAG_NAMES.IFRAME,
  TAG_NAMES.NOEMBED,
  TAG_NAMES.NOFRAMES,
  TAG_NAMES.PLAINTEXT
]);
function hasUnescapedText(tn, scriptingEnabled) {
  return UNESCAPED_TEXT.has(tn) || scriptingEnabled && tn === TAG_NAMES.NOSCRIPT;
}

// node_modules/parse5/dist/tokenizer/index.js
var State2;
(function(State3) {
  State3[State3["DATA"] = 0] = "DATA";
  State3[State3["RCDATA"] = 1] = "RCDATA";
  State3[State3["RAWTEXT"] = 2] = "RAWTEXT";
  State3[State3["SCRIPT_DATA"] = 3] = "SCRIPT_DATA";
  State3[State3["PLAINTEXT"] = 4] = "PLAINTEXT";
  State3[State3["TAG_OPEN"] = 5] = "TAG_OPEN";
  State3[State3["END_TAG_OPEN"] = 6] = "END_TAG_OPEN";
  State3[State3["TAG_NAME"] = 7] = "TAG_NAME";
  State3[State3["RCDATA_LESS_THAN_SIGN"] = 8] = "RCDATA_LESS_THAN_SIGN";
  State3[State3["RCDATA_END_TAG_OPEN"] = 9] = "RCDATA_END_TAG_OPEN";
  State3[State3["RCDATA_END_TAG_NAME"] = 10] = "RCDATA_END_TAG_NAME";
  State3[State3["RAWTEXT_LESS_THAN_SIGN"] = 11] = "RAWTEXT_LESS_THAN_SIGN";
  State3[State3["RAWTEXT_END_TAG_OPEN"] = 12] = "RAWTEXT_END_TAG_OPEN";
  State3[State3["RAWTEXT_END_TAG_NAME"] = 13] = "RAWTEXT_END_TAG_NAME";
  State3[State3["SCRIPT_DATA_LESS_THAN_SIGN"] = 14] = "SCRIPT_DATA_LESS_THAN_SIGN";
  State3[State3["SCRIPT_DATA_END_TAG_OPEN"] = 15] = "SCRIPT_DATA_END_TAG_OPEN";
  State3[State3["SCRIPT_DATA_END_TAG_NAME"] = 16] = "SCRIPT_DATA_END_TAG_NAME";
  State3[State3["SCRIPT_DATA_ESCAPE_START"] = 17] = "SCRIPT_DATA_ESCAPE_START";
  State3[State3["SCRIPT_DATA_ESCAPE_START_DASH"] = 18] = "SCRIPT_DATA_ESCAPE_START_DASH";
  State3[State3["SCRIPT_DATA_ESCAPED"] = 19] = "SCRIPT_DATA_ESCAPED";
  State3[State3["SCRIPT_DATA_ESCAPED_DASH"] = 20] = "SCRIPT_DATA_ESCAPED_DASH";
  State3[State3["SCRIPT_DATA_ESCAPED_DASH_DASH"] = 21] = "SCRIPT_DATA_ESCAPED_DASH_DASH";
  State3[State3["SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN"] = 22] = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN";
  State3[State3["SCRIPT_DATA_ESCAPED_END_TAG_OPEN"] = 23] = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN";
  State3[State3["SCRIPT_DATA_ESCAPED_END_TAG_NAME"] = 24] = "SCRIPT_DATA_ESCAPED_END_TAG_NAME";
  State3[State3["SCRIPT_DATA_DOUBLE_ESCAPE_START"] = 25] = "SCRIPT_DATA_DOUBLE_ESCAPE_START";
  State3[State3["SCRIPT_DATA_DOUBLE_ESCAPED"] = 26] = "SCRIPT_DATA_DOUBLE_ESCAPED";
  State3[State3["SCRIPT_DATA_DOUBLE_ESCAPED_DASH"] = 27] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH";
  State3[State3["SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH"] = 28] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH";
  State3[State3["SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN"] = 29] = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN";
  State3[State3["SCRIPT_DATA_DOUBLE_ESCAPE_END"] = 30] = "SCRIPT_DATA_DOUBLE_ESCAPE_END";
  State3[State3["BEFORE_ATTRIBUTE_NAME"] = 31] = "BEFORE_ATTRIBUTE_NAME";
  State3[State3["ATTRIBUTE_NAME"] = 32] = "ATTRIBUTE_NAME";
  State3[State3["AFTER_ATTRIBUTE_NAME"] = 33] = "AFTER_ATTRIBUTE_NAME";
  State3[State3["BEFORE_ATTRIBUTE_VALUE"] = 34] = "BEFORE_ATTRIBUTE_VALUE";
  State3[State3["ATTRIBUTE_VALUE_DOUBLE_QUOTED"] = 35] = "ATTRIBUTE_VALUE_DOUBLE_QUOTED";
  State3[State3["ATTRIBUTE_VALUE_SINGLE_QUOTED"] = 36] = "ATTRIBUTE_VALUE_SINGLE_QUOTED";
  State3[State3["ATTRIBUTE_VALUE_UNQUOTED"] = 37] = "ATTRIBUTE_VALUE_UNQUOTED";
  State3[State3["AFTER_ATTRIBUTE_VALUE_QUOTED"] = 38] = "AFTER_ATTRIBUTE_VALUE_QUOTED";
  State3[State3["SELF_CLOSING_START_TAG"] = 39] = "SELF_CLOSING_START_TAG";
  State3[State3["BOGUS_COMMENT"] = 40] = "BOGUS_COMMENT";
  State3[State3["MARKUP_DECLARATION_OPEN"] = 41] = "MARKUP_DECLARATION_OPEN";
  State3[State3["COMMENT_START"] = 42] = "COMMENT_START";
  State3[State3["COMMENT_START_DASH"] = 43] = "COMMENT_START_DASH";
  State3[State3["COMMENT"] = 44] = "COMMENT";
  State3[State3["COMMENT_LESS_THAN_SIGN"] = 45] = "COMMENT_LESS_THAN_SIGN";
  State3[State3["COMMENT_LESS_THAN_SIGN_BANG"] = 46] = "COMMENT_LESS_THAN_SIGN_BANG";
  State3[State3["COMMENT_LESS_THAN_SIGN_BANG_DASH"] = 47] = "COMMENT_LESS_THAN_SIGN_BANG_DASH";
  State3[State3["COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH"] = 48] = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH";
  State3[State3["COMMENT_END_DASH"] = 49] = "COMMENT_END_DASH";
  State3[State3["COMMENT_END"] = 50] = "COMMENT_END";
  State3[State3["COMMENT_END_BANG"] = 51] = "COMMENT_END_BANG";
  State3[State3["DOCTYPE"] = 52] = "DOCTYPE";
  State3[State3["BEFORE_DOCTYPE_NAME"] = 53] = "BEFORE_DOCTYPE_NAME";
  State3[State3["DOCTYPE_NAME"] = 54] = "DOCTYPE_NAME";
  State3[State3["AFTER_DOCTYPE_NAME"] = 55] = "AFTER_DOCTYPE_NAME";
  State3[State3["AFTER_DOCTYPE_PUBLIC_KEYWORD"] = 56] = "AFTER_DOCTYPE_PUBLIC_KEYWORD";
  State3[State3["BEFORE_DOCTYPE_PUBLIC_IDENTIFIER"] = 57] = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER";
  State3[State3["DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED"] = 58] = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED";
  State3[State3["DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED"] = 59] = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED";
  State3[State3["AFTER_DOCTYPE_PUBLIC_IDENTIFIER"] = 60] = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER";
  State3[State3["BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS"] = 61] = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS";
  State3[State3["AFTER_DOCTYPE_SYSTEM_KEYWORD"] = 62] = "AFTER_DOCTYPE_SYSTEM_KEYWORD";
  State3[State3["BEFORE_DOCTYPE_SYSTEM_IDENTIFIER"] = 63] = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER";
  State3[State3["DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED"] = 64] = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED";
  State3[State3["DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED"] = 65] = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED";
  State3[State3["AFTER_DOCTYPE_SYSTEM_IDENTIFIER"] = 66] = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER";
  State3[State3["BOGUS_DOCTYPE"] = 67] = "BOGUS_DOCTYPE";
  State3[State3["CDATA_SECTION"] = 68] = "CDATA_SECTION";
  State3[State3["CDATA_SECTION_BRACKET"] = 69] = "CDATA_SECTION_BRACKET";
  State3[State3["CDATA_SECTION_END"] = 70] = "CDATA_SECTION_END";
  State3[State3["CHARACTER_REFERENCE"] = 71] = "CHARACTER_REFERENCE";
  State3[State3["AMBIGUOUS_AMPERSAND"] = 72] = "AMBIGUOUS_AMPERSAND";
})(State2 || (State2 = {}));
var TokenizerMode = {
  DATA: State2.DATA,
  RCDATA: State2.RCDATA,
  RAWTEXT: State2.RAWTEXT,
  SCRIPT_DATA: State2.SCRIPT_DATA,
  PLAINTEXT: State2.PLAINTEXT,
  CDATA_SECTION: State2.CDATA_SECTION
};
function isAsciiDigit(cp) {
  return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;
}
function isAsciiUpper(cp) {
  return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;
}
function isAsciiLower(cp) {
  return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;
}
function isAsciiLetter(cp) {
  return isAsciiLower(cp) || isAsciiUpper(cp);
}
function isAsciiAlphaNumeric4(cp) {
  return isAsciiLetter(cp) || isAsciiDigit(cp);
}
function toAsciiLower(cp) {
  return cp + 32;
}
function isWhitespace3(cp) {
  return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;
}
function isScriptDataDoubleEscapeSequenceEnd(cp) {
  return isWhitespace3(cp) || cp === CODE_POINTS.SOLIDUS || cp === CODE_POINTS.GREATER_THAN_SIGN;
}
function getErrorForNumericCharacterReference(code) {
  if (code === CODE_POINTS.NULL) {
    return ERR.nullCharacterReference;
  } else if (code > 1114111) {
    return ERR.characterReferenceOutsideUnicodeRange;
  } else if (isSurrogate(code)) {
    return ERR.surrogateCharacterReference;
  } else if (isUndefinedCodePoint(code)) {
    return ERR.noncharacterCharacterReference;
  } else if (isControlCodePoint(code) || code === CODE_POINTS.CARRIAGE_RETURN) {
    return ERR.controlCharacterReference;
  }
  return null;
}
var Tokenizer2 = class {
  constructor(options, handler) {
    this.options = options;
    this.handler = handler;
    this.paused = false;
    this.inLoop = false;
    this.inForeignNode = false;
    this.lastStartTagName = "";
    this.active = false;
    this.state = State2.DATA;
    this.returnState = State2.DATA;
    this.entityStartPos = 0;
    this.consumedAfterSnapshot = -1;
    this.currentCharacterToken = null;
    this.currentToken = null;
    this.currentAttr = { name: "", value: "" };
    this.preprocessor = new Preprocessor(handler);
    this.currentLocation = this.getCurrentLocation(-1);
    this.entityDecoder = new EntityDecoder3(htmlDecodeTree2, (cp, consumed) => {
      this.preprocessor.pos = this.entityStartPos + consumed - 1;
      this._flushCodePointConsumedAsCharacterReference(cp);
    }, handler.onParseError ? {
      missingSemicolonAfterCharacterReference: () => {
        this._err(ERR.missingSemicolonAfterCharacterReference, 1);
      },
      absenceOfDigitsInNumericCharacterReference: (consumed) => {
        this._err(ERR.absenceOfDigitsInNumericCharacterReference, this.entityStartPos - this.preprocessor.pos + consumed);
      },
      validateNumericCharacterReference: (code) => {
        const error = getErrorForNumericCharacterReference(code);
        if (error)
          this._err(error, 1);
      }
    } : void 0);
  }
  //Errors
  _err(code, cpOffset = 0) {
    var _a5, _b;
    (_b = (_a5 = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a5, this.preprocessor.getError(code, cpOffset));
  }
  // NOTE: `offset` may never run across line boundaries.
  getCurrentLocation(offset) {
    if (!this.options.sourceCodeLocationInfo) {
      return null;
    }
    return {
      startLine: this.preprocessor.line,
      startCol: this.preprocessor.col - offset,
      startOffset: this.preprocessor.offset - offset,
      endLine: -1,
      endCol: -1,
      endOffset: -1
    };
  }
  _runParsingLoop() {
    if (this.inLoop)
      return;
    this.inLoop = true;
    while (this.active && !this.paused) {
      this.consumedAfterSnapshot = 0;
      const cp = this._consume();
      if (!this._ensureHibernation()) {
        this._callState(cp);
      }
    }
    this.inLoop = false;
  }
  //API
  pause() {
    this.paused = true;
  }
  resume(writeCallback) {
    if (!this.paused) {
      throw new Error("Parser was already resumed");
    }
    this.paused = false;
    if (this.inLoop)
      return;
    this._runParsingLoop();
    if (!this.paused) {
      writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();
    }
  }
  write(chunk, isLastChunk, writeCallback) {
    this.active = true;
    this.preprocessor.write(chunk, isLastChunk);
    this._runParsingLoop();
    if (!this.paused) {
      writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();
    }
  }
  insertHtmlAtCurrentPos(chunk) {
    this.active = true;
    this.preprocessor.insertHtmlAtCurrentPos(chunk);
    this._runParsingLoop();
  }
  //Hibernation
  _ensureHibernation() {
    if (this.preprocessor.endOfChunkHit) {
      this.preprocessor.retreat(this.consumedAfterSnapshot);
      this.consumedAfterSnapshot = 0;
      this.active = false;
      return true;
    }
    return false;
  }
  //Consumption
  _consume() {
    this.consumedAfterSnapshot++;
    return this.preprocessor.advance();
  }
  _advanceBy(count) {
    this.consumedAfterSnapshot += count;
    for (let i = 0; i < count; i++) {
      this.preprocessor.advance();
    }
  }
  _consumeSequenceIfMatch(pattern, caseSensitive) {
    if (this.preprocessor.startsWith(pattern, caseSensitive)) {
      this._advanceBy(pattern.length - 1);
      return true;
    }
    return false;
  }
  //Token creation
  _createStartTagToken() {
    this.currentToken = {
      type: TokenType.START_TAG,
      tagName: "",
      tagID: TAG_ID.UNKNOWN,
      selfClosing: false,
      ackSelfClosing: false,
      attrs: [],
      location: this.getCurrentLocation(1)
    };
  }
  _createEndTagToken() {
    this.currentToken = {
      type: TokenType.END_TAG,
      tagName: "",
      tagID: TAG_ID.UNKNOWN,
      selfClosing: false,
      ackSelfClosing: false,
      attrs: [],
      location: this.getCurrentLocation(2)
    };
  }
  _createCommentToken(offset) {
    this.currentToken = {
      type: TokenType.COMMENT,
      data: "",
      location: this.getCurrentLocation(offset)
    };
  }
  _createDoctypeToken(initialName) {
    this.currentToken = {
      type: TokenType.DOCTYPE,
      name: initialName,
      forceQuirks: false,
      publicId: null,
      systemId: null,
      location: this.currentLocation
    };
  }
  _createCharacterToken(type, chars) {
    this.currentCharacterToken = {
      type,
      chars,
      location: this.currentLocation
    };
  }
  //Tag attributes
  _createAttr(attrNameFirstCh) {
    this.currentAttr = {
      name: attrNameFirstCh,
      value: ""
    };
    this.currentLocation = this.getCurrentLocation(0);
  }
  _leaveAttrName() {
    var _a5;
    var _b;
    const token = this.currentToken;
    if (getTokenAttr(token, this.currentAttr.name) === null) {
      token.attrs.push(this.currentAttr);
      if (token.location && this.currentLocation) {
        const attrLocations = (_a5 = (_b = token.location).attrs) !== null && _a5 !== void 0 ? _a5 : _b.attrs = /* @__PURE__ */ Object.create(null);
        attrLocations[this.currentAttr.name] = this.currentLocation;
        this._leaveAttrValue();
      }
    } else {
      this._err(ERR.duplicateAttribute);
    }
  }
  _leaveAttrValue() {
    if (this.currentLocation) {
      this.currentLocation.endLine = this.preprocessor.line;
      this.currentLocation.endCol = this.preprocessor.col;
      this.currentLocation.endOffset = this.preprocessor.offset;
    }
  }
  //Token emission
  prepareToken(ct) {
    this._emitCurrentCharacterToken(ct.location);
    this.currentToken = null;
    if (ct.location) {
      ct.location.endLine = this.preprocessor.line;
      ct.location.endCol = this.preprocessor.col + 1;
      ct.location.endOffset = this.preprocessor.offset + 1;
    }
    this.currentLocation = this.getCurrentLocation(-1);
  }
  emitCurrentTagToken() {
    const ct = this.currentToken;
    this.prepareToken(ct);
    ct.tagID = getTagID(ct.tagName);
    if (ct.type === TokenType.START_TAG) {
      this.lastStartTagName = ct.tagName;
      this.handler.onStartTag(ct);
    } else {
      if (ct.attrs.length > 0) {
        this._err(ERR.endTagWithAttributes);
      }
      if (ct.selfClosing) {
        this._err(ERR.endTagWithTrailingSolidus);
      }
      this.handler.onEndTag(ct);
    }
    this.preprocessor.dropParsedChunk();
  }
  emitCurrentComment(ct) {
    this.prepareToken(ct);
    this.handler.onComment(ct);
    this.preprocessor.dropParsedChunk();
  }
  emitCurrentDoctype(ct) {
    this.prepareToken(ct);
    this.handler.onDoctype(ct);
    this.preprocessor.dropParsedChunk();
  }
  _emitCurrentCharacterToken(nextLocation) {
    if (this.currentCharacterToken) {
      if (nextLocation && this.currentCharacterToken.location) {
        this.currentCharacterToken.location.endLine = nextLocation.startLine;
        this.currentCharacterToken.location.endCol = nextLocation.startCol;
        this.currentCharacterToken.location.endOffset = nextLocation.startOffset;
      }
      switch (this.currentCharacterToken.type) {
        case TokenType.CHARACTER: {
          this.handler.onCharacter(this.currentCharacterToken);
          break;
        }
        case TokenType.NULL_CHARACTER: {
          this.handler.onNullCharacter(this.currentCharacterToken);
          break;
        }
        case TokenType.WHITESPACE_CHARACTER: {
          this.handler.onWhitespaceCharacter(this.currentCharacterToken);
          break;
        }
      }
      this.currentCharacterToken = null;
    }
  }
  _emitEOFToken() {
    const location = this.getCurrentLocation(0);
    if (location) {
      location.endLine = location.startLine;
      location.endCol = location.startCol;
      location.endOffset = location.startOffset;
    }
    this._emitCurrentCharacterToken(location);
    this.handler.onEof({ type: TokenType.EOF, location });
    this.active = false;
  }
  //Characters emission
  //OPTIMIZATION: The specification uses only one type of character token (one token per character).
  //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
  //If we have a sequence of characters that belong to the same group, the parser can process it
  //as a single solid character token.
  //So, there are 3 types of character tokens in parse5:
  //1)TokenType.NULL_CHARACTER - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
  //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
  //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
  _appendCharToCurrentCharacterToken(type, ch) {
    if (this.currentCharacterToken) {
      if (this.currentCharacterToken.type === type) {
        this.currentCharacterToken.chars += ch;
        return;
      } else {
        this.currentLocation = this.getCurrentLocation(0);
        this._emitCurrentCharacterToken(this.currentLocation);
        this.preprocessor.dropParsedChunk();
      }
    }
    this._createCharacterToken(type, ch);
  }
  _emitCodePoint(cp) {
    const type = isWhitespace3(cp) ? TokenType.WHITESPACE_CHARACTER : cp === CODE_POINTS.NULL ? TokenType.NULL_CHARACTER : TokenType.CHARACTER;
    this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));
  }
  //NOTE: used when we emit characters explicitly.
  //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.
  _emitChars(ch) {
    this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);
  }
  // Character reference helpers
  _startCharacterReference() {
    this.returnState = this.state;
    this.state = State2.CHARACTER_REFERENCE;
    this.entityStartPos = this.preprocessor.pos;
    this.entityDecoder.startEntity(this._isCharacterReferenceInAttribute() ? DecodingMode3.Attribute : DecodingMode3.Legacy);
  }
  _isCharacterReferenceInAttribute() {
    return this.returnState === State2.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === State2.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === State2.ATTRIBUTE_VALUE_UNQUOTED;
  }
  _flushCodePointConsumedAsCharacterReference(cp) {
    if (this._isCharacterReferenceInAttribute()) {
      this.currentAttr.value += String.fromCodePoint(cp);
    } else {
      this._emitCodePoint(cp);
    }
  }
  // Calling states this way turns out to be much faster than any other approach.
  _callState(cp) {
    switch (this.state) {
      case State2.DATA: {
        this._stateData(cp);
        break;
      }
      case State2.RCDATA: {
        this._stateRcdata(cp);
        break;
      }
      case State2.RAWTEXT: {
        this._stateRawtext(cp);
        break;
      }
      case State2.SCRIPT_DATA: {
        this._stateScriptData(cp);
        break;
      }
      case State2.PLAINTEXT: {
        this._statePlaintext(cp);
        break;
      }
      case State2.TAG_OPEN: {
        this._stateTagOpen(cp);
        break;
      }
      case State2.END_TAG_OPEN: {
        this._stateEndTagOpen(cp);
        break;
      }
      case State2.TAG_NAME: {
        this._stateTagName(cp);
        break;
      }
      case State2.RCDATA_LESS_THAN_SIGN: {
        this._stateRcdataLessThanSign(cp);
        break;
      }
      case State2.RCDATA_END_TAG_OPEN: {
        this._stateRcdataEndTagOpen(cp);
        break;
      }
      case State2.RCDATA_END_TAG_NAME: {
        this._stateRcdataEndTagName(cp);
        break;
      }
      case State2.RAWTEXT_LESS_THAN_SIGN: {
        this._stateRawtextLessThanSign(cp);
        break;
      }
      case State2.RAWTEXT_END_TAG_OPEN: {
        this._stateRawtextEndTagOpen(cp);
        break;
      }
      case State2.RAWTEXT_END_TAG_NAME: {
        this._stateRawtextEndTagName(cp);
        break;
      }
      case State2.SCRIPT_DATA_LESS_THAN_SIGN: {
        this._stateScriptDataLessThanSign(cp);
        break;
      }
      case State2.SCRIPT_DATA_END_TAG_OPEN: {
        this._stateScriptDataEndTagOpen(cp);
        break;
      }
      case State2.SCRIPT_DATA_END_TAG_NAME: {
        this._stateScriptDataEndTagName(cp);
        break;
      }
      case State2.SCRIPT_DATA_ESCAPE_START: {
        this._stateScriptDataEscapeStart(cp);
        break;
      }
      case State2.SCRIPT_DATA_ESCAPE_START_DASH: {
        this._stateScriptDataEscapeStartDash(cp);
        break;
      }
      case State2.SCRIPT_DATA_ESCAPED: {
        this._stateScriptDataEscaped(cp);
        break;
      }
      case State2.SCRIPT_DATA_ESCAPED_DASH: {
        this._stateScriptDataEscapedDash(cp);
        break;
      }
      case State2.SCRIPT_DATA_ESCAPED_DASH_DASH: {
        this._stateScriptDataEscapedDashDash(cp);
        break;
      }
      case State2.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {
        this._stateScriptDataEscapedLessThanSign(cp);
        break;
      }
      case State2.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {
        this._stateScriptDataEscapedEndTagOpen(cp);
        break;
      }
      case State2.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {
        this._stateScriptDataEscapedEndTagName(cp);
        break;
      }
      case State2.SCRIPT_DATA_DOUBLE_ESCAPE_START: {
        this._stateScriptDataDoubleEscapeStart(cp);
        break;
      }
      case State2.SCRIPT_DATA_DOUBLE_ESCAPED: {
        this._stateScriptDataDoubleEscaped(cp);
        break;
      }
      case State2.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {
        this._stateScriptDataDoubleEscapedDash(cp);
        break;
      }
      case State2.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {
        this._stateScriptDataDoubleEscapedDashDash(cp);
        break;
      }
      case State2.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {
        this._stateScriptDataDoubleEscapedLessThanSign(cp);
        break;
      }
      case State2.SCRIPT_DATA_DOUBLE_ESCAPE_END: {
        this._stateScriptDataDoubleEscapeEnd(cp);
        break;
      }
      case State2.BEFORE_ATTRIBUTE_NAME: {
        this._stateBeforeAttributeName(cp);
        break;
      }
      case State2.ATTRIBUTE_NAME: {
        this._stateAttributeName(cp);
        break;
      }
      case State2.AFTER_ATTRIBUTE_NAME: {
        this._stateAfterAttributeName(cp);
        break;
      }
      case State2.BEFORE_ATTRIBUTE_VALUE: {
        this._stateBeforeAttributeValue(cp);
        break;
      }
      case State2.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {
        this._stateAttributeValueDoubleQuoted(cp);
        break;
      }
      case State2.ATTRIBUTE_VALUE_SINGLE_QUOTED: {
        this._stateAttributeValueSingleQuoted(cp);
        break;
      }
      case State2.ATTRIBUTE_VALUE_UNQUOTED: {
        this._stateAttributeValueUnquoted(cp);
        break;
      }
      case State2.AFTER_ATTRIBUTE_VALUE_QUOTED: {
        this._stateAfterAttributeValueQuoted(cp);
        break;
      }
      case State2.SELF_CLOSING_START_TAG: {
        this._stateSelfClosingStartTag(cp);
        break;
      }
      case State2.BOGUS_COMMENT: {
        this._stateBogusComment(cp);
        break;
      }
      case State2.MARKUP_DECLARATION_OPEN: {
        this._stateMarkupDeclarationOpen(cp);
        break;
      }
      case State2.COMMENT_START: {
        this._stateCommentStart(cp);
        break;
      }
      case State2.COMMENT_START_DASH: {
        this._stateCommentStartDash(cp);
        break;
      }
      case State2.COMMENT: {
        this._stateComment(cp);
        break;
      }
      case State2.COMMENT_LESS_THAN_SIGN: {
        this._stateCommentLessThanSign(cp);
        break;
      }
      case State2.COMMENT_LESS_THAN_SIGN_BANG: {
        this._stateCommentLessThanSignBang(cp);
        break;
      }
      case State2.COMMENT_LESS_THAN_SIGN_BANG_DASH: {
        this._stateCommentLessThanSignBangDash(cp);
        break;
      }
      case State2.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {
        this._stateCommentLessThanSignBangDashDash(cp);
        break;
      }
      case State2.COMMENT_END_DASH: {
        this._stateCommentEndDash(cp);
        break;
      }
      case State2.COMMENT_END: {
        this._stateCommentEnd(cp);
        break;
      }
      case State2.COMMENT_END_BANG: {
        this._stateCommentEndBang(cp);
        break;
      }
      case State2.DOCTYPE: {
        this._stateDoctype(cp);
        break;
      }
      case State2.BEFORE_DOCTYPE_NAME: {
        this._stateBeforeDoctypeName(cp);
        break;
      }
      case State2.DOCTYPE_NAME: {
        this._stateDoctypeName(cp);
        break;
      }
      case State2.AFTER_DOCTYPE_NAME: {
        this._stateAfterDoctypeName(cp);
        break;
      }
      case State2.AFTER_DOCTYPE_PUBLIC_KEYWORD: {
        this._stateAfterDoctypePublicKeyword(cp);
        break;
      }
      case State2.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {
        this._stateBeforeDoctypePublicIdentifier(cp);
        break;
      }
      case State2.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {
        this._stateDoctypePublicIdentifierDoubleQuoted(cp);
        break;
      }
      case State2.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {
        this._stateDoctypePublicIdentifierSingleQuoted(cp);
        break;
      }
      case State2.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {
        this._stateAfterDoctypePublicIdentifier(cp);
        break;
      }
      case State2.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {
        this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);
        break;
      }
      case State2.AFTER_DOCTYPE_SYSTEM_KEYWORD: {
        this._stateAfterDoctypeSystemKeyword(cp);
        break;
      }
      case State2.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {
        this._stateBeforeDoctypeSystemIdentifier(cp);
        break;
      }
      case State2.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {
        this._stateDoctypeSystemIdentifierDoubleQuoted(cp);
        break;
      }
      case State2.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {
        this._stateDoctypeSystemIdentifierSingleQuoted(cp);
        break;
      }
      case State2.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {
        this._stateAfterDoctypeSystemIdentifier(cp);
        break;
      }
      case State2.BOGUS_DOCTYPE: {
        this._stateBogusDoctype(cp);
        break;
      }
      case State2.CDATA_SECTION: {
        this._stateCdataSection(cp);
        break;
      }
      case State2.CDATA_SECTION_BRACKET: {
        this._stateCdataSectionBracket(cp);
        break;
      }
      case State2.CDATA_SECTION_END: {
        this._stateCdataSectionEnd(cp);
        break;
      }
      case State2.CHARACTER_REFERENCE: {
        this._stateCharacterReference();
        break;
      }
      case State2.AMBIGUOUS_AMPERSAND: {
        this._stateAmbiguousAmpersand(cp);
        break;
      }
      default: {
        throw new Error("Unknown state");
      }
    }
  }
  // State machine
  // Data state
  //------------------------------------------------------------------
  _stateData(cp) {
    switch (cp) {
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State2.TAG_OPEN;
        break;
      }
      case CODE_POINTS.AMPERSAND: {
        this._startCharacterReference();
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitCodePoint(cp);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  //  RCDATA state
  //------------------------------------------------------------------
  _stateRcdata(cp) {
    switch (cp) {
      case CODE_POINTS.AMPERSAND: {
        this._startCharacterReference();
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State2.RCDATA_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  // RAWTEXT state
  //------------------------------------------------------------------
  _stateRawtext(cp) {
    switch (cp) {
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State2.RAWTEXT_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  // Script data state
  //------------------------------------------------------------------
  _stateScriptData(cp) {
    switch (cp) {
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State2.SCRIPT_DATA_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  // PLAINTEXT state
  //------------------------------------------------------------------
  _statePlaintext(cp) {
    switch (cp) {
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  // Tag open state
  //------------------------------------------------------------------
  _stateTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this._createStartTagToken();
      this.state = State2.TAG_NAME;
      this._stateTagName(cp);
    } else
      switch (cp) {
        case CODE_POINTS.EXCLAMATION_MARK: {
          this.state = State2.MARKUP_DECLARATION_OPEN;
          break;
        }
        case CODE_POINTS.SOLIDUS: {
          this.state = State2.END_TAG_OPEN;
          break;
        }
        case CODE_POINTS.QUESTION_MARK: {
          this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);
          this._createCommentToken(1);
          this.state = State2.BOGUS_COMMENT;
          this._stateBogusComment(cp);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofBeforeTagName);
          this._emitChars("<");
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.invalidFirstCharacterOfTagName);
          this._emitChars("<");
          this.state = State2.DATA;
          this._stateData(cp);
        }
      }
  }
  // End tag open state
  //------------------------------------------------------------------
  _stateEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this._createEndTagToken();
      this.state = State2.TAG_NAME;
      this._stateTagName(cp);
    } else
      switch (cp) {
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.missingEndTagName);
          this.state = State2.DATA;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofBeforeTagName);
          this._emitChars("</");
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.invalidFirstCharacterOfTagName);
          this._createCommentToken(2);
          this.state = State2.BOGUS_COMMENT;
          this._stateBogusComment(cp);
        }
      }
  }
  // Tag name state
  //------------------------------------------------------------------
  _stateTagName(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State2.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case CODE_POINTS.SOLIDUS: {
        this.state = State2.SELF_CLOSING_START_TAG;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State2.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.tagName += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
      }
    }
  }
  // RCDATA less-than sign state
  //------------------------------------------------------------------
  _stateRcdataLessThanSign(cp) {
    if (cp === CODE_POINTS.SOLIDUS) {
      this.state = State2.RCDATA_END_TAG_OPEN;
    } else {
      this._emitChars("<");
      this.state = State2.RCDATA;
      this._stateRcdata(cp);
    }
  }
  // RCDATA end tag open state
  //------------------------------------------------------------------
  _stateRcdataEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this.state = State2.RCDATA_END_TAG_NAME;
      this._stateRcdataEndTagName(cp);
    } else {
      this._emitChars("</");
      this.state = State2.RCDATA;
      this._stateRcdata(cp);
    }
  }
  handleSpecialEndTag(_cp) {
    if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {
      return !this._ensureHibernation();
    }
    this._createEndTagToken();
    const token = this.currentToken;
    token.tagName = this.lastStartTagName;
    const cp = this.preprocessor.peek(this.lastStartTagName.length);
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this._advanceBy(this.lastStartTagName.length);
        this.state = State2.BEFORE_ATTRIBUTE_NAME;
        return false;
      }
      case CODE_POINTS.SOLIDUS: {
        this._advanceBy(this.lastStartTagName.length);
        this.state = State2.SELF_CLOSING_START_TAG;
        return false;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._advanceBy(this.lastStartTagName.length);
        this.emitCurrentTagToken();
        this.state = State2.DATA;
        return false;
      }
      default: {
        return !this._ensureHibernation();
      }
    }
  }
  // RCDATA end tag name state
  //------------------------------------------------------------------
  _stateRcdataEndTagName(cp) {
    if (this.handleSpecialEndTag(cp)) {
      this._emitChars("</");
      this.state = State2.RCDATA;
      this._stateRcdata(cp);
    }
  }
  // RAWTEXT less-than sign state
  //------------------------------------------------------------------
  _stateRawtextLessThanSign(cp) {
    if (cp === CODE_POINTS.SOLIDUS) {
      this.state = State2.RAWTEXT_END_TAG_OPEN;
    } else {
      this._emitChars("<");
      this.state = State2.RAWTEXT;
      this._stateRawtext(cp);
    }
  }
  // RAWTEXT end tag open state
  //------------------------------------------------------------------
  _stateRawtextEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this.state = State2.RAWTEXT_END_TAG_NAME;
      this._stateRawtextEndTagName(cp);
    } else {
      this._emitChars("</");
      this.state = State2.RAWTEXT;
      this._stateRawtext(cp);
    }
  }
  // RAWTEXT end tag name state
  //------------------------------------------------------------------
  _stateRawtextEndTagName(cp) {
    if (this.handleSpecialEndTag(cp)) {
      this._emitChars("</");
      this.state = State2.RAWTEXT;
      this._stateRawtext(cp);
    }
  }
  // Script data less-than sign state
  //------------------------------------------------------------------
  _stateScriptDataLessThanSign(cp) {
    switch (cp) {
      case CODE_POINTS.SOLIDUS: {
        this.state = State2.SCRIPT_DATA_END_TAG_OPEN;
        break;
      }
      case CODE_POINTS.EXCLAMATION_MARK: {
        this.state = State2.SCRIPT_DATA_ESCAPE_START;
        this._emitChars("<!");
        break;
      }
      default: {
        this._emitChars("<");
        this.state = State2.SCRIPT_DATA;
        this._stateScriptData(cp);
      }
    }
  }
  // Script data end tag open state
  //------------------------------------------------------------------
  _stateScriptDataEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this.state = State2.SCRIPT_DATA_END_TAG_NAME;
      this._stateScriptDataEndTagName(cp);
    } else {
      this._emitChars("</");
      this.state = State2.SCRIPT_DATA;
      this._stateScriptData(cp);
    }
  }
  // Script data end tag name state
  //------------------------------------------------------------------
  _stateScriptDataEndTagName(cp) {
    if (this.handleSpecialEndTag(cp)) {
      this._emitChars("</");
      this.state = State2.SCRIPT_DATA;
      this._stateScriptData(cp);
    }
  }
  // Script data escape start state
  //------------------------------------------------------------------
  _stateScriptDataEscapeStart(cp) {
    if (cp === CODE_POINTS.HYPHEN_MINUS) {
      this.state = State2.SCRIPT_DATA_ESCAPE_START_DASH;
      this._emitChars("-");
    } else {
      this.state = State2.SCRIPT_DATA;
      this._stateScriptData(cp);
    }
  }
  // Script data escape start dash state
  //------------------------------------------------------------------
  _stateScriptDataEscapeStartDash(cp) {
    if (cp === CODE_POINTS.HYPHEN_MINUS) {
      this.state = State2.SCRIPT_DATA_ESCAPED_DASH_DASH;
      this._emitChars("-");
    } else {
      this.state = State2.SCRIPT_DATA;
      this._stateScriptData(cp);
    }
  }
  // Script data escaped state
  //------------------------------------------------------------------
  _stateScriptDataEscaped(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State2.SCRIPT_DATA_ESCAPED_DASH;
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State2.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  // Script data escaped dash state
  //------------------------------------------------------------------
  _stateScriptDataEscapedDash(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State2.SCRIPT_DATA_ESCAPED_DASH_DASH;
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State2.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.state = State2.SCRIPT_DATA_ESCAPED;
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this.state = State2.SCRIPT_DATA_ESCAPED;
        this._emitCodePoint(cp);
      }
    }
  }
  // Script data escaped dash dash state
  //------------------------------------------------------------------
  _stateScriptDataEscapedDashDash(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State2.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State2.SCRIPT_DATA;
        this._emitChars(">");
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.state = State2.SCRIPT_DATA_ESCAPED;
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this.state = State2.SCRIPT_DATA_ESCAPED;
        this._emitCodePoint(cp);
      }
    }
  }
  // Script data escaped less-than sign state
  //------------------------------------------------------------------
  _stateScriptDataEscapedLessThanSign(cp) {
    if (cp === CODE_POINTS.SOLIDUS) {
      this.state = State2.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;
    } else if (isAsciiLetter(cp)) {
      this._emitChars("<");
      this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPE_START;
      this._stateScriptDataDoubleEscapeStart(cp);
    } else {
      this._emitChars("<");
      this.state = State2.SCRIPT_DATA_ESCAPED;
      this._stateScriptDataEscaped(cp);
    }
  }
  // Script data escaped end tag open state
  //------------------------------------------------------------------
  _stateScriptDataEscapedEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this.state = State2.SCRIPT_DATA_ESCAPED_END_TAG_NAME;
      this._stateScriptDataEscapedEndTagName(cp);
    } else {
      this._emitChars("</");
      this.state = State2.SCRIPT_DATA_ESCAPED;
      this._stateScriptDataEscaped(cp);
    }
  }
  // Script data escaped end tag name state
  //------------------------------------------------------------------
  _stateScriptDataEscapedEndTagName(cp) {
    if (this.handleSpecialEndTag(cp)) {
      this._emitChars("</");
      this.state = State2.SCRIPT_DATA_ESCAPED;
      this._stateScriptDataEscaped(cp);
    }
  }
  // Script data double escape start state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapeStart(cp) {
    if (this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))) {
      this._emitCodePoint(cp);
      for (let i = 0; i < SEQUENCES.SCRIPT.length; i++) {
        this._emitCodePoint(this._consume());
      }
      this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED;
    } else if (!this._ensureHibernation()) {
      this.state = State2.SCRIPT_DATA_ESCAPED;
      this._stateScriptDataEscaped(cp);
    }
  }
  // Script data double escaped state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscaped(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
        this._emitChars("<");
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  // Script data double escaped dash state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapedDash(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
        this._emitChars("<");
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED;
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED;
        this._emitCodePoint(cp);
      }
    }
  }
  // Script data double escaped dash dash state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapedDashDash(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
        this._emitChars("<");
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State2.SCRIPT_DATA;
        this._emitChars(">");
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED;
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED;
        this._emitCodePoint(cp);
      }
    }
  }
  // Script data double escaped less-than sign state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapedLessThanSign(cp) {
    if (cp === CODE_POINTS.SOLIDUS) {
      this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPE_END;
      this._emitChars("/");
    } else {
      this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED;
      this._stateScriptDataDoubleEscaped(cp);
    }
  }
  // Script data double escape end state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapeEnd(cp) {
    if (this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))) {
      this._emitCodePoint(cp);
      for (let i = 0; i < SEQUENCES.SCRIPT.length; i++) {
        this._emitCodePoint(this._consume());
      }
      this.state = State2.SCRIPT_DATA_ESCAPED;
    } else if (!this._ensureHibernation()) {
      this.state = State2.SCRIPT_DATA_DOUBLE_ESCAPED;
      this._stateScriptDataDoubleEscaped(cp);
    }
  }
  // Before attribute name state
  //------------------------------------------------------------------
  _stateBeforeAttributeName(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.SOLIDUS:
      case CODE_POINTS.GREATER_THAN_SIGN:
      case CODE_POINTS.EOF: {
        this.state = State2.AFTER_ATTRIBUTE_NAME;
        this._stateAfterAttributeName(cp);
        break;
      }
      case CODE_POINTS.EQUALS_SIGN: {
        this._err(ERR.unexpectedEqualsSignBeforeAttributeName);
        this._createAttr("=");
        this.state = State2.ATTRIBUTE_NAME;
        break;
      }
      default: {
        this._createAttr("");
        this.state = State2.ATTRIBUTE_NAME;
        this._stateAttributeName(cp);
      }
    }
  }
  // Attribute name state
  //------------------------------------------------------------------
  _stateAttributeName(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED:
      case CODE_POINTS.SOLIDUS:
      case CODE_POINTS.GREATER_THAN_SIGN:
      case CODE_POINTS.EOF: {
        this._leaveAttrName();
        this.state = State2.AFTER_ATTRIBUTE_NAME;
        this._stateAfterAttributeName(cp);
        break;
      }
      case CODE_POINTS.EQUALS_SIGN: {
        this._leaveAttrName();
        this.state = State2.BEFORE_ATTRIBUTE_VALUE;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK:
      case CODE_POINTS.APOSTROPHE:
      case CODE_POINTS.LESS_THAN_SIGN: {
        this._err(ERR.unexpectedCharacterInAttributeName);
        this.currentAttr.name += String.fromCodePoint(cp);
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.currentAttr.name += REPLACEMENT_CHARACTER;
        break;
      }
      default: {
        this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
      }
    }
  }
  // After attribute name state
  //------------------------------------------------------------------
  _stateAfterAttributeName(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.SOLIDUS: {
        this.state = State2.SELF_CLOSING_START_TAG;
        break;
      }
      case CODE_POINTS.EQUALS_SIGN: {
        this.state = State2.BEFORE_ATTRIBUTE_VALUE;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State2.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this._createAttr("");
        this.state = State2.ATTRIBUTE_NAME;
        this._stateAttributeName(cp);
      }
    }
  }
  // Before attribute value state
  //------------------------------------------------------------------
  _stateBeforeAttributeValue(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        this.state = State2.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        this.state = State2.ATTRIBUTE_VALUE_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingAttributeValue);
        this.state = State2.DATA;
        this.emitCurrentTagToken();
        break;
      }
      default: {
        this.state = State2.ATTRIBUTE_VALUE_UNQUOTED;
        this._stateAttributeValueUnquoted(cp);
      }
    }
  }
  // Attribute value (double-quoted) state
  //------------------------------------------------------------------
  _stateAttributeValueDoubleQuoted(cp) {
    switch (cp) {
      case CODE_POINTS.QUOTATION_MARK: {
        this.state = State2.AFTER_ATTRIBUTE_VALUE_QUOTED;
        break;
      }
      case CODE_POINTS.AMPERSAND: {
        this._startCharacterReference();
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.currentAttr.value += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this.currentAttr.value += String.fromCodePoint(cp);
      }
    }
  }
  // Attribute value (single-quoted) state
  //------------------------------------------------------------------
  _stateAttributeValueSingleQuoted(cp) {
    switch (cp) {
      case CODE_POINTS.APOSTROPHE: {
        this.state = State2.AFTER_ATTRIBUTE_VALUE_QUOTED;
        break;
      }
      case CODE_POINTS.AMPERSAND: {
        this._startCharacterReference();
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.currentAttr.value += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this.currentAttr.value += String.fromCodePoint(cp);
      }
    }
  }
  // Attribute value (unquoted) state
  //------------------------------------------------------------------
  _stateAttributeValueUnquoted(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this._leaveAttrValue();
        this.state = State2.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case CODE_POINTS.AMPERSAND: {
        this._startCharacterReference();
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._leaveAttrValue();
        this.state = State2.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.currentAttr.value += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK:
      case CODE_POINTS.APOSTROPHE:
      case CODE_POINTS.LESS_THAN_SIGN:
      case CODE_POINTS.EQUALS_SIGN:
      case CODE_POINTS.GRAVE_ACCENT: {
        this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);
        this.currentAttr.value += String.fromCodePoint(cp);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this.currentAttr.value += String.fromCodePoint(cp);
      }
    }
  }
  // After attribute value (quoted) state
  //------------------------------------------------------------------
  _stateAfterAttributeValueQuoted(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this._leaveAttrValue();
        this.state = State2.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case CODE_POINTS.SOLIDUS: {
        this._leaveAttrValue();
        this.state = State2.SELF_CLOSING_START_TAG;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._leaveAttrValue();
        this.state = State2.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingWhitespaceBetweenAttributes);
        this.state = State2.BEFORE_ATTRIBUTE_NAME;
        this._stateBeforeAttributeName(cp);
      }
    }
  }
  // Self-closing start tag state
  //------------------------------------------------------------------
  _stateSelfClosingStartTag(cp) {
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        const token = this.currentToken;
        token.selfClosing = true;
        this.state = State2.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.unexpectedSolidusInTag);
        this.state = State2.BEFORE_ATTRIBUTE_NAME;
        this._stateBeforeAttributeName(cp);
      }
    }
  }
  // Bogus comment state
  //------------------------------------------------------------------
  _stateBogusComment(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State2.DATA;
        this.emitCurrentComment(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this.emitCurrentComment(token);
        this._emitEOFToken();
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.data += REPLACEMENT_CHARACTER;
        break;
      }
      default: {
        token.data += String.fromCodePoint(cp);
      }
    }
  }
  // Markup declaration open state
  //------------------------------------------------------------------
  _stateMarkupDeclarationOpen(cp) {
    if (this._consumeSequenceIfMatch(SEQUENCES.DASH_DASH, true)) {
      this._createCommentToken(SEQUENCES.DASH_DASH.length + 1);
      this.state = State2.COMMENT_START;
    } else if (this._consumeSequenceIfMatch(SEQUENCES.DOCTYPE, false)) {
      this.currentLocation = this.getCurrentLocation(SEQUENCES.DOCTYPE.length + 1);
      this.state = State2.DOCTYPE;
    } else if (this._consumeSequenceIfMatch(SEQUENCES.CDATA_START, true)) {
      if (this.inForeignNode) {
        this.state = State2.CDATA_SECTION;
      } else {
        this._err(ERR.cdataInHtmlContent);
        this._createCommentToken(SEQUENCES.CDATA_START.length + 1);
        this.currentToken.data = "[CDATA[";
        this.state = State2.BOGUS_COMMENT;
      }
    } else if (!this._ensureHibernation()) {
      this._err(ERR.incorrectlyOpenedComment);
      this._createCommentToken(2);
      this.state = State2.BOGUS_COMMENT;
      this._stateBogusComment(cp);
    }
  }
  // Comment start state
  //------------------------------------------------------------------
  _stateCommentStart(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State2.COMMENT_START_DASH;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptClosingOfEmptyComment);
        this.state = State2.DATA;
        const token = this.currentToken;
        this.emitCurrentComment(token);
        break;
      }
      default: {
        this.state = State2.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  // Comment start dash state
  //------------------------------------------------------------------
  _stateCommentStartDash(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State2.COMMENT_END;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptClosingOfEmptyComment);
        this.state = State2.DATA;
        this.emitCurrentComment(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.data += "-";
        this.state = State2.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  // Comment state
  //------------------------------------------------------------------
  _stateComment(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State2.COMMENT_END_DASH;
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        token.data += "<";
        this.state = State2.COMMENT_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.data += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.data += String.fromCodePoint(cp);
      }
    }
  }
  // Comment less-than sign state
  //------------------------------------------------------------------
  _stateCommentLessThanSign(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.EXCLAMATION_MARK: {
        token.data += "!";
        this.state = State2.COMMENT_LESS_THAN_SIGN_BANG;
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        token.data += "<";
        break;
      }
      default: {
        this.state = State2.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  // Comment less-than sign bang state
  //------------------------------------------------------------------
  _stateCommentLessThanSignBang(cp) {
    if (cp === CODE_POINTS.HYPHEN_MINUS) {
      this.state = State2.COMMENT_LESS_THAN_SIGN_BANG_DASH;
    } else {
      this.state = State2.COMMENT;
      this._stateComment(cp);
    }
  }
  // Comment less-than sign bang dash state
  //------------------------------------------------------------------
  _stateCommentLessThanSignBangDash(cp) {
    if (cp === CODE_POINTS.HYPHEN_MINUS) {
      this.state = State2.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;
    } else {
      this.state = State2.COMMENT_END_DASH;
      this._stateCommentEndDash(cp);
    }
  }
  // Comment less-than sign bang dash dash state
  //------------------------------------------------------------------
  _stateCommentLessThanSignBangDashDash(cp) {
    if (cp !== CODE_POINTS.GREATER_THAN_SIGN && cp !== CODE_POINTS.EOF) {
      this._err(ERR.nestedComment);
    }
    this.state = State2.COMMENT_END;
    this._stateCommentEnd(cp);
  }
  // Comment end dash state
  //------------------------------------------------------------------
  _stateCommentEndDash(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State2.COMMENT_END;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.data += "-";
        this.state = State2.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  // Comment end state
  //------------------------------------------------------------------
  _stateCommentEnd(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State2.DATA;
        this.emitCurrentComment(token);
        break;
      }
      case CODE_POINTS.EXCLAMATION_MARK: {
        this.state = State2.COMMENT_END_BANG;
        break;
      }
      case CODE_POINTS.HYPHEN_MINUS: {
        token.data += "-";
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.data += "--";
        this.state = State2.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  // Comment end bang state
  //------------------------------------------------------------------
  _stateCommentEndBang(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        token.data += "--!";
        this.state = State2.COMMENT_END_DASH;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.incorrectlyClosedComment);
        this.state = State2.DATA;
        this.emitCurrentComment(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.data += "--!";
        this.state = State2.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  // DOCTYPE state
  //------------------------------------------------------------------
  _stateDoctype(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State2.BEFORE_DOCTYPE_NAME;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State2.BEFORE_DOCTYPE_NAME;
        this._stateBeforeDoctypeName(cp);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        this._createDoctypeToken(null);
        const token = this.currentToken;
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingWhitespaceBeforeDoctypeName);
        this.state = State2.BEFORE_DOCTYPE_NAME;
        this._stateBeforeDoctypeName(cp);
      }
    }
  }
  // Before DOCTYPE name state
  //------------------------------------------------------------------
  _stateBeforeDoctypeName(cp) {
    if (isAsciiUpper(cp)) {
      this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));
      this.state = State2.DOCTYPE_NAME;
    } else
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this._createDoctypeToken(REPLACEMENT_CHARACTER);
          this.state = State2.DOCTYPE_NAME;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.missingDoctypeName);
          this._createDoctypeToken(null);
          const token = this.currentToken;
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this.state = State2.DATA;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          this._createDoctypeToken(null);
          const token = this.currentToken;
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          this._createDoctypeToken(String.fromCodePoint(cp));
          this.state = State2.DOCTYPE_NAME;
        }
      }
  }
  // DOCTYPE name state
  //------------------------------------------------------------------
  _stateDoctypeName(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State2.AFTER_DOCTYPE_NAME;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State2.DATA;
        this.emitCurrentDoctype(token);
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.name += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
      }
    }
  }
  // After DOCTYPE name state
  //------------------------------------------------------------------
  _stateAfterDoctypeName(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State2.DATA;
        this.emitCurrentDoctype(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        if (this._consumeSequenceIfMatch(SEQUENCES.PUBLIC, false)) {
          this.state = State2.AFTER_DOCTYPE_PUBLIC_KEYWORD;
        } else if (this._consumeSequenceIfMatch(SEQUENCES.SYSTEM, false)) {
          this.state = State2.AFTER_DOCTYPE_SYSTEM_KEYWORD;
        } else if (!this._ensureHibernation()) {
          this._err(ERR.invalidCharacterSequenceAfterDoctypeName);
          token.forceQuirks = true;
          this.state = State2.BOGUS_DOCTYPE;
          this._stateBogusDoctype(cp);
        }
      }
    }
  }
  // After DOCTYPE public keyword state
  //------------------------------------------------------------------
  _stateAfterDoctypePublicKeyword(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State2.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
        token.publicId = "";
        this.state = State2.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
        token.publicId = "";
        this.state = State2.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingDoctypePublicIdentifier);
        token.forceQuirks = true;
        this.state = State2.DATA;
        this.emitCurrentDoctype(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
        token.forceQuirks = true;
        this.state = State2.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  // Before DOCTYPE public identifier state
  //------------------------------------------------------------------
  _stateBeforeDoctypePublicIdentifier(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        token.publicId = "";
        this.state = State2.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        token.publicId = "";
        this.state = State2.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingDoctypePublicIdentifier);
        token.forceQuirks = true;
        this.state = State2.DATA;
        this.emitCurrentDoctype(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
        token.forceQuirks = true;
        this.state = State2.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  // DOCTYPE public identifier (double-quoted) state
  //------------------------------------------------------------------
  _stateDoctypePublicIdentifierDoubleQuoted(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.QUOTATION_MARK: {
        this.state = State2.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.publicId += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptDoctypePublicIdentifier);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this.state = State2.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.publicId += String.fromCodePoint(cp);
      }
    }
  }
  // DOCTYPE public identifier (single-quoted) state
  //------------------------------------------------------------------
  _stateDoctypePublicIdentifierSingleQuoted(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.APOSTROPHE: {
        this.state = State2.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.publicId += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptDoctypePublicIdentifier);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this.state = State2.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.publicId += String.fromCodePoint(cp);
      }
    }
  }
  // After DOCTYPE public identifier state
  //------------------------------------------------------------------
  _stateAfterDoctypePublicIdentifier(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State2.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State2.DATA;
        this.emitCurrentDoctype(token);
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
        token.systemId = "";
        this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
        token.systemId = "";
        this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.state = State2.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  // Between DOCTYPE public and system identifiers state
  //------------------------------------------------------------------
  _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(token);
        this.state = State2.DATA;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        token.systemId = "";
        this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        token.systemId = "";
        this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.state = State2.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  // After DOCTYPE system keyword state
  //------------------------------------------------------------------
  _stateAfterDoctypeSystemKeyword(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State2.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
        token.systemId = "";
        this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
        token.systemId = "";
        this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.state = State2.DATA;
        this.emitCurrentDoctype(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.state = State2.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  // Before DOCTYPE system identifier state
  //------------------------------------------------------------------
  _stateBeforeDoctypeSystemIdentifier(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        token.systemId = "";
        this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        token.systemId = "";
        this.state = State2.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.state = State2.DATA;
        this.emitCurrentDoctype(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.state = State2.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  // DOCTYPE system identifier (double-quoted) state
  //------------------------------------------------------------------
  _stateDoctypeSystemIdentifierDoubleQuoted(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.QUOTATION_MARK: {
        this.state = State2.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.systemId += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this.state = State2.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.systemId += String.fromCodePoint(cp);
      }
    }
  }
  // DOCTYPE system identifier (single-quoted) state
  //------------------------------------------------------------------
  _stateDoctypeSystemIdentifierSingleQuoted(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.APOSTROPHE: {
        this.state = State2.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.systemId += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this.state = State2.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.systemId += String.fromCodePoint(cp);
      }
    }
  }
  // After DOCTYPE system identifier state
  //------------------------------------------------------------------
  _stateAfterDoctypeSystemIdentifier(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(token);
        this.state = State2.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);
        this.state = State2.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  // Bogus DOCTYPE state
  //------------------------------------------------------------------
  _stateBogusDoctype(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(token);
        this.state = State2.DATA;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        break;
      }
      case CODE_POINTS.EOF: {
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default:
    }
  }
  // CDATA section state
  //------------------------------------------------------------------
  _stateCdataSection(cp) {
    switch (cp) {
      case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
        this.state = State2.CDATA_SECTION_BRACKET;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInCdata);
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  // CDATA section bracket state
  //------------------------------------------------------------------
  _stateCdataSectionBracket(cp) {
    if (cp === CODE_POINTS.RIGHT_SQUARE_BRACKET) {
      this.state = State2.CDATA_SECTION_END;
    } else {
      this._emitChars("]");
      this.state = State2.CDATA_SECTION;
      this._stateCdataSection(cp);
    }
  }
  // CDATA section end state
  //------------------------------------------------------------------
  _stateCdataSectionEnd(cp) {
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State2.DATA;
        break;
      }
      case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
        this._emitChars("]");
        break;
      }
      default: {
        this._emitChars("]]");
        this.state = State2.CDATA_SECTION;
        this._stateCdataSection(cp);
      }
    }
  }
  // Character reference state
  //------------------------------------------------------------------
  _stateCharacterReference() {
    let length = this.entityDecoder.write(this.preprocessor.html, this.preprocessor.pos);
    if (length < 0) {
      if (this.preprocessor.lastChunkWritten) {
        length = this.entityDecoder.end();
      } else {
        this.active = false;
        this.preprocessor.pos = this.preprocessor.html.length - 1;
        this.consumedAfterSnapshot = 0;
        this.preprocessor.endOfChunkHit = true;
        return;
      }
    }
    if (length === 0) {
      this.preprocessor.pos = this.entityStartPos;
      this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
      this.state = !this._isCharacterReferenceInAttribute() && isAsciiAlphaNumeric4(this.preprocessor.peek(1)) ? State2.AMBIGUOUS_AMPERSAND : this.returnState;
    } else {
      this.state = this.returnState;
    }
  }
  // Ambiguos ampersand state
  //------------------------------------------------------------------
  _stateAmbiguousAmpersand(cp) {
    if (isAsciiAlphaNumeric4(cp)) {
      this._flushCodePointConsumedAsCharacterReference(cp);
    } else {
      if (cp === CODE_POINTS.SEMICOLON) {
        this._err(ERR.unknownNamedCharacterReference);
      }
      this.state = this.returnState;
      this._callState(cp);
    }
  }
};

// node_modules/parse5/dist/parser/open-element-stack.js
var IMPLICIT_END_TAG_REQUIRED = /* @__PURE__ */ new Set([TAG_ID.DD, TAG_ID.DT, TAG_ID.LI, TAG_ID.OPTGROUP, TAG_ID.OPTION, TAG_ID.P, TAG_ID.RB, TAG_ID.RP, TAG_ID.RT, TAG_ID.RTC]);
var IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = /* @__PURE__ */ new Set([
  ...IMPLICIT_END_TAG_REQUIRED,
  TAG_ID.CAPTION,
  TAG_ID.COLGROUP,
  TAG_ID.TBODY,
  TAG_ID.TD,
  TAG_ID.TFOOT,
  TAG_ID.TH,
  TAG_ID.THEAD,
  TAG_ID.TR
]);
var SCOPING_ELEMENTS_HTML = /* @__PURE__ */ new Set([
  TAG_ID.APPLET,
  TAG_ID.CAPTION,
  TAG_ID.HTML,
  TAG_ID.MARQUEE,
  TAG_ID.OBJECT,
  TAG_ID.TABLE,
  TAG_ID.TD,
  TAG_ID.TEMPLATE,
  TAG_ID.TH
]);
var SCOPING_ELEMENTS_HTML_LIST = /* @__PURE__ */ new Set([...SCOPING_ELEMENTS_HTML, TAG_ID.OL, TAG_ID.UL]);
var SCOPING_ELEMENTS_HTML_BUTTON = /* @__PURE__ */ new Set([...SCOPING_ELEMENTS_HTML, TAG_ID.BUTTON]);
var SCOPING_ELEMENTS_MATHML = /* @__PURE__ */ new Set([TAG_ID.ANNOTATION_XML, TAG_ID.MI, TAG_ID.MN, TAG_ID.MO, TAG_ID.MS, TAG_ID.MTEXT]);
var SCOPING_ELEMENTS_SVG = /* @__PURE__ */ new Set([TAG_ID.DESC, TAG_ID.FOREIGN_OBJECT, TAG_ID.TITLE]);
var TABLE_ROW_CONTEXT = /* @__PURE__ */ new Set([TAG_ID.TR, TAG_ID.TEMPLATE, TAG_ID.HTML]);
var TABLE_BODY_CONTEXT = /* @__PURE__ */ new Set([TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TEMPLATE, TAG_ID.HTML]);
var TABLE_CONTEXT = /* @__PURE__ */ new Set([TAG_ID.TABLE, TAG_ID.TEMPLATE, TAG_ID.HTML]);
var TABLE_CELLS = /* @__PURE__ */ new Set([TAG_ID.TD, TAG_ID.TH]);
var OpenElementStack = class {
  get currentTmplContentOrNode() {
    return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;
  }
  constructor(document2, treeAdapter, handler) {
    this.treeAdapter = treeAdapter;
    this.handler = handler;
    this.items = [];
    this.tagIDs = [];
    this.stackTop = -1;
    this.tmplCount = 0;
    this.currentTagId = TAG_ID.UNKNOWN;
    this.current = document2;
  }
  //Index of element
  _indexOf(element) {
    return this.items.lastIndexOf(element, this.stackTop);
  }
  //Update current element
  _isInTemplate() {
    return this.currentTagId === TAG_ID.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
  }
  _updateCurrentElement() {
    this.current = this.items[this.stackTop];
    this.currentTagId = this.tagIDs[this.stackTop];
  }
  //Mutations
  push(element, tagID) {
    this.stackTop++;
    this.items[this.stackTop] = element;
    this.current = element;
    this.tagIDs[this.stackTop] = tagID;
    this.currentTagId = tagID;
    if (this._isInTemplate()) {
      this.tmplCount++;
    }
    this.handler.onItemPush(element, tagID, true);
  }
  pop() {
    const popped = this.current;
    if (this.tmplCount > 0 && this._isInTemplate()) {
      this.tmplCount--;
    }
    this.stackTop--;
    this._updateCurrentElement();
    this.handler.onItemPop(popped, true);
  }
  replace(oldElement, newElement) {
    const idx = this._indexOf(oldElement);
    this.items[idx] = newElement;
    if (idx === this.stackTop) {
      this.current = newElement;
    }
  }
  insertAfter(referenceElement, newElement, newElementID) {
    const insertionIdx = this._indexOf(referenceElement) + 1;
    this.items.splice(insertionIdx, 0, newElement);
    this.tagIDs.splice(insertionIdx, 0, newElementID);
    this.stackTop++;
    if (insertionIdx === this.stackTop) {
      this._updateCurrentElement();
    }
    if (this.current && this.currentTagId !== void 0) {
      this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);
    }
  }
  popUntilTagNamePopped(tagName) {
    let targetIdx = this.stackTop + 1;
    do {
      targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);
    } while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML);
    this.shortenToLength(Math.max(targetIdx, 0));
  }
  shortenToLength(idx) {
    while (this.stackTop >= idx) {
      const popped = this.current;
      if (this.tmplCount > 0 && this._isInTemplate()) {
        this.tmplCount -= 1;
      }
      this.stackTop--;
      this._updateCurrentElement();
      this.handler.onItemPop(popped, this.stackTop < idx);
    }
  }
  popUntilElementPopped(element) {
    const idx = this._indexOf(element);
    this.shortenToLength(Math.max(idx, 0));
  }
  popUntilPopped(tagNames, targetNS) {
    const idx = this._indexOfTagNames(tagNames, targetNS);
    this.shortenToLength(Math.max(idx, 0));
  }
  popUntilNumberedHeaderPopped() {
    this.popUntilPopped(NUMBERED_HEADERS, NS.HTML);
  }
  popUntilTableCellPopped() {
    this.popUntilPopped(TABLE_CELLS, NS.HTML);
  }
  popAllUpToHtmlElement() {
    this.tmplCount = 0;
    this.shortenToLength(1);
  }
  _indexOfTagNames(tagNames, namespace) {
    for (let i = this.stackTop; i >= 0; i--) {
      if (tagNames.has(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {
        return i;
      }
    }
    return -1;
  }
  clearBackTo(tagNames, targetNS) {
    const idx = this._indexOfTagNames(tagNames, targetNS);
    this.shortenToLength(idx + 1);
  }
  clearBackToTableContext() {
    this.clearBackTo(TABLE_CONTEXT, NS.HTML);
  }
  clearBackToTableBodyContext() {
    this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);
  }
  clearBackToTableRowContext() {
    this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);
  }
  remove(element) {
    const idx = this._indexOf(element);
    if (idx >= 0) {
      if (idx === this.stackTop) {
        this.pop();
      } else {
        this.items.splice(idx, 1);
        this.tagIDs.splice(idx, 1);
        this.stackTop--;
        this._updateCurrentElement();
        this.handler.onItemPop(element, false);
      }
    }
  }
  //Search
  tryPeekProperlyNestedBodyElement() {
    return this.stackTop >= 1 && this.tagIDs[1] === TAG_ID.BODY ? this.items[1] : null;
  }
  contains(element) {
    return this._indexOf(element) > -1;
  }
  getCommonAncestor(element) {
    const elementIdx = this._indexOf(element) - 1;
    return elementIdx >= 0 ? this.items[elementIdx] : null;
  }
  isRootHtmlElementCurrent() {
    return this.stackTop === 0 && this.tagIDs[0] === TAG_ID.HTML;
  }
  //Element in scope
  hasInDynamicScope(tagName, htmlScope) {
    for (let i = this.stackTop; i >= 0; i--) {
      const tn = this.tagIDs[i];
      switch (this.treeAdapter.getNamespaceURI(this.items[i])) {
        case NS.HTML: {
          if (tn === tagName)
            return true;
          if (htmlScope.has(tn))
            return false;
          break;
        }
        case NS.SVG: {
          if (SCOPING_ELEMENTS_SVG.has(tn))
            return false;
          break;
        }
        case NS.MATHML: {
          if (SCOPING_ELEMENTS_MATHML.has(tn))
            return false;
          break;
        }
      }
    }
    return true;
  }
  hasInScope(tagName) {
    return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML);
  }
  hasInListItemScope(tagName) {
    return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML_LIST);
  }
  hasInButtonScope(tagName) {
    return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML_BUTTON);
  }
  hasNumberedHeaderInScope() {
    for (let i = this.stackTop; i >= 0; i--) {
      const tn = this.tagIDs[i];
      switch (this.treeAdapter.getNamespaceURI(this.items[i])) {
        case NS.HTML: {
          if (NUMBERED_HEADERS.has(tn))
            return true;
          if (SCOPING_ELEMENTS_HTML.has(tn))
            return false;
          break;
        }
        case NS.SVG: {
          if (SCOPING_ELEMENTS_SVG.has(tn))
            return false;
          break;
        }
        case NS.MATHML: {
          if (SCOPING_ELEMENTS_MATHML.has(tn))
            return false;
          break;
        }
      }
    }
    return true;
  }
  hasInTableScope(tagName) {
    for (let i = this.stackTop; i >= 0; i--) {
      if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {
        continue;
      }
      switch (this.tagIDs[i]) {
        case tagName: {
          return true;
        }
        case TAG_ID.TABLE:
        case TAG_ID.HTML: {
          return false;
        }
      }
    }
    return true;
  }
  hasTableBodyContextInTableScope() {
    for (let i = this.stackTop; i >= 0; i--) {
      if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {
        continue;
      }
      switch (this.tagIDs[i]) {
        case TAG_ID.TBODY:
        case TAG_ID.THEAD:
        case TAG_ID.TFOOT: {
          return true;
        }
        case TAG_ID.TABLE:
        case TAG_ID.HTML: {
          return false;
        }
      }
    }
    return true;
  }
  hasInSelectScope(tagName) {
    for (let i = this.stackTop; i >= 0; i--) {
      if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {
        continue;
      }
      switch (this.tagIDs[i]) {
        case tagName: {
          return true;
        }
        case TAG_ID.OPTION:
        case TAG_ID.OPTGROUP: {
          break;
        }
        default: {
          return false;
        }
      }
    }
    return true;
  }
  //Implied end tags
  generateImpliedEndTags() {
    while (this.currentTagId !== void 0 && IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {
      this.pop();
    }
  }
  generateImpliedEndTagsThoroughly() {
    while (this.currentTagId !== void 0 && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
      this.pop();
    }
  }
  generateImpliedEndTagsWithExclusion(exclusionId) {
    while (this.currentTagId !== void 0 && this.currentTagId !== exclusionId && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
      this.pop();
    }
  }
};

// node_modules/parse5/dist/parser/formatting-element-list.js
var NOAH_ARK_CAPACITY = 3;
var EntryType;
(function(EntryType2) {
  EntryType2[EntryType2["Marker"] = 0] = "Marker";
  EntryType2[EntryType2["Element"] = 1] = "Element";
})(EntryType || (EntryType = {}));
var MARKER = { type: EntryType.Marker };
var FormattingElementList = class {
  constructor(treeAdapter) {
    this.treeAdapter = treeAdapter;
    this.entries = [];
    this.bookmark = null;
  }
  //Noah Ark's condition
  //OPTIMIZATION: at first we try to find possible candidates for exclusion using
  //lightweight heuristics without thorough attributes check.
  _getNoahArkConditionCandidates(newElement, neAttrs) {
    const candidates = [];
    const neAttrsLength = neAttrs.length;
    const neTagName = this.treeAdapter.getTagName(newElement);
    const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
    for (let i = 0; i < this.entries.length; i++) {
      const entry = this.entries[i];
      if (entry.type === EntryType.Marker) {
        break;
      }
      const { element } = entry;
      if (this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {
        const elementAttrs = this.treeAdapter.getAttrList(element);
        if (elementAttrs.length === neAttrsLength) {
          candidates.push({ idx: i, attrs: elementAttrs });
        }
      }
    }
    return candidates;
  }
  _ensureNoahArkCondition(newElement) {
    if (this.entries.length < NOAH_ARK_CAPACITY)
      return;
    const neAttrs = this.treeAdapter.getAttrList(newElement);
    const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);
    if (candidates.length < NOAH_ARK_CAPACITY)
      return;
    const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));
    let validCandidates = 0;
    for (let i = 0; i < candidates.length; i++) {
      const candidate = candidates[i];
      if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {
        validCandidates += 1;
        if (validCandidates >= NOAH_ARK_CAPACITY) {
          this.entries.splice(candidate.idx, 1);
        }
      }
    }
  }
  //Mutations
  insertMarker() {
    this.entries.unshift(MARKER);
  }
  pushElement(element, token) {
    this._ensureNoahArkCondition(element);
    this.entries.unshift({
      type: EntryType.Element,
      element,
      token
    });
  }
  insertElementAfterBookmark(element, token) {
    const bookmarkIdx = this.entries.indexOf(this.bookmark);
    this.entries.splice(bookmarkIdx, 0, {
      type: EntryType.Element,
      element,
      token
    });
  }
  removeEntry(entry) {
    const entryIndex = this.entries.indexOf(entry);
    if (entryIndex !== -1) {
      this.entries.splice(entryIndex, 1);
    }
  }
  /**
   * Clears the list of formatting elements up to the last marker.
   *
   * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker
   */
  clearToLastMarker() {
    const markerIdx = this.entries.indexOf(MARKER);
    if (markerIdx === -1) {
      this.entries.length = 0;
    } else {
      this.entries.splice(0, markerIdx + 1);
    }
  }
  //Search
  getElementEntryInScopeWithTagName(tagName) {
    const entry = this.entries.find((entry2) => entry2.type === EntryType.Marker || this.treeAdapter.getTagName(entry2.element) === tagName);
    return entry && entry.type === EntryType.Element ? entry : null;
  }
  getElementEntry(element) {
    return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element);
  }
};

// node_modules/parse5/dist/tree-adapters/default.js
var defaultTreeAdapter = {
  //Node construction
  createDocument() {
    return {
      nodeName: "#document",
      mode: DOCUMENT_MODE.NO_QUIRKS,
      childNodes: []
    };
  },
  createDocumentFragment() {
    return {
      nodeName: "#document-fragment",
      childNodes: []
    };
  },
  createElement(tagName, namespaceURI, attrs) {
    return {
      nodeName: tagName,
      tagName,
      attrs,
      namespaceURI,
      childNodes: [],
      parentNode: null
    };
  },
  createCommentNode(data2) {
    return {
      nodeName: "#comment",
      data: data2,
      parentNode: null
    };
  },
  createTextNode(value) {
    return {
      nodeName: "#text",
      value,
      parentNode: null
    };
  },
  //Tree mutation
  appendChild(parentNode, newNode) {
    parentNode.childNodes.push(newNode);
    newNode.parentNode = parentNode;
  },
  insertBefore(parentNode, newNode, referenceNode) {
    const insertionIdx = parentNode.childNodes.indexOf(referenceNode);
    parentNode.childNodes.splice(insertionIdx, 0, newNode);
    newNode.parentNode = parentNode;
  },
  setTemplateContent(templateElement, contentElement) {
    templateElement.content = contentElement;
  },
  getTemplateContent(templateElement) {
    return templateElement.content;
  },
  setDocumentType(document2, name, publicId, systemId) {
    const doctypeNode = document2.childNodes.find((node) => node.nodeName === "#documentType");
    if (doctypeNode) {
      doctypeNode.name = name;
      doctypeNode.publicId = publicId;
      doctypeNode.systemId = systemId;
    } else {
      const node = {
        nodeName: "#documentType",
        name,
        publicId,
        systemId,
        parentNode: null
      };
      defaultTreeAdapter.appendChild(document2, node);
    }
  },
  setDocumentMode(document2, mode) {
    document2.mode = mode;
  },
  getDocumentMode(document2) {
    return document2.mode;
  },
  detachNode(node) {
    if (node.parentNode) {
      const idx = node.parentNode.childNodes.indexOf(node);
      node.parentNode.childNodes.splice(idx, 1);
      node.parentNode = null;
    }
  },
  insertText(parentNode, text3) {
    if (parentNode.childNodes.length > 0) {
      const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
      if (defaultTreeAdapter.isTextNode(prevNode)) {
        prevNode.value += text3;
        return;
      }
    }
    defaultTreeAdapter.appendChild(parentNode, defaultTreeAdapter.createTextNode(text3));
  },
  insertTextBefore(parentNode, text3, referenceNode) {
    const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
    if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {
      prevNode.value += text3;
    } else {
      defaultTreeAdapter.insertBefore(parentNode, defaultTreeAdapter.createTextNode(text3), referenceNode);
    }
  },
  adoptAttributes(recipient, attrs) {
    const recipientAttrsMap = new Set(recipient.attrs.map((attr2) => attr2.name));
    for (let j2 = 0; j2 < attrs.length; j2++) {
      if (!recipientAttrsMap.has(attrs[j2].name)) {
        recipient.attrs.push(attrs[j2]);
      }
    }
  },
  //Tree traversing
  getFirstChild(node) {
    return node.childNodes[0];
  },
  getChildNodes(node) {
    return node.childNodes;
  },
  getParentNode(node) {
    return node.parentNode;
  },
  getAttrList(element) {
    return element.attrs;
  },
  //Node data
  getTagName(element) {
    return element.tagName;
  },
  getNamespaceURI(element) {
    return element.namespaceURI;
  },
  getTextNodeContent(textNode) {
    return textNode.value;
  },
  getCommentNodeContent(commentNode) {
    return commentNode.data;
  },
  getDocumentTypeNodeName(doctypeNode) {
    return doctypeNode.name;
  },
  getDocumentTypeNodePublicId(doctypeNode) {
    return doctypeNode.publicId;
  },
  getDocumentTypeNodeSystemId(doctypeNode) {
    return doctypeNode.systemId;
  },
  //Node types
  isTextNode(node) {
    return node.nodeName === "#text";
  },
  isCommentNode(node) {
    return node.nodeName === "#comment";
  },
  isDocumentTypeNode(node) {
    return node.nodeName === "#documentType";
  },
  isElementNode(node) {
    return Object.prototype.hasOwnProperty.call(node, "tagName");
  },
  // Source code location
  setNodeSourceCodeLocation(node, location) {
    node.sourceCodeLocation = location;
  },
  getNodeSourceCodeLocation(node) {
    return node.sourceCodeLocation;
  },
  updateNodeSourceCodeLocation(node, endLocation) {
    node.sourceCodeLocation = { ...node.sourceCodeLocation, ...endLocation };
  }
};

// node_modules/parse5/dist/common/doctype.js
var VALID_DOCTYPE_NAME = "html";
var VALID_SYSTEM_ID = "about:legacy-compat";
var QUIRKS_MODE_SYSTEM_ID = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd";
var QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
  "+//silmaril//dtd html pro v0r11 19970101//",
  "-//as//dtd html 3.0 aswedit + extensions//",
  "-//advasoft ltd//dtd html 3.0 aswedit + extensions//",
  "-//ietf//dtd html 2.0 level 1//",
  "-//ietf//dtd html 2.0 level 2//",
  "-//ietf//dtd html 2.0 strict level 1//",
  "-//ietf//dtd html 2.0 strict level 2//",
  "-//ietf//dtd html 2.0 strict//",
  "-//ietf//dtd html 2.0//",
  "-//ietf//dtd html 2.1e//",
  "-//ietf//dtd html 3.0//",
  "-//ietf//dtd html 3.2 final//",
  "-//ietf//dtd html 3.2//",
  "-//ietf//dtd html 3//",
  "-//ietf//dtd html level 0//",
  "-//ietf//dtd html level 1//",
  "-//ietf//dtd html level 2//",
  "-//ietf//dtd html level 3//",
  "-//ietf//dtd html strict level 0//",
  "-//ietf//dtd html strict level 1//",
  "-//ietf//dtd html strict level 2//",
  "-//ietf//dtd html strict level 3//",
  "-//ietf//dtd html strict//",
  "-//ietf//dtd html//",
  "-//metrius//dtd metrius presentational//",
  "-//microsoft//dtd internet explorer 2.0 html strict//",
  "-//microsoft//dtd internet explorer 2.0 html//",
  "-//microsoft//dtd internet explorer 2.0 tables//",
  "-//microsoft//dtd internet explorer 3.0 html strict//",
  "-//microsoft//dtd internet explorer 3.0 html//",
  "-//microsoft//dtd internet explorer 3.0 tables//",
  "-//netscape comm. corp.//dtd html//",
  "-//netscape comm. corp.//dtd strict html//",
  "-//o'reilly and associates//dtd html 2.0//",
  "-//o'reilly and associates//dtd html extended 1.0//",
  "-//o'reilly and associates//dtd html extended relaxed 1.0//",
  "-//sq//dtd html 2.0 hotmetal + extensions//",
  "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//",
  "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//",
  "-//spyglass//dtd html 2.0 extended//",
  "-//sun microsystems corp.//dtd hotjava html//",
  "-//sun microsystems corp.//dtd hotjava strict html//",
  "-//w3c//dtd html 3 1995-03-24//",
  "-//w3c//dtd html 3.2 draft//",
  "-//w3c//dtd html 3.2 final//",
  "-//w3c//dtd html 3.2//",
  "-//w3c//dtd html 3.2s draft//",
  "-//w3c//dtd html 4.0 frameset//",
  "-//w3c//dtd html 4.0 transitional//",
  "-//w3c//dtd html experimental 19960712//",
  "-//w3c//dtd html experimental 970421//",
  "-//w3c//dtd w3 html//",
  "-//w3o//dtd w3 html 3.0//",
  "-//webtechs//dtd mozilla html 2.0//",
  "-//webtechs//dtd mozilla html//"
];
var QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
  ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,
  "-//w3c//dtd html 4.01 frameset//",
  "-//w3c//dtd html 4.01 transitional//"
];
var QUIRKS_MODE_PUBLIC_IDS = /* @__PURE__ */ new Set([
  "-//w3o//dtd w3 html strict 3.0//en//",
  "-/w3c/dtd html 4.0 transitional/en",
  "html"
]);
var LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ["-//w3c//dtd xhtml 1.0 frameset//", "-//w3c//dtd xhtml 1.0 transitional//"];
var LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
  ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,
  "-//w3c//dtd html 4.01 frameset//",
  "-//w3c//dtd html 4.01 transitional//"
];
function hasPrefix(publicId, prefixes) {
  return prefixes.some((prefix) => publicId.startsWith(prefix));
}
function isConforming(token) {
  return token.name === VALID_DOCTYPE_NAME && token.publicId === null && (token.systemId === null || token.systemId === VALID_SYSTEM_ID);
}
function getDocumentMode(token) {
  if (token.name !== VALID_DOCTYPE_NAME) {
    return DOCUMENT_MODE.QUIRKS;
  }
  const { systemId } = token;
  if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
    return DOCUMENT_MODE.QUIRKS;
  }
  let { publicId } = token;
  if (publicId !== null) {
    publicId = publicId.toLowerCase();
    if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {
      return DOCUMENT_MODE.QUIRKS;
    }
    let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;
    if (hasPrefix(publicId, prefixes)) {
      return DOCUMENT_MODE.QUIRKS;
    }
    prefixes = systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;
    if (hasPrefix(publicId, prefixes)) {
      return DOCUMENT_MODE.LIMITED_QUIRKS;
    }
  }
  return DOCUMENT_MODE.NO_QUIRKS;
}

// node_modules/parse5/dist/common/foreign-content.js
var MIME_TYPES = {
  TEXT_HTML: "text/html",
  APPLICATION_XML: "application/xhtml+xml"
};
var DEFINITION_URL_ATTR = "definitionurl";
var ADJUSTED_DEFINITION_URL_ATTR = "definitionURL";
var SVG_ATTRS_ADJUSTMENT_MAP = new Map([
  "attributeName",
  "attributeType",
  "baseFrequency",
  "baseProfile",
  "calcMode",
  "clipPathUnits",
  "diffuseConstant",
  "edgeMode",
  "filterUnits",
  "glyphRef",
  "gradientTransform",
  "gradientUnits",
  "kernelMatrix",
  "kernelUnitLength",
  "keyPoints",
  "keySplines",
  "keyTimes",
  "lengthAdjust",
  "limitingConeAngle",
  "markerHeight",
  "markerUnits",
  "markerWidth",
  "maskContentUnits",
  "maskUnits",
  "numOctaves",
  "pathLength",
  "patternContentUnits",
  "patternTransform",
  "patternUnits",
  "pointsAtX",
  "pointsAtY",
  "pointsAtZ",
  "preserveAlpha",
  "preserveAspectRatio",
  "primitiveUnits",
  "refX",
  "refY",
  "repeatCount",
  "repeatDur",
  "requiredExtensions",
  "requiredFeatures",
  "specularConstant",
  "specularExponent",
  "spreadMethod",
  "startOffset",
  "stdDeviation",
  "stitchTiles",
  "surfaceScale",
  "systemLanguage",
  "tableValues",
  "targetX",
  "targetY",
  "textLength",
  "viewBox",
  "viewTarget",
  "xChannelSelector",
  "yChannelSelector",
  "zoomAndPan"
].map((attr2) => [attr2.toLowerCase(), attr2]));
var XML_ATTRS_ADJUSTMENT_MAP = /* @__PURE__ */ new Map([
  ["xlink:actuate", { prefix: "xlink", name: "actuate", namespace: NS.XLINK }],
  ["xlink:arcrole", { prefix: "xlink", name: "arcrole", namespace: NS.XLINK }],
  ["xlink:href", { prefix: "xlink", name: "href", namespace: NS.XLINK }],
  ["xlink:role", { prefix: "xlink", name: "role", namespace: NS.XLINK }],
  ["xlink:show", { prefix: "xlink", name: "show", namespace: NS.XLINK }],
  ["xlink:title", { prefix: "xlink", name: "title", namespace: NS.XLINK }],
  ["xlink:type", { prefix: "xlink", name: "type", namespace: NS.XLINK }],
  ["xml:lang", { prefix: "xml", name: "lang", namespace: NS.XML }],
  ["xml:space", { prefix: "xml", name: "space", namespace: NS.XML }],
  ["xmlns", { prefix: "", name: "xmlns", namespace: NS.XMLNS }],
  ["xmlns:xlink", { prefix: "xmlns", name: "xlink", namespace: NS.XMLNS }]
]);
var SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "clipPath",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "foreignObject",
  "glyphRef",
  "linearGradient",
  "radialGradient",
  "textPath"
].map((tn) => [tn.toLowerCase(), tn]));
var EXITS_FOREIGN_CONTENT = /* @__PURE__ */ new Set([
  TAG_ID.B,
  TAG_ID.BIG,
  TAG_ID.BLOCKQUOTE,
  TAG_ID.BODY,
  TAG_ID.BR,
  TAG_ID.CENTER,
  TAG_ID.CODE,
  TAG_ID.DD,
  TAG_ID.DIV,
  TAG_ID.DL,
  TAG_ID.DT,
  TAG_ID.EM,
  TAG_ID.EMBED,
  TAG_ID.H1,
  TAG_ID.H2,
  TAG_ID.H3,
  TAG_ID.H4,
  TAG_ID.H5,
  TAG_ID.H6,
  TAG_ID.HEAD,
  TAG_ID.HR,
  TAG_ID.I,
  TAG_ID.IMG,
  TAG_ID.LI,
  TAG_ID.LISTING,
  TAG_ID.MENU,
  TAG_ID.META,
  TAG_ID.NOBR,
  TAG_ID.OL,
  TAG_ID.P,
  TAG_ID.PRE,
  TAG_ID.RUBY,
  TAG_ID.S,
  TAG_ID.SMALL,
  TAG_ID.SPAN,
  TAG_ID.STRONG,
  TAG_ID.STRIKE,
  TAG_ID.SUB,
  TAG_ID.SUP,
  TAG_ID.TABLE,
  TAG_ID.TT,
  TAG_ID.U,
  TAG_ID.UL,
  TAG_ID.VAR
]);
function causesExit(startTagToken) {
  const tn = startTagToken.tagID;
  const isFontWithAttrs = tn === TAG_ID.FONT && startTagToken.attrs.some(({ name }) => name === ATTRS.COLOR || name === ATTRS.SIZE || name === ATTRS.FACE);
  return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);
}
function adjustTokenMathMLAttrs(token) {
  for (let i = 0; i < token.attrs.length; i++) {
    if (token.attrs[i].name === DEFINITION_URL_ATTR) {
      token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
      break;
    }
  }
}
function adjustTokenSVGAttrs(token) {
  for (let i = 0; i < token.attrs.length; i++) {
    const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);
    if (adjustedAttrName != null) {
      token.attrs[i].name = adjustedAttrName;
    }
  }
}
function adjustTokenXMLAttrs(token) {
  for (let i = 0; i < token.attrs.length; i++) {
    const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);
    if (adjustedAttrEntry) {
      token.attrs[i].prefix = adjustedAttrEntry.prefix;
      token.attrs[i].name = adjustedAttrEntry.name;
      token.attrs[i].namespace = adjustedAttrEntry.namespace;
    }
  }
}
function adjustTokenSVGTagName(token) {
  const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);
  if (adjustedTagName != null) {
    token.tagName = adjustedTagName;
    token.tagID = getTagID(token.tagName);
  }
}
function isMathMLTextIntegrationPoint(tn, ns) {
  return ns === NS.MATHML && (tn === TAG_ID.MI || tn === TAG_ID.MO || tn === TAG_ID.MN || tn === TAG_ID.MS || tn === TAG_ID.MTEXT);
}
function isHtmlIntegrationPoint(tn, ns, attrs) {
  if (ns === NS.MATHML && tn === TAG_ID.ANNOTATION_XML) {
    for (let i = 0; i < attrs.length; i++) {
      if (attrs[i].name === ATTRS.ENCODING) {
        const value = attrs[i].value.toLowerCase();
        return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
      }
    }
  }
  return ns === NS.SVG && (tn === TAG_ID.FOREIGN_OBJECT || tn === TAG_ID.DESC || tn === TAG_ID.TITLE);
}
function isIntegrationPoint(tn, ns, attrs, foreignNS) {
  return (!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs) || (!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns);
}

// node_modules/parse5/dist/parser/index.js
var HIDDEN_INPUT_TYPE = "hidden";
var AA_OUTER_LOOP_ITER = 8;
var AA_INNER_LOOP_ITER = 3;
var InsertionMode;
(function(InsertionMode2) {
  InsertionMode2[InsertionMode2["INITIAL"] = 0] = "INITIAL";
  InsertionMode2[InsertionMode2["BEFORE_HTML"] = 1] = "BEFORE_HTML";
  InsertionMode2[InsertionMode2["BEFORE_HEAD"] = 2] = "BEFORE_HEAD";
  InsertionMode2[InsertionMode2["IN_HEAD"] = 3] = "IN_HEAD";
  InsertionMode2[InsertionMode2["IN_HEAD_NO_SCRIPT"] = 4] = "IN_HEAD_NO_SCRIPT";
  InsertionMode2[InsertionMode2["AFTER_HEAD"] = 5] = "AFTER_HEAD";
  InsertionMode2[InsertionMode2["IN_BODY"] = 6] = "IN_BODY";
  InsertionMode2[InsertionMode2["TEXT"] = 7] = "TEXT";
  InsertionMode2[InsertionMode2["IN_TABLE"] = 8] = "IN_TABLE";
  InsertionMode2[InsertionMode2["IN_TABLE_TEXT"] = 9] = "IN_TABLE_TEXT";
  InsertionMode2[InsertionMode2["IN_CAPTION"] = 10] = "IN_CAPTION";
  InsertionMode2[InsertionMode2["IN_COLUMN_GROUP"] = 11] = "IN_COLUMN_GROUP";
  InsertionMode2[InsertionMode2["IN_TABLE_BODY"] = 12] = "IN_TABLE_BODY";
  InsertionMode2[InsertionMode2["IN_ROW"] = 13] = "IN_ROW";
  InsertionMode2[InsertionMode2["IN_CELL"] = 14] = "IN_CELL";
  InsertionMode2[InsertionMode2["IN_SELECT"] = 15] = "IN_SELECT";
  InsertionMode2[InsertionMode2["IN_SELECT_IN_TABLE"] = 16] = "IN_SELECT_IN_TABLE";
  InsertionMode2[InsertionMode2["IN_TEMPLATE"] = 17] = "IN_TEMPLATE";
  InsertionMode2[InsertionMode2["AFTER_BODY"] = 18] = "AFTER_BODY";
  InsertionMode2[InsertionMode2["IN_FRAMESET"] = 19] = "IN_FRAMESET";
  InsertionMode2[InsertionMode2["AFTER_FRAMESET"] = 20] = "AFTER_FRAMESET";
  InsertionMode2[InsertionMode2["AFTER_AFTER_BODY"] = 21] = "AFTER_AFTER_BODY";
  InsertionMode2[InsertionMode2["AFTER_AFTER_FRAMESET"] = 22] = "AFTER_AFTER_FRAMESET";
})(InsertionMode || (InsertionMode = {}));
var BASE_LOC = {
  startLine: -1,
  startCol: -1,
  startOffset: -1,
  endLine: -1,
  endCol: -1,
  endOffset: -1
};
var TABLE_STRUCTURE_TAGS = /* @__PURE__ */ new Set([TAG_ID.TABLE, TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TR]);
var defaultParserOptions = {
  scriptingEnabled: true,
  sourceCodeLocationInfo: false,
  treeAdapter: defaultTreeAdapter,
  onParseError: null
};
var Parser2 = class {
  constructor(options, document2, fragmentContext = null, scriptHandler = null) {
    this.fragmentContext = fragmentContext;
    this.scriptHandler = scriptHandler;
    this.currentToken = null;
    this.stopped = false;
    this.insertionMode = InsertionMode.INITIAL;
    this.originalInsertionMode = InsertionMode.INITIAL;
    this.headElement = null;
    this.formElement = null;
    this.currentNotInHTML = false;
    this.tmplInsertionModeStack = [];
    this.pendingCharacterTokens = [];
    this.hasNonWhitespacePendingCharacterToken = false;
    this.framesetOk = true;
    this.skipNextNewLine = false;
    this.fosterParentingEnabled = false;
    this.options = {
      ...defaultParserOptions,
      ...options
    };
    this.treeAdapter = this.options.treeAdapter;
    this.onParseError = this.options.onParseError;
    if (this.onParseError) {
      this.options.sourceCodeLocationInfo = true;
    }
    this.document = document2 !== null && document2 !== void 0 ? document2 : this.treeAdapter.createDocument();
    this.tokenizer = new Tokenizer2(this.options, this);
    this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
    this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : TAG_ID.UNKNOWN;
    this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);
    this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);
  }
  // API
  static parse(html3, options) {
    const parser = new this(options);
    parser.tokenizer.write(html3, true);
    return parser.document;
  }
  static getFragmentParser(fragmentContext, options) {
    const opts = {
      ...defaultParserOptions,
      ...options
    };
    fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : fragmentContext = opts.treeAdapter.createElement(TAG_NAMES.TEMPLATE, NS.HTML, []);
    const documentMock = opts.treeAdapter.createElement("documentmock", NS.HTML, []);
    const parser = new this(opts, documentMock, fragmentContext);
    if (parser.fragmentContextID === TAG_ID.TEMPLATE) {
      parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
    }
    parser._initTokenizerForFragmentParsing();
    parser._insertFakeRootElement();
    parser._resetInsertionMode();
    parser._findFormInFragmentContext();
    return parser;
  }
  getFragment() {
    const rootElement = this.treeAdapter.getFirstChild(this.document);
    const fragment = this.treeAdapter.createDocumentFragment();
    this._adoptNodes(rootElement, fragment);
    return fragment;
  }
  //Errors
  /** @internal */
  _err(token, code, beforeToken) {
    var _a5;
    if (!this.onParseError)
      return;
    const loc = (_a5 = token.location) !== null && _a5 !== void 0 ? _a5 : BASE_LOC;
    const err = {
      code,
      startLine: loc.startLine,
      startCol: loc.startCol,
      startOffset: loc.startOffset,
      endLine: beforeToken ? loc.startLine : loc.endLine,
      endCol: beforeToken ? loc.startCol : loc.endCol,
      endOffset: beforeToken ? loc.startOffset : loc.endOffset
    };
    this.onParseError(err);
  }
  //Stack events
  /** @internal */
  onItemPush(node, tid, isTop) {
    var _a5, _b;
    (_b = (_a5 = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a5, node);
    if (isTop && this.openElements.stackTop > 0)
      this._setContextModes(node, tid);
  }
  /** @internal */
  onItemPop(node, isTop) {
    var _a5, _b;
    if (this.options.sourceCodeLocationInfo) {
      this._setEndLocation(node, this.currentToken);
    }
    (_b = (_a5 = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a5, node, this.openElements.current);
    if (isTop) {
      let current;
      let currentTagId;
      if (this.openElements.stackTop === 0 && this.fragmentContext) {
        current = this.fragmentContext;
        currentTagId = this.fragmentContextID;
      } else {
        ({ current, currentTagId } = this.openElements);
      }
      this._setContextModes(current, currentTagId);
    }
  }
  _setContextModes(current, tid) {
    const isHTML = current === this.document || current && this.treeAdapter.getNamespaceURI(current) === NS.HTML;
    this.currentNotInHTML = !isHTML;
    this.tokenizer.inForeignNode = !isHTML && current !== void 0 && tid !== void 0 && !this._isIntegrationPoint(tid, current);
  }
  /** @protected */
  _switchToTextParsing(currentToken, nextTokenizerState) {
    this._insertElement(currentToken, NS.HTML);
    this.tokenizer.state = nextTokenizerState;
    this.originalInsertionMode = this.insertionMode;
    this.insertionMode = InsertionMode.TEXT;
  }
  switchToPlaintextParsing() {
    this.insertionMode = InsertionMode.TEXT;
    this.originalInsertionMode = InsertionMode.IN_BODY;
    this.tokenizer.state = TokenizerMode.PLAINTEXT;
  }
  //Fragment parsing
  /** @protected */
  _getAdjustedCurrentElement() {
    return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
  }
  /** @protected */
  _findFormInFragmentContext() {
    let node = this.fragmentContext;
    while (node) {
      if (this.treeAdapter.getTagName(node) === TAG_NAMES.FORM) {
        this.formElement = node;
        break;
      }
      node = this.treeAdapter.getParentNode(node);
    }
  }
  _initTokenizerForFragmentParsing() {
    if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {
      return;
    }
    switch (this.fragmentContextID) {
      case TAG_ID.TITLE:
      case TAG_ID.TEXTAREA: {
        this.tokenizer.state = TokenizerMode.RCDATA;
        break;
      }
      case TAG_ID.STYLE:
      case TAG_ID.XMP:
      case TAG_ID.IFRAME:
      case TAG_ID.NOEMBED:
      case TAG_ID.NOFRAMES:
      case TAG_ID.NOSCRIPT: {
        this.tokenizer.state = TokenizerMode.RAWTEXT;
        break;
      }
      case TAG_ID.SCRIPT: {
        this.tokenizer.state = TokenizerMode.SCRIPT_DATA;
        break;
      }
      case TAG_ID.PLAINTEXT: {
        this.tokenizer.state = TokenizerMode.PLAINTEXT;
        break;
      }
      default:
    }
  }
  //Tree mutation
  /** @protected */
  _setDocumentType(token) {
    const name = token.name || "";
    const publicId = token.publicId || "";
    const systemId = token.systemId || "";
    this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
    if (token.location) {
      const documentChildren = this.treeAdapter.getChildNodes(this.document);
      const docTypeNode = documentChildren.find((node) => this.treeAdapter.isDocumentTypeNode(node));
      if (docTypeNode) {
        this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);
      }
    }
  }
  /** @protected */
  _attachElementToTree(element, location) {
    if (this.options.sourceCodeLocationInfo) {
      const loc = location && {
        ...location,
        startTag: location
      };
      this.treeAdapter.setNodeSourceCodeLocation(element, loc);
    }
    if (this._shouldFosterParentOnInsertion()) {
      this._fosterParentElement(element);
    } else {
      const parent2 = this.openElements.currentTmplContentOrNode;
      this.treeAdapter.appendChild(parent2 !== null && parent2 !== void 0 ? parent2 : this.document, element);
    }
  }
  /**
   * For self-closing tags. Add an element to the tree, but skip adding it
   * to the stack.
   */
  /** @protected */
  _appendElement(token, namespaceURI) {
    const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
    this._attachElementToTree(element, token.location);
  }
  /** @protected */
  _insertElement(token, namespaceURI) {
    const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
    this._attachElementToTree(element, token.location);
    this.openElements.push(element, token.tagID);
  }
  /** @protected */
  _insertFakeElement(tagName, tagID) {
    const element = this.treeAdapter.createElement(tagName, NS.HTML, []);
    this._attachElementToTree(element, null);
    this.openElements.push(element, tagID);
  }
  /** @protected */
  _insertTemplate(token) {
    const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);
    const content = this.treeAdapter.createDocumentFragment();
    this.treeAdapter.setTemplateContent(tmpl, content);
    this._attachElementToTree(tmpl, token.location);
    this.openElements.push(tmpl, token.tagID);
    if (this.options.sourceCodeLocationInfo)
      this.treeAdapter.setNodeSourceCodeLocation(content, null);
  }
  /** @protected */
  _insertFakeRootElement() {
    const element = this.treeAdapter.createElement(TAG_NAMES.HTML, NS.HTML, []);
    if (this.options.sourceCodeLocationInfo)
      this.treeAdapter.setNodeSourceCodeLocation(element, null);
    this.treeAdapter.appendChild(this.openElements.current, element);
    this.openElements.push(element, TAG_ID.HTML);
  }
  /** @protected */
  _appendCommentNode(token, parent2) {
    const commentNode = this.treeAdapter.createCommentNode(token.data);
    this.treeAdapter.appendChild(parent2, commentNode);
    if (this.options.sourceCodeLocationInfo) {
      this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
    }
  }
  /** @protected */
  _insertCharacters(token) {
    let parent2;
    let beforeElement;
    if (this._shouldFosterParentOnInsertion()) {
      ({ parent: parent2, beforeElement } = this._findFosterParentingLocation());
      if (beforeElement) {
        this.treeAdapter.insertTextBefore(parent2, token.chars, beforeElement);
      } else {
        this.treeAdapter.insertText(parent2, token.chars);
      }
    } else {
      parent2 = this.openElements.currentTmplContentOrNode;
      this.treeAdapter.insertText(parent2, token.chars);
    }
    if (!token.location)
      return;
    const siblings2 = this.treeAdapter.getChildNodes(parent2);
    const textNodeIdx = beforeElement ? siblings2.lastIndexOf(beforeElement) : siblings2.length;
    const textNode = siblings2[textNodeIdx - 1];
    const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);
    if (tnLoc) {
      const { endLine, endCol, endOffset } = token.location;
      this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });
    } else if (this.options.sourceCodeLocationInfo) {
      this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
    }
  }
  /** @protected */
  _adoptNodes(donor, recipient) {
    for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
      this.treeAdapter.detachNode(child);
      this.treeAdapter.appendChild(recipient, child);
    }
  }
  /** @protected */
  _setEndLocation(element, closingToken) {
    if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {
      const ctLoc = closingToken.location;
      const tn = this.treeAdapter.getTagName(element);
      const endLoc = (
        // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing
        // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.
        closingToken.type === TokenType.END_TAG && tn === closingToken.tagName ? {
          endTag: { ...ctLoc },
          endLine: ctLoc.endLine,
          endCol: ctLoc.endCol,
          endOffset: ctLoc.endOffset
        } : {
          endLine: ctLoc.startLine,
          endCol: ctLoc.startCol,
          endOffset: ctLoc.startOffset
        }
      );
      this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);
    }
  }
  //Token processing
  shouldProcessStartTagTokenInForeignContent(token) {
    if (!this.currentNotInHTML)
      return false;
    let current;
    let currentTagId;
    if (this.openElements.stackTop === 0 && this.fragmentContext) {
      current = this.fragmentContext;
      currentTagId = this.fragmentContextID;
    } else {
      ({ current, currentTagId } = this.openElements);
    }
    if (token.tagID === TAG_ID.SVG && this.treeAdapter.getTagName(current) === TAG_NAMES.ANNOTATION_XML && this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {
      return false;
    }
    return (
      // Check that `current` is not an integration point for HTML or MathML elements.
      this.tokenizer.inForeignNode || // If it _is_ an integration point, then we might have to check that it is not an HTML
      // integration point.
      (token.tagID === TAG_ID.MGLYPH || token.tagID === TAG_ID.MALIGNMARK) && currentTagId !== void 0 && !this._isIntegrationPoint(currentTagId, current, NS.HTML)
    );
  }
  /** @protected */
  _processToken(token) {
    switch (token.type) {
      case TokenType.CHARACTER: {
        this.onCharacter(token);
        break;
      }
      case TokenType.NULL_CHARACTER: {
        this.onNullCharacter(token);
        break;
      }
      case TokenType.COMMENT: {
        this.onComment(token);
        break;
      }
      case TokenType.DOCTYPE: {
        this.onDoctype(token);
        break;
      }
      case TokenType.START_TAG: {
        this._processStartTag(token);
        break;
      }
      case TokenType.END_TAG: {
        this.onEndTag(token);
        break;
      }
      case TokenType.EOF: {
        this.onEof(token);
        break;
      }
      case TokenType.WHITESPACE_CHARACTER: {
        this.onWhitespaceCharacter(token);
        break;
      }
    }
  }
  //Integration points
  /** @protected */
  _isIntegrationPoint(tid, element, foreignNS) {
    const ns = this.treeAdapter.getNamespaceURI(element);
    const attrs = this.treeAdapter.getAttrList(element);
    return isIntegrationPoint(tid, ns, attrs, foreignNS);
  }
  //Active formatting elements reconstruction
  /** @protected */
  _reconstructActiveFormattingElements() {
    const listLength = this.activeFormattingElements.entries.length;
    if (listLength) {
      const endIndex = this.activeFormattingElements.entries.findIndex((entry) => entry.type === EntryType.Marker || this.openElements.contains(entry.element));
      const unopenIdx = endIndex === -1 ? listLength - 1 : endIndex - 1;
      for (let i = unopenIdx; i >= 0; i--) {
        const entry = this.activeFormattingElements.entries[i];
        this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
        entry.element = this.openElements.current;
      }
    }
  }
  //Close elements
  /** @protected */
  _closeTableCell() {
    this.openElements.generateImpliedEndTags();
    this.openElements.popUntilTableCellPopped();
    this.activeFormattingElements.clearToLastMarker();
    this.insertionMode = InsertionMode.IN_ROW;
  }
  /** @protected */
  _closePElement() {
    this.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.P);
    this.openElements.popUntilTagNamePopped(TAG_ID.P);
  }
  //Insertion modes
  /** @protected */
  _resetInsertionMode() {
    for (let i = this.openElements.stackTop; i >= 0; i--) {
      switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {
        case TAG_ID.TR: {
          this.insertionMode = InsertionMode.IN_ROW;
          return;
        }
        case TAG_ID.TBODY:
        case TAG_ID.THEAD:
        case TAG_ID.TFOOT: {
          this.insertionMode = InsertionMode.IN_TABLE_BODY;
          return;
        }
        case TAG_ID.CAPTION: {
          this.insertionMode = InsertionMode.IN_CAPTION;
          return;
        }
        case TAG_ID.COLGROUP: {
          this.insertionMode = InsertionMode.IN_COLUMN_GROUP;
          return;
        }
        case TAG_ID.TABLE: {
          this.insertionMode = InsertionMode.IN_TABLE;
          return;
        }
        case TAG_ID.BODY: {
          this.insertionMode = InsertionMode.IN_BODY;
          return;
        }
        case TAG_ID.FRAMESET: {
          this.insertionMode = InsertionMode.IN_FRAMESET;
          return;
        }
        case TAG_ID.SELECT: {
          this._resetInsertionModeForSelect(i);
          return;
        }
        case TAG_ID.TEMPLATE: {
          this.insertionMode = this.tmplInsertionModeStack[0];
          return;
        }
        case TAG_ID.HTML: {
          this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;
          return;
        }
        case TAG_ID.TD:
        case TAG_ID.TH: {
          if (i > 0) {
            this.insertionMode = InsertionMode.IN_CELL;
            return;
          }
          break;
        }
        case TAG_ID.HEAD: {
          if (i > 0) {
            this.insertionMode = InsertionMode.IN_HEAD;
            return;
          }
          break;
        }
      }
    }
    this.insertionMode = InsertionMode.IN_BODY;
  }
  /** @protected */
  _resetInsertionModeForSelect(selectIdx) {
    if (selectIdx > 0) {
      for (let i = selectIdx - 1; i > 0; i--) {
        const tn = this.openElements.tagIDs[i];
        if (tn === TAG_ID.TEMPLATE) {
          break;
        } else if (tn === TAG_ID.TABLE) {
          this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;
          return;
        }
      }
    }
    this.insertionMode = InsertionMode.IN_SELECT;
  }
  //Foster parenting
  /** @protected */
  _isElementCausesFosterParenting(tn) {
    return TABLE_STRUCTURE_TAGS.has(tn);
  }
  /** @protected */
  _shouldFosterParentOnInsertion() {
    return this.fosterParentingEnabled && this.openElements.currentTagId !== void 0 && this._isElementCausesFosterParenting(this.openElements.currentTagId);
  }
  /** @protected */
  _findFosterParentingLocation() {
    for (let i = this.openElements.stackTop; i >= 0; i--) {
      const openElement = this.openElements.items[i];
      switch (this.openElements.tagIDs[i]) {
        case TAG_ID.TEMPLATE: {
          if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {
            return { parent: this.treeAdapter.getTemplateContent(openElement), beforeElement: null };
          }
          break;
        }
        case TAG_ID.TABLE: {
          const parent2 = this.treeAdapter.getParentNode(openElement);
          if (parent2) {
            return { parent: parent2, beforeElement: openElement };
          }
          return { parent: this.openElements.items[i - 1], beforeElement: null };
        }
        default:
      }
    }
    return { parent: this.openElements.items[0], beforeElement: null };
  }
  /** @protected */
  _fosterParentElement(element) {
    const location = this._findFosterParentingLocation();
    if (location.beforeElement) {
      this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
    } else {
      this.treeAdapter.appendChild(location.parent, element);
    }
  }
  //Special elements
  /** @protected */
  _isSpecialElement(element, id) {
    const ns = this.treeAdapter.getNamespaceURI(element);
    return SPECIAL_ELEMENTS[ns].has(id);
  }
  /** @internal */
  onCharacter(token) {
    this.skipNextNewLine = false;
    if (this.tokenizer.inForeignNode) {
      characterInForeignContent(this, token);
      return;
    }
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        tokenBeforeHtml(this, token);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        tokenBeforeHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD: {
        tokenInHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        tokenInHeadNoScript(this, token);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        tokenAfterHead(this, token);
        break;
      }
      case InsertionMode.IN_BODY:
      case InsertionMode.IN_CAPTION:
      case InsertionMode.IN_CELL:
      case InsertionMode.IN_TEMPLATE: {
        characterInBody(this, token);
        break;
      }
      case InsertionMode.TEXT:
      case InsertionMode.IN_SELECT:
      case InsertionMode.IN_SELECT_IN_TABLE: {
        this._insertCharacters(token);
        break;
      }
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW: {
        characterInTable(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        characterInTableText(this, token);
        break;
      }
      case InsertionMode.IN_COLUMN_GROUP: {
        tokenInColumnGroup(this, token);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        tokenAfterBody(this, token);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY: {
        tokenAfterAfterBody(this, token);
        break;
      }
      default:
    }
  }
  /** @internal */
  onNullCharacter(token) {
    this.skipNextNewLine = false;
    if (this.tokenizer.inForeignNode) {
      nullCharacterInForeignContent(this, token);
      return;
    }
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        tokenBeforeHtml(this, token);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        tokenBeforeHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD: {
        tokenInHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        tokenInHeadNoScript(this, token);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        tokenAfterHead(this, token);
        break;
      }
      case InsertionMode.TEXT: {
        this._insertCharacters(token);
        break;
      }
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW: {
        characterInTable(this, token);
        break;
      }
      case InsertionMode.IN_COLUMN_GROUP: {
        tokenInColumnGroup(this, token);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        tokenAfterBody(this, token);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY: {
        tokenAfterAfterBody(this, token);
        break;
      }
      default:
    }
  }
  /** @internal */
  onComment(token) {
    this.skipNextNewLine = false;
    if (this.currentNotInHTML) {
      appendComment(this, token);
      return;
    }
    switch (this.insertionMode) {
      case InsertionMode.INITIAL:
      case InsertionMode.BEFORE_HTML:
      case InsertionMode.BEFORE_HEAD:
      case InsertionMode.IN_HEAD:
      case InsertionMode.IN_HEAD_NO_SCRIPT:
      case InsertionMode.AFTER_HEAD:
      case InsertionMode.IN_BODY:
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_CAPTION:
      case InsertionMode.IN_COLUMN_GROUP:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW:
      case InsertionMode.IN_CELL:
      case InsertionMode.IN_SELECT:
      case InsertionMode.IN_SELECT_IN_TABLE:
      case InsertionMode.IN_TEMPLATE:
      case InsertionMode.IN_FRAMESET:
      case InsertionMode.AFTER_FRAMESET: {
        appendComment(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        appendCommentToRootHtmlElement(this, token);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY:
      case InsertionMode.AFTER_AFTER_FRAMESET: {
        appendCommentToDocument(this, token);
        break;
      }
      default:
    }
  }
  /** @internal */
  onDoctype(token) {
    this.skipNextNewLine = false;
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        doctypeInInitialMode(this, token);
        break;
      }
      case InsertionMode.BEFORE_HEAD:
      case InsertionMode.IN_HEAD:
      case InsertionMode.IN_HEAD_NO_SCRIPT:
      case InsertionMode.AFTER_HEAD: {
        this._err(token, ERR.misplacedDoctype);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token);
        break;
      }
      default:
    }
  }
  /** @internal */
  onStartTag(token) {
    this.skipNextNewLine = false;
    this.currentToken = token;
    this._processStartTag(token);
    if (token.selfClosing && !token.ackSelfClosing) {
      this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
    }
  }
  /**
   * Processes a given start tag.
   *
   * `onStartTag` checks if a self-closing tag was recognized. When a token
   * is moved inbetween multiple insertion modes, this check for self-closing
   * could lead to false positives. To avoid this, `_processStartTag` is used
   * for nested calls.
   *
   * @param token The token to process.
   * @protected
   */
  _processStartTag(token) {
    if (this.shouldProcessStartTagTokenInForeignContent(token)) {
      startTagInForeignContent(this, token);
    } else {
      this._startTagOutsideForeignContent(token);
    }
  }
  /** @protected */
  _startTagOutsideForeignContent(token) {
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        startTagBeforeHtml(this, token);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        startTagBeforeHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD: {
        startTagInHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        startTagInHeadNoScript(this, token);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        startTagAfterHead(this, token);
        break;
      }
      case InsertionMode.IN_BODY: {
        startTagInBody(this, token);
        break;
      }
      case InsertionMode.IN_TABLE: {
        startTagInTable(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token);
        break;
      }
      case InsertionMode.IN_CAPTION: {
        startTagInCaption(this, token);
        break;
      }
      case InsertionMode.IN_COLUMN_GROUP: {
        startTagInColumnGroup(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_BODY: {
        startTagInTableBody(this, token);
        break;
      }
      case InsertionMode.IN_ROW: {
        startTagInRow(this, token);
        break;
      }
      case InsertionMode.IN_CELL: {
        startTagInCell(this, token);
        break;
      }
      case InsertionMode.IN_SELECT: {
        startTagInSelect(this, token);
        break;
      }
      case InsertionMode.IN_SELECT_IN_TABLE: {
        startTagInSelectInTable(this, token);
        break;
      }
      case InsertionMode.IN_TEMPLATE: {
        startTagInTemplate(this, token);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        startTagAfterBody(this, token);
        break;
      }
      case InsertionMode.IN_FRAMESET: {
        startTagInFrameset(this, token);
        break;
      }
      case InsertionMode.AFTER_FRAMESET: {
        startTagAfterFrameset(this, token);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY: {
        startTagAfterAfterBody(this, token);
        break;
      }
      case InsertionMode.AFTER_AFTER_FRAMESET: {
        startTagAfterAfterFrameset(this, token);
        break;
      }
      default:
    }
  }
  /** @internal */
  onEndTag(token) {
    this.skipNextNewLine = false;
    this.currentToken = token;
    if (this.currentNotInHTML) {
      endTagInForeignContent(this, token);
    } else {
      this._endTagOutsideForeignContent(token);
    }
  }
  /** @protected */
  _endTagOutsideForeignContent(token) {
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        endTagBeforeHtml(this, token);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        endTagBeforeHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD: {
        endTagInHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        endTagInHeadNoScript(this, token);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        endTagAfterHead(this, token);
        break;
      }
      case InsertionMode.IN_BODY: {
        endTagInBody(this, token);
        break;
      }
      case InsertionMode.TEXT: {
        endTagInText(this, token);
        break;
      }
      case InsertionMode.IN_TABLE: {
        endTagInTable(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token);
        break;
      }
      case InsertionMode.IN_CAPTION: {
        endTagInCaption(this, token);
        break;
      }
      case InsertionMode.IN_COLUMN_GROUP: {
        endTagInColumnGroup(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_BODY: {
        endTagInTableBody(this, token);
        break;
      }
      case InsertionMode.IN_ROW: {
        endTagInRow(this, token);
        break;
      }
      case InsertionMode.IN_CELL: {
        endTagInCell(this, token);
        break;
      }
      case InsertionMode.IN_SELECT: {
        endTagInSelect(this, token);
        break;
      }
      case InsertionMode.IN_SELECT_IN_TABLE: {
        endTagInSelectInTable(this, token);
        break;
      }
      case InsertionMode.IN_TEMPLATE: {
        endTagInTemplate(this, token);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        endTagAfterBody(this, token);
        break;
      }
      case InsertionMode.IN_FRAMESET: {
        endTagInFrameset(this, token);
        break;
      }
      case InsertionMode.AFTER_FRAMESET: {
        endTagAfterFrameset(this, token);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY: {
        tokenAfterAfterBody(this, token);
        break;
      }
      default:
    }
  }
  /** @internal */
  onEof(token) {
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        tokenBeforeHtml(this, token);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        tokenBeforeHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD: {
        tokenInHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        tokenInHeadNoScript(this, token);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        tokenAfterHead(this, token);
        break;
      }
      case InsertionMode.IN_BODY:
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_CAPTION:
      case InsertionMode.IN_COLUMN_GROUP:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW:
      case InsertionMode.IN_CELL:
      case InsertionMode.IN_SELECT:
      case InsertionMode.IN_SELECT_IN_TABLE: {
        eofInBody(this, token);
        break;
      }
      case InsertionMode.TEXT: {
        eofInText(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token);
        break;
      }
      case InsertionMode.IN_TEMPLATE: {
        eofInTemplate(this, token);
        break;
      }
      case InsertionMode.AFTER_BODY:
      case InsertionMode.IN_FRAMESET:
      case InsertionMode.AFTER_FRAMESET:
      case InsertionMode.AFTER_AFTER_BODY:
      case InsertionMode.AFTER_AFTER_FRAMESET: {
        stopParsing(this, token);
        break;
      }
      default:
    }
  }
  /** @internal */
  onWhitespaceCharacter(token) {
    if (this.skipNextNewLine) {
      this.skipNextNewLine = false;
      if (token.chars.charCodeAt(0) === CODE_POINTS.LINE_FEED) {
        if (token.chars.length === 1) {
          return;
        }
        token.chars = token.chars.substr(1);
      }
    }
    if (this.tokenizer.inForeignNode) {
      this._insertCharacters(token);
      return;
    }
    switch (this.insertionMode) {
      case InsertionMode.IN_HEAD:
      case InsertionMode.IN_HEAD_NO_SCRIPT:
      case InsertionMode.AFTER_HEAD:
      case InsertionMode.TEXT:
      case InsertionMode.IN_COLUMN_GROUP:
      case InsertionMode.IN_SELECT:
      case InsertionMode.IN_SELECT_IN_TABLE:
      case InsertionMode.IN_FRAMESET:
      case InsertionMode.AFTER_FRAMESET: {
        this._insertCharacters(token);
        break;
      }
      case InsertionMode.IN_BODY:
      case InsertionMode.IN_CAPTION:
      case InsertionMode.IN_CELL:
      case InsertionMode.IN_TEMPLATE:
      case InsertionMode.AFTER_BODY:
      case InsertionMode.AFTER_AFTER_BODY:
      case InsertionMode.AFTER_AFTER_FRAMESET: {
        whitespaceCharacterInBody(this, token);
        break;
      }
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW: {
        characterInTable(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        whitespaceCharacterInTableText(this, token);
        break;
      }
      default:
    }
  }
};
function aaObtainFormattingElementEntry(p, token) {
  let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);
  if (formattingElementEntry) {
    if (!p.openElements.contains(formattingElementEntry.element)) {
      p.activeFormattingElements.removeEntry(formattingElementEntry);
      formattingElementEntry = null;
    } else if (!p.openElements.hasInScope(token.tagID)) {
      formattingElementEntry = null;
    }
  } else {
    genericEndTagInBody(p, token);
  }
  return formattingElementEntry;
}
function aaObtainFurthestBlock(p, formattingElementEntry) {
  let furthestBlock = null;
  let idx = p.openElements.stackTop;
  for (; idx >= 0; idx--) {
    const element = p.openElements.items[idx];
    if (element === formattingElementEntry.element) {
      break;
    }
    if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {
      furthestBlock = element;
    }
  }
  if (!furthestBlock) {
    p.openElements.shortenToLength(Math.max(idx, 0));
    p.activeFormattingElements.removeEntry(formattingElementEntry);
  }
  return furthestBlock;
}
function aaInnerLoop(p, furthestBlock, formattingElement) {
  let lastElement = furthestBlock;
  let nextElement = p.openElements.getCommonAncestor(furthestBlock);
  for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
    nextElement = p.openElements.getCommonAncestor(element);
    const elementEntry = p.activeFormattingElements.getElementEntry(element);
    const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;
    const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;
    if (shouldRemoveFromOpenElements) {
      if (counterOverflow) {
        p.activeFormattingElements.removeEntry(elementEntry);
      }
      p.openElements.remove(element);
    } else {
      element = aaRecreateElementFromEntry(p, elementEntry);
      if (lastElement === furthestBlock) {
        p.activeFormattingElements.bookmark = elementEntry;
      }
      p.treeAdapter.detachNode(lastElement);
      p.treeAdapter.appendChild(element, lastElement);
      lastElement = element;
    }
  }
  return lastElement;
}
function aaRecreateElementFromEntry(p, elementEntry) {
  const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);
  const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
  p.openElements.replace(elementEntry.element, newElement);
  elementEntry.element = newElement;
  return newElement;
}
function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
  const tn = p.treeAdapter.getTagName(commonAncestor);
  const tid = getTagID(tn);
  if (p._isElementCausesFosterParenting(tid)) {
    p._fosterParentElement(lastElement);
  } else {
    const ns = p.treeAdapter.getNamespaceURI(commonAncestor);
    if (tid === TAG_ID.TEMPLATE && ns === NS.HTML) {
      commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
    }
    p.treeAdapter.appendChild(commonAncestor, lastElement);
  }
}
function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
  const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);
  const { token } = formattingElementEntry;
  const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);
  p._adoptNodes(furthestBlock, newElement);
  p.treeAdapter.appendChild(furthestBlock, newElement);
  p.activeFormattingElements.insertElementAfterBookmark(newElement, token);
  p.activeFormattingElements.removeEntry(formattingElementEntry);
  p.openElements.remove(formattingElementEntry.element);
  p.openElements.insertAfter(furthestBlock, newElement, token.tagID);
}
function callAdoptionAgency(p, token) {
  for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {
    const formattingElementEntry = aaObtainFormattingElementEntry(p, token);
    if (!formattingElementEntry) {
      break;
    }
    const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
    if (!furthestBlock) {
      break;
    }
    p.activeFormattingElements.bookmark = formattingElementEntry;
    const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);
    const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
    p.treeAdapter.detachNode(lastElement);
    if (commonAncestor)
      aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
    aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
  }
}
function appendComment(p, token) {
  p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);
}
function appendCommentToRootHtmlElement(p, token) {
  p._appendCommentNode(token, p.openElements.items[0]);
}
function appendCommentToDocument(p, token) {
  p._appendCommentNode(token, p.document);
}
function stopParsing(p, token) {
  p.stopped = true;
  if (token.location) {
    const target = p.fragmentContext ? 0 : 2;
    for (let i = p.openElements.stackTop; i >= target; i--) {
      p._setEndLocation(p.openElements.items[i], token);
    }
    if (!p.fragmentContext && p.openElements.stackTop >= 0) {
      const htmlElement = p.openElements.items[0];
      const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);
      if (htmlLocation && !htmlLocation.endTag) {
        p._setEndLocation(htmlElement, token);
        if (p.openElements.stackTop >= 1) {
          const bodyElement = p.openElements.items[1];
          const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);
          if (bodyLocation && !bodyLocation.endTag) {
            p._setEndLocation(bodyElement, token);
          }
        }
      }
    }
  }
}
function doctypeInInitialMode(p, token) {
  p._setDocumentType(token);
  const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : getDocumentMode(token);
  if (!isConforming(token)) {
    p._err(token, ERR.nonConformingDoctype);
  }
  p.treeAdapter.setDocumentMode(p.document, mode);
  p.insertionMode = InsertionMode.BEFORE_HTML;
}
function tokenInInitialMode(p, token) {
  p._err(token, ERR.missingDoctype, true);
  p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);
  p.insertionMode = InsertionMode.BEFORE_HTML;
  p._processToken(token);
}
function startTagBeforeHtml(p, token) {
  if (token.tagID === TAG_ID.HTML) {
    p._insertElement(token, NS.HTML);
    p.insertionMode = InsertionMode.BEFORE_HEAD;
  } else {
    tokenBeforeHtml(p, token);
  }
}
function endTagBeforeHtml(p, token) {
  const tn = token.tagID;
  if (tn === TAG_ID.HTML || tn === TAG_ID.HEAD || tn === TAG_ID.BODY || tn === TAG_ID.BR) {
    tokenBeforeHtml(p, token);
  }
}
function tokenBeforeHtml(p, token) {
  p._insertFakeRootElement();
  p.insertionMode = InsertionMode.BEFORE_HEAD;
  p._processToken(token);
}
function startTagBeforeHead(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.HEAD: {
      p._insertElement(token, NS.HTML);
      p.headElement = p.openElements.current;
      p.insertionMode = InsertionMode.IN_HEAD;
      break;
    }
    default: {
      tokenBeforeHead(p, token);
    }
  }
}
function endTagBeforeHead(p, token) {
  const tn = token.tagID;
  if (tn === TAG_ID.HEAD || tn === TAG_ID.BODY || tn === TAG_ID.HTML || tn === TAG_ID.BR) {
    tokenBeforeHead(p, token);
  } else {
    p._err(token, ERR.endTagWithoutMatchingOpenElement);
  }
}
function tokenBeforeHead(p, token) {
  p._insertFakeElement(TAG_NAMES.HEAD, TAG_ID.HEAD);
  p.headElement = p.openElements.current;
  p.insertionMode = InsertionMode.IN_HEAD;
  p._processToken(token);
}
function startTagInHead(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.BASE:
    case TAG_ID.BASEFONT:
    case TAG_ID.BGSOUND:
    case TAG_ID.LINK:
    case TAG_ID.META: {
      p._appendElement(token, NS.HTML);
      token.ackSelfClosing = true;
      break;
    }
    case TAG_ID.TITLE: {
      p._switchToTextParsing(token, TokenizerMode.RCDATA);
      break;
    }
    case TAG_ID.NOSCRIPT: {
      if (p.options.scriptingEnabled) {
        p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
      } else {
        p._insertElement(token, NS.HTML);
        p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;
      }
      break;
    }
    case TAG_ID.NOFRAMES:
    case TAG_ID.STYLE: {
      p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
      break;
    }
    case TAG_ID.SCRIPT: {
      p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);
      break;
    }
    case TAG_ID.TEMPLATE: {
      p._insertTemplate(token);
      p.activeFormattingElements.insertMarker();
      p.framesetOk = false;
      p.insertionMode = InsertionMode.IN_TEMPLATE;
      p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
      break;
    }
    case TAG_ID.HEAD: {
      p._err(token, ERR.misplacedStartTagForHeadElement);
      break;
    }
    default: {
      tokenInHead(p, token);
    }
  }
}
function endTagInHead(p, token) {
  switch (token.tagID) {
    case TAG_ID.HEAD: {
      p.openElements.pop();
      p.insertionMode = InsertionMode.AFTER_HEAD;
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.BR:
    case TAG_ID.HTML: {
      tokenInHead(p, token);
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p, token);
      break;
    }
    default: {
      p._err(token, ERR.endTagWithoutMatchingOpenElement);
    }
  }
}
function templateEndTagInHead(p, token) {
  if (p.openElements.tmplCount > 0) {
    p.openElements.generateImpliedEndTagsThoroughly();
    if (p.openElements.currentTagId !== TAG_ID.TEMPLATE) {
      p._err(token, ERR.closingOfElementWithOpenChildElements);
    }
    p.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
    p.activeFormattingElements.clearToLastMarker();
    p.tmplInsertionModeStack.shift();
    p._resetInsertionMode();
  } else {
    p._err(token, ERR.endTagWithoutMatchingOpenElement);
  }
}
function tokenInHead(p, token) {
  p.openElements.pop();
  p.insertionMode = InsertionMode.AFTER_HEAD;
  p._processToken(token);
}
function startTagInHeadNoScript(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.BASEFONT:
    case TAG_ID.BGSOUND:
    case TAG_ID.HEAD:
    case TAG_ID.LINK:
    case TAG_ID.META:
    case TAG_ID.NOFRAMES:
    case TAG_ID.STYLE: {
      startTagInHead(p, token);
      break;
    }
    case TAG_ID.NOSCRIPT: {
      p._err(token, ERR.nestedNoscriptInHead);
      break;
    }
    default: {
      tokenInHeadNoScript(p, token);
    }
  }
}
function endTagInHeadNoScript(p, token) {
  switch (token.tagID) {
    case TAG_ID.NOSCRIPT: {
      p.openElements.pop();
      p.insertionMode = InsertionMode.IN_HEAD;
      break;
    }
    case TAG_ID.BR: {
      tokenInHeadNoScript(p, token);
      break;
    }
    default: {
      p._err(token, ERR.endTagWithoutMatchingOpenElement);
    }
  }
}
function tokenInHeadNoScript(p, token) {
  const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;
  p._err(token, errCode);
  p.openElements.pop();
  p.insertionMode = InsertionMode.IN_HEAD;
  p._processToken(token);
}
function startTagAfterHead(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.BODY: {
      p._insertElement(token, NS.HTML);
      p.framesetOk = false;
      p.insertionMode = InsertionMode.IN_BODY;
      break;
    }
    case TAG_ID.FRAMESET: {
      p._insertElement(token, NS.HTML);
      p.insertionMode = InsertionMode.IN_FRAMESET;
      break;
    }
    case TAG_ID.BASE:
    case TAG_ID.BASEFONT:
    case TAG_ID.BGSOUND:
    case TAG_ID.LINK:
    case TAG_ID.META:
    case TAG_ID.NOFRAMES:
    case TAG_ID.SCRIPT:
    case TAG_ID.STYLE:
    case TAG_ID.TEMPLATE:
    case TAG_ID.TITLE: {
      p._err(token, ERR.abandonedHeadElementChild);
      p.openElements.push(p.headElement, TAG_ID.HEAD);
      startTagInHead(p, token);
      p.openElements.remove(p.headElement);
      break;
    }
    case TAG_ID.HEAD: {
      p._err(token, ERR.misplacedStartTagForHeadElement);
      break;
    }
    default: {
      tokenAfterHead(p, token);
    }
  }
}
function endTagAfterHead(p, token) {
  switch (token.tagID) {
    case TAG_ID.BODY:
    case TAG_ID.HTML:
    case TAG_ID.BR: {
      tokenAfterHead(p, token);
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p, token);
      break;
    }
    default: {
      p._err(token, ERR.endTagWithoutMatchingOpenElement);
    }
  }
}
function tokenAfterHead(p, token) {
  p._insertFakeElement(TAG_NAMES.BODY, TAG_ID.BODY);
  p.insertionMode = InsertionMode.IN_BODY;
  modeInBody(p, token);
}
function modeInBody(p, token) {
  switch (token.type) {
    case TokenType.CHARACTER: {
      characterInBody(p, token);
      break;
    }
    case TokenType.WHITESPACE_CHARACTER: {
      whitespaceCharacterInBody(p, token);
      break;
    }
    case TokenType.COMMENT: {
      appendComment(p, token);
      break;
    }
    case TokenType.START_TAG: {
      startTagInBody(p, token);
      break;
    }
    case TokenType.END_TAG: {
      endTagInBody(p, token);
      break;
    }
    case TokenType.EOF: {
      eofInBody(p, token);
      break;
    }
    default:
  }
}
function whitespaceCharacterInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._insertCharacters(token);
}
function characterInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._insertCharacters(token);
  p.framesetOk = false;
}
function htmlStartTagInBody(p, token) {
  if (p.openElements.tmplCount === 0) {
    p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
  }
}
function bodyStartTagInBody(p, token) {
  const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
  if (bodyElement && p.openElements.tmplCount === 0) {
    p.framesetOk = false;
    p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
  }
}
function framesetStartTagInBody(p, token) {
  const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
  if (p.framesetOk && bodyElement) {
    p.treeAdapter.detachNode(bodyElement);
    p.openElements.popAllUpToHtmlElement();
    p._insertElement(token, NS.HTML);
    p.insertionMode = InsertionMode.IN_FRAMESET;
  }
}
function addressStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  p._insertElement(token, NS.HTML);
}
function numberedHeaderStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  if (p.openElements.currentTagId !== void 0 && NUMBERED_HEADERS.has(p.openElements.currentTagId)) {
    p.openElements.pop();
  }
  p._insertElement(token, NS.HTML);
}
function preStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  p._insertElement(token, NS.HTML);
  p.skipNextNewLine = true;
  p.framesetOk = false;
}
function formStartTagInBody(p, token) {
  const inTemplate = p.openElements.tmplCount > 0;
  if (!p.formElement || inTemplate) {
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
      p._closePElement();
    }
    p._insertElement(token, NS.HTML);
    if (!inTemplate) {
      p.formElement = p.openElements.current;
    }
  }
}
function listItemStartTagInBody(p, token) {
  p.framesetOk = false;
  const tn = token.tagID;
  for (let i = p.openElements.stackTop; i >= 0; i--) {
    const elementId = p.openElements.tagIDs[i];
    if (tn === TAG_ID.LI && elementId === TAG_ID.LI || (tn === TAG_ID.DD || tn === TAG_ID.DT) && (elementId === TAG_ID.DD || elementId === TAG_ID.DT)) {
      p.openElements.generateImpliedEndTagsWithExclusion(elementId);
      p.openElements.popUntilTagNamePopped(elementId);
      break;
    }
    if (elementId !== TAG_ID.ADDRESS && elementId !== TAG_ID.DIV && elementId !== TAG_ID.P && p._isSpecialElement(p.openElements.items[i], elementId)) {
      break;
    }
  }
  if (p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  p._insertElement(token, NS.HTML);
}
function plaintextStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  p._insertElement(token, NS.HTML);
  p.tokenizer.state = TokenizerMode.PLAINTEXT;
}
function buttonStartTagInBody(p, token) {
  if (p.openElements.hasInScope(TAG_ID.BUTTON)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped(TAG_ID.BUTTON);
  }
  p._reconstructActiveFormattingElements();
  p._insertElement(token, NS.HTML);
  p.framesetOk = false;
}
function aStartTagInBody(p, token) {
  const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TAG_NAMES.A);
  if (activeElementEntry) {
    callAdoptionAgency(p, token);
    p.openElements.remove(activeElementEntry.element);
    p.activeFormattingElements.removeEntry(activeElementEntry);
  }
  p._reconstructActiveFormattingElements();
  p._insertElement(token, NS.HTML);
  p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function bStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._insertElement(token, NS.HTML);
  p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function nobrStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  if (p.openElements.hasInScope(TAG_ID.NOBR)) {
    callAdoptionAgency(p, token);
    p._reconstructActiveFormattingElements();
  }
  p._insertElement(token, NS.HTML);
  p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function appletStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._insertElement(token, NS.HTML);
  p.activeFormattingElements.insertMarker();
  p.framesetOk = false;
}
function tableStartTagInBody(p, token) {
  if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  p._insertElement(token, NS.HTML);
  p.framesetOk = false;
  p.insertionMode = InsertionMode.IN_TABLE;
}
function areaStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._appendElement(token, NS.HTML);
  p.framesetOk = false;
  token.ackSelfClosing = true;
}
function isHiddenInput(token) {
  const inputType = getTokenAttr(token, ATTRS.TYPE);
  return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;
}
function inputStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._appendElement(token, NS.HTML);
  if (!isHiddenInput(token)) {
    p.framesetOk = false;
  }
  token.ackSelfClosing = true;
}
function paramStartTagInBody(p, token) {
  p._appendElement(token, NS.HTML);
  token.ackSelfClosing = true;
}
function hrStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  p._appendElement(token, NS.HTML);
  p.framesetOk = false;
  token.ackSelfClosing = true;
}
function imageStartTagInBody(p, token) {
  token.tagName = TAG_NAMES.IMG;
  token.tagID = TAG_ID.IMG;
  areaStartTagInBody(p, token);
}
function textareaStartTagInBody(p, token) {
  p._insertElement(token, NS.HTML);
  p.skipNextNewLine = true;
  p.tokenizer.state = TokenizerMode.RCDATA;
  p.originalInsertionMode = p.insertionMode;
  p.framesetOk = false;
  p.insertionMode = InsertionMode.TEXT;
}
function xmpStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  p._reconstructActiveFormattingElements();
  p.framesetOk = false;
  p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
}
function iframeStartTagInBody(p, token) {
  p.framesetOk = false;
  p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
}
function rawTextStartTagInBody(p, token) {
  p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
}
function selectStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._insertElement(token, NS.HTML);
  p.framesetOk = false;
  p.insertionMode = p.insertionMode === InsertionMode.IN_TABLE || p.insertionMode === InsertionMode.IN_CAPTION || p.insertionMode === InsertionMode.IN_TABLE_BODY || p.insertionMode === InsertionMode.IN_ROW || p.insertionMode === InsertionMode.IN_CELL ? InsertionMode.IN_SELECT_IN_TABLE : InsertionMode.IN_SELECT;
}
function optgroupStartTagInBody(p, token) {
  if (p.openElements.currentTagId === TAG_ID.OPTION) {
    p.openElements.pop();
  }
  p._reconstructActiveFormattingElements();
  p._insertElement(token, NS.HTML);
}
function rbStartTagInBody(p, token) {
  if (p.openElements.hasInScope(TAG_ID.RUBY)) {
    p.openElements.generateImpliedEndTags();
  }
  p._insertElement(token, NS.HTML);
}
function rtStartTagInBody(p, token) {
  if (p.openElements.hasInScope(TAG_ID.RUBY)) {
    p.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.RTC);
  }
  p._insertElement(token, NS.HTML);
}
function mathStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  adjustTokenMathMLAttrs(token);
  adjustTokenXMLAttrs(token);
  if (token.selfClosing) {
    p._appendElement(token, NS.MATHML);
  } else {
    p._insertElement(token, NS.MATHML);
  }
  token.ackSelfClosing = true;
}
function svgStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  adjustTokenSVGAttrs(token);
  adjustTokenXMLAttrs(token);
  if (token.selfClosing) {
    p._appendElement(token, NS.SVG);
  } else {
    p._insertElement(token, NS.SVG);
  }
  token.ackSelfClosing = true;
}
function genericStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._insertElement(token, NS.HTML);
}
function startTagInBody(p, token) {
  switch (token.tagID) {
    case TAG_ID.I:
    case TAG_ID.S:
    case TAG_ID.B:
    case TAG_ID.U:
    case TAG_ID.EM:
    case TAG_ID.TT:
    case TAG_ID.BIG:
    case TAG_ID.CODE:
    case TAG_ID.FONT:
    case TAG_ID.SMALL:
    case TAG_ID.STRIKE:
    case TAG_ID.STRONG: {
      bStartTagInBody(p, token);
      break;
    }
    case TAG_ID.A: {
      aStartTagInBody(p, token);
      break;
    }
    case TAG_ID.H1:
    case TAG_ID.H2:
    case TAG_ID.H3:
    case TAG_ID.H4:
    case TAG_ID.H5:
    case TAG_ID.H6: {
      numberedHeaderStartTagInBody(p, token);
      break;
    }
    case TAG_ID.P:
    case TAG_ID.DL:
    case TAG_ID.OL:
    case TAG_ID.UL:
    case TAG_ID.DIV:
    case TAG_ID.DIR:
    case TAG_ID.NAV:
    case TAG_ID.MAIN:
    case TAG_ID.MENU:
    case TAG_ID.ASIDE:
    case TAG_ID.CENTER:
    case TAG_ID.FIGURE:
    case TAG_ID.FOOTER:
    case TAG_ID.HEADER:
    case TAG_ID.HGROUP:
    case TAG_ID.DIALOG:
    case TAG_ID.DETAILS:
    case TAG_ID.ADDRESS:
    case TAG_ID.ARTICLE:
    case TAG_ID.SEARCH:
    case TAG_ID.SECTION:
    case TAG_ID.SUMMARY:
    case TAG_ID.FIELDSET:
    case TAG_ID.BLOCKQUOTE:
    case TAG_ID.FIGCAPTION: {
      addressStartTagInBody(p, token);
      break;
    }
    case TAG_ID.LI:
    case TAG_ID.DD:
    case TAG_ID.DT: {
      listItemStartTagInBody(p, token);
      break;
    }
    case TAG_ID.BR:
    case TAG_ID.IMG:
    case TAG_ID.WBR:
    case TAG_ID.AREA:
    case TAG_ID.EMBED:
    case TAG_ID.KEYGEN: {
      areaStartTagInBody(p, token);
      break;
    }
    case TAG_ID.HR: {
      hrStartTagInBody(p, token);
      break;
    }
    case TAG_ID.RB:
    case TAG_ID.RTC: {
      rbStartTagInBody(p, token);
      break;
    }
    case TAG_ID.RT:
    case TAG_ID.RP: {
      rtStartTagInBody(p, token);
      break;
    }
    case TAG_ID.PRE:
    case TAG_ID.LISTING: {
      preStartTagInBody(p, token);
      break;
    }
    case TAG_ID.XMP: {
      xmpStartTagInBody(p, token);
      break;
    }
    case TAG_ID.SVG: {
      svgStartTagInBody(p, token);
      break;
    }
    case TAG_ID.HTML: {
      htmlStartTagInBody(p, token);
      break;
    }
    case TAG_ID.BASE:
    case TAG_ID.LINK:
    case TAG_ID.META:
    case TAG_ID.STYLE:
    case TAG_ID.TITLE:
    case TAG_ID.SCRIPT:
    case TAG_ID.BGSOUND:
    case TAG_ID.BASEFONT:
    case TAG_ID.TEMPLATE: {
      startTagInHead(p, token);
      break;
    }
    case TAG_ID.BODY: {
      bodyStartTagInBody(p, token);
      break;
    }
    case TAG_ID.FORM: {
      formStartTagInBody(p, token);
      break;
    }
    case TAG_ID.NOBR: {
      nobrStartTagInBody(p, token);
      break;
    }
    case TAG_ID.MATH: {
      mathStartTagInBody(p, token);
      break;
    }
    case TAG_ID.TABLE: {
      tableStartTagInBody(p, token);
      break;
    }
    case TAG_ID.INPUT: {
      inputStartTagInBody(p, token);
      break;
    }
    case TAG_ID.PARAM:
    case TAG_ID.TRACK:
    case TAG_ID.SOURCE: {
      paramStartTagInBody(p, token);
      break;
    }
    case TAG_ID.IMAGE: {
      imageStartTagInBody(p, token);
      break;
    }
    case TAG_ID.BUTTON: {
      buttonStartTagInBody(p, token);
      break;
    }
    case TAG_ID.APPLET:
    case TAG_ID.OBJECT:
    case TAG_ID.MARQUEE: {
      appletStartTagInBody(p, token);
      break;
    }
    case TAG_ID.IFRAME: {
      iframeStartTagInBody(p, token);
      break;
    }
    case TAG_ID.SELECT: {
      selectStartTagInBody(p, token);
      break;
    }
    case TAG_ID.OPTION:
    case TAG_ID.OPTGROUP: {
      optgroupStartTagInBody(p, token);
      break;
    }
    case TAG_ID.NOEMBED:
    case TAG_ID.NOFRAMES: {
      rawTextStartTagInBody(p, token);
      break;
    }
    case TAG_ID.FRAMESET: {
      framesetStartTagInBody(p, token);
      break;
    }
    case TAG_ID.TEXTAREA: {
      textareaStartTagInBody(p, token);
      break;
    }
    case TAG_ID.NOSCRIPT: {
      if (p.options.scriptingEnabled) {
        rawTextStartTagInBody(p, token);
      } else {
        genericStartTagInBody(p, token);
      }
      break;
    }
    case TAG_ID.PLAINTEXT: {
      plaintextStartTagInBody(p, token);
      break;
    }
    case TAG_ID.COL:
    case TAG_ID.TH:
    case TAG_ID.TD:
    case TAG_ID.TR:
    case TAG_ID.HEAD:
    case TAG_ID.FRAME:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD:
    case TAG_ID.CAPTION:
    case TAG_ID.COLGROUP: {
      break;
    }
    default: {
      genericStartTagInBody(p, token);
    }
  }
}
function bodyEndTagInBody(p, token) {
  if (p.openElements.hasInScope(TAG_ID.BODY)) {
    p.insertionMode = InsertionMode.AFTER_BODY;
    if (p.options.sourceCodeLocationInfo) {
      const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
      if (bodyElement) {
        p._setEndLocation(bodyElement, token);
      }
    }
  }
}
function htmlEndTagInBody(p, token) {
  if (p.openElements.hasInScope(TAG_ID.BODY)) {
    p.insertionMode = InsertionMode.AFTER_BODY;
    endTagAfterBody(p, token);
  }
}
function addressEndTagInBody(p, token) {
  const tn = token.tagID;
  if (p.openElements.hasInScope(tn)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped(tn);
  }
}
function formEndTagInBody(p) {
  const inTemplate = p.openElements.tmplCount > 0;
  const { formElement } = p;
  if (!inTemplate) {
    p.formElement = null;
  }
  if ((formElement || inTemplate) && p.openElements.hasInScope(TAG_ID.FORM)) {
    p.openElements.generateImpliedEndTags();
    if (inTemplate) {
      p.openElements.popUntilTagNamePopped(TAG_ID.FORM);
    } else if (formElement) {
      p.openElements.remove(formElement);
    }
  }
}
function pEndTagInBody(p) {
  if (!p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._insertFakeElement(TAG_NAMES.P, TAG_ID.P);
  }
  p._closePElement();
}
function liEndTagInBody(p) {
  if (p.openElements.hasInListItemScope(TAG_ID.LI)) {
    p.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.LI);
    p.openElements.popUntilTagNamePopped(TAG_ID.LI);
  }
}
function ddEndTagInBody(p, token) {
  const tn = token.tagID;
  if (p.openElements.hasInScope(tn)) {
    p.openElements.generateImpliedEndTagsWithExclusion(tn);
    p.openElements.popUntilTagNamePopped(tn);
  }
}
function numberedHeaderEndTagInBody(p) {
  if (p.openElements.hasNumberedHeaderInScope()) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilNumberedHeaderPopped();
  }
}
function appletEndTagInBody(p, token) {
  const tn = token.tagID;
  if (p.openElements.hasInScope(tn)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped(tn);
    p.activeFormattingElements.clearToLastMarker();
  }
}
function brEndTagInBody(p) {
  p._reconstructActiveFormattingElements();
  p._insertFakeElement(TAG_NAMES.BR, TAG_ID.BR);
  p.openElements.pop();
  p.framesetOk = false;
}
function genericEndTagInBody(p, token) {
  const tn = token.tagName;
  const tid = token.tagID;
  for (let i = p.openElements.stackTop; i > 0; i--) {
    const element = p.openElements.items[i];
    const elementId = p.openElements.tagIDs[i];
    if (tid === elementId && (tid !== TAG_ID.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {
      p.openElements.generateImpliedEndTagsWithExclusion(tid);
      if (p.openElements.stackTop >= i)
        p.openElements.shortenToLength(i);
      break;
    }
    if (p._isSpecialElement(element, elementId)) {
      break;
    }
  }
}
function endTagInBody(p, token) {
  switch (token.tagID) {
    case TAG_ID.A:
    case TAG_ID.B:
    case TAG_ID.I:
    case TAG_ID.S:
    case TAG_ID.U:
    case TAG_ID.EM:
    case TAG_ID.TT:
    case TAG_ID.BIG:
    case TAG_ID.CODE:
    case TAG_ID.FONT:
    case TAG_ID.NOBR:
    case TAG_ID.SMALL:
    case TAG_ID.STRIKE:
    case TAG_ID.STRONG: {
      callAdoptionAgency(p, token);
      break;
    }
    case TAG_ID.P: {
      pEndTagInBody(p);
      break;
    }
    case TAG_ID.DL:
    case TAG_ID.UL:
    case TAG_ID.OL:
    case TAG_ID.DIR:
    case TAG_ID.DIV:
    case TAG_ID.NAV:
    case TAG_ID.PRE:
    case TAG_ID.MAIN:
    case TAG_ID.MENU:
    case TAG_ID.ASIDE:
    case TAG_ID.BUTTON:
    case TAG_ID.CENTER:
    case TAG_ID.FIGURE:
    case TAG_ID.FOOTER:
    case TAG_ID.HEADER:
    case TAG_ID.HGROUP:
    case TAG_ID.DIALOG:
    case TAG_ID.ADDRESS:
    case TAG_ID.ARTICLE:
    case TAG_ID.DETAILS:
    case TAG_ID.SEARCH:
    case TAG_ID.SECTION:
    case TAG_ID.SUMMARY:
    case TAG_ID.LISTING:
    case TAG_ID.FIELDSET:
    case TAG_ID.BLOCKQUOTE:
    case TAG_ID.FIGCAPTION: {
      addressEndTagInBody(p, token);
      break;
    }
    case TAG_ID.LI: {
      liEndTagInBody(p);
      break;
    }
    case TAG_ID.DD:
    case TAG_ID.DT: {
      ddEndTagInBody(p, token);
      break;
    }
    case TAG_ID.H1:
    case TAG_ID.H2:
    case TAG_ID.H3:
    case TAG_ID.H4:
    case TAG_ID.H5:
    case TAG_ID.H6: {
      numberedHeaderEndTagInBody(p);
      break;
    }
    case TAG_ID.BR: {
      brEndTagInBody(p);
      break;
    }
    case TAG_ID.BODY: {
      bodyEndTagInBody(p, token);
      break;
    }
    case TAG_ID.HTML: {
      htmlEndTagInBody(p, token);
      break;
    }
    case TAG_ID.FORM: {
      formEndTagInBody(p);
      break;
    }
    case TAG_ID.APPLET:
    case TAG_ID.OBJECT:
    case TAG_ID.MARQUEE: {
      appletEndTagInBody(p, token);
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p, token);
      break;
    }
    default: {
      genericEndTagInBody(p, token);
    }
  }
}
function eofInBody(p, token) {
  if (p.tmplInsertionModeStack.length > 0) {
    eofInTemplate(p, token);
  } else {
    stopParsing(p, token);
  }
}
function endTagInText(p, token) {
  var _a5;
  if (token.tagID === TAG_ID.SCRIPT) {
    (_a5 = p.scriptHandler) === null || _a5 === void 0 ? void 0 : _a5.call(p, p.openElements.current);
  }
  p.openElements.pop();
  p.insertionMode = p.originalInsertionMode;
}
function eofInText(p, token) {
  p._err(token, ERR.eofInElementThatCanContainOnlyText);
  p.openElements.pop();
  p.insertionMode = p.originalInsertionMode;
  p.onEof(token);
}
function characterInTable(p, token) {
  if (p.openElements.currentTagId !== void 0 && TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {
    p.pendingCharacterTokens.length = 0;
    p.hasNonWhitespacePendingCharacterToken = false;
    p.originalInsertionMode = p.insertionMode;
    p.insertionMode = InsertionMode.IN_TABLE_TEXT;
    switch (token.type) {
      case TokenType.CHARACTER: {
        characterInTableText(p, token);
        break;
      }
      case TokenType.WHITESPACE_CHARACTER: {
        whitespaceCharacterInTableText(p, token);
        break;
      }
    }
  } else {
    tokenInTable(p, token);
  }
}
function captionStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();
  p.activeFormattingElements.insertMarker();
  p._insertElement(token, NS.HTML);
  p.insertionMode = InsertionMode.IN_CAPTION;
}
function colgroupStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();
  p._insertElement(token, NS.HTML);
  p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
}
function colStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();
  p._insertFakeElement(TAG_NAMES.COLGROUP, TAG_ID.COLGROUP);
  p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
  startTagInColumnGroup(p, token);
}
function tbodyStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();
  p._insertElement(token, NS.HTML);
  p.insertionMode = InsertionMode.IN_TABLE_BODY;
}
function tdStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();
  p._insertFakeElement(TAG_NAMES.TBODY, TAG_ID.TBODY);
  p.insertionMode = InsertionMode.IN_TABLE_BODY;
  startTagInTableBody(p, token);
}
function tableStartTagInTable(p, token) {
  if (p.openElements.hasInTableScope(TAG_ID.TABLE)) {
    p.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
    p._resetInsertionMode();
    p._processStartTag(token);
  }
}
function inputStartTagInTable(p, token) {
  if (isHiddenInput(token)) {
    p._appendElement(token, NS.HTML);
  } else {
    tokenInTable(p, token);
  }
  token.ackSelfClosing = true;
}
function formStartTagInTable(p, token) {
  if (!p.formElement && p.openElements.tmplCount === 0) {
    p._insertElement(token, NS.HTML);
    p.formElement = p.openElements.current;
    p.openElements.pop();
  }
}
function startTagInTable(p, token) {
  switch (token.tagID) {
    case TAG_ID.TD:
    case TAG_ID.TH:
    case TAG_ID.TR: {
      tdStartTagInTable(p, token);
      break;
    }
    case TAG_ID.STYLE:
    case TAG_ID.SCRIPT:
    case TAG_ID.TEMPLATE: {
      startTagInHead(p, token);
      break;
    }
    case TAG_ID.COL: {
      colStartTagInTable(p, token);
      break;
    }
    case TAG_ID.FORM: {
      formStartTagInTable(p, token);
      break;
    }
    case TAG_ID.TABLE: {
      tableStartTagInTable(p, token);
      break;
    }
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      tbodyStartTagInTable(p, token);
      break;
    }
    case TAG_ID.INPUT: {
      inputStartTagInTable(p, token);
      break;
    }
    case TAG_ID.CAPTION: {
      captionStartTagInTable(p, token);
      break;
    }
    case TAG_ID.COLGROUP: {
      colgroupStartTagInTable(p, token);
      break;
    }
    default: {
      tokenInTable(p, token);
    }
  }
}
function endTagInTable(p, token) {
  switch (token.tagID) {
    case TAG_ID.TABLE: {
      if (p.openElements.hasInTableScope(TAG_ID.TABLE)) {
        p.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
        p._resetInsertionMode();
      }
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p, token);
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML:
    case TAG_ID.TBODY:
    case TAG_ID.TD:
    case TAG_ID.TFOOT:
    case TAG_ID.TH:
    case TAG_ID.THEAD:
    case TAG_ID.TR: {
      break;
    }
    default: {
      tokenInTable(p, token);
    }
  }
}
function tokenInTable(p, token) {
  const savedFosterParentingState = p.fosterParentingEnabled;
  p.fosterParentingEnabled = true;
  modeInBody(p, token);
  p.fosterParentingEnabled = savedFosterParentingState;
}
function whitespaceCharacterInTableText(p, token) {
  p.pendingCharacterTokens.push(token);
}
function characterInTableText(p, token) {
  p.pendingCharacterTokens.push(token);
  p.hasNonWhitespacePendingCharacterToken = true;
}
function tokenInTableText(p, token) {
  let i = 0;
  if (p.hasNonWhitespacePendingCharacterToken) {
    for (; i < p.pendingCharacterTokens.length; i++) {
      tokenInTable(p, p.pendingCharacterTokens[i]);
    }
  } else {
    for (; i < p.pendingCharacterTokens.length; i++) {
      p._insertCharacters(p.pendingCharacterTokens[i]);
    }
  }
  p.insertionMode = p.originalInsertionMode;
  p._processToken(token);
}
var TABLE_VOID_ELEMENTS = /* @__PURE__ */ new Set([TAG_ID.CAPTION, TAG_ID.COL, TAG_ID.COLGROUP, TAG_ID.TBODY, TAG_ID.TD, TAG_ID.TFOOT, TAG_ID.TH, TAG_ID.THEAD, TAG_ID.TR]);
function startTagInCaption(p, token) {
  const tn = token.tagID;
  if (TABLE_VOID_ELEMENTS.has(tn)) {
    if (p.openElements.hasInTableScope(TAG_ID.CAPTION)) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
      p.activeFormattingElements.clearToLastMarker();
      p.insertionMode = InsertionMode.IN_TABLE;
      startTagInTable(p, token);
    }
  } else {
    startTagInBody(p, token);
  }
}
function endTagInCaption(p, token) {
  const tn = token.tagID;
  switch (tn) {
    case TAG_ID.CAPTION:
    case TAG_ID.TABLE: {
      if (p.openElements.hasInTableScope(TAG_ID.CAPTION)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
        p.activeFormattingElements.clearToLastMarker();
        p.insertionMode = InsertionMode.IN_TABLE;
        if (tn === TAG_ID.TABLE) {
          endTagInTable(p, token);
        }
      }
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML:
    case TAG_ID.TBODY:
    case TAG_ID.TD:
    case TAG_ID.TFOOT:
    case TAG_ID.TH:
    case TAG_ID.THEAD:
    case TAG_ID.TR: {
      break;
    }
    default: {
      endTagInBody(p, token);
    }
  }
}
function startTagInColumnGroup(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.COL: {
      p._appendElement(token, NS.HTML);
      token.ackSelfClosing = true;
      break;
    }
    case TAG_ID.TEMPLATE: {
      startTagInHead(p, token);
      break;
    }
    default: {
      tokenInColumnGroup(p, token);
    }
  }
}
function endTagInColumnGroup(p, token) {
  switch (token.tagID) {
    case TAG_ID.COLGROUP: {
      if (p.openElements.currentTagId === TAG_ID.COLGROUP) {
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE;
      }
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p, token);
      break;
    }
    case TAG_ID.COL: {
      break;
    }
    default: {
      tokenInColumnGroup(p, token);
    }
  }
}
function tokenInColumnGroup(p, token) {
  if (p.openElements.currentTagId === TAG_ID.COLGROUP) {
    p.openElements.pop();
    p.insertionMode = InsertionMode.IN_TABLE;
    p._processToken(token);
  }
}
function startTagInTableBody(p, token) {
  switch (token.tagID) {
    case TAG_ID.TR: {
      p.openElements.clearBackToTableBodyContext();
      p._insertElement(token, NS.HTML);
      p.insertionMode = InsertionMode.IN_ROW;
      break;
    }
    case TAG_ID.TH:
    case TAG_ID.TD: {
      p.openElements.clearBackToTableBodyContext();
      p._insertFakeElement(TAG_NAMES.TR, TAG_ID.TR);
      p.insertionMode = InsertionMode.IN_ROW;
      startTagInRow(p, token);
      break;
    }
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      if (p.openElements.hasTableBodyContextInTableScope()) {
        p.openElements.clearBackToTableBodyContext();
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE;
        startTagInTable(p, token);
      }
      break;
    }
    default: {
      startTagInTable(p, token);
    }
  }
}
function endTagInTableBody(p, token) {
  const tn = token.tagID;
  switch (token.tagID) {
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      if (p.openElements.hasInTableScope(tn)) {
        p.openElements.clearBackToTableBodyContext();
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE;
      }
      break;
    }
    case TAG_ID.TABLE: {
      if (p.openElements.hasTableBodyContextInTableScope()) {
        p.openElements.clearBackToTableBodyContext();
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE;
        endTagInTable(p, token);
      }
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML:
    case TAG_ID.TD:
    case TAG_ID.TH:
    case TAG_ID.TR: {
      break;
    }
    default: {
      endTagInTable(p, token);
    }
  }
}
function startTagInRow(p, token) {
  switch (token.tagID) {
    case TAG_ID.TH:
    case TAG_ID.TD: {
      p.openElements.clearBackToTableRowContext();
      p._insertElement(token, NS.HTML);
      p.insertionMode = InsertionMode.IN_CELL;
      p.activeFormattingElements.insertMarker();
      break;
    }
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD:
    case TAG_ID.TR: {
      if (p.openElements.hasInTableScope(TAG_ID.TR)) {
        p.openElements.clearBackToTableRowContext();
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE_BODY;
        startTagInTableBody(p, token);
      }
      break;
    }
    default: {
      startTagInTable(p, token);
    }
  }
}
function endTagInRow(p, token) {
  switch (token.tagID) {
    case TAG_ID.TR: {
      if (p.openElements.hasInTableScope(TAG_ID.TR)) {
        p.openElements.clearBackToTableRowContext();
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE_BODY;
      }
      break;
    }
    case TAG_ID.TABLE: {
      if (p.openElements.hasInTableScope(TAG_ID.TR)) {
        p.openElements.clearBackToTableRowContext();
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE_BODY;
        endTagInTableBody(p, token);
      }
      break;
    }
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope(TAG_ID.TR)) {
        p.openElements.clearBackToTableRowContext();
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE_BODY;
        endTagInTableBody(p, token);
      }
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML:
    case TAG_ID.TD:
    case TAG_ID.TH: {
      break;
    }
    default: {
      endTagInTable(p, token);
    }
  }
}
function startTagInCell(p, token) {
  const tn = token.tagID;
  if (TABLE_VOID_ELEMENTS.has(tn)) {
    if (p.openElements.hasInTableScope(TAG_ID.TD) || p.openElements.hasInTableScope(TAG_ID.TH)) {
      p._closeTableCell();
      startTagInRow(p, token);
    }
  } else {
    startTagInBody(p, token);
  }
}
function endTagInCell(p, token) {
  const tn = token.tagID;
  switch (tn) {
    case TAG_ID.TD:
    case TAG_ID.TH: {
      if (p.openElements.hasInTableScope(tn)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped(tn);
        p.activeFormattingElements.clearToLastMarker();
        p.insertionMode = InsertionMode.IN_ROW;
      }
      break;
    }
    case TAG_ID.TABLE:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD:
    case TAG_ID.TR: {
      if (p.openElements.hasInTableScope(tn)) {
        p._closeTableCell();
        endTagInRow(p, token);
      }
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML: {
      break;
    }
    default: {
      endTagInBody(p, token);
    }
  }
}
function startTagInSelect(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.OPTION: {
      if (p.openElements.currentTagId === TAG_ID.OPTION) {
        p.openElements.pop();
      }
      p._insertElement(token, NS.HTML);
      break;
    }
    case TAG_ID.OPTGROUP: {
      if (p.openElements.currentTagId === TAG_ID.OPTION) {
        p.openElements.pop();
      }
      if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
        p.openElements.pop();
      }
      p._insertElement(token, NS.HTML);
      break;
    }
    case TAG_ID.HR: {
      if (p.openElements.currentTagId === TAG_ID.OPTION) {
        p.openElements.pop();
      }
      if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
        p.openElements.pop();
      }
      p._appendElement(token, NS.HTML);
      token.ackSelfClosing = true;
      break;
    }
    case TAG_ID.INPUT:
    case TAG_ID.KEYGEN:
    case TAG_ID.TEXTAREA:
    case TAG_ID.SELECT: {
      if (p.openElements.hasInSelectScope(TAG_ID.SELECT)) {
        p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
        p._resetInsertionMode();
        if (token.tagID !== TAG_ID.SELECT) {
          p._processStartTag(token);
        }
      }
      break;
    }
    case TAG_ID.SCRIPT:
    case TAG_ID.TEMPLATE: {
      startTagInHead(p, token);
      break;
    }
    default:
  }
}
function endTagInSelect(p, token) {
  switch (token.tagID) {
    case TAG_ID.OPTGROUP: {
      if (p.openElements.stackTop > 0 && p.openElements.currentTagId === TAG_ID.OPTION && p.openElements.tagIDs[p.openElements.stackTop - 1] === TAG_ID.OPTGROUP) {
        p.openElements.pop();
      }
      if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
        p.openElements.pop();
      }
      break;
    }
    case TAG_ID.OPTION: {
      if (p.openElements.currentTagId === TAG_ID.OPTION) {
        p.openElements.pop();
      }
      break;
    }
    case TAG_ID.SELECT: {
      if (p.openElements.hasInSelectScope(TAG_ID.SELECT)) {
        p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
        p._resetInsertionMode();
      }
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p, token);
      break;
    }
    default:
  }
}
function startTagInSelectInTable(p, token) {
  const tn = token.tagID;
  if (tn === TAG_ID.CAPTION || tn === TAG_ID.TABLE || tn === TAG_ID.TBODY || tn === TAG_ID.TFOOT || tn === TAG_ID.THEAD || tn === TAG_ID.TR || tn === TAG_ID.TD || tn === TAG_ID.TH) {
    p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
    p._resetInsertionMode();
    p._processStartTag(token);
  } else {
    startTagInSelect(p, token);
  }
}
function endTagInSelectInTable(p, token) {
  const tn = token.tagID;
  if (tn === TAG_ID.CAPTION || tn === TAG_ID.TABLE || tn === TAG_ID.TBODY || tn === TAG_ID.TFOOT || tn === TAG_ID.THEAD || tn === TAG_ID.TR || tn === TAG_ID.TD || tn === TAG_ID.TH) {
    if (p.openElements.hasInTableScope(tn)) {
      p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
      p._resetInsertionMode();
      p.onEndTag(token);
    }
  } else {
    endTagInSelect(p, token);
  }
}
function startTagInTemplate(p, token) {
  switch (token.tagID) {
    case TAG_ID.BASE:
    case TAG_ID.BASEFONT:
    case TAG_ID.BGSOUND:
    case TAG_ID.LINK:
    case TAG_ID.META:
    case TAG_ID.NOFRAMES:
    case TAG_ID.SCRIPT:
    case TAG_ID.STYLE:
    case TAG_ID.TEMPLATE:
    case TAG_ID.TITLE: {
      startTagInHead(p, token);
      break;
    }
    case TAG_ID.CAPTION:
    case TAG_ID.COLGROUP:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;
      p.insertionMode = InsertionMode.IN_TABLE;
      startTagInTable(p, token);
      break;
    }
    case TAG_ID.COL: {
      p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;
      p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
      startTagInColumnGroup(p, token);
      break;
    }
    case TAG_ID.TR: {
      p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;
      p.insertionMode = InsertionMode.IN_TABLE_BODY;
      startTagInTableBody(p, token);
      break;
    }
    case TAG_ID.TD:
    case TAG_ID.TH: {
      p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;
      p.insertionMode = InsertionMode.IN_ROW;
      startTagInRow(p, token);
      break;
    }
    default: {
      p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;
      p.insertionMode = InsertionMode.IN_BODY;
      startTagInBody(p, token);
    }
  }
}
function endTagInTemplate(p, token) {
  if (token.tagID === TAG_ID.TEMPLATE) {
    templateEndTagInHead(p, token);
  }
}
function eofInTemplate(p, token) {
  if (p.openElements.tmplCount > 0) {
    p.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
    p.activeFormattingElements.clearToLastMarker();
    p.tmplInsertionModeStack.shift();
    p._resetInsertionMode();
    p.onEof(token);
  } else {
    stopParsing(p, token);
  }
}
function startTagAfterBody(p, token) {
  if (token.tagID === TAG_ID.HTML) {
    startTagInBody(p, token);
  } else {
    tokenAfterBody(p, token);
  }
}
function endTagAfterBody(p, token) {
  var _a5;
  if (token.tagID === TAG_ID.HTML) {
    if (!p.fragmentContext) {
      p.insertionMode = InsertionMode.AFTER_AFTER_BODY;
    }
    if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === TAG_ID.HTML) {
      p._setEndLocation(p.openElements.items[0], token);
      const bodyElement = p.openElements.items[1];
      if (bodyElement && !((_a5 = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a5 === void 0 ? void 0 : _a5.endTag)) {
        p._setEndLocation(bodyElement, token);
      }
    }
  } else {
    tokenAfterBody(p, token);
  }
}
function tokenAfterBody(p, token) {
  p.insertionMode = InsertionMode.IN_BODY;
  modeInBody(p, token);
}
function startTagInFrameset(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.FRAMESET: {
      p._insertElement(token, NS.HTML);
      break;
    }
    case TAG_ID.FRAME: {
      p._appendElement(token, NS.HTML);
      token.ackSelfClosing = true;
      break;
    }
    case TAG_ID.NOFRAMES: {
      startTagInHead(p, token);
      break;
    }
    default:
  }
}
function endTagInFrameset(p, token) {
  if (token.tagID === TAG_ID.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
    p.openElements.pop();
    if (!p.fragmentContext && p.openElements.currentTagId !== TAG_ID.FRAMESET) {
      p.insertionMode = InsertionMode.AFTER_FRAMESET;
    }
  }
}
function startTagAfterFrameset(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.NOFRAMES: {
      startTagInHead(p, token);
      break;
    }
    default:
  }
}
function endTagAfterFrameset(p, token) {
  if (token.tagID === TAG_ID.HTML) {
    p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;
  }
}
function startTagAfterAfterBody(p, token) {
  if (token.tagID === TAG_ID.HTML) {
    startTagInBody(p, token);
  } else {
    tokenAfterAfterBody(p, token);
  }
}
function tokenAfterAfterBody(p, token) {
  p.insertionMode = InsertionMode.IN_BODY;
  modeInBody(p, token);
}
function startTagAfterAfterFrameset(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.NOFRAMES: {
      startTagInHead(p, token);
      break;
    }
    default:
  }
}
function nullCharacterInForeignContent(p, token) {
  token.chars = REPLACEMENT_CHARACTER;
  p._insertCharacters(token);
}
function characterInForeignContent(p, token) {
  p._insertCharacters(token);
  p.framesetOk = false;
}
function popUntilHtmlOrIntegrationPoint(p) {
  while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && p.openElements.currentTagId !== void 0 && !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {
    p.openElements.pop();
  }
}
function startTagInForeignContent(p, token) {
  if (causesExit(token)) {
    popUntilHtmlOrIntegrationPoint(p);
    p._startTagOutsideForeignContent(token);
  } else {
    const current = p._getAdjustedCurrentElement();
    const currentNs = p.treeAdapter.getNamespaceURI(current);
    if (currentNs === NS.MATHML) {
      adjustTokenMathMLAttrs(token);
    } else if (currentNs === NS.SVG) {
      adjustTokenSVGTagName(token);
      adjustTokenSVGAttrs(token);
    }
    adjustTokenXMLAttrs(token);
    if (token.selfClosing) {
      p._appendElement(token, currentNs);
    } else {
      p._insertElement(token, currentNs);
    }
    token.ackSelfClosing = true;
  }
}
function endTagInForeignContent(p, token) {
  if (token.tagID === TAG_ID.P || token.tagID === TAG_ID.BR) {
    popUntilHtmlOrIntegrationPoint(p);
    p._endTagOutsideForeignContent(token);
    return;
  }
  for (let i = p.openElements.stackTop; i > 0; i--) {
    const element = p.openElements.items[i];
    if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
      p._endTagOutsideForeignContent(token);
      break;
    }
    const tagName = p.treeAdapter.getTagName(element);
    if (tagName.toLowerCase() === token.tagName) {
      token.tagName = tagName;
      p.openElements.shortenToLength(i);
      break;
    }
  }
}

// node_modules/parse5/node_modules/entities/dist/esm/escape.js
var getCodePoint2 = (
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  String.prototype.codePointAt == null ? (c, index2) => (c.charCodeAt(index2) & 64512) === 55296 ? (c.charCodeAt(index2) - 55296) * 1024 + c.charCodeAt(index2 + 1) - 56320 + 65536 : c.charCodeAt(index2) : (
    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
    (input, index2) => input.codePointAt(index2)
  )
);
function getEscaper2(regex, map2) {
  return function escape3(data2) {
    let match;
    let lastIndex = 0;
    let result = "";
    while (match = regex.exec(data2)) {
      if (lastIndex !== match.index) {
        result += data2.substring(lastIndex, match.index);
      }
      result += map2.get(match[0].charCodeAt(0));
      lastIndex = match.index + 1;
    }
    return result + data2.substring(lastIndex);
  };
}
var escapeAttribute2 = /* @__PURE__ */ getEscaper2(/["&\u00A0]/g, /* @__PURE__ */ new Map([
  [34, "&quot;"],
  [38, "&amp;"],
  [160, "&nbsp;"]
]));
var escapeText2 = /* @__PURE__ */ getEscaper2(/[&<>\u00A0]/g, /* @__PURE__ */ new Map([
  [38, "&amp;"],
  [60, "&lt;"],
  [62, "&gt;"],
  [160, "&nbsp;"]
]));

// node_modules/parse5/dist/serializer/index.js
var VOID_ELEMENTS = /* @__PURE__ */ new Set([
  TAG_NAMES.AREA,
  TAG_NAMES.BASE,
  TAG_NAMES.BASEFONT,
  TAG_NAMES.BGSOUND,
  TAG_NAMES.BR,
  TAG_NAMES.COL,
  TAG_NAMES.EMBED,
  TAG_NAMES.FRAME,
  TAG_NAMES.HR,
  TAG_NAMES.IMG,
  TAG_NAMES.INPUT,
  TAG_NAMES.KEYGEN,
  TAG_NAMES.LINK,
  TAG_NAMES.META,
  TAG_NAMES.PARAM,
  TAG_NAMES.SOURCE,
  TAG_NAMES.TRACK,
  TAG_NAMES.WBR
]);
function isVoidElement(node, options) {
  return options.treeAdapter.isElementNode(node) && options.treeAdapter.getNamespaceURI(node) === NS.HTML && VOID_ELEMENTS.has(options.treeAdapter.getTagName(node));
}
var defaultOpts3 = { treeAdapter: defaultTreeAdapter, scriptingEnabled: true };
function serializeOuter(node, options) {
  const opts = { ...defaultOpts3, ...options };
  return serializeNode(node, opts);
}
function serializeChildNodes(parentNode, options) {
  let html3 = "";
  const container = options.treeAdapter.isElementNode(parentNode) && options.treeAdapter.getTagName(parentNode) === TAG_NAMES.TEMPLATE && options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML ? options.treeAdapter.getTemplateContent(parentNode) : parentNode;
  const childNodes = options.treeAdapter.getChildNodes(container);
  if (childNodes) {
    for (const currentNode of childNodes) {
      html3 += serializeNode(currentNode, options);
    }
  }
  return html3;
}
function serializeNode(node, options) {
  if (options.treeAdapter.isElementNode(node)) {
    return serializeElement(node, options);
  }
  if (options.treeAdapter.isTextNode(node)) {
    return serializeTextNode(node, options);
  }
  if (options.treeAdapter.isCommentNode(node)) {
    return serializeCommentNode(node, options);
  }
  if (options.treeAdapter.isDocumentTypeNode(node)) {
    return serializeDocumentTypeNode(node, options);
  }
  return "";
}
function serializeElement(node, options) {
  const tn = options.treeAdapter.getTagName(node);
  return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? "" : `${serializeChildNodes(node, options)}</${tn}>`}`;
}
function serializeAttributes(node, { treeAdapter }) {
  let html3 = "";
  for (const attr2 of treeAdapter.getAttrList(node)) {
    html3 += " ";
    if (attr2.namespace) {
      switch (attr2.namespace) {
        case NS.XML: {
          html3 += `xml:${attr2.name}`;
          break;
        }
        case NS.XMLNS: {
          if (attr2.name !== "xmlns") {
            html3 += "xmlns:";
          }
          html3 += attr2.name;
          break;
        }
        case NS.XLINK: {
          html3 += `xlink:${attr2.name}`;
          break;
        }
        default: {
          html3 += `${attr2.prefix}:${attr2.name}`;
        }
      }
    } else {
      html3 += attr2.name;
    }
    html3 += `="${escapeAttribute2(attr2.value)}"`;
  }
  return html3;
}
function serializeTextNode(node, options) {
  const { treeAdapter } = options;
  const content = treeAdapter.getTextNodeContent(node);
  const parent2 = treeAdapter.getParentNode(node);
  const parentTn = parent2 && treeAdapter.isElementNode(parent2) && treeAdapter.getTagName(parent2);
  return parentTn && treeAdapter.getNamespaceURI(parent2) === NS.HTML && hasUnescapedText(parentTn, options.scriptingEnabled) ? content : escapeText2(content);
}
function serializeCommentNode(node, { treeAdapter }) {
  return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;
}
function serializeDocumentTypeNode(node, { treeAdapter }) {
  return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;
}

// node_modules/parse5/dist/index.js
function parse4(html3, options) {
  return Parser2.parse(html3, options);
}
function parseFragment(fragmentContext, html3, options) {
  if (typeof fragmentContext === "string") {
    options = html3;
    html3 = fragmentContext;
    fragmentContext = null;
  }
  const parser = Parser2.getFragmentParser(fragmentContext, options);
  parser.tokenizer.write(html3, true);
  return parser.getFragment();
}

// node_modules/parse5-htmlparser2-tree-adapter/dist/index.js
function enquoteDoctypeId(id) {
  const quote = id.includes('"') ? "'" : '"';
  return quote + id + quote;
}
function serializeDoctypeContent(name, publicId, systemId) {
  let str = "!DOCTYPE ";
  if (name) {
    str += name;
  }
  if (publicId) {
    str += ` PUBLIC ${enquoteDoctypeId(publicId)}`;
  } else if (systemId) {
    str += " SYSTEM";
  }
  if (systemId) {
    str += ` ${enquoteDoctypeId(systemId)}`;
  }
  return str;
}
var adapter2 = {
  // Re-exports from domhandler
  isCommentNode: isComment,
  isElementNode: isTag2,
  isTextNode: isText,
  //Node construction
  createDocument() {
    const node = new Document([]);
    node["x-mode"] = html_exports.DOCUMENT_MODE.NO_QUIRKS;
    return node;
  },
  createDocumentFragment() {
    return new Document([]);
  },
  createElement(tagName, namespaceURI, attrs) {
    const attribs = /* @__PURE__ */ Object.create(null);
    const attribsNamespace = /* @__PURE__ */ Object.create(null);
    const attribsPrefix = /* @__PURE__ */ Object.create(null);
    for (let i = 0; i < attrs.length; i++) {
      const attrName = attrs[i].name;
      attribs[attrName] = attrs[i].value;
      attribsNamespace[attrName] = attrs[i].namespace;
      attribsPrefix[attrName] = attrs[i].prefix;
    }
    const node = new Element(tagName, attribs, []);
    node.namespace = namespaceURI;
    node["x-attribsNamespace"] = attribsNamespace;
    node["x-attribsPrefix"] = attribsPrefix;
    return node;
  },
  createCommentNode(data2) {
    return new Comment2(data2);
  },
  createTextNode(value) {
    return new Text2(value);
  },
  //Tree mutation
  appendChild(parentNode, newNode) {
    const prev2 = parentNode.children[parentNode.children.length - 1];
    if (prev2) {
      prev2.next = newNode;
      newNode.prev = prev2;
    }
    parentNode.children.push(newNode);
    newNode.parent = parentNode;
  },
  insertBefore(parentNode, newNode, referenceNode) {
    const insertionIdx = parentNode.children.indexOf(referenceNode);
    const { prev: prev2 } = referenceNode;
    if (prev2) {
      prev2.next = newNode;
      newNode.prev = prev2;
    }
    referenceNode.prev = newNode;
    newNode.next = referenceNode;
    parentNode.children.splice(insertionIdx, 0, newNode);
    newNode.parent = parentNode;
  },
  setTemplateContent(templateElement, contentElement) {
    adapter2.appendChild(templateElement, contentElement);
  },
  getTemplateContent(templateElement) {
    return templateElement.children[0];
  },
  setDocumentType(document2, name, publicId, systemId) {
    const data2 = serializeDoctypeContent(name, publicId, systemId);
    let doctypeNode = document2.children.find((node) => isDirective(node) && node.name === "!doctype");
    if (doctypeNode) {
      doctypeNode.data = data2 !== null && data2 !== void 0 ? data2 : null;
    } else {
      doctypeNode = new ProcessingInstruction("!doctype", data2);
      adapter2.appendChild(document2, doctypeNode);
    }
    doctypeNode["x-name"] = name;
    doctypeNode["x-publicId"] = publicId;
    doctypeNode["x-systemId"] = systemId;
  },
  setDocumentMode(document2, mode) {
    document2["x-mode"] = mode;
  },
  getDocumentMode(document2) {
    return document2["x-mode"];
  },
  detachNode(node) {
    if (node.parent) {
      const idx = node.parent.children.indexOf(node);
      const { prev: prev2, next: next2 } = node;
      node.prev = null;
      node.next = null;
      if (prev2) {
        prev2.next = next2;
      }
      if (next2) {
        next2.prev = prev2;
      }
      node.parent.children.splice(idx, 1);
      node.parent = null;
    }
  },
  insertText(parentNode, text3) {
    const lastChild = parentNode.children[parentNode.children.length - 1];
    if (lastChild && isText(lastChild)) {
      lastChild.data += text3;
    } else {
      adapter2.appendChild(parentNode, adapter2.createTextNode(text3));
    }
  },
  insertTextBefore(parentNode, text3, referenceNode) {
    const prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];
    if (prevNode && isText(prevNode)) {
      prevNode.data += text3;
    } else {
      adapter2.insertBefore(parentNode, adapter2.createTextNode(text3), referenceNode);
    }
  },
  adoptAttributes(recipient, attrs) {
    for (let i = 0; i < attrs.length; i++) {
      const attrName = attrs[i].name;
      if (recipient.attribs[attrName] === void 0) {
        recipient.attribs[attrName] = attrs[i].value;
        recipient["x-attribsNamespace"][attrName] = attrs[i].namespace;
        recipient["x-attribsPrefix"][attrName] = attrs[i].prefix;
      }
    }
  },
  //Tree traversing
  getFirstChild(node) {
    return node.children[0];
  },
  getChildNodes(node) {
    return node.children;
  },
  getParentNode(node) {
    return node.parent;
  },
  getAttrList(element) {
    return element.attributes;
  },
  //Node data
  getTagName(element) {
    return element.name;
  },
  getNamespaceURI(element) {
    return element.namespace;
  },
  getTextNodeContent(textNode) {
    return textNode.data;
  },
  getCommentNodeContent(commentNode) {
    return commentNode.data;
  },
  getDocumentTypeNodeName(doctypeNode) {
    var _a5;
    return (_a5 = doctypeNode["x-name"]) !== null && _a5 !== void 0 ? _a5 : "";
  },
  getDocumentTypeNodePublicId(doctypeNode) {
    var _a5;
    return (_a5 = doctypeNode["x-publicId"]) !== null && _a5 !== void 0 ? _a5 : "";
  },
  getDocumentTypeNodeSystemId(doctypeNode) {
    var _a5;
    return (_a5 = doctypeNode["x-systemId"]) !== null && _a5 !== void 0 ? _a5 : "";
  },
  //Node types
  isDocumentTypeNode(node) {
    return isDirective(node) && node.name === "!doctype";
  },
  // Source code location
  setNodeSourceCodeLocation(node, location) {
    if (location) {
      node.startIndex = location.startOffset;
      node.endIndex = location.endOffset;
    }
    node.sourceCodeLocation = location;
  },
  getNodeSourceCodeLocation(node) {
    return node.sourceCodeLocation;
  },
  updateNodeSourceCodeLocation(node, endLocation) {
    if (endLocation.endOffset != null)
      node.endIndex = endLocation.endOffset;
    node.sourceCodeLocation = {
      ...node.sourceCodeLocation,
      ...endLocation
    };
  }
};

// node_modules/cheerio/dist/browser/parsers/parse5-adapter.js
function parseWithParse5(content, options, isDocument2, context) {
  var _a5;
  (_a5 = options.treeAdapter) !== null && _a5 !== void 0 ? _a5 : options.treeAdapter = adapter2;
  if (options.scriptingEnabled !== false) {
    options.scriptingEnabled = true;
  }
  return isDocument2 ? parse4(content, options) : parseFragment(context, content, options);
}
var renderOpts = { treeAdapter: adapter2 };
function renderWithParse5(dom) {
  const nodes = "length" in dom ? dom : [dom];
  for (let index2 = 0; index2 < nodes.length; index2 += 1) {
    const node = nodes[index2];
    if (isDocument(node)) {
      Array.prototype.splice.call(nodes, index2, 1, ...node.children);
    }
  }
  let result = "";
  for (let index2 = 0; index2 < nodes.length; index2 += 1) {
    const node = nodes[index2];
    result += serializeOuter(node, renderOpts);
  }
  return result;
}

// node_modules/cheerio/dist/browser/load-parse.js
var parse5 = getParse((content, options, isDocument2, context) => options._useHtmlParser2 ? parseDocument(content, options) : parseWithParse5(content, options, isDocument2, context));
var load = getLoad(parse5, (dom, options) => options._useHtmlParser2 ? esm_default(dom, options) : renderWithParse5(dom));

// src/services/KnowledgeBaseService.ts
var KnowledgeBaseService = class {
  static CHUNK_SIZE = 500;
  static CHUNK_OVERLAP = 50;
  static generateFingerprint(content) {
    return Buffer.from(content).toString("base64").substring(0, 64);
  }
  static detectFileType(url) {
    const urlLower = url.toLowerCase();
    if (urlLower.endsWith(".pdf")) return "pdf";
    if (urlLower.endsWith(".docx") || urlLower.endsWith(".doc")) return "docx";
    if (urlLower.endsWith(".xlsx") || urlLower.endsWith(".xls")) return "excel";
    if (urlLower.endsWith(".csv")) return "csv";
    if (urlLower.endsWith(".txt")) return "text";
    if (urlLower.match(/\.(jpg|jpeg|png|gif|webp)$/)) return "image";
    if (urlLower.match(/\.(mp4|avi|mov|wmv)$/)) return "video";
    return "webpage";
  }
  static splitIntoChunks(text3) {
    const chunks = [];
    let startIndex = 0;
    let chunkIndex = 0;
    while (startIndex < text3.length) {
      const endIndex = Math.min(startIndex + this.CHUNK_SIZE, text3.length);
      const chunk = text3.substring(startIndex, endIndex);
      chunks.push({
        content: chunk.trim(),
        index: chunkIndex
      });
      startIndex += this.CHUNK_SIZE - this.CHUNK_OVERLAP;
      chunkIndex++;
    }
    return chunks.filter((chunk) => chunk.content.length > 0);
  }
  static async generateEmbedding(text3) {
    const endpoint = process.env.AZURE_OPENAI_ENDPOINT;
    const apiKey = process.env.AZURE_OPENAI_API_KEY;
    const deployment = process.env.AZURE_OPENAI_EMBEDDING_DEPLOYMENT;
    if (!endpoint || !apiKey || !deployment) {
      throw new Error("Azure OpenAI configuration missing");
    }
    const url = endpoint + "/openai/deployments/" + deployment + "/embeddings?api-version=2023-05-15";
    const response = await axios_default.post(
      url,
      { input: text3.substring(0, 8e3) },
      { headers: { "Content-Type": "application/json", "api-key": apiKey } }
    );
    return response.data.data[0].embedding;
  }
  static async fetchURLContent(url, fileType) {
    const response = await axios_default.get(url, {
      timeout: 3e4,
      headers: { "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" }
    });
    if (fileType === "webpage" || fileType === "text") {
      if (typeof response.data === "string") {
        const $3 = load(response.data);
        $3("script, style, nav, footer, header").remove();
        const text3 = $3("body").text().trim();
        return text3.replace(/\s+/g, " ").substring(0, 5e4);
      }
      return response.data.substring(0, 5e4);
    }
    return "[" + fileType.toUpperCase() + " file: " + url + "]";
  }
  static async processURL(id, url, fileType) {
    try {
      console.warn("processURL not yet implemented in API mode");
      return;
    } catch (error) {
      console.error("\u274C Error processing URL: " + url, error);
    }
  }
  static async addUrl(url, fileType, name) {
    console.warn("addUrl not yet implemented in API mode");
    throw new Error("Not implemented");
  }
  static async getFiles() {
    console.warn("getFiles not yet implemented in API mode");
    return [];
  }
  static async deleteFile(id) {
    console.warn("deleteFile not yet implemented in API mode");
  }
  static async removeInvalidUrls() {
    console.warn("removeInvalidUrls not yet implemented in API mode");
    return 0;
  }
  static async refreshFile(id) {
    console.warn("refreshFile not yet implemented in API mode");
  }
  static async batchAddUrls(urls) {
    const results = [];
    for (const url of urls) {
      try {
        const file = await this.addUrl(url.trim());
        results.push(file);
      } catch (error) {
        console.error("Error adding URL: " + url, error);
      }
    }
    return results;
  }
  static parseBatchImportText(text3) {
    return text3.split("\n").map((line) => line.trim()).filter((line) => line.length > 0);
  }
  static async refreshAll() {
    const files = await this.getFiles();
    for (const file of files) {
      if (file.url) {
        await this.refreshFile(file.id).catch(console.error);
      }
    }
  }
  static getFileTypeText(fileType) {
    const types = {
      webpage: "\u7DB2\u9801",
      pdf: "PDF",
      docx: "Word",
      excel: "Excel",
      csv: "CSV",
      text: "\u6587\u5B57",
      image: "\u5716\u7247",
      video: "\u5F71\u7247"
    };
    return types[fileType] || fileType;
  }
  static getStatusText(status) {
    const statuses = {
      pending: '<span style="color: #f59e0b;">\u23F3 \u7B49\u5F85\u8655\u7406</span>',
      processing: '<span style="color: #3b82f6;">\u2699\uFE0F \u8655\u7406\u4E2D</span>',
      active: '<span style="color: #10b981;">\u2705 \u6B63\u5E38</span>',
      error: '<span style="color: #ef4444;">\u274C \u932F\u8AA4</span>',
      invalid: '<span style="color: #6b7280;">\u26A0\uFE0F \u5931\u6548</span>'
    };
    return statuses[status] || `<span style="color: #6b7280;">${status}</span>`;
  }
  static formatTime(date) {
    return new Date(date).toLocaleString("zh-TW");
  }
};

// src/admin/AdminPanel.ts
var AdminPanel = class {
  container = null;
  isOpen = false;
  isAuthenticated = false;
  currentPage = "dashboard";
  constructor() {
    window.adminPanel = this;
    this.init();
  }
  /**
   * 初始化
   */
  init() {
    this.handleRouteChange();
    window.addEventListener("popstate", () => this.handleRouteChange());
    this.interceptHistory();
  }
  /**
   * 攔截 History API
   */
  interceptHistory() {
    const originalPushState = history.pushState;
    const originalReplaceState = history.replaceState;
    history.pushState = (...args) => {
      originalPushState.apply(history, args);
      this.handleRouteChange();
    };
    history.replaceState = (...args) => {
      originalReplaceState.apply(history, args);
      this.handleRouteChange();
    };
  }
  /**
   * 處理路由變化
   */
  async handleRouteChange() {
    const path = window.location.pathname;
    if (path === "/lens-service" || path.startsWith("/lens-service/")) {
      await this.open();
    } else if (this.isOpen) {
      this.close();
    }
  }
  /**
   * 打開後台
   */
  async open() {
    if (this.isOpen) return;
    const existingContainer = document.getElementById("lens-service-admin");
    if (existingContainer) {
      existingContainer.remove();
    }
    if (!this.checkIPWhitelist()) {
      alert("\u60A8\u7684 IP \u4E0D\u5728\u767D\u540D\u55AE\u4E2D\uFF0C\u7121\u6CD5\u8A2A\u554F\u7BA1\u7406\u5F8C\u53F0");
      window.location.href = "/";
      return;
    }
    this.isOpen = true;
    this.container = document.createElement("div");
    this.container.id = "lens-service-admin";
    this.container.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: #f9fafb;
      z-index: 999999;
      overflow: hidden;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    `;
    this.container.innerHTML = this.isAuthenticated ? this.renderAdminUI() : this.renderLoginUI();
    document.body.appendChild(this.container);
    this.bindEvents();
    if (this.isAuthenticated) {
      await this.updatePageContent();
    }
  }
  /**
   * 關閉後台
   */
  close() {
    if (!this.isOpen || !this.container) return;
    this.container.remove();
    this.container = null;
    this.isOpen = false;
  }
  /**
   * 檢查 IP 白名單
   */
  checkIPWhitelist() {
    const whitelist = this.getIPWhitelist();
    if (whitelist.length === 0) {
      return true;
    }
    console.warn("IP whitelist check requires backend API support");
    return true;
  }
  /**
   * 獲取 IP 白名單
   */
  getIPWhitelist() {
    const stored = localStorage.getItem("sm_ip_whitelist");
    if (!stored) return [];
    try {
      return JSON.parse(stored);
    } catch (e) {
      return [];
    }
  }
  /**
   * 保存 IP 白名單
   */
  saveIPWhitelist(ips) {
    localStorage.setItem("sm_ip_whitelist", JSON.stringify(ips));
  }
  /**
   * 渲染登入頁面
   * 修復：確保輸入框可以正常輸入
   */
  renderLoginUI() {
    return `
      <div style="min-height: 100vh; display: flex; align-items: center; justify-content: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
        <div style="background: white; padding: 48px; border-radius: 16px; box-shadow: 0 20px 60px rgba(0,0,0,0.3); max-width: 400px; width: 100%;">
          <h1 style="font-size: 28px; font-weight: 700; margin: 0 0 8px 0; color: #1f2937;">Lens Service</h1>
          <p style="color: #6b7280; margin: 0 0 32px 0;">\u7BA1\u7406\u5F8C\u53F0</p>

          <form id="admin-login-form" style="position: relative; z-index: 1;">
            <div style="margin-bottom: 16px;">
              <label for="admin-username" style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">\u7528\u6236\u540D</label>
              <input
                type="text"
                id="admin-username"
                name="username"
                placeholder="\u8ACB\u8F38\u5165\u7528\u6236\u540D"
                autocomplete="username"
                style="
                  width: 100%;
                  padding: 12px 16px;
                  border: 1px solid #d1d5db;
                  border-radius: 8px;
                  font-size: 14px;
                  box-sizing: border-box;
                  background: white;
                  color: #1f2937;
                  outline: none;
                  transition: border-color 0.2s;
                "
              />
            </div>

            <div style="margin-bottom: 24px;">
              <label for="admin-password" style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">\u5BC6\u78BC</label>
              <input
                type="password"
                id="admin-password"
                name="password"
                placeholder="\u8ACB\u8F38\u5165\u5BC6\u78BC"
                autocomplete="current-password"
                style="
                  width: 100%;
                  padding: 12px 16px;
                  border: 1px solid #d1d5db;
                  border-radius: 8px;
                  font-size: 14px;
                  box-sizing: border-box;
                  background: white;
                  color: #1f2937;
                  outline: none;
                  transition: border-color 0.2s;
                "
              />
            </div>

            <button
              type="submit"
              style="
                width: 100%;
                padding: 12px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                border-radius: 8px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: transform 0.2s;
              "
            >
              \u767B\u5165
            </button>
          </form>

          <p style="margin-top: 16px; font-size: 12px; color: #9ca3af; text-align: center;">\u9810\u8A2D\u7528\u6236\u540D\uFF1Alens\uFF0C\u5BC6\u78BC\uFF1A1234</p>
        </div>
      </div>
    `;
  }
  /**
   * 顯示編輯對話框
   */
  showEditDialog(title, currentValue, isTextarea = false) {
    return new Promise((resolve) => {
      console.log("\u{1F527} showEditDialog called:", { title, currentValue, isTextarea });
      const existingModals = document.querySelectorAll('[data-edit-modal="true"]');
      existingModals.forEach((modal2) => modal2.remove());
      const modal = document.createElement("div");
      modal.setAttribute("data-edit-modal", "true");
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000000;
      `;
      const inputElement = isTextarea ? `<textarea id="edit-input" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; min-height: 120px; resize: vertical; font-family: inherit; color: #1f2937; background: #ffffff;">${currentValue}</textarea>` : `<input type="text" id="edit-input" value="${currentValue}" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; color: #1f2937; background: #ffffff;">`;
      modal.innerHTML = `
        <div style="background: white; padding: 24px; border-radius: 12px; max-width: 500px; width: 90%;">
          <h3 style="margin: 0 0 16px 0; font-size: 18px; color: #1f2937;">${title}</h3>
          ${inputElement}
          <div style="display: flex; gap: 12px; justify-content: flex-end; margin-top: 16px;">
            <button id="cancel-btn" style="padding: 8px 16px; border: 1px solid #d1d5db; background: white; color: #374151; border-radius: 6px; cursor: pointer;">\u53D6\u6D88</button>
            <button id="save-btn" style="padding: 8px 16px; background: #3b82f6; color: white; border: none; border-radius: 6px; cursor: pointer;">\u5132\u5B58</button>
          </div>
        </div>
      `;
      document.body.appendChild(modal);
      console.log("\u{1F527} Modal appended to body");
      const input = modal.querySelector("#edit-input");
      const cancelBtn = modal.querySelector("#cancel-btn");
      const saveBtn = modal.querySelector("#save-btn");
      console.log("\u{1F527} Elements found:", { input: !!input, cancelBtn: !!cancelBtn, saveBtn: !!saveBtn });
      input.focus();
      if (input instanceof HTMLInputElement) {
        input.select();
      } else {
        input.setSelectionRange(0, input.value.length);
      }
      const cleanup = () => {
        if (modal.parentNode) {
          document.body.removeChild(modal);
        }
      };
      cancelBtn?.addEventListener("click", () => {
        console.log("\u{1F527} Cancel button clicked");
        cleanup();
        resolve(null);
      });
      saveBtn?.addEventListener("click", () => {
        console.log("\u{1F527} Save button clicked");
        const value = input.value.trim();
        console.log("\u{1F527} Saving value:", value);
        cleanup();
        resolve(value);
      });
      if (input instanceof HTMLInputElement) {
        input.addEventListener("keydown", (e) => {
          if (e.key === "Enter") {
            console.log("\u{1F527} Enter key pressed");
            const value = input.value.trim();
            cleanup();
            resolve(value);
          }
        });
      }
      modal.addEventListener("click", (e) => {
        if (e.target === modal) {
          console.log("\u{1F527} Background clicked");
          cleanup();
          resolve(null);
        }
      });
    });
  }
  /**
   * 顯示自定義確認對話框
   */
  showConfirmDialog(message) {
    return new Promise((resolve) => {
      const overlay = document.createElement("div");
      overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000001;
        display: flex;
        align-items: center;
        justify-content: center;
      `;
      const dialog = document.createElement("div");
      dialog.style.cssText = `
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        max-width: 400px;
        width: 90%;
      `;
      dialog.innerHTML = `
        <p style="margin: 0 0 20px 0; font-size: 16px; color: #1f2937;">${message}</p>
        <div style="display: flex; gap: 10px; justify-content: flex-end;">
          <button id="confirm-cancel" style="padding: 8px 16px; border: 1px solid #ccc; background: white; color: #1f2937; border-radius: 4px; cursor: pointer;">\u53D6\u6D88</button>
          <button id="confirm-ok" style="padding: 8px 16px; border: none; background: #007cff; color: white; border-radius: 4px; cursor: pointer;">\u78BA\u5B9A</button>
        </div>
      `;
      overlay.appendChild(dialog);
      document.body.appendChild(overlay);
      const handleResult = (result) => {
        document.body.removeChild(overlay);
        resolve(result);
      };
      dialog.querySelector("#confirm-ok")?.addEventListener("click", () => handleResult(true));
      dialog.querySelector("#confirm-cancel")?.addEventListener("click", () => handleResult(false));
      overlay.addEventListener("click", (e) => {
        if (e.target === overlay) handleResult(false);
      });
    });
  }
  /**
   * 顯示自定義提示對話框
   */
  showAlertDialog(message) {
    return new Promise((resolve) => {
      const overlay = document.createElement("div");
      overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000001;
        display: flex;
        align-items: center;
        justify-content: center;
      `;
      const dialog = document.createElement("div");
      dialog.style.cssText = `
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        max-width: 400px;
        width: 90%;
      `;
      dialog.innerHTML = `
        <p style="margin: 0 0 20px 0; font-size: 16px; color: #1f2937;">${message}</p>
        <div style="display: flex; justify-content: flex-end;">
          <button id="alert-ok" style="padding: 8px 16px; border: none; background: #007cff; color: white; border-radius: 4px; cursor: pointer;">\u78BA\u5B9A</button>
        </div>
      `;
      overlay.appendChild(dialog);
      document.body.appendChild(overlay);
      const handleClose = () => {
        document.body.removeChild(overlay);
        resolve();
      };
      dialog.querySelector("#alert-ok")?.addEventListener("click", handleClose);
      overlay.addEventListener("click", (e) => {
        if (e.target === overlay) handleClose();
      });
    });
  }
  /**
   * 更新導航高亮
   */
  updateNavHighlight() {
    if (!this.container) return;
    const navItems = this.container.querySelectorAll(".nav-item");
    navItems.forEach((item) => {
      const htmlItem = item;
      const isActive = htmlItem.dataset.page === this.currentPage;
      htmlItem.style.background = isActive ? "#ede9fe" : "transparent";
      htmlItem.style.color = isActive ? "#7c3aed" : "#4b5563";
      htmlItem.style.fontWeight = isActive ? "600" : "500";
      if (isActive) {
        htmlItem.classList.add("active");
      } else {
        htmlItem.classList.remove("active");
      }
    });
  }
  /**
   * 綁定事件
   */
  bindEvents() {
    if (!this.container) return;
    const loginForm = this.container.querySelector("#admin-login-form");
    if (loginForm) {
      loginForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        e.stopPropagation();
        const usernameInput2 = this.container.querySelector("#admin-username");
        const passwordInput = this.container.querySelector("#admin-password");
        const username = usernameInput2?.value || "";
        const password = passwordInput?.value || "";
        console.log("Login attempt with username:", username);
        try {
          const { DatabaseService: DatabaseService2 } = await Promise.resolve().then(() => (init_DatabaseService(), DatabaseService_exports));
          const user = await DatabaseService2.validateAdmin(username, password);
          console.log("Login successful (database auth)");
          this.isAuthenticated = true;
          this.container.innerHTML = this.renderAdminUI();
          await this.updatePageContent();
          this.bindEvents();
        } catch (error) {
          console.error("Login error:", error);
          this.showAlertDialog("\u767B\u5165\u6642\u767C\u751F\u932F\u8AA4\uFF0C\u8ACB\u7A0D\u5F8C\u518D\u8A66").then(() => {
            passwordInput.value = "";
            passwordInput.focus();
          });
        }
      });
      const usernameInput = this.container.querySelector("#admin-username");
      if (usernameInput) {
        setTimeout(() => {
          usernameInput.focus();
        }, 100);
      }
    }
    setTimeout(() => {
      const navItems = this.container.querySelectorAll(".nav-item");
      console.log("Binding nav items, found:", navItems.length);
      if (navItems.length === 0 && this.isAuthenticated) {
        console.warn("Nav items not found, retrying...");
        setTimeout(() => this.bindEvents(), 100);
        return;
      }
      navItems.forEach((item, index2) => {
        console.log(`Binding nav item ${index2}:`, item.dataset.page);
        const newItem = item.cloneNode(true);
        item.parentNode.replaceChild(newItem, item);
        newItem.addEventListener("click", async () => {
          const page = newItem.dataset.page;
          console.log("Nav item clicked:", page);
          if (page && page !== this.currentPage) {
            this.currentPage = page;
            await this.updatePageContent();
            this.updateNavHighlight();
          }
        });
      });
    }, 50);
    const logoutBtn = this.container.querySelector("#admin-logout");
    if (logoutBtn) {
      logoutBtn.addEventListener("click", () => {
        this.isAuthenticated = false;
        this.container.innerHTML = this.renderLoginUI();
        this.bindEvents();
      });
    }
    const telegramSettingsForm = this.container.querySelector("#telegram-settings-form");
    if (telegramSettingsForm) {
      telegramSettingsForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        e.stopPropagation();
        const enabledCheckbox = this.container.querySelector("#telegram-enabled");
        const enabled = enabledCheckbox?.checked || false;
        this.setTelegramEnabled(enabled);
        alert(`Telegram \u901A\u77E5\u5DF2${enabled ? "\u555F\u7528" : "\u505C\u7528"}`);
        await this.updatePageContent();
      });
    }
    const changePasswordForm = this.container.querySelector("#change-password-form");
    if (changePasswordForm) {
      changePasswordForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        e.stopPropagation();
        const newPasswordInput = this.container.querySelector("#new-password");
        const newPassword = newPasswordInput?.value || "";
        if (newPassword.length < 4) {
          alert("\u5BC6\u78BC\u9577\u5EA6\u81F3\u5C11 4 \u500B\u5B57\u5143");
          return;
        }
        alert("\u5BC6\u78BC\u5DF2\u66F4\u65B0");
        await this.updatePageContent();
      });
    }
    const ipWhitelistForm = this.container.querySelector("#ip-whitelist-form");
    if (ipWhitelistForm) {
      ipWhitelistForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        e.stopPropagation();
        const ipListTextarea = this.container.querySelector("#ip-list");
        const ipListText = ipListTextarea?.value || "";
        const ips = ipListText.split("\n").map((ip) => ip.trim()).filter((ip) => ip.length > 0);
        this.saveIPWhitelist(ips);
        alert(`\u5DF2\u66F4\u65B0 IP \u767D\u540D\u55AE\uFF08${ips.length} \u500B IP\uFF09`);
        await this.updatePageContent();
      });
    }
    const apiConfigForm = this.container.querySelector("#api-config-form");
    if (apiConfigForm) {
      apiConfigForm.addEventListener("submit", (e) => {
        e.preventDefault();
        e.stopPropagation();
        const llmEndpoint = this.container.querySelector("#llm-endpoint")?.value || "";
        const llmApiKey = this.container.querySelector("#llm-api-key")?.value || "";
        const llmDeployment = this.container.querySelector("#llm-deployment")?.value || "";
        const embedEndpoint = this.container.querySelector("#embed-endpoint")?.value || "";
        const embedApiKey = this.container.querySelector("#embed-api-key")?.value || "";
        const embedDeployment = this.container.querySelector("#embed-deployment")?.value || "";
        const config = {
          azureOpenAI: {
            endpoint: llmEndpoint,
            apiKey: llmApiKey,
            deployment: llmDeployment,
            embeddingDeployment: embedDeployment
          },
          llmAPI: {
            endpoint: llmEndpoint,
            apiKey: llmApiKey,
            deployment: llmDeployment
          },
          embeddingAPI: {
            endpoint: embedEndpoint,
            apiKey: embedApiKey,
            deployment: embedDeployment
          }
        };
        alert("API \u8A2D\u5B9A\u5DF2\u5132\u5B58");
      });
    }
    const agentToolConfigForm = this.container.querySelector("#agent-tool-config-form");
    if (agentToolConfigForm) {
      agentToolConfigForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        e.stopPropagation();
        const manualIndexEnabled = this.container.querySelector("#manual-index-enabled")?.checked || false;
        const frontendPagesEnabled = this.container.querySelector("#frontend-pages-enabled")?.checked || false;
        alert("Agent \u8A2D\u5B9A\u5DF2\u5132\u5B58");
        await this.updatePageContent();
      });
    }
    const sqlPluginConfigForm = this.container.querySelector("#sql-plugin-config-form");
    if (sqlPluginConfigForm) {
      sqlPluginConfigForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        e.stopPropagation();
        const enabled = this.container.querySelector("#sql-plugin-enabled")?.checked || false;
        const priority = parseInt(this.container.querySelector("#sql-plugin-priority")?.value || "5");
        const apiEndpoint = this.container.querySelector("#sql-api-endpoint")?.value || "";
        const connectionId = this.container.querySelector("#sql-connection-id")?.value || "";
        const searchTable = this.container.querySelector("#sql-search-table")?.value || "knowledge_base";
        const titleColumn = this.container.querySelector("#sql-title-column")?.value || "title";
        const contentColumn = this.container.querySelector("#sql-content-column")?.value || "content";
        const urlColumn = this.container.querySelector("#sql-url-column")?.value || "url";
        const config = {
          enabled,
          priority,
          apiEndpoint,
          connectionId,
          searchTable,
          titleColumn,
          contentColumn,
          urlColumn
        };
        localStorage.setItem("sm_sql_plugin_config", JSON.stringify(config));
        alert("SQL Plugin \u8A2D\u5B9A\u5DF2\u5132\u5B58");
        await this.updatePageContent();
      });
    }
    const sqlConnectionForm = this.container.querySelector("#sql-connection-form");
    if (sqlConnectionForm) {
      sqlConnectionForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        e.stopPropagation();
        const name = this.container.querySelector("#sql-conn-name")?.value || "";
        const type = this.container.querySelector("#sql-conn-type")?.value;
        if (!name) {
          alert("\u8ACB\u8F38\u5165\u9023\u63A5\u540D\u7A31");
          return;
        }
        try {
          alert("SQL \u9023\u63A5\u5DF2\u65B0\u589E");
          await this.updatePageContent();
        } catch (error) {
          console.error("Error creating SQL connection:", error);
          alert("\u65B0\u589E\u5931\u6557");
        }
      });
    }
    const deleteSQLConnectionBtns = this.container.querySelectorAll(".delete-sql-connection");
    deleteSQLConnectionBtns.forEach((btn) => {
      btn.addEventListener("click", async () => {
        const id = btn.dataset.id;
        if (id && confirm("\u78BA\u5B9A\u8981\u522A\u9664\u9019\u500B\u9023\u63A5\u55CE\uFF1F")) {
          try {
            alert("\u9023\u63A5\u5DF2\u522A\u9664");
            await this.updatePageContent();
          } catch (error) {
            console.error("Error deleting SQL connection:", error);
            alert("\u522A\u9664\u5931\u6557");
          }
        }
      });
    });
  }
  /**
   * 渲染管理後台 UI
   */
  renderAdminUI() {
    return `
      <div style="display: flex; height: 100vh;">
        <!-- \u5DE6\u5074\u5C0E\u822A -->
        <div style="width: 25%; min-width: 300px; background: white; border-right: 1px solid #e5e7eb; display: flex; flex-direction: column;">
          <div style="padding: 24px; border-bottom: 1px solid #e5e7eb;">
            <h1 style="font-size: 20px; font-weight: 700; margin: 0; color: #1f2937;">Lens Service</h1>
            <p style="font-size: 12px; color: #6b7280; margin: 4px 0 0 0;">\u7BA1\u7406\u5F8C\u53F0</p>
          </div>

          <nav style="flex: 1; padding: 16px; overflow-y: auto;">
            ${this.renderNavItem("dashboard", "\u5100\u8868\u677F")}
            ${this.renderNavItem("conversations", "\u5BA2\u670D\u5C0D\u8A71")}
            ${this.renderNavItem("manual-index", "\u624B\u52D5\u7D22\u5F15")}
            ${this.renderNavItem("system", "\u7CFB\u7D71\u8A2D\u5B9A")}
          </nav>

          <div style="padding: 16px; border-top: 1px solid #e5e7eb;">
            <button id="admin-logout" style="width: 100%; padding: 10px; background: #f3f4f6; border: none; border-radius: 8px; color: #6b7280; font-size: 14px; cursor: pointer;">
              \u767B\u51FA
            </button>
          </div>
        </div>

        <!-- \u53F3\u5074\u5167\u5BB9\u5340 -->
        <div style="flex: 1; overflow-y: auto; padding: 32px; background: #f9fafb;">
          <div id="admin-content">
            <!-- \u5167\u5BB9\u5C07\u901A\u904EupdatePageContent()\u7570\u6B65\u8F09\u5165 -->
          </div>
        </div>
      </div>
    `;
  }
  /**
   * 渲染導航項目（無 icon）
   */
  renderNavItem(page, label) {
    const isActive = this.currentPage === page;
    return `
      <button
        class="nav-item"
        data-page="${page}"
        style="
          width: 100%;
          padding: 12px 16px;
          margin-bottom: 4px;
          background: ${isActive ? "#ede9fe" : "transparent"};
          border: none;
          border-radius: 8px;
          color: ${isActive ? "#7c3aed" : "#6b7280"};
          font-size: 14px;
          font-weight: ${isActive ? "600" : "500"};
          text-align: left;
          cursor: pointer;
          transition: all 0.2s;
        "
      >
        ${label}
      </button>
    `;
  }
  /**
   * 渲染頁面內容
   */
  async renderPageContent() {
    switch (this.currentPage) {
      case "dashboard":
        return await this.renderDashboard();
      case "manual-index":
        return await this.renderManualIndex();
      case "conversations":
        return await this.renderConversations();
      case "system":
        return await this.renderSystemSettings();
      default:
        return "<p>\u9801\u9762\u4E0D\u5B58\u5728</p>";
    }
  }
  /**
   * 更新頁面內容（async helper）
   */
  async updatePageContent() {
    const contentDiv = this.container.querySelector("#admin-content");
    if (contentDiv) {
      contentDiv.innerHTML = await this.renderPageContent();
      this.bindContentEvents();
    }
  }
  /**
   * 綁定內容區域的事件
   */
  bindContentEvents() {
    if (!this.container) return;
    this.bindManualIndexEvents();
    this.bindCustomerServiceEvents();
    this.bindAdminUserEvents();
    this.bindSystemSettingsEvents();
  }
  /**
   * 綁定手動索引相關事件
   */
  bindManualIndexEvents() {
    const refreshAllUrlsBtn = this.container.querySelector("#refresh-all-urls-btn");
    if (refreshAllUrlsBtn) {
      refreshAllUrlsBtn.addEventListener("click", async () => {
        const confirmed = await this.showConfirmDialog("\u78BA\u5B9A\u8981\u5237\u65B0\u6240\u6709 URL \u7D22\u5F15\u55CE\uFF1F\u9019\u5C07\u91CD\u65B0\u722C\u53D6\u6240\u6709 URL \u4E26\u66F4\u65B0 embedding\uFF0C\u53EF\u80FD\u9700\u8981\u8F03\u9577\u6642\u9593\u3002");
        if (!confirmed) return;
        try {
          const button = refreshAllUrlsBtn;
          button.disabled = true;
          button.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="vertical-align: middle; margin-right: 6px; animation: spin 1s linear infinite;"><path d="M21.5 2v6h-6M2.5 22v-6h6M2 11.5a10 10 0 0 1 18.8-4.3M22 12.5a10 10 0 0 1-18.8 4.2"/></svg>\u5237\u65B0\u4E2D...';
          const response = await fetch("/api/widget/manual-indexes/refresh-all-urls", {
            method: "POST",
            headers: { "Content-Type": "application/json" }
          });
          const data2 = await response.json();
          if (data2.success) {
            await this.showAlertDialog(
              `\u5237\u65B0\u5B8C\u6210\uFF01
\u6210\u529F\uFF1A${data2.results.success} \u500B
\u5931\u6557\uFF1A${data2.results.failed} \u500B
\u7E3D\u8A08\uFF1A${data2.results.total} \u500B`
            );
            await this.updatePageContent();
          } else {
            await this.showAlertDialog(`\u5237\u65B0\u5931\u6557\uFF1A${data2.error}`);
          }
        } catch (error) {
          await this.showAlertDialog(`\u5237\u65B0\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
        } finally {
          const button = refreshAllUrlsBtn;
          button.disabled = false;
          button.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="vertical-align: middle; margin-right: 6px;"><path d="M21.5 2v6h-6M2.5 22v-6h6M2 11.5a10 10 0 0 1 18.8-4.3M22 12.5a10 10 0 0 1-18.8 4.2"/></svg>\u5237\u65B0\u6240\u6709 URL';
        }
      });
    }
    const importUrlBatchBtn = this.container.querySelector("#import-url-batch-btn");
    if (importUrlBatchBtn) {
      importUrlBatchBtn.addEventListener("click", async () => {
        await this.showImportUrlModal();
      });
    }
    const addSingleUrlBtn = this.container.querySelector("#add-single-url-btn");
    if (addSingleUrlBtn) {
      addSingleUrlBtn.addEventListener("click", async () => {
        await this.showAddSingleUrlModal();
      });
    }
    const addIndexBtn = this.container.querySelector("#add-index-btn");
    if (addIndexBtn) {
      addIndexBtn.addEventListener("click", async () => {
        await this.showAddIndexModal();
      });
    }
    const regenerateEmbeddingButtons = this.container.querySelectorAll(".regenerate-embedding-btn");
    regenerateEmbeddingButtons.forEach((btn) => {
      btn.addEventListener("click", async () => {
        const id = btn.dataset.id;
        if (id) {
          await this.regenerateEmbedding(id);
        }
      });
    });
    const recrawlUrlButtons = this.container.querySelectorAll(".recrawl-url-btn");
    recrawlUrlButtons.forEach((btn) => {
      btn.addEventListener("click", async (e) => {
        e.stopPropagation();
        const url = btn.dataset.url;
        const id = btn.dataset.id;
        if (url) {
          await this.recrawlUrlByUrl(url);
        } else if (id) {
          await this.recrawlUrl(id);
        }
      });
    });
    const deleteUrlButtons = this.container.querySelectorAll(".delete-url-btn");
    deleteUrlButtons.forEach((btn) => {
      btn.addEventListener("click", async (e) => {
        e.stopPropagation();
        const url = btn.dataset.url;
        if (url) {
          await this.deleteUrlAndAllItems(url);
        }
      });
    });
    const editContentButtons = this.container.querySelectorAll(".edit-content-btn");
    editContentButtons.forEach((btn) => {
      btn.addEventListener("click", async () => {
        const id = btn.dataset.id;
        if (id) {
          await this.showEditContentDialog(id);
        }
      });
    });
    const deleteButtons = this.container.querySelectorAll(".delete-index-btn");
    deleteButtons.forEach((btn) => {
      btn.addEventListener("click", async () => {
        const id = btn.dataset.id;
        if (id) {
          await this.showDeleteConfirmDialog(id);
        }
      });
    });
  }
  /**
   * 綁定客服對話相關事件
   */
  bindCustomerServiceEvents() {
    const refreshConversationsBtn = this.container.querySelector("#refresh-conversations");
    if (refreshConversationsBtn) {
      refreshConversationsBtn.addEventListener("click", async () => {
        await this.updatePageContent();
      });
    }
    const viewConversationBtns = this.container.querySelectorAll(".view-conversation-btn");
    console.log("\u{1F527} Binding view conversation buttons, found:", viewConversationBtns.length);
    viewConversationBtns.forEach((btn, index2) => {
      const conversationId = btn.getAttribute("data-id");
      console.log(`\u{1F527} Binding button ${index2}, conversation ID:`, conversationId);
      btn.addEventListener("click", async (e) => {
        e.preventDefault();
        e.stopPropagation();
        const target = e.currentTarget;
        const id = target.getAttribute("data-id");
        console.log("\u{1F527} View conversation button clicked, ID:", id);
        if (id) {
          await this.showConversationModal(id);
        } else {
          console.error("\u274C No conversation ID found on button");
        }
      });
    });
    const deleteConversationBtns = this.container.querySelectorAll(".delete-conversation-btn");
    deleteConversationBtns.forEach((btn) => {
      btn.addEventListener("click", async (e) => {
        const conversationId = e.target.getAttribute("data-id");
        if (conversationId) {
          const confirmed = await this.showConfirmDialog("\u78BA\u5B9A\u8981\u522A\u9664\u9019\u500B\u5C0D\u8A71\u55CE\uFF1F\u6B64\u64CD\u4F5C\u7121\u6CD5\u5FA9\u539F\u3002");
          if (confirmed) {
            try {
              const { CustomerServiceManager: CustomerServiceManager2 } = await Promise.resolve().then(() => (init_CustomerServiceManager(), CustomerServiceManager_exports));
              await CustomerServiceManager2.deleteConversation(conversationId);
              await this.showAlertDialog("\u5C0D\u8A71\u5DF2\u522A\u9664");
              await this.updatePageContent();
            } catch (error) {
              await this.showAlertDialog(`\u522A\u9664\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
            }
          }
        }
      });
    });
  }
  /**
   * 綁定管理員相關事件
   */
  bindAdminUserEvents() {
  }
  /**
   * 綁定系統設定相關事件
   */
  bindSystemSettingsEvents() {
    const editDefaultReplyBtn = this.container.querySelector("#edit-default-reply-btn");
    if (editDefaultReplyBtn) {
      editDefaultReplyBtn.addEventListener("click", async () => {
        const displayDiv = this.container.querySelector("#default-reply-display");
        const currentValue = displayDiv.textContent || "";
        const newValue = await this.showEditDialog("\u7DE8\u8F2F\u9810\u8A2D\u56DE\u8986", currentValue, true);
        if (newValue !== null) {
          try {
            const { DatabaseService: DatabaseService2 } = await Promise.resolve().then(() => (init_DatabaseService(), DatabaseService_exports));
            await DatabaseService2.setSetting("default_reply", newValue);
            displayDiv.textContent = newValue;
            await this.showAlertDialog("\u9810\u8A2D\u56DE\u8986\u5DF2\u66F4\u65B0");
          } catch (error) {
            console.error("Failed to save default reply:", error);
            await this.showAlertDialog("\u5132\u5B58\u5931\u6557\uFF0C\u8ACB\u7A0D\u5F8C\u518D\u8A66");
          }
        }
      });
    }
    const editSystemPromptBtn = this.container.querySelector("#edit-system-prompt-btn");
    if (editSystemPromptBtn) {
      editSystemPromptBtn.addEventListener("click", async () => {
        const displayDiv = this.container.querySelector("#system-prompt-display");
        const currentValue = displayDiv.textContent || "";
        const newValue = await this.showEditDialog("\u7DE8\u8F2F\u7CFB\u7D71\u63D0\u793A\u8A5E", currentValue, true);
        if (newValue !== null) {
          try {
            const { DatabaseService: DatabaseService2 } = await Promise.resolve().then(() => (init_DatabaseService(), DatabaseService_exports));
            await DatabaseService2.setSetting("system_prompt", newValue);
            displayDiv.textContent = newValue;
            await this.showAlertDialog("\u7CFB\u7D71\u63D0\u793A\u8A5E\u5DF2\u66F4\u65B0");
          } catch (error) {
            console.error("Failed to save system prompt:", error);
            await this.showAlertDialog("\u5132\u5B58\u5931\u6557\uFF0C\u8ACB\u7A0D\u5F8C\u518D\u8A66");
          }
        }
      });
    }
    const addAdminUserBtn = this.container.querySelector("#add-admin-user-btn");
    if (addAdminUserBtn) {
      addAdminUserBtn.addEventListener("click", async () => {
        await this.showAddAdminUserModal();
      });
    }
    const deleteAdminUserBtns = this.container.querySelectorAll(".delete-admin-user-btn");
    deleteAdminUserBtns.forEach((btn) => {
      btn.addEventListener("click", async () => {
        const userId = btn.dataset.id;
        if (userId) {
          const confirmed = await this.showConfirmDialog("\u78BA\u5B9A\u8981\u522A\u9664\u6B64\u7BA1\u7406\u54E1\u5E33\u865F\u55CE\uFF1F\u6B64\u64CD\u4F5C\u7121\u6CD5\u5FA9\u539F\u3002");
          if (confirmed) {
            try {
              const { DatabaseService: DatabaseService2 } = await Promise.resolve().then(() => (init_DatabaseService(), DatabaseService_exports));
              await DatabaseService2.deleteAdminUser(userId);
              await this.showAlertDialog("\u7BA1\u7406\u54E1\u5E33\u865F\u5DF2\u522A\u9664");
              await this.updatePageContent();
            } catch (error) {
              console.error("Failed to delete admin user:", error);
              await this.showAlertDialog(`\u522A\u9664\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
            }
          }
        }
      });
    });
  }
  /**
   * 渲染儀表板
   */
  async renderDashboard() {
    let conversations = [];
    let manualIndexes = [];
    let dbStatus = "API \u9023\u63A5\u4E2D...";
    try {
      console.log("Dashboard: Loading data from API...");
      const [conversationsData, indexesData] = await Promise.all([
        DatabaseService.getConversations().catch(() => []),
        DatabaseService.getManualIndexes().catch(() => [])
      ]);
      conversations = conversationsData || [];
      manualIndexes = indexesData || [];
      dbStatus = "\u6B63\u5E38\u9023\u63A5";
      console.log(`Dashboard loaded: ${conversations.length} conversations, ${manualIndexes.length} indexes`);
    } catch (error) {
      console.error("Failed to load dashboard data:", error);
      dbStatus = "\u9023\u63A5\u5931\u6557";
    }
    return `
      <h2 style="font-size: 24px; font-weight: 700; margin: 0 0 24px 0; color: #1f2937;">\u5100\u8868\u677F</h2>

      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 24px; margin-bottom: 32px;">
        ${this.renderStatCard("\u{1F4AC}", "\u5C0D\u8A71\u7E3D\u6578", conversations.length.toString())}
        ${this.renderStatCard("\u{1F4DD}", "\u624B\u52D5\u7D22\u5F15", manualIndexes.length.toString())}
      </div>

      <!-- \u7CFB\u7D71\u72C0\u614B -->
      <div style="background: white; padding: 24px; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <h3 style="font-size: 18px; font-weight: 600; margin: 0 0 16px 0; color: #1f2937;">\u7CFB\u7D71\u72C0\u614B</h3>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;">
          <div style="display: flex; justify-content: space-between; align-items: center; padding: 12px; background: #f9fafb; border-radius: 8px;">
            <span style="font-size: 14px; color: #374151;">Telegram \u901A\u77E5:</span>
            <span style="font-size: 14px; color: #059669; font-weight: 500;">\u2705 \u5DF2\u555F\u7528</span>
          </div>
          <div style="display: flex; justify-content: space-between; align-items: center; padding: 12px; background: #f9fafb; border-radius: 8px;">
            <span style="font-size: 14px; color: #374151;">\u8CC7\u6599\u5EAB\u9023\u7DDA:</span>
            <span style="font-size: 14px; color: ${dbStatus === "\u6B63\u5E38\u9023\u63A5" ? "#059669" : "#dc2626"}; font-weight: 500;">
              ${dbStatus === "\u6B63\u5E38\u9023\u63A5" ? "\u2705 \u6B63\u5E38\u9023\u7DDA" : "\u274C \u9023\u7DDA\u5931\u6557"}
            </span>
          </div>
        </div>
      </div>
    `;
  }
  /**
   * 渲染統計卡片
   */
  renderStatCard(icon, label, value) {
    return `
      <div style="background: white; padding: 24px; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div style="font-size: 32px; margin-bottom: 8px;">${icon}</div>
        <div style="font-size: 14px; color: #6b7280; margin-bottom: 4px;">${label}</div>
        <div style="font-size: 28px; font-weight: 700; color: #1f2937;">${value}</div>
      </div>
    `;
  }
  /**
   * 渲染手動索引頁面
   */
  async renderManualIndex() {
    const allIndexes = await ManualIndexService.getAll();
    const manualIndexes = allIndexes.filter((idx) => !idx.url || idx.type === "manual");
    const urlIndexes = allIndexes.filter((idx) => idx.url && idx.type !== "manual");
    const groupedByUrl = {};
    urlIndexes.forEach((idx) => {
      const url = idx.url;
      if (!groupedByUrl[url]) {
        groupedByUrl[url] = [];
      }
      groupedByUrl[url].push(idx);
    });
    return `
      <style>
        .index-item { transition: all 0.2s; }
        .index-item:hover { background: #f9fafb; }
        .index-content { max-height: 0; overflow: hidden; transition: max-height 0.3s ease; }
        .index-content.expanded { max-height: 2000px; }
        .url-group-content { max-height: 0; overflow: hidden; transition: max-height 0.3s ease; }
        .url-group-content.expanded { max-height: 5000px; }
        .icon-btn {
          background: none;
          border: none;
          cursor: pointer;
          padding: 6px;
          border-radius: 4px;
          transition: background 0.2s;
          display: inline-flex;
          align-items: center;
          justify-content: center;
        }
        .icon-btn:hover { background: #f3f4f6; }
        .status-indicator {
          width: 10px;
          height: 10px;
          border-radius: 50%;
          display: inline-block;
          margin-right: 8px;
          cursor: help;
        }
        .status-green { background: #10b981; }
        .status-red { background: #ef4444; }
        .status-gray { background: #9ca3af; }
      </style>

      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
        <div>
          <h2 style="font-size: 24px; font-weight: 700; margin: 0 0 8px 0; color: #1f2937;">\u7D22\u5F15\u7BA1\u7406</h2>
          <p style="color: #6b7280; margin: 0;">\u7BA1\u7406\u624B\u52D5\u7D22\u5F15\u548C\u77E5\u8B58\u5EAB\u5167\u5BB9</p>
        </div>
        <div style="display: flex; gap: 12px;">
          <button
            id="refresh-all-urls-btn"
            style="padding: 10px 20px; background: #f59e0b; color: white; border: none; border-radius: 8px; font-size: 14px; font-weight: 500; cursor: pointer;"
            title="\u91CD\u65B0\u722C\u53D6\u6240\u6709 URL \u4E26\u66F4\u65B0 embedding"
          >
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="vertical-align: middle; margin-right: 6px;">
              <path d="M21.5 2v6h-6M2.5 22v-6h6M2 11.5a10 10 0 0 1 18.8-4.3M22 12.5a10 10 0 0 1-18.8 4.2"/>
            </svg>
            \u5237\u65B0\u6240\u6709 URL
          </button>
          <button
            id="import-url-batch-btn"
            style="padding: 10px 20px; background: #10b981; color: white; border: none; border-radius: 8px; font-size: 14px; font-weight: 500; cursor: pointer;"
          >
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="vertical-align: middle; margin-right: 6px;">
              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M17 8l-5-5-5 5M12 3v12"/>
            </svg>
            \u6279\u91CF\u5C0E\u5165 URL
          </button>
          <button
            id="add-single-url-btn"
            style="padding: 10px 20px; background: #3b82f6; color: white; border: none; border-radius: 8px; font-size: 14px; font-weight: 500; cursor: pointer;"
          >
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="vertical-align: middle; margin-right: 6px;">
              <path d="M12 5v14M5 12h14"/>
            </svg>
            \u65B0\u589E URL
          </button>
          <button
            id="add-index-btn"
            style="padding: 10px 20px; background: #7c3aed; color: white; border: none; border-radius: 8px; font-size: 14px; font-weight: 500; cursor: pointer;"
          >
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="vertical-align: middle; margin-right: 6px;">
              <path d="M12 5v14M5 12h14"/>
            </svg>
            \u65B0\u589E\u7D22\u5F15
          </button>
        </div>
      </div>

      <!-- \u77E5\u8B58\u5EAB\uFF08URL \u7D22\u5F15\uFF09 -->
      <div style="background: white; padding: 24px; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); margin-bottom: 24px;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
          <h3 style="font-size: 18px; font-weight: 600; margin: 0; color: #1f2937;">\u{1F4DA} \u77E5\u8B58\u5EAB\uFF08${Object.keys(groupedByUrl).length} \u500B\u7DB2\u5740\uFF0C${urlIndexes.length} \u500B\u9805\u76EE\uFF09</h3>
        </div>

        ${Object.keys(groupedByUrl).length === 0 ? `
          <p style="color: #9ca3af; text-align: center; padding: 32px 0;">\u5C1A\u7121\u77E5\u8B58\u5EAB\u5167\u5BB9</p>
        ` : `
          <div style="display: flex; flex-direction: column; gap: 12px;">
            ${Object.entries(groupedByUrl).map(([url, items]) => `
              <div style="border: 2px solid #e5e7eb; border-radius: 8px; overflow: hidden;">
                <!-- URL \u6A19\u984C -->
                <div
                  style="background: #f9fafb; padding: 16px; display: flex; justify-content: space-between; align-items: center;"
                >
                  <div style="flex: 1; display: flex; align-items: center; gap: 12px; cursor: pointer;" onclick="adminPanel.toggleUrlGroup('${this.escapeHtml(url)}')">
                    <span class="status-indicator status-gray" data-url="${url}" title="\u6AA2\u67E5\u4E2D..."></span>
                    <div style="flex: 1;">
                      <h4 style="font-size: 15px; font-weight: 600; margin: 0 0 4px 0; color: #1f2937;">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="vertical-align: middle; margin-right: 6px;">
                          <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"/>
                          <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"/>
                        </svg>
                        ${this.escapeHtml(url)}
                      </h4>
                      <p style="font-size: 12px; color: #6b7280; margin: 0;">\u5305\u542B ${items.length} \u500B\u7D22\u5F15\u9805\u76EE</p>
                    </div>
                    <svg id="chevron-${this.escapeHtml(url)}" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="transition: transform 0.3s;">
                      <path d="M6 9l6 6 6-6"/>
                    </svg>
                  </div>
                  <div style="display: flex; gap: 4px; align-items: center;">
                    <button class="icon-btn recrawl-url-btn" data-url="${url}" title="\u91CD\u65B0\u722C\u53D6\u6B64 URL">
                      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M21 12a9 9 0 1 1-9-9c2.52 0 4.93 1 6.74 2.74L21 8"/>
                        <path d="M21 3v5h-5"/>
                      </svg>
                    </button>
                    <button class="icon-btn delete-url-btn" data-url="${url}" title="\u522A\u9664\u6B64 URL \u53CA\u6240\u6709\u9805\u76EE">
                      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M3 6h18M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
                      </svg>
                    </button>
                  </div>
                </div>

                <!-- URL \u4E0B\u7684\u6240\u6709\u9805\u76EE -->
                <div id="url-group-${this.escapeHtml(url)}" class="url-group-content" style="background: white;">
                  ${items.map((index2) => `
                    <div class="index-item" style="border-top: 1px solid #e5e7eb; padding: 12px 16px;">
                      <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div style="flex: 1; cursor: pointer;" onclick="adminPanel.toggleIndexContent('${index2.id}')">
                          <h5 style="font-size: 14px; font-weight: 600; margin: 0; color: #1f2937;">${this.escapeHtml(index2.name || "\u672A\u547D\u540D")}</h5>
                        </div>
                        <div style="display: flex; gap: 4px; align-items: center;">
                          <button class="icon-btn edit-content-btn" data-id="${index2.id}" title="\u7DE8\u8F2F">
                            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                              <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
                            </svg>
                          </button>
                          <button class="icon-btn regenerate-embedding-btn" data-id="${index2.id}" title="\u91CD\u65B0\u751F\u6210 Embedding">
                            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <circle cx="12" cy="12" r="3"/>
                              <path d="M12 1v6M12 17v6M4.22 4.22l4.24 4.24M15.54 15.54l4.24 4.24M1 12h6M17 12h6M4.22 19.78l4.24-4.24M15.54 8.46l4.24-4.24"/>
                            </svg>
                          </button>
                          <button class="icon-btn delete-index-btn" data-id="${index2.id}" title="\u522A\u9664">
                            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <path d="M3 6h18M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
                            </svg>
                          </button>
                        </div>
                      </div>
                      <div id="content-${index2.id}" class="index-content" style="margin-top: 12px; padding-top: 12px; border-top: 1px solid #e5e7eb;">
                        <p style="font-size: 13px; color: #374151; margin: 0; white-space: pre-wrap; max-height: 300px; overflow-y: auto;"><strong>\u5167\u5BB9\uFF1A</strong><br/>${this.escapeHtml(index2.content.substring(0, 500))}${index2.content.length > 500 ? "..." : ""}</p>
                        <p style="font-size: 11px; color: #9ca3af; margin: 8px 0 0 0;">
                          \u5EFA\u7ACB\u6642\u9593\uFF1A${index2.created_at ? new Date(index2.created_at).toLocaleString("zh-TW") : "\u672A\u77E5"}
                          ${index2.updated_at && index2.updated_at !== index2.created_at ? ` | \u66F4\u65B0\u6642\u9593\uFF1A${new Date(index2.updated_at).toLocaleString("zh-TW")}` : ""}
                        </p>
                      </div>
                    </div>
                  `).join("")}
                </div>
              </div>
            `).join("")}
          </div>
        `}
      </div>

      <!-- \u624B\u52D5\u7D22\u5F15 -->
      <div style="background: white; padding: 24px; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
          <h3 style="font-size: 18px; font-weight: 600; margin: 0; color: #1f2937;">\u270D\uFE0F \u624B\u52D5\u7D22\u5F15\uFF08${manualIndexes.length}\uFF09</h3>
        </div>

        ${manualIndexes.length === 0 ? `
          <p style="color: #9ca3af; text-align: center; padding: 32px 0;">\u5C1A\u7121\u624B\u52D5\u7D22\u5F15</p>
        ` : `
          <div style="display: flex; flex-direction: column; gap: 8px;">
            ${manualIndexes.map((index2) => `
              <div class="index-item" style="border: 1px solid #e5e7eb; border-radius: 8px; padding: 12px;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                  <div style="flex: 1; cursor: pointer;" onclick="adminPanel.toggleIndexContent('${index2.id}')">
                    <h4 style="font-size: 15px; font-weight: 600; margin: 0; color: #1f2937;">${this.escapeHtml(index2.name || "\u672A\u547D\u540D")}</h4>
                  </div>
                  <div style="display: flex; gap: 4px; align-items: center;">
                    <button class="icon-btn edit-content-btn" data-id="${index2.id}" title="\u7DE8\u8F2F">
                      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
                      </svg>
                    </button>
                    <button class="icon-btn regenerate-embedding-btn" data-id="${index2.id}" title="\u91CD\u65B0\u751F\u6210 Embedding">
                      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="3"/>
                        <path d="M12 1v6M12 17v6M4.22 4.22l4.24 4.24M15.54 15.54l4.24 4.24M1 12h6M17 12h6M4.22 19.78l4.24-4.24M15.54 8.46l4.24-4.24"/>
                      </svg>
                    </button>
                    <button class="icon-btn delete-index-btn" data-id="${index2.id}" title="\u522A\u9664">
                      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M3 6h18M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
                      </svg>
                    </button>
                  </div>
                </div>
                <div id="content-${index2.id}" class="index-content" style="margin-top: 12px; padding-top: 12px; border-top: 1px solid #e5e7eb;">
                  ${index2.description ? `<p style="font-size: 13px; color: #6b7280; margin: 0 0 8px 0;"><strong>\u63CF\u8FF0\uFF1A</strong>${this.escapeHtml(index2.description)}</p>` : ""}
                  <p style="font-size: 13px; color: #374151; margin: 0; white-space: pre-wrap; max-height: 300px; overflow-y: auto;"><strong>\u5167\u5BB9\uFF1A</strong><br/>${this.escapeHtml(index2.content.substring(0, 500))}${index2.content.length > 500 ? "..." : ""}</p>
                  <p style="font-size: 11px; color: #9ca3af; margin: 8px 0 0 0;">
                    \u5EFA\u7ACB\u6642\u9593\uFF1A${index2.created_at ? new Date(index2.created_at).toLocaleString("zh-TW") : "\u672A\u77E5"}
                    ${index2.updated_at && index2.updated_at !== index2.created_at ? ` | \u66F4\u65B0\u6642\u9593\uFF1A${new Date(index2.updated_at).toLocaleString("zh-TW")}` : ""}
                  </p>
                </div>
              </div>
            `).join("")}
          </div>
        `}
      </div>

      <script>
        // \u6AA2\u67E5\u6240\u6709 URL \u72C0\u614B
        (async function() {
          const indicators = document.querySelectorAll('.status-indicator[data-url]');
          for (const indicator of indicators) {
            const url = indicator.getAttribute('data-url');
            try {
              const response = await fetch('/api/widget/manual-indexes/check-url', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ url })
              });
              const data = await response.json();
              if (data.accessible) {
                indicator.className = 'status-indicator status-green';
                indicator.title = 'URL \u53EF\u8A2A\u554F - ' + data.message;
              } else {
                indicator.className = 'status-indicator status-red';
                indicator.title = 'URL \u7121\u6CD5\u8A2A\u554F - ' + data.message;
              }
            } catch (error) {
              indicator.className = 'status-indicator status-red';
              indicator.title = 'URL \u6AA2\u67E5\u5931\u6557';
            }
          }
        })();
      <\/script>
    `;
  }
  /**
   * 渲染 Sitemap 索引頁面
   */
  renderSitemap() {
    return `
      <h2 style="font-size: 24px; font-weight: 700; margin: 0 0 24px 0; color: #1f2937;">Sitemap \u7D22\u5F15</h2>
      <p style="color: #6b7280; margin-bottom: 24px;">\u722C\u53D6\u5916\u90E8\u7DB2\u7AD9\u7684 Sitemap \u5EFA\u7ACB\u7D22\u5F15</p>

      <div style="background: white; padding: 24px; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <p style="color: #6b7280;">Sitemap \u7D22\u5F15\u529F\u80FD\u958B\u767C\u4E2D...</p>
      </div>
    `;
  }
  /**
   * 渲染 SQL 資料庫頁面
   */
  renderSQL() {
    const connections = [];
    const pluginConfig = this.loadSQLPluginConfig();
    return `
      <h2 style="font-size: 24px; font-weight: 700; margin: 0 0 24px 0; color: #1f2937;">SQL \u8CC7\u6599\u5EAB</h2>
      <p style="color: #6b7280; margin-bottom: 24px;">\u9023\u63A5 SQL \u8CC7\u6599\u5EAB\u4F5C\u70BA\u641C\u5C0B\u4F86\u6E90</p>

      <!-- SQL Plugin \u914D\u7F6E -->
      <div style="background: white; padding: 24px; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); margin-bottom: 24px;">
        <h3 style="font-size: 18px; font-weight: 600; margin: 0 0 16px 0; color: #1f2937;">Plugin \u8A2D\u5B9A</h3>

        <form id="sql-plugin-config-form">
          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">
              <input type="checkbox" id="sql-plugin-enabled" ${pluginConfig.enabled ? "checked" : ""} style="margin-right: 8px;">
              \u555F\u7528 SQL \u641C\u5C0B
            </label>
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">\u512A\u5148\u7D1A</label>
            <input
              type="number"
              id="sql-plugin-priority"
              value="${pluginConfig.priority || 5}"
              min="1"
              max="10"
              style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;"
            >
            <p style="color: #6b7280; font-size: 12px; margin-top: 4px;">\u6578\u5B57\u8D8A\u5927\u512A\u5148\u7D1A\u8D8A\u9AD8\uFF081-10\uFF09</p>
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">API Endpoint</label>
            <input
              type="text"
              id="sql-api-endpoint"
              value="${pluginConfig.apiEndpoint || ""}"
              placeholder="https://your-api.com/sql/query"
              style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;"
            >
            <p style="color: #6b7280; font-size: 12px; margin-top: 4px;">\u5F8C\u7AEF API \u7528\u65BC\u57F7\u884C SQL \u67E5\u8A62</p>
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">SQL \u9023\u63A5</label>
            <select
              id="sql-connection-id"
              style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;"
            >
              <option value="">\u9078\u64C7\u9023\u63A5...</option>
              ${connections.map((conn) => `
                <option value="${conn.id}" ${pluginConfig.connectionId === conn.id ? "selected" : ""}>
                  ${conn.name} (${conn.type})
                </option>
              `).join("")}
            </select>
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">\u641C\u5C0B\u8868\u683C</label>
            <input
              type="text"
              id="sql-search-table"
              value="${pluginConfig.searchTable || "knowledge_base"}"
              placeholder="knowledge_base"
              style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;"
            >
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">\u6A19\u984C\u6B04\u4F4D</label>
            <input
              type="text"
              id="sql-title-column"
              value="${pluginConfig.titleColumn || "title"}"
              placeholder="title"
              style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;"
            >
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">\u5167\u5BB9\u6B04\u4F4D</label>
            <input
              type="text"
              id="sql-content-column"
              value="${pluginConfig.contentColumn || "content"}"
              placeholder="content"
              style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;"
            >
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">URL \u6B04\u4F4D\uFF08\u9078\u586B\uFF09</label>
            <input
              type="text"
              id="sql-url-column"
              value="${pluginConfig.urlColumn || "url"}"
              placeholder="url"
              style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;"
            >
          </div>

          <button
            type="submit"
            style="width: 100%; padding: 12px; background: #3b82f6; color: white; border: none; border-radius: 8px; font-size: 14px; font-weight: 500; cursor: pointer;"
          >
            \u5132\u5B58 Plugin \u8A2D\u5B9A
          </button>
        </form>
      </div>

      <!-- SQL \u9023\u63A5\u7BA1\u7406 -->
      <div style="background: white; padding: 24px; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); margin-bottom: 24px;">
        <h3 style="font-size: 18px; font-weight: 600; margin: 0 0 16px 0; color: #1f2937;">\u65B0\u589E SQL \u9023\u63A5</h3>

        <form id="sql-connection-form">
          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">\u9023\u63A5\u540D\u7A31</label>
            <input
              type="text"
              id="sql-conn-name"
              placeholder="\u6211\u7684\u8CC7\u6599\u5EAB"
              required
              style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;"
            >
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">\u8CC7\u6599\u5EAB\u985E\u578B</label>
            <select
              id="sql-conn-type"
              style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;"
            >
              <option value="mysql">MySQL</option>
              <option value="postgresql">PostgreSQL</option>
              <option value="mssql">MS SQL Server</option>
              <option value="sqlite">SQLite</option>
            </select>
          </div>

          <button
            type="submit"
            style="width: 100%; padding: 12px; background: #10b981; color: white; border: none; border-radius: 8px; font-size: 14px; font-weight: 500; cursor: pointer;"
          >
            \u65B0\u589E\u9023\u63A5
          </button>
        </form>
      </div>

      <!-- \u5DF2\u6709\u7684\u9023\u63A5\u5217\u8868 -->
      ${connections.length > 0 ? `
        <div style="background: white; padding: 24px; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
          <h3 style="font-size: 18px; font-weight: 600; margin: 0 0 16px 0; color: #1f2937;">\u5DF2\u5EFA\u7ACB\u7684\u9023\u63A5</h3>
          <div style="display: grid; gap: 16px;">
            ${connections.map((conn) => `
              <div style="padding: 16px; border: 1px solid #e5e7eb; border-radius: 8px;">
                <div style="display: flex; justify-content: space-between; align-items: start;">
                  <div>
                    <h4 style="font-size: 16px; font-weight: 600; margin: 0 0 8px 0; color: #1f2937;">${conn.name}</h4>
                    <p style="color: #6b7280; font-size: 14px; margin: 0;">\u985E\u578B\uFF1A${conn.type}</p>
                    <p style="color: #6b7280; font-size: 12px; margin: 4px 0 0 0;">\u5EFA\u7ACB\u6642\u9593\uFF1A${new Date(conn.createdAt).toLocaleString("zh-TW")}</p>
                  </div>
                  <button
                    class="delete-sql-connection"
                    data-id="${conn.id}"
                    style="padding: 8px 16px; background: #ef4444; color: white; border: none; border-radius: 6px; font-size: 14px; cursor: pointer;"
                  >
                    \u522A\u9664
                  </button>
                </div>
              </div>
            `).join("")}
          </div>
        </div>
      ` : ""}
    `;
  }
  /**
   * 載入 SQL Plugin 配置
   */
  loadSQLPluginConfig() {
    const saved = localStorage.getItem("sm_sql_plugin_config");
    if (saved) {
      try {
        return JSON.parse(saved);
      } catch (e) {
        console.error("Failed to parse SQL plugin config:", e);
      }
    }
    return {
      enabled: false,
      priority: 5,
      searchTable: "knowledge_base",
      titleColumn: "title",
      contentColumn: "content",
      urlColumn: "url"
    };
  }
  /**
   * 渲染 Agent & API 設定頁面（合併）
   */
  renderAgentAndAPI() {
    const config = {};
    const toolConfig = {};
    return `
      <h2 style="font-size: 24px; font-weight: 700; margin: 0 0 24px 0; color: #1f2937;">Agent & API \u8A2D\u5B9A</h2>

      <!-- API \u8A2D\u5B9A -->
      <div style="background: white; padding: 24px; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); margin-bottom: 24px;">
        <h3 style="font-size: 18px; font-weight: 600; margin: 0 0 16px 0; color: #1f2937;">API \u8A2D\u5B9A</h3>

        <form id="api-config-form">
          <!-- LLM API -->
          <div style="margin-bottom: 24px; padding-bottom: 24px; border-bottom: 1px solid #e5e7eb;">
            <h4 style="font-size: 16px; font-weight: 600; margin: 0 0 16px 0; color: #374151;">LLM API</h4>

            <div style="margin-bottom: 16px;">
              <label for="llm-endpoint" style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">Endpoint</label>
              <input
                type="text"
                id="llm-endpoint"
                name="llmEndpoint"
                placeholder="https://your-resource.openai.azure.com/"
                value="${config.azureOpenAI?.endpoint || config.llmAPI?.endpoint || ""}"
                style="width: 100%; padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box; background: white; color: #1f2937;"
              />
            </div>

            <div style="margin-bottom: 16px;">
              <label for="llm-api-key" style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">API Key</label>
              <input
                type="password"
                id="llm-api-key"
                name="llmApiKey"
                placeholder="your-api-key"
                value="${config.azureOpenAI?.apiKey || config.llmAPI?.apiKey || ""}"
                style="width: 100%; padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box; background: white; color: #1f2937;"
              />
            </div>

            <div style="margin-bottom: 16px;">
              <label for="llm-deployment" style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">Deployment Name</label>
              <input
                type="text"
                id="llm-deployment"
                name="llmDeployment"
                placeholder="gpt-4"
                value="${config.azureOpenAI?.deployment || config.llmAPI?.deployment || ""}"
                style="width: 100%; padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box; background: white; color: #1f2937;"
              />
            </div>
          </div>

          <!-- Embedding API -->
          <div style="margin-bottom: 24px;">
            <h4 style="font-size: 16px; font-weight: 600; margin: 0 0 16px 0; color: #374151;">Embedding API</h4>

            <div style="margin-bottom: 16px;">
              <label for="embed-endpoint" style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">Endpoint</label>
              <input
                type="text"
                id="embed-endpoint"
                name="embedEndpoint"
                placeholder="https://your-resource.openai.azure.com/"
                value="${config.embeddingAPI?.endpoint || config.azureOpenAI?.endpoint || ""}"
                style="width: 100%; padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box; background: white; color: #1f2937;"
              />
            </div>

            <div style="margin-bottom: 16px;">
              <label for="embed-api-key" style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">API Key</label>
              <input
                type="password"
                id="embed-api-key"
                name="embedApiKey"
                placeholder="your-api-key"
                value="${config.embeddingAPI?.apiKey || config.azureOpenAI?.apiKey || ""}"
                style="width: 100%; padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box; background: white; color: #1f2937;"
              />
            </div>

            <div style="margin-bottom: 16px;">
              <label for="embed-deployment" style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">Deployment Name</label>
              <input
                type="text"
                id="embed-deployment"
                name="embedDeployment"
                placeholder="text-embedding-3-small"
                value="${config.embeddingAPI?.deployment || config.azureOpenAI?.embeddingDeployment || ""}"
                style="width: 100%; padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box; background: white; color: #1f2937;"
              />
            </div>
          </div>

          <button
            type="submit"
            style="padding: 10px 20px; background: #7c3aed; color: white; border: none; border-radius: 8px; font-size: 14px; font-weight: 500; cursor: pointer;"
          >
            \u5132\u5B58 API \u8A2D\u5B9A
          </button>
        </form>
      </div>

      <!-- Agent Tool \u8A2D\u5B9A -->
      <div style="background: white; padding: 24px; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <h3 style="font-size: 18px; font-weight: 600; margin: 0 0 16px 0; color: #1f2937;">Agent \u5DE5\u5177\u8A2D\u5B9A</h3>
        <p style="color: #6b7280; margin-bottom: 16px; font-size: 14px;">\u9078\u64C7 Agent \u53EF\u4EE5\u4F7F\u7528\u7684\u641C\u5C0B\u5DE5\u5177</p>

        <form id="agent-tool-config-form">
          <div style="display: flex; flex-direction: column; gap: 16px;">
            <label style="display: flex; align-items: center; gap: 12px; padding: 12px; border: 1px solid #e5e7eb; border-radius: 8px; cursor: pointer;">
              <input type="checkbox" name="manualIndex" ${toolConfig?.manualIndex.enabled ? "checked" : ""} style="width: 18px; height: 18px; cursor: pointer;" />
              <div>
                <div style="font-weight: 500; color: #1f2937;">\u624B\u52D5\u7D22\u5F15</div>
                <div style="font-size: 13px; color: #6b7280;">\u641C\u5C0B\u624B\u52D5\u65B0\u589E\u7684\u7D22\u5F15\u5167\u5BB9</div>
              </div>
            </label>

            <label style="display: flex; align-items: center; gap: 12px; padding: 12px; border: 1px solid #e5e7eb; border-radius: 8px; cursor: pointer;">
              <input type="checkbox" name="frontendPages" ${toolConfig?.frontendPages.enabled ? "checked" : ""} style="width: 18px; height: 18px; cursor: pointer;" />
              <div>
                <div style="font-weight: 500; color: #1f2937;">\u524D\u7AEF\u9801\u9762</div>
                <div style="font-size: 13px; color: #6b7280;">\u641C\u5C0B\u7576\u524D\u7DB2\u7AD9\u7684\u9801\u9762\u5167\u5BB9</div>
              </div>
            </label>

            <label style="display: flex; align-items: center; gap: 12px; padding: 12px; border: 1px solid #e5e7eb; border-radius: 8px; cursor: pointer;">
              <input type="checkbox" name="sitemap" ${toolConfig?.sitemap.enabled ? "checked" : ""} style="width: 18px; height: 18px; cursor: pointer;" />
              <div>
                <div style="font-weight: 500; color: #1f2937;">Sitemap \u7D22\u5F15</div>
                <div style="font-size: 13px; color: #6b7280;">\u641C\u5C0B\u5916\u90E8\u7DB2\u7AD9\u7684 Sitemap \u5167\u5BB9</div>
              </div>
            </label>

            <label style="display: flex; align-items: center; gap: 12px; padding: 12px; border: 1px solid #e5e7eb; border-radius: 8px; cursor: pointer;">
              <input type="checkbox" name="sqlDatabase" ${toolConfig?.sqlDatabase.enabled ? "checked" : ""} style="width: 18px; height: 18px; cursor: pointer;" />
              <div>
                <div style="font-weight: 500; color: #1f2937;">SQL \u8CC7\u6599\u5EAB</div>
                <div style="font-size: 13px; color: #6b7280;">\u67E5\u8A62 SQL \u8CC7\u6599\u5EAB\u5167\u5BB9</div>
              </div>
            </label>
          </div>

          <button
            type="submit"
            style="margin-top: 16px; padding: 10px 20px; background: #10b981; color: white; border: none; border-radius: 8px; font-size: 14px; font-weight: 500; cursor: pointer;"
          >
            \u5132\u5B58\u5DE5\u5177\u8A2D\u5B9A
          </button>
        </form>
      </div>
    `;
  }
  /**
   * 檢查是否有 Telegram 配置
   */
  hasTelegramConfig() {
    const telegramConfig = window.SM_TELEGRAM_CONFIG;
    return !!(telegramConfig && telegramConfig.botToken && telegramConfig.chatId);
  }
  /**
   * 獲取 Telegram 啟用狀態
   */
  getTelegramEnabled() {
    const enabled = localStorage.getItem("telegram_enabled");
    return enabled !== "false";
  }
  /**
   * 設置 Telegram 啟用狀態
   */
  setTelegramEnabled(enabled) {
    localStorage.setItem("telegram_enabled", enabled.toString());
  }
  /**
   * 顯示編輯索引模態框
   */
  async showEditIndexModal(id) {
    const index2 = await ManualIndexService.getById(id);
    if (!index2) {
      await this.showAlertDialog("\u627E\u4E0D\u5230\u8A72\u7D22\u5F15");
      return;
    }
    const modal = document.createElement("div");
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000000;
    `;
    modal.innerHTML = `
      <div style="background: white; padding: 24px; border-radius: 12px; width: 90%; max-width: 600px; max-height: 80vh; overflow-y: auto;">
        <h3 style="font-size: 18px; font-weight: 600; margin: 0 0 16px 0; color: #1f2937;">\u7DE8\u8F2F\u7D22\u5F15</h3>

        <form id="edit-index-form">
          <div style="margin-bottom: 16px;">
            <label style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">\u540D\u7A31</label>
            <input
              type="text"
              id="edit-index-name"
              value="${index2.name || index2.name || ""}"
              required
              style="width: 100%; padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box; color: #1f2937; background: #ffffff;"
            />
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">\u63CF\u8FF0</label>
            <input
              type="text"
              id="edit-index-description"
              value="${index2.description || ""}"
              style="width: 100%; padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box; color: #1f2937; background: #ffffff;"
            />
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">\u5167\u5BB9</label>
            <textarea
              id="edit-index-content"
              rows="8"
              required
              style="width: 100%; padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box; resize: vertical; color: #1f2937; background: #ffffff;"
            >${index2.content}</textarea>
          </div>

          <div style="display: flex; gap: 12px; justify-content: flex-end;">
            <button
              type="button"
              id="cancel-edit-btn"
              style="padding: 10px 20px; background: #6b7280; color: white; border: none; border-radius: 8px; font-size: 14px; cursor: pointer;"
            >
              \u53D6\u6D88
            </button>
            <button
              type="submit"
              style="padding: 10px 20px; background: #3b82f6; color: white; border: none; border-radius: 8px; font-size: 14px; cursor: pointer;"
            >
              \u4FDD\u5B58
            </button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    const form = modal.querySelector("#edit-index-form");
    const cancelBtn = modal.querySelector("#cancel-edit-btn");
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const name = modal.querySelector("#edit-index-name").value;
      const description = modal.querySelector("#edit-index-description").value;
      const content = modal.querySelector("#edit-index-content").value;
      if (!name || !content) {
        await this.showAlertDialog("\u8ACB\u586B\u5BEB\u540D\u7A31\u548C\u5167\u5BB9");
        return;
      }
      try {
        await ManualIndexService.update(id, { title: name, description, content, url: "" });
        await this.showAlertDialog("\u7D22\u5F15\u5DF2\u66F4\u65B0");
        document.body.removeChild(modal);
        await this.updatePageContent();
      } catch (error) {
        await this.showAlertDialog(`\u66F4\u65B0\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
      }
    });
    cancelBtn.addEventListener("click", () => {
      document.body.removeChild(modal);
    });
    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        document.body.removeChild(modal);
      }
    });
  }
  /**
   * 顯示新增索引模態框
   */
  async showAddIndexModal() {
    const modal = document.createElement("div");
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000000;
    `;
    modal.innerHTML = `
      <div style="background: white; padding: 24px; border-radius: 12px; width: 90%; max-width: 600px; max-height: 80vh; overflow-y: auto;">
        <h3 style="font-size: 18px; font-weight: 600; margin: 0 0 16px 0; color: #1f2937;">\u65B0\u589E\u7D22\u5F15</h3>

        <form id="add-index-form">
          <div style="margin-bottom: 16px;">
            <label style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">
              \u540D\u7A31 <span style="color: #ef4444;">*</span>
            </label>
            <input
              type="text"
              id="add-index-name"
              placeholder="\u4F8B\u5982\uFF1A\u7522\u54C1\u4ECB\u7D39"
              required
              style="width: 100%; padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box; color: #1f2937; background: #ffffff;"
            />
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">
              \u63CF\u8FF0 <span style="color: #ef4444;">*</span> <span style="color: #6b7280; font-weight: 400; font-size: 12px;">(AI \u641C\u5C0B\u7528\u7684)</span>
            </label>
            <input
              type="text"
              id="add-index-description"
              placeholder="\u7C21\u77ED\u63CF\u8FF0\u9019\u500B\u7D22\u5F15\u7684\u5167\u5BB9\uFF0C\u7528\u65BC AI \u5411\u91CF\u641C\u5C0B"
              required
              style="width: 100%; padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box; color: #1f2937; background: #ffffff;"
            />
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">URL\uFF08\u9078\u586B\uFF09</label>
            <input
              type="url"
              id="add-index-url"
              placeholder="https://example.com/page"
              style="width: 100%; padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box; color: #1f2937; background: #ffffff;"
            />
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">
              \u5167\u5BB9 <span style="color: #ef4444;">*</span>
            </label>
            <textarea
              id="add-index-content"
              placeholder="\u8F38\u5165\u7D22\u5F15\u5167\u5BB9..."
              rows="8"
              required
              style="width: 100%; padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box; resize: vertical; color: #1f2937; background: #ffffff;"
            ></textarea>
          </div>

          <div style="display: flex; gap: 12px; justify-content: flex-end;">
            <button
              type="button"
              id="cancel-add-btn"
              style="padding: 10px 20px; background: #6b7280; color: white; border: none; border-radius: 8px; font-size: 14px; cursor: pointer;"
            >
              \u53D6\u6D88
            </button>
            <button
              type="submit"
              style="padding: 10px 20px; background: #7c3aed; color: white; border: none; border-radius: 8px; font-size: 14px; cursor: pointer;"
            >
              \u65B0\u589E\u7D22\u5F15
            </button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    const form = modal.querySelector("#add-index-form");
    const cancelBtn = modal.querySelector("#cancel-add-btn");
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const name = modal.querySelector("#add-index-name").value;
      const description = modal.querySelector("#add-index-description").value;
      const url = modal.querySelector("#add-index-url").value;
      const content = modal.querySelector("#add-index-content").value;
      if (!name || !description || !content) {
        await this.showAlertDialog("\u8ACB\u586B\u5BEB\u540D\u7A31\u3001\u63CF\u8FF0\u548C\u5167\u5BB9\uFF08\u5FC5\u586B\u6B04\u4F4D\uFF09");
        return;
      }
      try {
        await ManualIndexService.create({ title: name, description, content, url: url || void 0 });
        await this.showAlertDialog("\u7D22\u5F15\u5DF2\u65B0\u589E");
        document.body.removeChild(modal);
        await this.updatePageContent();
      } catch (error) {
        await this.showAlertDialog(`\u65B0\u589E\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
      }
    });
    cancelBtn.addEventListener("click", () => {
      document.body.removeChild(modal);
    });
    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        document.body.removeChild(modal);
      }
    });
  }
  /**
   * 顯示導入 URL 模態框
   */
  async showImportUrlModal() {
    const modal = document.createElement("div");
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000000;
    `;
    modal.innerHTML = `
      <div style="background: white; padding: 24px; border-radius: 12px; width: 90%; max-width: 600px; max-height: 80vh; overflow-y: auto;">
        <h3 style="font-size: 18px; font-weight: 600; margin: 0 0 16px 0; color: #1f2937;">\u5C0E\u5165 URL</h3>
        <p style="font-size: 14px; color: #6b7280; margin: 0 0 16px 0;">
          \u4E0A\u50B3\u5305\u542B URL \u5217\u8868\u7684 txt \u6587\u4EF6\uFF08\u4E00\u884C\u4E00\u500B URL\uFF09\uFF0C\u7CFB\u7D71\u6703\u81EA\u52D5\u6293\u53D6\u5167\u5BB9\u3001\u5207\u5206 chunk \u4E26\u751F\u6210 embedding\u3002
        </p>

        <form id="import-url-form">
          <div style="margin-bottom: 16px;">
            <label style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">
              \u9078\u64C7 URL \u6587\u4EF6 <span style="color: #ef4444;">*</span>
            </label>
            <input
              type="file"
              id="url-file-input"
              accept=".txt"
              required
              style="width: 100%; padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box; color: #1f2937; background: #ffffff;"
            />
            <p style="font-size: 12px; color: #6b7280; margin: 8px 0 0 0;">
              \u652F\u6301 .txt \u6587\u4EF6\uFF0C\u6BCF\u884C\u4E00\u500B URL
            </p>
          </div>

          <div id="import-progress" style="display: none; margin-bottom: 16px;">
            <div style="background: #f3f4f6; border-radius: 8px; padding: 16px;">
              <p style="font-size: 14px; color: #374151; margin: 0 0 8px 0;">
                \u6B63\u5728\u8655\u7406\uFF1A<span id="progress-text">\u6E96\u5099\u4E2D...</span>
              </p>
              <div style="background: #e5e7eb; border-radius: 4px; height: 8px; overflow: hidden;">
                <div id="progress-bar" style="background: #10b981; height: 100%; width: 0%; transition: width 0.3s;"></div>
              </div>
              <p style="font-size: 12px; color: #6b7280; margin: 8px 0 0 0;">
                <span id="progress-detail"></span>
              </p>
            </div>
          </div>

          <div id="import-result" style="display: none; margin-bottom: 16px;">
            <div style="background: #f0fdf4; border: 1px solid #86efac; border-radius: 8px; padding: 16px;">
              <p style="font-size: 14px; color: #166534; margin: 0; font-weight: 500;">
                \u2705 \u5C0E\u5165\u5B8C\u6210
              </p>
              <p style="font-size: 12px; color: #166534; margin: 8px 0 0 0;">
                <span id="result-detail"></span>
              </p>
            </div>
          </div>

          <div style="display: flex; justify-content: flex-end; gap: 12px;">
            <button
              type="button"
              id="cancel-import-btn"
              style="padding: 10px 20px; background: #6b7280; color: white; border: none; border-radius: 8px; font-size: 14px; cursor: pointer;"
            >
              \u53D6\u6D88
            </button>
            <button
              type="submit"
              id="submit-import-btn"
              style="padding: 10px 20px; background: #10b981; color: white; border: none; border-radius: 8px; font-size: 14px; cursor: pointer;"
            >
              \u958B\u59CB\u5C0E\u5165
            </button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    const form = modal.querySelector("#import-url-form");
    const cancelBtn = modal.querySelector("#cancel-import-btn");
    const submitBtn = modal.querySelector("#submit-import-btn");
    const fileInput = modal.querySelector("#url-file-input");
    const progressDiv = modal.querySelector("#import-progress");
    const progressText = modal.querySelector("#progress-text");
    const progressBar = modal.querySelector("#progress-bar");
    const progressDetail = modal.querySelector("#progress-detail");
    const resultDiv = modal.querySelector("#import-result");
    const resultDetail = modal.querySelector("#result-detail");
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const file = fileInput.files?.[0];
      if (!file) {
        await this.showAlertDialog("\u8ACB\u9078\u64C7\u6587\u4EF6");
        return;
      }
      try {
        submitBtn.disabled = true;
        submitBtn.textContent = "\u8655\u7406\u4E2D...";
        cancelBtn.disabled = true;
        progressDiv.style.display = "block";
        resultDiv.style.display = "none";
        progressText.textContent = "\u8B80\u53D6\u6587\u4EF6...";
        progressBar.style.width = "10%";
        const text3 = await file.text();
        const urls = text3.split("\n").map((line) => line.trim()).filter((line) => line && !line.startsWith("#"));
        if (urls.length === 0) {
          await this.showAlertDialog("\u6587\u4EF6\u4E2D\u6C92\u6709\u627E\u5230\u6709\u6548\u7684 URL");
          return;
        }
        progressText.textContent = `\u627E\u5230 ${urls.length} \u500B URL\uFF0C\u958B\u59CB\u8655\u7406...`;
        progressBar.style.width = "20%";
        const response = await DatabaseService.importUrlsBatch(urls);
        progressBar.style.width = "100%";
        progressText.textContent = "\u8655\u7406\u5B8C\u6210\uFF01";
        progressDetail.textContent = `\u6210\u529F\uFF1A${response.results.success} | \u5931\u6557\uFF1A${response.results.failed} | \u7E3D\u7D22\u5F15\uFF1A${response.results.totalIndexes}`;
        setTimeout(() => {
          progressDiv.style.display = "none";
          resultDiv.style.display = "block";
          resultDetail.textContent = `\u6210\u529F\u8655\u7406 ${response.results.success} \u500B URL\uFF0C\u5275\u5EFA\u4E86 ${response.results.totalIndexes} \u500B\u7D22\u5F15`;
          cancelBtn.disabled = false;
          cancelBtn.textContent = "\u95DC\u9589";
          submitBtn.style.display = "none";
          this.updatePageContent();
        }, 1e3);
      } catch (error) {
        await this.showAlertDialog(`\u5C0E\u5165\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
        submitBtn.disabled = false;
        submitBtn.textContent = "\u958B\u59CB\u5C0E\u5165";
        cancelBtn.disabled = false;
        progressDiv.style.display = "none";
      }
    });
    cancelBtn.addEventListener("click", () => {
      document.body.removeChild(modal);
    });
    modal.addEventListener("click", (e) => {
      if (e.target === modal && !cancelBtn.disabled) {
        document.body.removeChild(modal);
      }
    });
  }
  /**
   * 顯示刪除確認對話框
   */
  async showDeleteConfirmDialog(id) {
    const index2 = await ManualIndexService.getById(id);
    if (!index2) {
      await this.showAlertDialog("\u627E\u4E0D\u5230\u8A72\u7D22\u5F15");
      return;
    }
    const confirmed = await this.showConfirmDialog(`\u78BA\u5B9A\u8981\u522A\u9664\u7D22\u5F15\u300C${index2.name || index2.name || "\u672A\u547D\u540D"}\u300D\u55CE\uFF1F\u6B64\u64CD\u4F5C\u7121\u6CD5\u5FA9\u539F\u3002`);
    if (confirmed) {
      try {
        await ManualIndexService.delete(id);
        await this.showAlertDialog("\u7D22\u5F15\u5DF2\u522A\u9664");
        await this.updatePageContent();
      } catch (error) {
        await this.showAlertDialog(`\u522A\u9664\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
      }
    }
  }
  /**
   * 渲染客服對話頁面
   */
  async renderConversations() {
    try {
      const { CustomerServiceManager: CustomerServiceManager2 } = await Promise.resolve().then(() => (init_CustomerServiceManager(), CustomerServiceManager_exports));
      const conversations = await CustomerServiceManager2.getAllConversations();
      return `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
          <h2 style="font-size: 24px; font-weight: 700; margin: 0; color: #1f2937;">\u5BA2\u670D\u5C0D\u8A71\u7BA1\u7406</h2>
          <div style="display: flex; gap: 12px;">
            <button id="refresh-conversations" style="
              padding: 10px 20px;
              background: #f3f4f6;
              color: #374151;
              border: none;
              border-radius: 8px;
              font-size: 14px;
              cursor: pointer;
            ">\u{1F504} \u5237\u65B0</button>
          </div>
        </div>

        <div style="background: white; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); overflow: hidden;">
          ${conversations.length === 0 ? `
            <div style="padding: 48px; text-align: center; color: #6b7280;">
              <p style="font-size: 16px; margin: 0;">\u76EE\u524D\u6C92\u6709\u5C0D\u8A71\u8A18\u9304</p>
            </div>
          ` : `
            <div style="overflow-x: auto;">
              <table style="width: 100%; border-collapse: collapse;">
                <thead>
                  <tr style="background: #f9fafb; border-bottom: 1px solid #e5e7eb;">
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">\u5C0D\u8A71ID</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">\u7528\u6236ID</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">\u8A0A\u606F\u6578</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">\u72C0\u614B</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">\u958B\u59CB\u6642\u9593</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">\u64CD\u4F5C</th>
                  </tr>
                </thead>
                <tbody>
                  ${conversations.slice().reverse().map((conv) => {
        const conversationId = conv.conversation_id || conv.conversationId || conv.id;
        const userId = conv.user_id || conv.userId || "undefined";
        const messages = Array.isArray(conv.messages) ? conv.messages : [];
        const status = conv.status || "active";
        const createdAt = conv.created_at || conv.createdAt || conv.startedAt;
        return `
                    <tr style="border-bottom: 1px solid #f1f5f9;">
                      <td style="padding: 16px; color: #1f2937; font-family: monospace; font-size: 12px;">${conversationId.substring(0, 8)}...</td>
                      <td style="padding: 16px; color: #1f2937;">${userId}</td>
                      <td style="padding: 16px; color: #1f2937;">${messages.length}</td>
                      <td style="padding: 16px;">
                        <span style="
                          padding: 4px 8px;
                          border-radius: 4px;
                          font-size: 12px;
                          font-weight: 500;
                          background: ${status === "active" ? "#dcfce7" : "#f3f4f6"};
                          color: ${status === "active" ? "#166534" : "#374151"};
                        ">${status === "active" ? "\u9032\u884C\u4E2D" : "\u5DF2\u7D50\u675F"}</span>
                      </td>
                      <td style="padding: 16px; color: #6b7280; font-size: 14px;">${new Date(createdAt).toLocaleString()}</td>
                      <td style="padding: 16px;">
                        <div style="display: flex; gap: 8px;">
                          <button class="view-conversation-btn" data-id="${conversationId}" style="
                            padding: 6px 12px;
                            background: #3b82f6;
                            color: white;
                            border: none;
                            border-radius: 6px;
                            font-size: 12px;
                            cursor: pointer;
                          ">\u67E5\u770B</button>
                          <button class="delete-conversation-btn" data-id="${conversationId}" style="
                            padding: 6px 12px;
                            background: #ef4444;
                            color: white;
                            border: none;
                            border-radius: 6px;
                            font-size: 12px;
                            cursor: pointer;
                          ">\u522A\u9664</button>
                        </div>
                      </td>
                    </tr>
                  `;
      }).join("")}
                </tbody>
              </table>
            </div>
          `}
        </div>
      `;
    } catch (error) {
      console.error("Failed to render conversations:", error);
      return `
        <div style="padding: 24px; text-align: center; color: #ef4444;">
          <p>\u8F09\u5165\u5C0D\u8A71\u8A18\u9304\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}</p>
        </div>
      `;
    }
  }
  /**
   * 渲染管理員用戶頁面
   */
  async renderAdminUsers() {
    try {
      const { AdminUserManager: AdminUserManager2 } = await Promise.resolve().then(() => (init_AdminUserManager(), AdminUserManager_exports));
      const adminUsers = await AdminUserManager2.getAllAdminUsers();
      return `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
          <h2 style="font-size: 24px; font-weight: 700; margin: 0; color: #1f2937;">\u7BA1\u7406\u54E1\u5E33\u865F\u7BA1\u7406</h2>
          <button id="add-admin-user-btn" style="
            padding: 10px 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
          ">+ \u65B0\u589E\u7BA1\u7406\u54E1</button>
        </div>

        <div style="background: white; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); overflow: hidden;">
          ${adminUsers.length === 0 ? `
            <div style="padding: 48px; text-align: center; color: #6b7280;">
              <p style="font-size: 16px; margin: 0;">\u76EE\u524D\u6C92\u6709\u7BA1\u7406\u54E1\u5E33\u865F</p>
            </div>
          ` : `
            <div style="overflow-x: auto;">
              <table style="width: 100%; border-collapse: collapse;">
                <thead>
                  <tr style="background: #f9fafb; border-bottom: 1px solid #e5e7eb;">
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">\u7528\u6236\u540D</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">\u89D2\u8272</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">\u72C0\u614B</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">\u5275\u5EFA\u6642\u9593</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">\u6700\u5F8C\u767B\u9304</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">\u64CD\u4F5C</th>
                  </tr>
                </thead>
                <tbody>
                  ${adminUsers.map((user) => `
                    <tr style="border-bottom: 1px solid #f1f5f9;">
                      <td style="padding: 16px; color: #1f2937; font-weight: 500;">${user.username}</td>
                      <td style="padding: 16px;">
                        <span style="
                          padding: 4px 8px;
                          border-radius: 4px;
                          font-size: 12px;
                          font-weight: 500;
                          background: ${user.username === "admin" ? "#fef3c7" : "#dbeafe"};
                          color: ${user.username === "admin" ? "#92400e" : "#1e40af"};
                        ">${user.username === "admin" ? "\u8D85\u7D1A\u7BA1\u7406\u54E1" : "\u7BA1\u7406\u54E1"}</span>
                      </td>
                      <td style="padding: 16px;">
                        <span style="
                          padding: 4px 8px;
                          border-radius: 4px;
                          font-size: 12px;
                          font-weight: 500;
                          background: ${user.is_active ? "#dcfce7" : "#fee2e2"};
                          color: ${user.is_active ? "#166534" : "#dc2626"};
                        ">${user.is_active ? "\u555F\u7528" : "\u505C\u7528"}</span>
                      </td>
                      <td style="padding: 16px; color: #6b7280; font-size: 14px;">${new Date(user.created_at).toLocaleString()}</td>
                      <td style="padding: 16px; color: #6b7280; font-size: 14px;">${user.last_login ? new Date(user.last_login).toLocaleString() : "\u5F9E\u672A\u767B\u9304"}</td>
                      <td style="padding: 16px;">
                        <div style="display: flex; gap: 8px;">
                          <button class="edit-admin-user-btn" data-id="${user.id}" style="
                            padding: 6px 12px;
                            background: #3b82f6;
                            color: white;
                            border: none;
                            border-radius: 6px;
                            font-size: 12px;
                            cursor: pointer;
                          ">\u7DE8\u8F2F</button>
                          ${user.username !== "lens" ? `
                            <button class="delete-admin-user-btn" data-id="${user.id}" style="
                              padding: 6px 12px;
                              background: #ef4444;
                              color: white;
                              border: none;
                              border-radius: 6px;
                              font-size: 12px;
                              cursor: pointer;
                            ">\u522A\u9664</button>
                          ` : ""}
                        </div>
                      </td>
                    </tr>
                  `).join("")}
                </tbody>
              </table>
            </div>
          `}
        </div>
      `;
    } catch (error) {
      console.error("Failed to render admin users:", error);
      return `
        <div style="padding: 24px; text-align: center; color: #ef4444;">
          <p>\u8F09\u5165\u7BA1\u7406\u54E1\u5217\u8868\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}</p>
        </div>
      `;
    }
  }
  /**
   * 渲染系統設定頁面
   */
  async renderSystemSettings() {
    let settings = {};
    let adminUsers = [];
    try {
      const { DatabaseService: DatabaseService2 } = await Promise.resolve().then(() => (init_DatabaseService(), DatabaseService_exports));
      const [settingsData, adminUsersData] = await Promise.all([
        DatabaseService2.getSettings().catch(() => ({})),
        DatabaseService2.getAdminUsers().catch(() => [])
      ]);
      settings = settingsData;
      adminUsers = adminUsersData;
    } catch (error) {
      console.error("Failed to load system settings:", error);
    }
    const defaultReply = settings["default_reply"] || "";
    const systemPrompt = settings["system_prompt"] || "";
    return `
      <h2 style="font-size: 24px; font-weight: 700; margin: 0 0 24px 0; color: #1f2937;">\u7CFB\u7D71\u8A2D\u5B9A</h2>

      <!-- \u7CFB\u7D71\u8A2D\u5B9A -->
      <div style="background: white; padding: 24px; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); margin-bottom: 24px;">
        <h3 style="font-size: 18px; font-weight: 600; margin: 0 0 16px 0; color: #1f2937;">\u57FA\u672C\u8A2D\u5B9A</h3>

        <form id="system-settings-form">
          <div style="margin-bottom: 24px;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
              <label style="color: #374151; font-weight: 500;">\u7121\u6CD5\u56DE\u7B54\u6642\u7684\u56FA\u5B9A\u56DE\u8986</label>
              <button
                type="button"
                id="edit-default-reply-btn"
                style="background: #3b82f6; color: white; padding: 6px 12px; border: none; border-radius: 6px; font-size: 12px; cursor: pointer;"
                onmouseover="this.style.background='#2563eb'"
                onmouseout="this.style.background='#3b82f6'"
              >
                \u7DE8\u8F2F
              </button>
            </div>
            <div
              id="default-reply-display"
              style="width: 100%; padding: 12px; border: 1px solid #e5e7eb; border-radius: 8px; background: #f9fafb; font-size: 14px; min-height: 60px; white-space: pre-wrap; color: #1f2937;"
            >${defaultReply}</div>
          </div>

          <div style="margin-bottom: 24px;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
              <label style="color: #374151; font-weight: 500;">LLM\u7CFB\u7D71\u63D0\u793A\u8A5E</label>
              <button
                type="button"
                id="edit-system-prompt-btn"
                style="background: #3b82f6; color: white; padding: 6px 12px; border: none; border-radius: 6px; font-size: 12px; cursor: pointer;"
                onmouseover="this.style.background='#2563eb'"
                onmouseout="this.style.background='#3b82f6'"
              >
                \u7DE8\u8F2F
              </button>
            </div>
            <div
              id="system-prompt-display"
              style="width: 100%; padding: 12px; border: 1px solid #e5e7eb; border-radius: 8px; background: #f9fafb; font-size: 14px; min-height: 80px; white-space: pre-wrap; color: #1f2937;"
            >${systemPrompt}</div>
          </div>

        </form>
      </div>

      <!-- \u7BA1\u7406\u54E1\u5E33\u865F -->
      <div style="background: white; padding: 24px; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
          <h3 style="font-size: 18px; font-weight: 600; margin: 0; color: #1f2937;">\u7BA1\u7406\u54E1\u5E33\u865F\uFF08${adminUsers.length}\uFF09</h3>
          <button
            id="add-admin-user-btn"
            style="padding: 8px 16px; background: #10b981; color: white; border: none; border-radius: 6px; font-size: 12px; cursor: pointer;"
          >
            + \u65B0\u589E\u7BA1\u7406\u54E1
          </button>
        </div>

        ${adminUsers.length === 0 ? `
          <p style="color: #9ca3af; text-align: center; padding: 32px 0;">\u5C1A\u7121\u7BA1\u7406\u54E1\u5E33\u865F</p>
        ` : `
          <div style="display: flex; flex-direction: column; gap: 12px;">
            ${adminUsers.map((user) => `
              <div style="border: 1px solid #e5e7eb; border-radius: 8px; padding: 16px;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                  <div>
                    <h4 style="font-size: 16px; font-weight: 600; margin: 0 0 4px 0; color: #1f2937;">${user.username}</h4>
                    <p style="font-size: 14px; color: #6b7280; margin: 0;">${user.email || "\u7121Email"}</p>
                    <p style="font-size: 12px; color: #9ca3af; margin: 4px 0 0 0;">
                      \u5EFA\u7ACB\u6642\u9593\uFF1A${new Date(user.createdAt).toLocaleString("zh-TW")}
                    </p>
                  </div>
                  <div style="display: flex; gap: 8px;">
                    <button
                      class="delete-admin-user-btn"
                      data-id="${user.id}"
                      style="padding: 6px 12px; background: #ef4444; color: white; border: none; border-radius: 6px; font-size: 12px; cursor: pointer;"
                    >
                      \u522A\u9664
                    </button>
                  </div>
                </div>
              </div>
            `).join("")}
          </div>
        `}
      </div>
    `;
  }
  /**
   * 顯示新增管理員模態框
   */
  async showAddAdminUserModal() {
    const modal = document.createElement("div");
    modal.style.cssText = `
      position: fixed; top: 0; left: 0; width: 100%; height: 100%;
      background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 1000000;
    `;
    modal.innerHTML = `
      <div style="background: white; padding: 24px; border-radius: 12px; width: 90%; max-width: 500px; max-height: 80vh; overflow-y: auto;">
        <h3 style="margin: 0 0 16px 0; color: #1f2937;">\u65B0\u589E\u7BA1\u7406\u54E1</h3>

        <form id="add-admin-user-form">
          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">\u7528\u6236\u540D</label>
            <input
              type="text"
              id="add-admin-username"
              required
              style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;"
              placeholder="\u8ACB\u8F38\u5165\u7528\u6236\u540D"
            />
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">\u5BC6\u78BC</label>
            <input
              type="password"
              id="add-admin-password"
              required
              style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;"
              placeholder="\u8ACB\u8F38\u5165\u5BC6\u78BC"
            />
          </div>

          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">Email\uFF08\u9078\u586B\uFF09</label>
            <input
              type="email"
              id="add-admin-email"
              style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;"
              placeholder="\u8ACB\u8F38\u5165Email"
            />
          </div>

          <div style="display: flex; gap: 12px; justify-content: flex-end;">
            <button
              type="button"
              id="cancel-add-admin-btn"
              style="padding: 10px 20px; background: #f3f4f6; color: #374151; border: none; border-radius: 8px; cursor: pointer;"
            >
              \u53D6\u6D88
            </button>
            <button
              type="submit"
              style="padding: 10px 20px; background: #7c3aed; color: white; border: none; border-radius: 8px; cursor: pointer;"
            >
              \u65B0\u589E\u7BA1\u7406\u54E1
            </button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    const form = modal.querySelector("#add-admin-user-form");
    const cancelBtn = modal.querySelector("#cancel-add-admin-btn");
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const username = modal.querySelector("#add-admin-username").value;
      const password = modal.querySelector("#add-admin-password").value;
      const email = modal.querySelector("#add-admin-email").value;
      try {
        const { DatabaseService: DatabaseService2 } = await Promise.resolve().then(() => (init_DatabaseService(), DatabaseService_exports));
        await DatabaseService2.createAdminUser(username, password, email);
        document.body.removeChild(modal);
        await this.showAlertDialog("\u7BA1\u7406\u54E1\u5E33\u865F\u5DF2\u65B0\u589E");
        await this.updatePageContent();
      } catch (error) {
        await this.showAlertDialog(`\u65B0\u589E\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
      }
    });
    cancelBtn.addEventListener("click", () => {
      document.body.removeChild(modal);
    });
    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        document.body.removeChild(modal);
      }
    });
  }
  /**
   * 顯示對話詳情模態框
   */
  async showConversationModal(conversationId) {
    try {
      const { CustomerServiceManager: CustomerServiceManager2 } = await Promise.resolve().then(() => (init_CustomerServiceManager(), CustomerServiceManager_exports));
      const conversation = await CustomerServiceManager2.getConversationById(conversationId);
      if (!conversation) {
        await this.showAlertDialog("\u627E\u4E0D\u5230\u8A72\u5C0D\u8A71\u8A18\u9304");
        return;
      }
      const convId = conversation.conversation_id || conversation.conversationId || conversation.id;
      const userId = conversation.user_id || conversation.userId || "undefined";
      let messages = [];
      if (typeof conversation.messages === "string") {
        try {
          messages = JSON.parse(conversation.messages);
        } catch (e) {
          console.error("Failed to parse messages:", e);
          messages = [];
        }
      } else if (Array.isArray(conversation.messages)) {
        messages = conversation.messages;
      }
      const status = conversation.status || "active";
      const createdAt = conversation.created_at || conversation.createdAt;
      const updatedAt = conversation.updated_at || conversation.updatedAt;
      const modal = document.createElement("div");
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000000;
      `;
      modal.innerHTML = `
        <div style="
          background: white;
          border-radius: 12px;
          width: 90%;
          max-width: 800px;
          max-height: 80vh;
          overflow-y: auto;
          padding: 24px;
        ">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
            <h3 style="margin: 0; color: #1f2937; font-size: 18px; font-weight: 600;">\u5C0D\u8A71\u8A73\u60C5</h3>
            <button id="close-conversation-modal" style="
              background: none;
              border: none;
              font-size: 24px;
              cursor: pointer;
              color: #6b7280;
              padding: 0;
              width: 30px;
              height: 30px;
              display: flex;
              align-items: center;
              justify-content: center;
            ">&times;</button>
          </div>

          <div style="margin-bottom: 16px; padding: 16px; background: #f9fafb; border-radius: 8px;">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px; font-size: 14px;">
              <div><strong>\u5C0D\u8A71ID:</strong> ${convId}</div>
              <div><strong>\u7528\u6236ID:</strong> ${userId}</div>
              <div><strong>\u8A0A\u606F\u6578:</strong> ${messages.length}</div>
              <div><strong>\u72C0\u614B:</strong> ${status === "active" ? "\u9032\u884C\u4E2D" : "\u5DF2\u7D50\u675F"}</div>
              <div><strong>\u5EFA\u7ACB\u6642\u9593:</strong> ${createdAt ? new Date(createdAt).toLocaleString("zh-TW") : "\u672A\u77E5"}</div>
              <div><strong>\u66F4\u65B0\u6642\u9593:</strong> ${updatedAt ? new Date(updatedAt).toLocaleString("zh-TW") : "\u672A\u77E5"}</div>
            </div>
          </div>

          <div style="max-height: 400px; overflow-y: auto; border: 1px solid #e5e7eb; border-radius: 8px; padding: 16px; margin-bottom: 16px;">
            <h4 style="margin: 0 0 12px 0; color: #374151; font-size: 16px;">\u5C0D\u8A71\u8A18\u9304</h4>
            ${messages.length > 0 ? messages.map((msg) => `
                <div style="margin-bottom: 12px; padding: 12px; border-radius: 8px; ${msg.role === "user" ? "background: #eff6ff; margin-left: 20px;" : "background: #f0fdf4; margin-right: 20px;"}">
                  <div style="font-weight: 600; color: #374151; margin-bottom: 4px;">
                    ${msg.role === "user" ? "\u{1F464} \u7528\u6236" : "\u{1F916} \u52A9\u7406"}
                    <span style="font-weight: normal; color: #6b7280; font-size: 12px; margin-left: 8px;">
                      ${msg.timestamp ? new Date(msg.timestamp).toLocaleString("zh-TW") : ""}
                    </span>
                  </div>
                  <div style="color: #1f2937; line-height: 1.5;">${msg.content || ""}</div>
                </div>
              `).join("") : '<p style="color: #6b7280; text-align: center; padding: 20px;">\u6B64\u5C0D\u8A71\u66AB\u7121\u8A0A\u606F\u8A18\u9304</p>'}
          </div>

          <div style="margin-bottom: 16px; padding: 16px; background: #f0fdf4; border-radius: 8px; border: 1px solid #86efac;">
            <h4 style="margin: 0 0 12px 0; color: #374151; font-size: 14px; font-weight: 600;">\u5BA2\u670D\u56DE\u8986</h4>
            <textarea id="customer-service-reply" style="
              width: 100%;
              min-height: 80px;
              padding: 12px;
              border: 1px solid #d1d5db;
              border-radius: 8px;
              font-size: 14px;
              font-family: inherit;
              resize: vertical;
              color: #1f2937;
              background: #ffffff;
            " placeholder="\u8F38\u5165\u5BA2\u670D\u56DE\u8986..."></textarea>
          </div>

          <div style="display: flex; justify-content: flex-end; gap: 12px;">
            <button id="send-customer-service-reply" style="
              padding: 10px 20px;
              background: #10b981;
              color: white;
              border: none;
              border-radius: 8px;
              cursor: pointer;
              font-size: 14px;
              font-weight: 500;
            ">\u767C\u9001\u56DE\u8986</button>
            <button id="close-conversation-modal-btn" style="
              padding: 10px 20px;
              background: #6b7280;
              color: white;
              border: none;
              border-radius: 8px;
              cursor: pointer;
              font-size: 14px;
            ">\u95DC\u9589</button>
          </div>
        </div>
      `;
      document.body.appendChild(modal);
      const closeBtn = modal.querySelector("#close-conversation-modal");
      const closeBtnBottom = modal.querySelector("#close-conversation-modal-btn");
      const sendReplyBtn = modal.querySelector("#send-customer-service-reply");
      const replyTextarea = modal.querySelector("#customer-service-reply");
      const closeModal = () => {
        document.body.removeChild(modal);
      };
      closeBtn?.addEventListener("click", closeModal);
      closeBtnBottom?.addEventListener("click", closeModal);
      sendReplyBtn?.addEventListener("click", async () => {
        const replyContent = replyTextarea?.value.trim();
        if (!replyContent) {
          await this.showAlertDialog("\u8ACB\u8F38\u5165\u56DE\u8986\u5167\u5BB9");
          return;
        }
        try {
          const { CustomerServiceManager: CustomerServiceManager3 } = await Promise.resolve().then(() => (init_CustomerServiceManager(), CustomerServiceManager_exports));
          const success = await CustomerServiceManager3.addCustomerServiceReply(
            conversationId,
            replyContent,
            "\u5BA2\u670D"
          );
          if (success) {
            await this.showAlertDialog("\u56DE\u8986\u5DF2\u767C\u9001");
            closeModal();
            await this.updatePageContent();
          } else {
            await this.showAlertDialog("\u767C\u9001\u5931\u6557\uFF0C\u8ACB\u7A0D\u5F8C\u518D\u8A66");
          }
        } catch (error) {
          console.error("Failed to send reply:", error);
          await this.showAlertDialog(`\u767C\u9001\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
        }
      });
      modal.addEventListener("click", (e) => {
        if (e.target === modal) {
          closeModal();
        }
      });
    } catch (error) {
      console.error("Error showing conversation modal:", error);
      await this.showAlertDialog("\u8F09\u5165\u5C0D\u8A71\u8A73\u60C5\u5931\u6557");
    }
  }
  /**
   * 渲染知識庫管理頁面
   */
  async renderKnowledgeBase() {
    try {
      const files = await KnowledgeBaseService.getFiles();
      return `
        <div style="padding: 24px;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
            <h2 style="font-size: 24px; font-weight: 700; margin: 0; color: #1f2937;">\u77E5\u8B58\u5EAB\u7BA1\u7406</h2>
            <div style="display: flex; gap: 12px;">
              <button onclick="adminPanel.showAddUrlDialog()" style="padding: 10px 20px; background: #3b82f6; color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 14px; font-weight: 500;">
                \u2795 \u65B0\u589E URL
              </button>
              <button onclick="adminPanel.showBatchImportDialog()" style="padding: 10px 20px; background: #8b5cf6; color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 14px; font-weight: 500;">
                \u{1F4CB} \u6279\u6B21\u532F\u5165
              </button>
              <button onclick="adminPanel.refreshAllKnowledge()" style="padding: 10px 20px; background: #10b981; color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 14px; font-weight: 500;">
                \u{1F504} \u5168\u90E8\u66F4\u65B0
              </button>
              <button onclick="adminPanel.removeInvalidKnowledge()" style="padding: 10px 20px; background: #ef4444; color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 14px; font-weight: 500;">
                \u{1F5D1}\uFE0F \u522A\u9664\u5931\u6548
              </button>
            </div>
          </div>

          <div style="background: white; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); overflow: hidden;">
            <table style="width: 100%; border-collapse: collapse;">
              <thead>
                <tr style="background: #f9fafb; border-bottom: 1px solid #e5e7eb;">
                  <th style="padding: 12px 16px; text-align: left; font-size: 12px; font-weight: 600; color: #6b7280; text-transform: uppercase;">\u540D\u7A31</th>
                  <th style="padding: 12px 16px; text-align: left; font-size: 12px; font-weight: 600; color: #6b7280; text-transform: uppercase;">\u985E\u578B</th>
                  <th style="padding: 12px 16px; text-align: left; font-size: 12px; font-weight: 600; color: #6b7280; text-transform: uppercase;">\u72C0\u614B</th>
                  <th style="padding: 12px 16px; text-align: left; font-size: 12px; font-weight: 600; color: #6b7280; text-transform: uppercase;">\u6700\u5F8C\u66F4\u65B0</th>
                  <th style="padding: 12px 16px; text-align: left; font-size: 12px; font-weight: 600; color: #6b7280; text-transform: uppercase;">\u7D22\u5F15\u6578</th>
                  <th style="padding: 12px 16px; text-align: center; font-size: 12px; font-weight: 600; color: #6b7280; text-transform: uppercase;">\u64CD\u4F5C</th>
                </tr>
              </thead>
              <tbody>
                ${files.length === 0 ? `
                  <tr>
                    <td colspan="6" style="padding: 48px; text-align: center; color: #9ca3af;">
                      <div style="font-size: 48px; margin-bottom: 16px;">\u{1F4DA}</div>
                      <div style="font-size: 16px; font-weight: 500; margin-bottom: 8px;">\u9084\u6C92\u6709\u4EFB\u4F55\u77E5\u8B58\u4F86\u6E90</div>
                      <div style="font-size: 14px;">\u9EDE\u64CA\u4E0A\u65B9\u6309\u9215\u958B\u59CB\u65B0\u589E</div>
                    </td>
                  </tr>
                ` : files.map((file) => `
                  <tr style="border-bottom: 1px solid #e5e7eb;">
                    <td style="padding: 12px 16px;">
                      <div style="font-size: 14px; font-weight: 500; color: #1f2937; margin-bottom: 4px;">${this.escapeHtml(file.name)}</div>
                      ${file.url ? `<div style="font-size: 12px; color: #6b7280; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; max-width: 300px;">${this.escapeHtml(file.url)}</div>` : ""}
                    </td>
                    <td style="padding: 12px 16px; font-size: 14px; color: #4b5563;">
                      ${KnowledgeBaseService.getFileTypeText(file.file_type)}
                    </td>
                    <td style="padding: 12px 16px; font-size: 14px;">
                      ${KnowledgeBaseService.getStatusText(file.status)}
                      ${file.metadata?.error ? `<div style="font-size: 12px; color: #ef4444; margin-top: 4px;">${this.escapeHtml(file.metadata?.error)}</div>` : ""}
                    </td>
                    <td style="padding: 12px 16px; font-size: 14px; color: #6b7280;">
                      ${KnowledgeBaseService.formatTime(file.updated_at)}
                    </td>
                    <td style="padding: 12px 16px; font-size: 14px; color: #6b7280;">
                      ${0}
                    </td>
                    <td style="padding: 12px 16px; text-align: center;">
                      <button onclick="adminPanel.refreshKnowledgeFile('${file.id}')" style="padding: 6px 12px; background: #f3f4f6; color: #374151; border: none; border-radius: 6px; cursor: pointer; font-size: 12px; margin-right: 8px;" title="\u66F4\u65B0">
                        \u{1F504}
                      </button>
                      <button onclick="adminPanel.deleteKnowledgeFile('${file.id}')" style="padding: 6px 12px; background: #fee2e2; color: #dc2626; border: none; border-radius: 6px; cursor: pointer; font-size: 12px;" title="\u522A\u9664">
                        \u{1F5D1}\uFE0F
                      </button>
                    </td>
                  </tr>
                `).join("")}
              </tbody>
            </table>
          </div>
        </div>
      `;
    } catch (error) {
      console.error("Error rendering knowledge base:", error);
      return `
        <div style="padding: 24px;">
          <div style="background: #fee2e2; border: 1px solid #fecaca; border-radius: 8px; padding: 16px; color: #dc2626;">
            \u274C \u8F09\u5165\u77E5\u8B58\u5EAB\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}
          </div>
        </div>
      `;
    }
  }
  /**
   * 顯示新增 URL 對話框
   */
  async showAddUrlDialog() {
    const modal = document.createElement("div");
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000000;
    `;
    modal.innerHTML = `
      <div style="background: white; padding: 24px; border-radius: 12px; max-width: 500px; width: 90%;">
        <h3 style="margin: 0 0 16px 0; font-size: 18px; color: #1f2937;">\u65B0\u589E URL</h3>

        <div style="margin-bottom: 16px;">
          <label style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">URL</label>
          <input type="text" id="url-input" placeholder="https://example.com/document.pdf" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box;">
        </div>

        <div style="margin-bottom: 16px;">
          <label style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">\u6A94\u6848\u985E\u578B</label>
          <select id="file-type-input" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
            <option value="">\u81EA\u52D5\u5075\u6E2C</option>
            <option value="webpage">\u7DB2\u9801</option>
            <option value="pdf">PDF</option>
            <option value="docx">DOCX</option>
            <option value="excel">Excel</option>
            <option value="csv">CSV</option>
            <option value="image">\u5716\u7247</option>
            <option value="text">\u7D14\u6587\u5B57</option>
          </select>
        </div>

        <div style="margin-bottom: 16px;">
          <label style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">\u540D\u7A31\uFF08\u9078\u586B\uFF09</label>
          <input type="text" id="name-input" placeholder="\u81EA\u52D5\u5F9E URL \u63D0\u53D6" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; box-sizing: border-box;">
        </div>

        <div style="display: flex; gap: 12px; justify-content: flex-end;">
          <button id="cancel-btn" style="padding: 8px 16px; border: 1px solid #d1d5db; background: white; color: #374151; border-radius: 6px; cursor: pointer;">\u53D6\u6D88</button>
          <button id="add-btn" style="padding: 8px 16px; background: #3b82f6; color: white; border: none; border-radius: 6px; cursor: pointer;">\u65B0\u589E</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
    const urlInput = modal.querySelector("#url-input");
    const fileTypeInput = modal.querySelector("#file-type-input");
    const nameInput = modal.querySelector("#name-input");
    const cancelBtn = modal.querySelector("#cancel-btn");
    const addBtn = modal.querySelector("#add-btn");
    urlInput.focus();
    const cleanup = () => {
      if (modal.parentNode) {
        document.body.removeChild(modal);
      }
    };
    cancelBtn.addEventListener("click", cleanup);
    addBtn.addEventListener("click", async () => {
      const url = urlInput.value.trim();
      if (!url) {
        await this.showAlertDialog("\u8ACB\u8F38\u5165 URL");
        return;
      }
      try {
        await KnowledgeBaseService.addUrl(
          url,
          fileTypeInput.value || void 0,
          nameInput.value.trim() || void 0
        );
        cleanup();
        await this.showAlertDialog("\u5DF2\u65B0\u589E\uFF0C\u6B63\u5728\u8655\u7406\u4E2D...");
        await this.updatePageContent();
      } catch (error) {
        await this.showAlertDialog(`\u65B0\u589E\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
      }
    });
    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        cleanup();
      }
    });
  }
  /**
   * 顯示批次匯入對話框
   */
  async showBatchImportDialog() {
    const modal = document.createElement("div");
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000000;
    `;
    modal.innerHTML = `
      <div style="background: white; padding: 24px; border-radius: 12px; max-width: 600px; width: 90%;">
        <h3 style="margin: 0 0 16px 0; font-size: 18px; color: #1f2937;">\u6279\u6B21\u532F\u5165 URL</h3>

        <div style="margin-bottom: 16px; padding: 12px; background: #f3f4f6; border-radius: 8px; font-size: 13px; color: #4b5563;">
          <div style="font-weight: 600; margin-bottom: 8px;">\u683C\u5F0F\u8AAA\u660E\uFF1A</div>
          <div>\u2022 \u6BCF\u884C\u4E00\u500B URL</div>
          <div>\u2022 \u6216\u4F7F\u7528 Tab \u5206\u9694\uFF1AURL [Tab] \u985E\u578B [Tab] \u540D\u7A31</div>
          <div style="margin-top: 8px; font-family: monospace; background: white; padding: 8px; border-radius: 4px;">
            https://example.com/doc1.pdf<br>
            https://example.com/page.html	webpage	\u5B98\u7DB2\u9996\u9801
          </div>
        </div>

        <div style="margin-bottom: 16px;">
          <label style="display: block; font-size: 14px; font-weight: 500; color: #374151; margin-bottom: 8px;">URL \u5217\u8868</label>
          <textarea id="urls-input" placeholder="\u8CBC\u4E0A URL \u5217\u8868..." style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; min-height: 200px; resize: vertical; font-family: monospace; box-sizing: border-box;"></textarea>
        </div>

        <div style="display: flex; gap: 12px; justify-content: flex-end;">
          <button id="cancel-btn" style="padding: 8px 16px; border: 1px solid #d1d5db; background: white; color: #374151; border-radius: 6px; cursor: pointer;">\u53D6\u6D88</button>
          <button id="import-btn" style="padding: 8px 16px; background: #8b5cf6; color: white; border: none; border-radius: 6px; cursor: pointer;">\u532F\u5165</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
    const urlsInput = modal.querySelector("#urls-input");
    const cancelBtn = modal.querySelector("#cancel-btn");
    const importBtn = modal.querySelector("#import-btn");
    urlsInput.focus();
    const cleanup = () => {
      if (modal.parentNode) {
        document.body.removeChild(modal);
      }
    };
    cancelBtn.addEventListener("click", cleanup);
    importBtn.addEventListener("click", async () => {
      const text3 = urlsInput.value.trim();
      if (!text3) {
        await this.showAlertDialog("\u8ACB\u8F38\u5165 URL \u5217\u8868");
        return;
      }
      try {
        const urls = KnowledgeBaseService.parseBatchImportText(text3);
        if (urls.length === 0) {
          await this.showAlertDialog("\u6C92\u6709\u627E\u5230\u6709\u6548\u7684 URL");
          return;
        }
        await KnowledgeBaseService.batchAddUrls(urls);
        cleanup();
        await this.showAlertDialog(`\u5DF2\u532F\u5165 ${urls.length} \u500B URL\uFF0C\u6B63\u5728\u8655\u7406\u4E2D...`);
        await this.updatePageContent();
      } catch (error) {
        await this.showAlertDialog(`\u532F\u5165\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
      }
    });
    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        cleanup();
      }
    });
  }
  /**
   * 更新單一知識檔案
   */
  async refreshKnowledgeFile(id) {
    try {
      await KnowledgeBaseService.refreshFile(id);
      await this.showAlertDialog("\u5DF2\u958B\u59CB\u91CD\u65B0\u8655\u7406");
      await this.updatePageContent();
    } catch (error) {
      await this.showAlertDialog(`\u66F4\u65B0\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
    }
  }
  /**
   * 刪除知識檔案
   */
  async deleteKnowledgeFile(id) {
    const confirmed = await this.showConfirmDialog("\u78BA\u5B9A\u8981\u522A\u9664\u9019\u500B\u6A94\u6848\u55CE\uFF1F");
    if (!confirmed) return;
    try {
      await KnowledgeBaseService.deleteFile(id);
      await this.showAlertDialog("\u5DF2\u522A\u9664");
      await this.updatePageContent();
    } catch (error) {
      await this.showAlertDialog(`\u522A\u9664\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
    }
  }
  /**
   * 全部更新
   */
  async refreshAllKnowledge() {
    const confirmed = await this.showConfirmDialog("\u78BA\u5B9A\u8981\u91CD\u65B0\u8655\u7406\u6240\u6709\u6A94\u6848\u55CE\uFF1F");
    if (!confirmed) return;
    try {
      await KnowledgeBaseService.refreshAll();
      await this.showAlertDialog("\u5DF2\u958B\u59CB\u91CD\u65B0\u8655\u7406\u6240\u6709\u6A94\u6848");
      await this.updatePageContent();
    } catch (error) {
      await this.showAlertDialog(`\u66F4\u65B0\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
    }
  }
  /**
   * 刪除所有失效的檔案
   */
  async removeInvalidKnowledge() {
    const confirmed = await this.showConfirmDialog("\u78BA\u5B9A\u8981\u522A\u9664\u6240\u6709\u5931\u6548\u7684\u6A94\u6848\u55CE\uFF1F");
    if (!confirmed) return;
    try {
      await KnowledgeBaseService.removeInvalidUrls();
      await this.showAlertDialog("\u5DF2\u522A\u9664\u6240\u6709\u5931\u6548\u6A94\u6848");
      await this.updatePageContent();
    } catch (error) {
      await this.showAlertDialog(`\u522A\u9664\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
    }
  }
  /**
   * Toggle index content visibility
   */
  toggleIndexContent(id) {
    const content = document.getElementById(`content-${id}`);
    if (content) {
      content.classList.toggle("expanded");
    }
  }
  /**
   * Toggle URL group visibility
   */
  toggleUrlGroup(url) {
    const content = document.getElementById(`url-group-${url}`);
    const chevron = document.getElementById(`chevron-${url}`);
    if (content) {
      content.classList.toggle("expanded");
      if (chevron) {
        if (content.classList.contains("expanded")) {
          chevron.style.transform = "rotate(180deg)";
        } else {
          chevron.style.transform = "rotate(0deg)";
        }
      }
    }
  }
  /**
   * 顯示新增單個 URL 模態框
   */
  async showAddSingleUrlModal() {
    const modal = document.createElement("div");
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000000;
    `;
    modal.innerHTML = `
      <div style="background: white; padding: 24px; border-radius: 12px; width: 90%; max-width: 500px;">
        <h3 style="font-size: 18px; font-weight: 600; margin: 0 0 16px 0; color: #1f2937;">\u65B0\u589E URL</h3>
        <form id="add-single-url-form">
          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">URL</label>
            <input
              type="url"
              id="single-url-input"
              placeholder="https://example.com"
              required
              style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;"
            >
          </div>
          <div style="display: flex; gap: 12px; justify-content: flex-end;">
            <button
              type="button"
              id="cancel-single-url-btn"
              style="padding: 10px 20px; background: #e5e7eb; color: #374151; border: none; border-radius: 8px; font-size: 14px; cursor: pointer;"
            >
              \u53D6\u6D88
            </button>
            <button
              type="submit"
              style="padding: 10px 20px; background: #3b82f6; color: white; border: none; border-radius: 8px; font-size: 14px; cursor: pointer;"
            >
              \u5C0E\u5165
            </button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    const form = modal.querySelector("#add-single-url-form");
    const cancelBtn = modal.querySelector("#cancel-single-url-btn");
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const url = modal.querySelector("#single-url-input").value;
      if (!url) {
        await this.showAlertDialog("\u8ACB\u8F38\u5165 URL");
        return;
      }
      try {
        const submitBtn = form.querySelector('button[type="submit"]');
        submitBtn.disabled = true;
        submitBtn.textContent = "\u5C0E\u5165\u4E2D...";
        const response = await fetch("/api/widget/manual-indexes/import-url", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ url })
        });
        const data2 = await response.json();
        if (data2.success) {
          const chunksCreated = data2.indexes?.length || data2.totalChunks || 0;
          await this.showAlertDialog(`\u6210\u529F\u5C0E\u5165 ${chunksCreated} \u500B chunks`);
          document.body.removeChild(modal);
          await this.updatePageContent();
        } else {
          await this.showAlertDialog(`\u5C0E\u5165\u5931\u6557\uFF1A${data2.error}`);
          submitBtn.disabled = false;
          submitBtn.textContent = "\u5C0E\u5165";
        }
      } catch (error) {
        await this.showAlertDialog(`\u5C0E\u5165\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
      }
    });
    cancelBtn.addEventListener("click", () => {
      document.body.removeChild(modal);
    });
    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        document.body.removeChild(modal);
      }
    });
  }
  /**
   * 顯示重新命名模態框
   */
  async showRenameIndexModal(id) {
    const index2 = await ManualIndexService.getById(id);
    if (!index2) {
      await this.showAlertDialog("\u627E\u4E0D\u5230\u8A72\u7D22\u5F15");
      return;
    }
    const modal = document.createElement("div");
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000000;
    `;
    modal.innerHTML = `
      <div style="background: white; padding: 24px; border-radius: 12px; width: 90%; max-width: 500px;">
        <h3 style="font-size: 18px; font-weight: 600; margin: 0 0 16px 0; color: #1f2937;">\u91CD\u65B0\u547D\u540D</h3>
        <form id="rename-index-form">
          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; color: #374151; font-weight: 500;">\u540D\u7A31</label>
            <input
              type="text"
              id="rename-index-name"
              value="${this.escapeHtml(index2.name)}"
              required
              style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;"
            >
          </div>
          <div style="display: flex; gap: 12px; justify-content: flex-end;">
            <button
              type="button"
              id="cancel-rename-btn"
              style="padding: 10px 20px; background: #e5e7eb; color: #374151; border: none; border-radius: 8px; font-size: 14px; cursor: pointer;"
            >
              \u53D6\u6D88
            </button>
            <button
              type="submit"
              style="padding: 10px 20px; background: #3b82f6; color: white; border: none; border-radius: 8px; font-size: 14px; cursor: pointer;"
            >
              \u4FDD\u5B58
            </button>
          </div>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
    const form = modal.querySelector("#rename-index-form");
    const cancelBtn = modal.querySelector("#cancel-rename-btn");
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const name = modal.querySelector("#rename-index-name").value;
      if (!name) {
        await this.showAlertDialog("\u8ACB\u8F38\u5165\u540D\u7A31");
        return;
      }
      try {
        await ManualIndexService.update(id, { title: name });
        await this.showAlertDialog("\u5DF2\u66F4\u65B0");
        document.body.removeChild(modal);
        await this.updatePageContent();
      } catch (error) {
        await this.showAlertDialog(`\u66F4\u65B0\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
      }
    });
    cancelBtn.addEventListener("click", () => {
      document.body.removeChild(modal);
    });
    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        document.body.removeChild(modal);
      }
    });
  }
  /**
   * 重新生成 embedding
   */
  async regenerateEmbedding(id) {
    const confirmed = await this.showConfirmDialog("\u78BA\u5B9A\u8981\u91CD\u65B0\u751F\u6210 embedding \u55CE\uFF1F");
    if (!confirmed) return;
    try {
      const response = await fetch("/api/widget/manual-indexes/regenerate-embedding", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id })
      });
      const data2 = await response.json();
      if (data2.success) {
        await this.showAlertDialog("Embedding \u5DF2\u91CD\u65B0\u751F\u6210");
        await this.updatePageContent();
      } else {
        await this.showAlertDialog(`\u91CD\u65B0\u751F\u6210\u5931\u6557\uFF1A${data2.error}`);
      }
    } catch (error) {
      await this.showAlertDialog(`\u91CD\u65B0\u751F\u6210\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
    }
  }
  /**
   * 重新爬取 URL（單個項目）
   */
  async recrawlUrl(id) {
    const confirmed = await this.showConfirmDialog("\u78BA\u5B9A\u8981\u91CD\u65B0\u722C\u53D6\u9019\u500B URL \u55CE\uFF1F\u9019\u5C07\u522A\u9664\u73FE\u6709\u7684\u6240\u6709 chunks \u4E26\u91CD\u65B0\u5C0E\u5165\u3002");
    if (!confirmed) return;
    try {
      const response = await fetch("/api/widget/manual-indexes/recrawl-url", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id })
      });
      const data2 = await response.json();
      if (data2.success) {
        await this.showAlertDialog(`\u91CD\u65B0\u722C\u53D6\u6210\u529F\uFF01\u5275\u5EFA\u4E86 ${data2.chunksCreated} \u500B chunks`);
        await this.updatePageContent();
      } else {
        await this.showAlertDialog(`\u91CD\u65B0\u722C\u53D6\u5931\u6557\uFF1A${data2.error}`);
      }
    } catch (error) {
      await this.showAlertDialog(`\u91CD\u65B0\u722C\u53D6\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
    }
  }
  /**
   * 重新爬取 URL（URL 層級 - 刷新整個 URL）
   */
  async recrawlUrlByUrl(url) {
    const confirmed = await this.showConfirmDialog(`\u78BA\u5B9A\u8981\u91CD\u65B0\u722C\u53D6 "${url}" \u55CE\uFF1F\u9019\u5C07\u522A\u9664\u8A72 URL \u4E0B\u7684\u6240\u6709\u9805\u76EE\u4E26\u91CD\u65B0\u5C0E\u5165\u3002`);
    if (!confirmed) return;
    try {
      const response = await fetch("/api/widget/manual-indexes/recrawl-url-by-url", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ url })
      });
      const data2 = await response.json();
      if (data2.success) {
        await this.showAlertDialog(`\u91CD\u65B0\u722C\u53D6\u6210\u529F\uFF01\u5275\u5EFA\u4E86 ${data2.chunksCreated} \u500B chunks`);
        await this.updatePageContent();
      } else {
        await this.showAlertDialog(`\u91CD\u65B0\u722C\u53D6\u5931\u6557\uFF1A${data2.error}`);
      }
    } catch (error) {
      await this.showAlertDialog(`\u91CD\u65B0\u722C\u53D6\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
    }
  }
  /**
   * 刪除 URL 及其下所有項目
   */
  async deleteUrlAndAllItems(url) {
    const confirmed = await this.showConfirmDialog(`\u78BA\u5B9A\u8981\u522A\u9664 "${url}" \u53CA\u5176\u4E0B\u6240\u6709\u9805\u76EE\u55CE\uFF1F\u6B64\u64CD\u4F5C\u7121\u6CD5\u5FA9\u539F\u3002`);
    if (!confirmed) return;
    try {
      const response = await fetch("/api/widget/manual-indexes/delete-by-url", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ url })
      });
      const data2 = await response.json();
      if (data2.success) {
        await this.showAlertDialog(`\u6210\u529F\u522A\u9664 ${data2.deletedCount} \u500B\u9805\u76EE`);
        await this.updatePageContent();
      } else {
        await this.showAlertDialog(`\u522A\u9664\u5931\u6557\uFF1A${data2.error}`);
      }
    } catch (error) {
      await this.showAlertDialog(`\u522A\u9664\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
    }
  }
  /**
   * 顯示編輯對話框（完整編輯：名稱、描述、URL、內容）
   */
  async showEditContentDialog(id) {
    try {
      const response = await fetch(`/api/widget/manual-indexes/${id}`);
      const index2 = await response.json();
      if (!index2) {
        await this.showAlertDialog("\u627E\u4E0D\u5230\u8A72\u9805\u76EE");
        return;
      }
      const isKnowledgeBase = index2.url || index2.type === "url";
      const dialog = document.createElement("div");
      dialog.id = "edit-dialog-overlay";
      dialog.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 999999;
      `;
      dialog.innerHTML = `
        <div style="background: white; border-radius: 8px; padding: 24px; max-width: 800px; width: 90%; max-height: 80vh; overflow-y: auto; box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);">
          <h3 style="margin: 0 0 20px 0; font-size: 18px; font-weight: 600; color: #111827;">\u7DE8\u8F2F\u7D22\u5F15\u9805\u76EE</h3>

          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #374151;">\u9805\u76EE\u540D\u7A31\uFF1A</label>
            <input type="text" id="edit-name-input" value="${this.escapeHtml(index2.name || "")}" style="width: 100%; padding: 10px 12px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 14px;" />
          </div>

          ${!isKnowledgeBase ? `
          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #374151;">\u63CF\u8FF0\uFF08\u7528\u65BC Embedding\uFF09\uFF1A</label>
            <textarea id="edit-description-textarea" style="width: 100%; min-height: 100px; padding: 10px 12px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 14px; resize: vertical;">${this.escapeHtml(index2.description || "")}</textarea>
            <p style="margin: 4px 0 0 0; font-size: 12px; color: #6b7280;">\u624B\u52D5\u7D22\u5F15\u4F7F\u7528\u63CF\u8FF0\u4F86\u751F\u6210 embedding</p>
          </div>
          ` : ""}

          ${isKnowledgeBase && index2.url ? `
          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #374151;">URL\uFF1A</label>
            <div style="padding: 10px 12px; background: #f3f4f6; border-radius: 6px; font-size: 14px; color: #6b7280; word-break: break-all;">${this.escapeHtml(index2.url)}</div>
          </div>
          ` : ""}

          <div style="margin-bottom: 16px;">
            <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #374151;">\u5167\u5BB9\uFF1A</label>
            <textarea id="edit-content-textarea" style="width: 100%; min-height: 300px; padding: 10px 12px; border: 1px solid #d1d5db; border-radius: 6px; font-family: 'Courier New', monospace; font-size: 13px; resize: vertical; line-height: 1.5;">${this.escapeHtml(index2.content || "")}</textarea>
            ${isKnowledgeBase ? `<p style="margin: 4px 0 0 0; font-size: 12px; color: #6b7280;">\u77E5\u8B58\u5EAB\u4F7F\u7528\u5167\u5BB9\u4F86\u751F\u6210 embedding</p>` : ""}
          </div>

          <div style="display: flex; gap: 8px; justify-content: flex-end; margin-top: 20px;">
            <button id="cancel-edit-btn" style="padding: 10px 20px; border: 1px solid #d1d5db; background: white; color: #374151; border-radius: 6px; cursor: pointer; font-weight: 500; transition: all 0.2s;">\u53D6\u6D88</button>
            <button id="save-edit-btn" style="padding: 10px 20px; border: none; background: #10b981; color: white; border-radius: 6px; cursor: pointer; font-weight: 500; transition: all 0.2s;">\u5132\u5B58\u8B8A\u66F4</button>
          </div>
        </div>
      `;
      document.body.appendChild(dialog);
      const nameInput = dialog.querySelector("#edit-name-input");
      const descriptionTextarea = dialog.querySelector("#edit-description-textarea");
      const contentTextarea = dialog.querySelector("#edit-content-textarea");
      const cancelBtn = dialog.querySelector("#cancel-edit-btn");
      const saveBtn = dialog.querySelector("#save-edit-btn");
      cancelBtn?.addEventListener("click", () => {
        const overlay = document.getElementById("edit-dialog-overlay");
        if (overlay) {
          document.body.removeChild(overlay);
        }
      });
      saveBtn?.addEventListener("click", async () => {
        const newName = nameInput.value.trim();
        const newContent = contentTextarea.value.trim();
        const newDescription = descriptionTextarea ? descriptionTextarea.value.trim() : null;
        if (!newName) {
          await this.showAlertDialog("\u9805\u76EE\u540D\u7A31\u4E0D\u80FD\u70BA\u7A7A");
          return;
        }
        if (!newContent) {
          await this.showAlertDialog("\u5167\u5BB9\u4E0D\u80FD\u70BA\u7A7A");
          return;
        }
        try {
          const updateData = {
            name: newName,
            content: newContent
          };
          if (!isKnowledgeBase && newDescription !== null) {
            updateData.description = newDescription;
          }
          const updateResponse = await fetch(`/api/widget/manual-indexes/${id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updateData)
          });
          if (updateResponse.ok) {
            await this.showAlertDialog("\u66F4\u65B0\u6210\u529F\uFF01Embedding \u5DF2\u81EA\u52D5\u91CD\u65B0\u751F\u6210\u3002");
            const overlay = document.getElementById("edit-dialog-overlay");
            if (overlay) {
              document.body.removeChild(overlay);
            }
            await this.updatePageContent();
          } else {
            const errorData = await updateResponse.json();
            await this.showAlertDialog(`\u66F4\u65B0\u5931\u6557\uFF1A${errorData.error || "\u672A\u77E5\u932F\u8AA4"}`);
          }
        } catch (error) {
          await this.showAlertDialog(`\u66F4\u65B0\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
        }
      });
      dialog.addEventListener("click", (e) => {
        if (e.target === dialog) {
          const overlay = document.getElementById("edit-dialog-overlay");
          if (overlay) {
            document.body.removeChild(overlay);
          }
        }
      });
    } catch (error) {
      await this.showAlertDialog(`\u8F09\u5165\u9805\u76EE\u5931\u6557\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`);
    }
  }
  /**
   * Escape HTML to prevent XSS
   */
  escapeHtml(text3) {
    const div = document.createElement("div");
    div.textContent = text3;
    return div.innerHTML;
  }
};

// src/services/ContentExtractorService.ts
init_axios2();
var pdfParse = null;
async function loadPdfParse() {
  if (pdfParse) return pdfParse;
  try {
    const pdfParseModule = await Promise.resolve().then(() => (init_pdf_parse_es(), pdf_parse_es_exports));
    if (typeof pdfParseModule === "function") {
      pdfParse = pdfParseModule;
    } else if (pdfParseModule.default && typeof pdfParseModule.default === "function") {
      pdfParse = pdfParseModule.default;
    } else {
      console.warn("pdf-parse module structure not recognized");
    }
  } catch (e) {
    console.warn("pdf-parse not available, PDF processing will be limited:", e);
  }
  return pdfParse;
}
var ContentExtractorService = class {
  MAX_CHUNK_SIZE = 2e3;
  MIN_CHUNK_SIZE = 500;
  /**
   * 從 URL 提取內容
   */
  async extractFromUrl(url) {
    const fileType = this.detectFileType(url);
    try {
      const response = await axios_default.get(url, {
        responseType: fileType === "pdf" ? "arraybuffer" : "text",
        headers: {
          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        },
        timeout: 3e4
      });
      switch (fileType) {
        case "pdf":
          return await this.extractFromPDF(response.data, url);
        case "html":
          return this.extractFromHTML(response.data, url);
        case "txt":
          return this.extractFromText(response.data, url);
        default:
          return this.extractFromText(response.data, url);
      }
    } catch (error) {
      throw new Error(`Failed to fetch URL: ${error.message}`);
    }
  }
  /**
   * 檢測文件類型
   */
  detectFileType(url) {
    const urlLower = url.toLowerCase();
    if (urlLower.endsWith(".pdf") || urlLower.includes("arxiv.org/pdf")) {
      return "pdf";
    }
    if (urlLower.endsWith(".txt")) {
      return "txt";
    }
    if (urlLower.endsWith(".html") || urlLower.endsWith(".htm")) {
      return "html";
    }
    return "html";
  }
  /**
   * 從 HTML 提取內容（使用 Cheerio）
   */
  extractFromHTML(html3, url) {
    const $3 = load(html3);
    $3("script, style, nav, header, footer, aside, .advertisement, .ads").remove();
    const title = $3("title").text().trim() || $3('meta[property="og:title"]').attr("content") || $3("h1").first().text().trim() || "Untitled";
    const description = $3('meta[name="description"]').attr("content") || $3('meta[property="og:description"]').attr("content") || "";
    const keywordsStr = $3('meta[name="keywords"]').attr("content") || "";
    const keywords = keywordsStr.split(",").map((k2) => k2.trim()).filter((k2) => k2);
    const author = $3('meta[name="author"]').attr("content") || $3('meta[property="article:author"]').attr("content");
    const publishDate = $3('meta[property="article:published_time"]').attr("content") || $3('meta[name="publish-date"]').attr("content");
    let mainContent = "";
    const mainSelectors = ["article", "main", '[role="main"]', ".content", ".post-content", "#content"];
    let $main = null;
    for (const selector of mainSelectors) {
      $main = $3(selector).first();
      if ($main.length > 0) break;
    }
    if (!$main || $main.length === 0) {
      $main = $3("body");
    }
    mainContent = $main.text();
    mainContent = this.cleanText(mainContent);
    return {
      title,
      description: description || title,
      keywords,
      content: mainContent,
      metadata: {
        url,
        fileType: "html",
        author,
        publishDate
      }
    };
  }
  /**
   * 從 PDF 提取內容
   */
  async extractFromPDF(buffer, url) {
    const parser = await loadPdfParse();
    if (!parser) {
      throw new Error("PDF parsing is not available. Please install pdf-parse package.");
    }
    try {
      const data2 = await parser(buffer);
      const title = data2.info?.Title || "PDF Document";
      const author = data2.info?.Author;
      const content = this.cleanText(data2.text);
      const lines = content.split("\n").filter((l) => l.trim());
      const description = lines.slice(0, 3).join(" ").substring(0, 200);
      return {
        title,
        description,
        keywords: [],
        content,
        metadata: {
          url,
          fileType: "pdf",
          author,
          pages: data2.numpages
        }
      };
    } catch (error) {
      throw new Error(`Failed to parse PDF: ${error.message}`);
    }
  }
  /**
   * 從純文本提取內容
   */
  extractFromText(text3, url) {
    const content = this.cleanText(text3);
    const lines = content.split("\n").filter((l) => l.trim());
    const title = lines[0]?.substring(0, 100) || "Text Document";
    const description = lines.slice(0, 3).join(" ").substring(0, 200);
    return {
      title,
      description,
      keywords: [],
      content,
      metadata: {
        url,
        fileType: "txt"
      }
    };
  }
  /**
   * 清理文本
   */
  cleanText(text3) {
    return text3.replace(/\r\n/g, "\n").replace(/\n{3,}/g, "\n\n").replace(/[ \t]+/g, " ").trim();
  }
  /**
   * 結構化切 Chunk
   */
  async chunkContent(extracted) {
    const { title, description, content, metadata } = extracted;
    const documentTree = this.parseDocumentStructure(content);
    const chunks = this.splitByStructure(documentTree, title);
    return chunks.map((chunk, index2) => ({
      name: chunks.length > 1 ? `${title} (Part ${index2 + 1}/${chunks.length})` : title,
      description: `${description} - ${chunk.headingPath.join(" > ")}`,
      content: chunk.content,
      metadata: {
        chunk: index2 + 1,
        totalChunks: chunks.length,
        headingPath: chunk.headingPath,
        originalUrl: metadata.url,
        fileType: metadata.fileType
      }
    }));
  }
  /**
   * 解析文檔結構
   */
  parseDocumentStructure(content) {
    const lines = content.split("\n");
    const nodes = [];
    let currentParagraph = "";
    for (const line of lines) {
      const trimmed = line.trim();
      if (!trimmed) {
        if (currentParagraph) {
          nodes.push({
            type: "paragraph",
            text: currentParagraph.trim()
          });
          currentParagraph = "";
        }
        continue;
      }
      const isHeading = this.isLikelyHeading(trimmed);
      if (isHeading) {
        if (currentParagraph) {
          nodes.push({
            type: "paragraph",
            text: currentParagraph.trim()
          });
          currentParagraph = "";
        }
        const level = this.detectHeadingLevel(trimmed);
        nodes.push({
          type: "heading",
          level,
          text: trimmed.replace(/^#+\s*/, "")
          // 移除 markdown 標記
        });
      } else {
        currentParagraph += (currentParagraph ? " " : "") + trimmed;
      }
    }
    if (currentParagraph) {
      nodes.push({
        type: "paragraph",
        text: currentParagraph.trim()
      });
    }
    return nodes;
  }
  /**
   * 檢測是否像標題
   */
  isLikelyHeading(text3) {
    if (/^#{1,6}\s/.test(text3)) return true;
    if (text3.length < 80 && !/[.!?。！？]$/.test(text3)) {
      if (text3 === text3.toUpperCase() || /^[A-Z]/.test(text3)) {
        return true;
      }
    }
    return false;
  }
  /**
   * 檢測標題層級
   */
  detectHeadingLevel(text3) {
    const match = text3.match(/^(#{1,6})\s/);
    if (match) {
      return match[1].length;
    }
    if (text3 === text3.toUpperCase()) return 1;
    if (text3.length < 30) return 2;
    return 3;
  }
  /**
   * 按結構切分（改進版：確保每個 chunk 都包含完整的標題層級）
   */
  splitByStructure(nodes, rootTitle) {
    const chunks = [];
    let currentChunk = "";
    let currentHeadings = [rootTitle];
    let headingStack = [];
    const rebuildHeadingContext = () => {
      return headingStack.map((h2) => h2.text).join("\n\n") + "\n\n";
    };
    for (const node of nodes) {
      if (node.type === "heading") {
        const level = node.level || 1;
        while (headingStack.length > 0 && headingStack[headingStack.length - 1].level >= level) {
          headingStack.pop();
        }
        headingStack.push({ level, text: node.text });
        currentHeadings = [rootTitle, ...headingStack.map((h2) => h2.text)];
        if (currentChunk.length > this.MAX_CHUNK_SIZE) {
          chunks.push({
            content: currentChunk.trim(),
            headingPath: [...currentHeadings]
          });
          currentChunk = rebuildHeadingContext();
        }
        currentChunk += `${node.text}

`;
      } else if (node.type === "paragraph") {
        const newContent = currentChunk + node.text + "\n\n";
        if (newContent.length > this.MAX_CHUNK_SIZE && currentChunk.length > this.MIN_CHUNK_SIZE) {
          chunks.push({
            content: currentChunk.trim(),
            headingPath: [...currentHeadings]
          });
          currentChunk = rebuildHeadingContext() + node.text + "\n\n";
        } else {
          currentChunk = newContent;
        }
      }
    }
    if (currentChunk.trim()) {
      chunks.push({
        content: currentChunk.trim(),
        headingPath: [...currentHeadings]
      });
    }
    return chunks;
  }
};

// src/index.ts
init_DatabaseService();
init_ManualIndexService();

// src/services/ConversationService.ts
init_DatabaseService();
var ConversationService = class {
  static CONVERSATIONS_KEY = "sm_conversations";
  static CURRENT_CONVERSATION_KEY = "sm_current_conversation";
  /**
   * 獲取當前對話
   * 如果沒有活躍對話，創建新對話
   */
  static async getCurrentConversation() {
    const currentId = localStorage.getItem(this.CURRENT_CONVERSATION_KEY);
    if (currentId) {
      const conversation = await this.getConversationById(currentId);
      if (conversation && conversation.status === "active") {
        return conversation;
      }
    }
    return await this.createNewConversation();
  }
  /**
   * 創建新對話
   */
  static async createNewConversation() {
    const userId = typeof localStorage !== "undefined" ? localStorage.getItem("lens_service_user_id") || "anonymous" : "anonymous";
    const conversationId = this.generateConversationId();
    const conversation = {
      id: conversationId,
      userId,
      messages: [],
      startedAt: Date.now(),
      lastMessageAt: Date.now(),
      status: "active",
      metadata: {
        userAgent: navigator.userAgent,
        referrer: document.referrer
      }
    };
    await this.saveConversation(conversation);
    localStorage.setItem(this.CURRENT_CONVERSATION_KEY, conversationId);
    console.log("Created new conversation:", conversationId);
    return conversation;
  }
  /**
   * 添加訊息到當前對話
   */
  static async addMessage(role, content, imageBase64, metadata) {
    const conversation = await this.getCurrentConversation();
    const message = {
      id: this.generateMessageId(),
      conversationId: conversation.id,
      role,
      content,
      imageBase64,
      timestamp: Date.now(),
      metadata
    };
    conversation.messages.push(message);
    conversation.lastMessageAt = Date.now();
    await this.saveConversation(conversation);
    return message;
  }
  /**
   * 獲取當前對話的所有訊息
   */
  static async getMessages() {
    const conversation = await this.getCurrentConversation();
    return conversation.messages;
  }
  /**
   * 關閉當前對話
   */
  static async closeCurrentConversation() {
    const conversation = await this.getCurrentConversation();
    conversation.status = "closed";
    await this.saveConversation(conversation);
    localStorage.removeItem(this.CURRENT_CONVERSATION_KEY);
  }
  /**
   * 獲取所有對話（用於後台）
   */
  static async getAllConversations() {
    try {
      const conversations = await DatabaseService.getConversations();
      return conversations.map((conv) => ({
        id: conv.id,
        userId: conv.user_id || "unknown",
        messages: conv.messages || [],
        startedAt: new Date(conv.created_at).getTime(),
        lastMessageAt: new Date(conv.updated_at).getTime(),
        status: "active",
        metadata: {}
      }));
    } catch (e) {
      console.error("Failed to load conversations:", e);
      return [];
    }
  }
  /**
   * 根據 ID 獲取對話
   */
  static async getConversationById(id) {
    const conversations = await this.getAllConversations();
    return conversations.find((c) => c.id === id) || null;
  }
  /**
   * 根據用戶 ID 獲取對話
   */
  static async getConversationsByUserId(userId) {
    try {
      const conversations = await DatabaseService.getConversationsByUserId(userId);
      return conversations.map((conv) => ({
        id: conv.conversation_id,
        userId: conv.user_id || "unknown",
        messages: conv.messages || [],
        startedAt: new Date(conv.created_at).getTime(),
        lastMessageAt: new Date(conv.updated_at).getTime(),
        status: "active",
        metadata: {}
      }));
    } catch (e) {
      console.error("Failed to load conversations by user_id:", e);
      return [];
    }
  }
  /**
   * 保存對話
   */
  static async saveConversation(conversation) {
    try {
      await DatabaseService.saveConversation(conversation.id, conversation.userId, conversation.messages);
      console.log("\u2705 Conversation saved to database");
    } catch (error) {
      console.error("\u274C Error saving conversation:", error);
    }
    const conversations = [];
    const existingIndex = conversations.findIndex((c) => c.id === conversation.id);
    if (existingIndex >= 0) {
      conversations[existingIndex] = conversation;
    } else {
      conversations.push(conversation);
    }
    localStorage.setItem(this.CONVERSATIONS_KEY, JSON.stringify(conversations));
    localStorage.setItem(this.CURRENT_CONVERSATION_KEY, conversation.id);
  }
  /**
   * 人工接管對話
   */
  static async takeoverConversation(conversationId, agentId) {
    const conversation = await this.getConversationById(conversationId);
    if (!conversation) return;
    conversation.status = "human-takeover";
    conversation.humanAgentId = agentId;
    await this.saveConversation(conversation);
  }
  /**
   * 添加人工回覆
   */
  static async addHumanReply(conversationId, content, agentId) {
    const conversation = await this.getConversationById(conversationId);
    if (!conversation) {
      throw new Error("Conversation not found");
    }
    const message = {
      id: this.generateMessageId(),
      conversationId,
      role: "human-agent",
      content,
      timestamp: Date.now(),
      metadata: {
        agentId
      }
    };
    conversation.messages.push(message);
    conversation.lastMessageAt = Date.now();
    await this.saveConversation(conversation);
    return message;
  }
  /**
   * 檢查是否有新訊息（用於輪詢）
   */
  static async hasNewMessages(conversationId, lastMessageId) {
    const conversation = await this.getConversationById(conversationId);
    if (!conversation) return false;
    const lastMessage = conversation.messages[conversation.messages.length - 1];
    return lastMessage && lastMessage.id !== lastMessageId;
  }
  /**
   * 獲取新訊息（用於輪詢）
   */
  static async getNewMessages(conversationId, lastMessageId) {
    const conversation = await this.getConversationById(conversationId);
    if (!conversation) return [];
    const lastIndex = conversation.messages.findIndex((m2) => m2.id === lastMessageId);
    if (lastIndex < 0) return [];
    return conversation.messages.slice(lastIndex + 1);
  }
  /**
   * 生成對話 ID
   */
  static generateConversationId() {
    return "conv_" + Date.now().toString(36) + Math.random().toString(36).substring(2);
  }
  /**
   * 生成訊息 ID
   */
  static generateMessageId() {
    return "msg_" + Date.now().toString(36) + Math.random().toString(36).substring(2);
  }
  /**
   * 清除所有對話（用於測試）
   */
  static clearAll() {
    localStorage.removeItem(this.CONVERSATIONS_KEY);
    localStorage.removeItem(this.CURRENT_CONVERSATION_KEY);
  }
};

// src/services/UserService.ts
var UserService = class {
  /**
   * 檢查是否已登入（檢查是否有 JWT token）
   */
  static isAuthenticated() {
    if (typeof localStorage === "undefined") return false;
    const token = localStorage.getItem("auth_token");
    return !!token;
  }
  /**
   * 清除認證資訊（登出時調用）
   */
  static clearAuth() {
    if (typeof localStorage === "undefined") return;
    localStorage.removeItem("auth_token");
  }
};

// src/index.ts
var LensServiceWidget = class {
  config;
  panel;
  conversationState;
  initialized = false;
  adminPanel;
  floatingIcon;
  /**
   * 從SQL載入規則
   */
  async loadRulesFromSQL() {
    try {
      console.log("Rules loading disabled, using empty array");
      return [];
    } catch (error) {
      console.error("Failed to load rules from SQL:", error);
      return [];
    }
  }
  /**
   * 初始化 Widget
   */
  async init(config) {
    if (this.initialized) {
      console.warn("ServiceModuler already initialized");
      return;
    }
    this.config = config;
    console.log("\u2705 Widget initializing");
    const telegramConfig = config.telegram && config.telegram.botToken && config.telegram.chatId ? config.telegram : void 0;
    window.SM_TELEGRAM_CONFIG = telegramConfig;
    const rules = await this.loadRulesFromSQL();
    this.panel = new SidePanel(
      config.ui?.width || "33.33%",
      config.ui?.position || "right"
    );
    this.panel.setCallbacks({
      onSendMessage: (message, imageBase64) => this.handleSendMessage(message, imageBase64),
      onSelectRule: (ruleId) => this.handleSelectRule(ruleId),
      onClose: () => this.handleClose(),
      onOpen: () => this.handleOpen()
    });
    await this.loadConversationState();
    if (!this.adminPanel) {
      this.adminPanel = new AdminPanel();
    }
    if (window.location.pathname === "/lens-service") {
      this.openAdminPanel();
    }
    if (config.ui?.iconPosition !== false && !this.isAdminPage()) {
      this.createFloatingIcon();
    }
    this.initialized = true;
    if (config.debug) {
      console.log("ServiceModuler initialized", config);
    }
  }
  /**
   * 打開面板
   */
  open() {
    if (!this.initialized) {
      console.error("ServiceModuler not initialized. Call init() first.");
      return;
    }
    this.panel?.open();
  }
  /**
   * 關閉面板
   */
  close() {
    this.panel?.close();
  }
  /**
   * 發送訊息
   */
  async sendMessage(message, imageBase64) {
    if (!this.initialized || !this.panel) {
      console.error("ServiceModuler not initialized");
      return;
    }
    this.panel.removeWelcomeScreen();
    const userMessage = {
      role: "user",
      content: message || "\u8ACB\u5206\u6790\u9019\u5F35\u5716\u7247",
      timestamp: Date.now()
    };
    this.conversationState?.messages.push(userMessage);
    this.panel.addMessage(userMessage);
    this.saveConversationState();
    this.panel.showSearchingAnimation();
    try {
      let response;
      let sources;
      let needsHumanReply = false;
      const sessionId = this.conversationState?.sessionId || this.generateSessionId();
      const userId = localStorage.getItem("lens_service_user_id") || "default_user";
      if (imageBase64) {
        response = await this.processImageMessage(message, imageBase64);
      } else {
        const result = await this.processTextMessage(message, sessionId, userId);
        response = result.response;
        sources = result.sources;
        needsHumanReply = result.needsHumanReply;
        if (needsHumanReply) {
          await this.sendTelegramNotification(message, sessionId);
        }
      }
      this.panel.removeSearchingAnimation();
      this.panel.startStreamingMessage();
      const words = response.split("");
      for (let i = 0; i < words.length; i++) {
        await this.panel.appendStreamingContent(words[i]);
        await new Promise((resolve) => setTimeout(resolve, 20));
      }
      await this.panel.finishStreamingMessage(sources);
      const assistantMessage = {
        role: "assistant",
        content: response,
        timestamp: Date.now(),
        sources
      };
      this.conversationState?.messages.push(assistantMessage);
      this.saveConversationState();
      await this.saveConversationToDatabase(sessionId, userId);
    } catch (error) {
      console.error("Error processing message:", error);
      this.panel.removeSearchingAnimation();
      const errorMessage = {
        role: "assistant",
        content: `\u62B1\u6B49\uFF0C\u767C\u751F\u932F\u8AA4\uFF1A${error instanceof Error ? error.message : "\u672A\u77E5\u932F\u8AA4"}`,
        timestamp: Date.now()
      };
      this.panel.addMessage(errorMessage);
    }
  }
  /**
   * 處理文字訊息
   */
  async processTextMessage(message, sessionId, userId) {
    try {
      const { DatabaseService: DatabaseService2 } = await Promise.resolve().then(() => (init_DatabaseService(), DatabaseService_exports));
      await DatabaseService2.initializePool();
      const systemPrompt = await DatabaseService2.getSetting("system_prompt") || "\u4F60\u662F\u4E00\u500B\u5C08\u696D\u7684\u5BA2\u670D\u52A9\u624B\uFF0C\u8ACB\u7528\u7E41\u9AD4\u4E2D\u6587\u56DE\u7B54\u554F\u984C\u3002";
      const defaultReply = await DatabaseService2.getSetting("default_reply") || "\u5F88\u62B1\u6B49\uFF0C\u6211\u7121\u6CD5\u56DE\u7B54\u9019\u500B\u554F\u984C\u3002\u8ACB\u806F\u7E6B\u4EBA\u5DE5\u5BA2\u670D\u7372\u5F97\u66F4\u591A\u5E6B\u52A9\u3002";
      const greetingKeywords = ["\u4F60\u597D", "\u60A8\u597D", "\u55E8", "hi", "hello", "\u65E9\u5B89", "\u5348\u5B89", "\u665A\u5B89", "\u54C8\u56C9", "\u5B89\u5B89"];
      const isSimpleGreeting = greetingKeywords.some(
        (keyword) => message.toLowerCase().trim() === keyword.toLowerCase() || message.toLowerCase().trim() === keyword.toLowerCase() + "!" || message.toLowerCase().trim() === keyword.toLowerCase() + "\uFF01"
      );
      if (isSimpleGreeting) {
        console.log("\u{1F44B} Simple greeting detected, responding directly");
        const greetingResponse = "\u60A8\u597D\uFF01\u6211\u662F\u5BA2\u670D\u52A9\u624B\uFF0C\u5F88\u9AD8\u8208\u70BA\u60A8\u670D\u52D9\u3002\u8ACB\u554F\u6709\u4EC0\u9EBC\u53EF\u4EE5\u5E6B\u52A9\u60A8\u7684\u55CE\uFF1F";
        return {
          response: greetingResponse,
          sources: [],
          needsHumanReply: false
        };
      }
      const { ManualIndexService: ManualIndexService2 } = await Promise.resolve().then(() => (init_ManualIndexService(), ManualIndexService_exports));
      const manualIndexResults = await ManualIndexService2.search(message, 3);
      console.log("\u{1F50D} Manual index search results:", manualIndexResults.length);
      const { LlmsTxtService: LlmsTxtService2 } = await Promise.resolve().then(() => (init_LlmsTxtService(), LlmsTxtService_exports));
      const llmsTxtResults = await LlmsTxtService2.searchChunks(message);
      console.log("\u{1F50D} LLMs.txt search results:", llmsTxtResults.length);
      const orders = await DatabaseService2.getUserOrders();
      const subscriptions = await DatabaseService2.getUserSubscriptions();
      console.log("\u{1F50D} User orders:", orders.length);
      console.log("\u{1F50D} User subscriptions:", subscriptions.length);
      const knowledgeBaseSources = [
        ...manualIndexResults.slice(0, 3).map((r) => ({
          type: "manual_index",
          title: r.title || r.name,
          content: r.content,
          description: r.description || "",
          score: r.hybrid_score || 0
        })),
        ...llmsTxtResults.slice(0, Math.max(0, 3 - manualIndexResults.length)).map((r) => ({
          type: "llms_txt",
          title: "LLMs.txt",
          content: r.context,
          // 使用包含前後文的內容
          score: r.score
        }))
      ].slice(0, 3);
      const allSources = [...knowledgeBaseSources];
      if (orders.length > 0) {
        allSources.push({
          type: "orders",
          title: "\u8A02\u55AE\u8CC7\u8A0A",
          content: this.formatOrdersForContext(orders),
          description: "\u7528\u6236\u7684\u8A02\u55AE\u8A18\u9304",
          score: 1
          // 訂單資訊給予最高分數
        });
      }
      if (subscriptions.length > 0) {
        allSources.push({
          type: "subscriptions",
          title: "\u8A02\u95B1\u8CC7\u8A0A",
          content: this.formatSubscriptionsForContext(subscriptions),
          description: "\u7528\u6236\u7684\u8A02\u95B1\u8A18\u9304",
          score: 1
          // 訂閱資訊給予最高分數
        });
      }
      console.log(`\u{1F4CA} Total sources: ${allSources.length} (${knowledgeBaseSources.length} knowledge base + ${orders.length > 0 ? 1 : 0} orders + ${subscriptions.length > 0 ? 1 : 0} subscriptions)`);
      if (allSources.length === 0) {
        console.log("\u274C No relevant content found, using default reply");
        return {
          response: defaultReply,
          sources: [],
          needsHumanReply: true
        };
      }
      const currentSessionId = this.conversationState?.sessionId;
      const conversationHistory = this.conversationState?.messages || [];
      const sessionMessages = conversationHistory.filter((msg) => {
        return true;
      });
      const recentHistory = sessionMessages.slice(-4);
      let historyContext = "";
      if (recentHistory.length > 0) {
        historyContext = "\n\n\u3010\u5C0D\u8A71\u6B77\u53F2\u3011\n" + recentHistory.map((msg) => {
          const role = msg.role === "user" ? "\u7528\u6236" : "\u52A9\u624B";
          return `${role}\uFF1A${msg.content}`;
        }).join("\n");
      }
      const context = allSources.map((source) => {
        if (source.type === "manual_index") {
          return `\u3010\u624B\u52D5\u7D22\u5F15\u3011
\u6A19\u984C\uFF1A${source.title}
${source.description ? `\u63CF\u8FF0\uFF1A${source.description}
` : ""}\u5167\u5BB9\uFF1A${source.content.substring(0, 1e3)}${source.content.length > 1e3 ? "..." : ""}`;
        } else if (source.type === "llms_txt") {
          return `\u3010\u7DB2\u7AD9\u8CC7\u8A0A\u3011
${source.content.substring(0, 1e3)}${source.content.length > 1e3 ? "..." : ""}`;
        } else if (source.type === "orders") {
          return `\u3010\u8A02\u55AE\u8CC7\u8A0A\u3011
${source.content}`;
        } else if (source.type === "subscriptions") {
          return `\u3010\u8A02\u95B1\u8CC7\u8A0A\u3011
${source.content}`;
        }
        return "";
      }).join("\n\n---\n\n");
      const enhancedPrompt = `${systemPrompt}

\u4EE5\u4E0B\u662F\u76F8\u95DC\u7684\u77E5\u8B58\u5EAB\u5167\u5BB9\u548C\u7528\u6236\u8CC7\u6599\uFF1A

${context}${historyContext}

\u8ACB\u6839\u64DA\u4EE5\u4E0A\u5167\u5BB9\u548C\u5C0D\u8A71\u6B77\u53F2\u56DE\u7B54\u7528\u6236\u7684\u554F\u984C\u3002\u5982\u679C\u5167\u5BB9\u4E0D\u8DB3\u4EE5\u56DE\u7B54\u554F\u984C\uFF0C\u8ACB\u8AA0\u5BE6\u544A\u77E5\u3002`;
      const response = await this.callAzureOpenAI(message, enhancedPrompt);
      const cannotAnswerKeywords = ["\u7121\u6CD5\u56DE\u7B54", "\u4E0D\u6E05\u695A", "\u4E0D\u78BA\u5B9A", "\u6C92\u6709\u76F8\u95DC", "\u7121\u6CD5\u63D0\u4F9B"];
      const needsHuman = cannotAnswerKeywords.some((keyword) => response.includes(keyword));
      if (needsHuman) {
        console.log("\u274C LLM cannot answer, using default reply");
        return {
          response: defaultReply,
          sources: allSources,
          needsHumanReply: true
        };
      }
      return {
        response,
        sources: allSources,
        needsHumanReply: false
      };
    } catch (error) {
      console.error("Error processing text message:", error);
      try {
        const { DatabaseService: DatabaseService2 } = await Promise.resolve().then(() => (init_DatabaseService(), DatabaseService_exports));
        const defaultReply = await DatabaseService2.getSetting("default_reply") || "\u5F88\u62B1\u6B49\uFF0C\u6211\u7121\u6CD5\u56DE\u7B54\u9019\u500B\u554F\u984C\u3002\u8ACB\u806F\u7E6B\u4EBA\u5DE5\u5BA2\u670D\u7372\u5F97\u66F4\u591A\u5E6B\u52A9\u3002";
        return {
          response: defaultReply,
          sources: [],
          needsHumanReply: true
        };
      } catch {
        return {
          response: "\u7CFB\u7D71\u66AB\u6642\u7121\u6CD5\u56DE\u61C9\uFF0C\u8ACB\u7A0D\u5F8C\u518D\u8A66\u3002",
          sources: [],
          needsHumanReply: true
        };
      }
    }
  }
  /**
   * 格式化訂單資訊為上下文
   */
  formatOrdersForContext(orders) {
    if (orders.length === 0) {
      return "\u7528\u6236\u76EE\u524D\u6C92\u6709\u8A02\u55AE\u8A18\u9304\u3002";
    }
    const orderTexts = orders.slice(0, 10).map((order, index2) => {
      const orderDate = new Date(order.created_at).toLocaleDateString("zh-TW");
      const completedDate = order.completed_at ? new Date(order.completed_at).toLocaleDateString("zh-TW") : "\u672A\u5B8C\u6210";
      return `\u8A02\u55AE ${index2 + 1}:
- \u8A02\u55AE\u7DE8\u865F: ${order.id}
- \u8A02\u55AE\u985E\u578B: ${order.order_type}
- \u91D1\u984D: ${order.totalAmount} ${order.currency}
- \u72C0\u614B: ${order.status}
- \u4ED8\u6B3E\u65B9\u5F0F: ${order.payment_method || "\u672A\u6307\u5B9A"}
- \u5EFA\u7ACB\u6642\u9593: ${orderDate}
- \u5B8C\u6210\u6642\u9593: ${completedDate}`;
    });
    return `\u7528\u6236\u5171\u6709 ${orders.length} \u7B46\u8A02\u55AE\u8A18\u9304\uFF08\u986F\u793A\u6700\u8FD1 ${Math.min(orders.length, 10)} \u7B46\uFF09\uFF1A

${orderTexts.join("\n\n")}`;
  }
  /**
   * 格式化訂閱資訊為上下文
   */
  formatSubscriptionsForContext(subscriptions) {
    if (subscriptions.length === 0) {
      return "\u7528\u6236\u76EE\u524D\u6C92\u6709\u8A02\u95B1\u8A18\u9304\u3002";
    }
    const subTexts = subscriptions.slice(0, 5).map((sub, index2) => {
      const startDate = sub.current_period_start ? new Date(sub.current_period_start).toLocaleDateString("zh-TW") : "\u672A\u77E5";
      const endDate = sub.current_period_end ? new Date(sub.current_period_end).toLocaleDateString("zh-TW") : "\u672A\u77E5";
      const planName = sub.plan?.name || "\u672A\u77E5\u65B9\u6848";
      const planPrice = sub.plan?.price || "\u672A\u77E5";
      return `\u8A02\u95B1 ${index2 + 1}:
- \u8A02\u95B1\u7DE8\u865F: ${sub.id}
- \u65B9\u6848\u540D\u7A31: ${planName}
- \u65B9\u6848\u50F9\u683C: ${planPrice}
- \u72C0\u614B: ${sub.status}
- \u6BCF\u6708\u984D\u5EA6: ${sub.monthly_credits || "\u7121\u9650\u5236"}
- \u7576\u524D\u9031\u671F: ${startDate} ~ ${endDate}
- Stripe \u8A02\u95B1 ID: ${sub.stripe_subscription_id || "\u7121"}`;
    });
    return `\u7528\u6236\u5171\u6709 ${subscriptions.length} \u7B46\u8A02\u95B1\u8A18\u9304\uFF08\u986F\u793A\u6700\u8FD1 ${Math.min(subscriptions.length, 5)} \u7B46\uFF09\uFF1A

${subTexts.join("\n\n")}`;
  }
  /**
   * 處理圖片訊息
   */
  async processImageMessage(message, imageBase64) {
    try {
      if (!this.config?.azureOpenAI?.endpoint || !this.config?.azureOpenAI?.apiKey) {
        return "\u5716\u7247\u5206\u6790\u529F\u80FD\u9700\u8981\u914D\u7F6E Azure OpenAI \u670D\u52D9\u3002";
      }
      const response = await this.callAzureOpenAIVision(message, imageBase64);
      return response;
    } catch (error) {
      console.error("Error processing image message:", error);
      return "\u5716\u7247\u5206\u6790\u5931\u6557\uFF0C\u8ACB\u91CD\u8A66\u6216\u806F\u7E6B\u5BA2\u670D\u3002";
    }
  }
  /**
   * 調用後端 API 來生成回覆（不直接調用 Azure OpenAI）
   */
  async callAzureOpenAI(message, systemPrompt) {
    try {
      const token = localStorage.getItem("auth_token");
      const response = await fetch("/api/widget/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          ...token ? { "Authorization": `Bearer ${token}` } : {}
        },
        body: JSON.stringify({
          message,
          systemPrompt
        })
      });
      if (!response.ok) {
        throw new Error(`Chat API error: ${response.status} ${response.statusText}`);
      }
      const data2 = await response.json();
      return data2.reply || "\u62B1\u6B49\uFF0C\u6211\u7121\u6CD5\u751F\u6210\u56DE\u61C9\u3002";
    } catch (error) {
      console.error("Failed to call chat API:", error);
      throw error;
    }
  }
  /**
   * 調用 Azure OpenAI Vision API（暫時保留直接調用，因為需要傳遞圖片）
   * TODO: 未來可以改為後端 API
   */
  async callAzureOpenAIVision(message, imageBase64) {
    return "\u62B1\u6B49\uFF0C\u5716\u7247\u5206\u6790\u529F\u80FD\u66AB\u6642\u4E0D\u53EF\u7528\u3002\u8ACB\u806F\u7E6B\u5BA2\u670D\u7372\u5F97\u5E6B\u52A9\u3002";
  }
  /**
   * 發送 Telegram 通知
   */
  async sendTelegramNotification(message, sessionId) {
    try {
      const botToken = this.config?.telegram?.botToken;
      const chatId = this.config?.telegram?.chatId;
      if (!botToken || !chatId) {
        console.warn("Telegram not configured, skipping notification");
        return;
      }
      const text3 = `\u{1F514} \u65B0\u7684\u5BA2\u670D\u8A0A\u606F\u9700\u8981\u4EBA\u5DE5\u56DE\u8986

\u6703\u8A71ID: ${sessionId}
\u7528\u6236\u8A0A\u606F: ${message}
\u6642\u9593: ${(/* @__PURE__ */ new Date()).toLocaleString("zh-TW")}`;
      const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
      await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: text3,
          parse_mode: "HTML"
        })
      });
      console.log("\u2705 Telegram notification sent");
    } catch (error) {
      console.error("Failed to send Telegram notification:", error);
    }
  }
  /**
   * 保存對話記錄到資料庫
   */
  async saveConversationToDatabase(sessionId, userId) {
    if (!this.conversationState) return;
    try {
      const { DatabaseService: DatabaseService2 } = await Promise.resolve().then(() => (init_DatabaseService(), DatabaseService_exports));
      await DatabaseService2.saveConversation(sessionId, userId, this.conversationState.messages);
      console.log("\u2705 Conversation saved to database");
    } catch (error) {
      console.error("Failed to save conversation to database:", error);
    }
  }
  /**
   * 設置規則
   */
  setRule(ruleId) {
  }
  /**
   * 打開管理後台
   */
  openAdminPanel() {
    if (this.adminPanel) {
      this.adminPanel.open().catch(console.error);
    }
  }
  /**
   * 開始索引網站
   * @param mode 'local' = 索引本地專案, 'domain' = 爬取域名（默認）
   */
  async indexSite(startUrl, mode = "domain", onProgress) {
    console.log("Site indexing disabled");
  }
  /**
   * 搜尋當前頁面內容
   */
  searchCurrentPage(query) {
    return [];
  }
  /**
   * 獲取當前頁面內容
   */
  getCurrentPageContent() {
    return { title: "", url: "", content: "", headings: [], links: [] };
  }
  /**
   * 清除對話
   */
  clearConversation() {
    if (this.conversationState) {
      this.conversationState.messages = [];
      this.saveConversationState();
    }
    this.panel?.clearMessages();
  }
  /**
   * 打開管理後台
   */
  async openAdmin() {
    if (!this.initialized) {
      console.error("ServiceModuler not initialized. Call init() first.");
      return;
    }
    if (!this.adminPanel) {
      console.error("AdminPanel not initialized");
      return;
    }
    await this.adminPanel.open();
  }
  /**
   * 銷毀 Widget
   */
  destroy() {
    this.panel?.destroy();
    this.adminPanel?.close();
    this.initialized = false;
  }
  /**
   * 處理發送訊息
   */
  handleSendMessage(message, imageBase64) {
    this.sendMessage(message, imageBase64);
  }
  /**
   * 處理選擇規則
   */
  handleSelectRule(ruleId) {
    this.setRule(ruleId);
  }
  /**
   * 處理打開
   */
  handleOpen() {
    this.panel?.clearMessages();
    this.conversationState = {
      sessionId: `sm_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`,
      messages: []
    };
    console.log("\u2705 Created new conversation session");
  }
  /**
   * 處理關閉
   */
  handleClose() {
    this.saveConversationState();
    console.log("\u274C Panel closed");
  }
  /**
   * 載入對話狀態
   */
  async loadConversationState() {
    try {
      const { DatabaseService: DatabaseService2 } = await Promise.resolve().then(() => (init_DatabaseService(), DatabaseService_exports));
      await DatabaseService2.initializePool();
      const conversations = await DatabaseService2.getConversations();
      let state = null;
      if (conversations.length > 0) {
        const latestConversation = conversations.sort(
          (a, b2) => new Date(b2.created_at || 0).getTime() - new Date(a.created_at || 0).getTime()
        )[0];
        state = {
          sessionId: latestConversation.session_id,
          messages: latestConversation.messages || []
        };
        console.log(`\u2705 Loaded conversation with ${state.messages.length} messages`);
      } else {
        state = {
          sessionId: this.generateSessionId(),
          messages: []
        };
        console.log("\u2705 Created new conversation session");
      }
      this.conversationState = state;
      if (this.panel && state.messages.length > 0) {
        this.panel.clearMessages();
        state.messages.forEach((msg) => {
          this.panel.addMessage(msg);
        });
      }
    } catch (error) {
      console.error("Failed to load conversation state:", error);
      this.conversationState = {
        sessionId: this.generateSessionId(),
        messages: []
      };
    }
  }
  /**
   * 保存對話狀態
   */
  saveConversationState() {
    if (this.conversationState) {
    }
  }
  /**
   * 檢查是否在管理後台頁面
   */
  isAdminPage() {
    return window.location.pathname.includes("/lens-service");
  }
  /**
   * 創建浮動圖標
   */
  createFloatingIcon() {
    if (this.floatingIcon) {
      this.floatingIcon.remove();
    }
    const iconConfig = this.config?.ui?.iconPosition;
    let position = { bottom: "20px", right: "20px" };
    if (typeof iconConfig === "string") {
      switch (iconConfig) {
        case "bottom-left":
          position = { bottom: "20px", left: "20px" };
          break;
        case "top-right":
          position = { top: "20px", right: "20px" };
          break;
        case "top-left":
          position = { top: "20px", left: "20px" };
          break;
        default:
          position = { top: "20px", right: "20px" };
      }
    } else if (iconConfig && typeof iconConfig === "object") {
      position = iconConfig;
    }
    this.floatingIcon = document.createElement("button");
    this.floatingIcon.id = "lens-service-floating-icon";
    this.floatingIcon.innerHTML = `
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
      </svg>
    `;
    const styles2 = `
      position: fixed;
      z-index: 999999;
      width: 56px;
      height: 56px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 50%;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      ${Object.entries(position).map(([key, value]) => `${key}: ${value}`).join("; ")};
    `;
    this.floatingIcon.style.cssText = styles2;
    this.floatingIcon.addEventListener("mouseenter", () => {
      this.floatingIcon.style.transform = "scale(1.1)";
      this.floatingIcon.style.boxShadow = "0 6px 25px rgba(0, 0, 0, 0.2)";
    });
    this.floatingIcon.addEventListener("mouseleave", () => {
      this.floatingIcon.style.transform = "scale(1)";
      this.floatingIcon.style.boxShadow = "0 4px 20px rgba(0, 0, 0, 0.15)";
    });
    this.floatingIcon.addEventListener("click", () => {
      this.open();
    });
    document.body.appendChild(this.floatingIcon);
  }
  /**
   * 移除浮動圖標
   */
  removeFloatingIcon() {
    if (this.floatingIcon) {
      this.floatingIcon.remove();
      this.floatingIcon = void 0;
    }
  }
  /**
   * 生成 Session ID
   */
  generateSessionId() {
    return `sm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  /**
   * 設置對話 ID（用於載入歷史對話）
   */
  setConversationId(conversationId) {
    if (this.conversationState) {
      this.conversationState.sessionId = conversationId;
    }
  }
};
var LensService = new LensServiceWidget();
if (typeof window !== "undefined") {
  window.LensService = LensService;
}
var src_default = LensService;
export {
  ContentExtractorService,
  ConversationService,
  DatabaseService,
  ManualIndexService,
  UserService,
  src_default as default
};
